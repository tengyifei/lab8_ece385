
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00015544 memsz 0x00015544 flags r-x
    LOAD off    0x00016564 vaddr 0x10015564 paddr 0x10017054 align 2**12
         filesz 0x00001af0 memsz 0x00001af0 flags rw-
    LOAD off    0x00018b44 vaddr 0x10018b44 paddr 0x10018b44 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001469c  100001bc  100001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000d0c  10014858  10014858  00015858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af0  10015564  10017054  00016564  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  10018b44  10018b44  00018b44  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00018054  2**0
                  CONTENTS
  7 .sdram        00000000  10018ca4  10018ca4  00018054  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00018054  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f20  00000000  00000000  00018078  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00025c39  00000000  00000000  00018f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009edb  00000000  00000000  0003ebd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000cced  00000000  00000000  00048aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000026e0  00000000  00000000  0005579c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003af0  00000000  00000000  00057e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000191c4  00000000  00000000  0005b96c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00074b30  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000013a0  00000000  00000000  00074b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007968c  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0007968f  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007969b  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007969c  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007969d  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000796a1  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000796a5  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000796a9  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000796b4  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000796bf  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000796ca  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000013  00000000  00000000  000796d5  2**0
                  CONTENTS, READONLY
 30 .jdi          000042ea  00000000  00000000  000796e8  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000ac545  00000000  00000000  0007d9d2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001bc l    d  .text	00000000 .text
10014858 l    d  .rodata	00000000 .rodata
10015564 l    d  .rwdata	00000000 .rwdata
10018b44 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10018ca4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
100001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
10018b44 l     O .bss	00000002 ctl_reg.3833
10018b46 l     O .bss	00000002 no_device.3834
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
1001510c l     O .rodata	00000108 two_over_pi
1001508c l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
10015254 l     O .rodata	00000010 init_jk
10015214 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
10005604 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
10015564 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
100153ae l     O .rodata	00000010 zeroes.4181
100153be l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
1000a2dc l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1000be84 l     F .text	00000008 __fp_lock
1000be8c l     F .text	00000008 __fp_unlock
1000bea0 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
100159a8 l     O .rwdata	00000020 lc_ctype_charset
10015988 l     O .rwdata	00000020 lc_message_charset
100159c8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
100153ec l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000f35c l     F .text	000000fc __sprint_r.part.0
10015520 l     O .rodata	00000010 blanks.4125
10015510 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
10011f04 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1001202c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
10012058 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
10012160 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1001225c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10012340 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10012524 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10017044 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
100127d8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10012928 l     F .text	00000038 alt_dev_reg
10015fb0 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10012c18 l     F .text	00000204 altera_avalon_jtag_uart_irq
10012e1c l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
1001343c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
100137ec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10013c84 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10013ddc l     F .text	00000050 alt_get_errno
10013e2c l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
1000ea10 g     F .text	00000074 _mprec_log10
1000eafc g     F .text	0000008c __any_on
10010d88 g     F .text	00000054 _isatty_r
100153f8 g     O .rodata	00000028 __mprec_tinytens
1001246c g     F .text	00000078 alt_main
10007f28 g     F .text	000000b8 _puts_r
10018ba4 g     O .bss	00000100 alt_irq
10005198 g     F .text	00000014 fabs
10010ddc g     F .text	0000005c _lseek_r
1000319c g     F .text	00000130 sqrt
10017054 g       *ABS*	00000000 __flash_rwdata_start
10006974 g     F .text	00000084 .hidden __eqdf2
10018ca4 g       *ABS*	00000000 __alt_heap_start
10007eec g     F .text	0000003c printf
10011004 g     F .text	0000009c _wcrtomb_r
1000f254 g     F .text	0000005c __sseek
1000c1e8 g     F .text	00000010 __sinit
10010e94 g     F .text	00000154 __swbuf_r
1000cc60 g     F .text	0000007c _setlocale_r
1000c040 g     F .text	00000078 __sfmoreglue
10012504 g     F .text	00000020 __malloc_unlock
10002ec4 g     F .text	00000080 UsbGetRetryCnt
1000d8c0 g     F .text	0000015c memmove
100001f8 g     F .text	00000050 IO_init
1000c1d0 g     F .text	00000018 _cleanup
1000db40 g     F .text	000000a8 _Balloc
100069f8 g     F .text	000000e0 .hidden __gtdf2
10007eb0 g     F .text	00000010 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
10010d30 g     F .text	00000058 _fstat_r
10018b60 g     O .bss	00000004 errno
100051ac g     F .text	000001f4 floor
1000f1d0 g     F .text	00000008 __seofread
10018b68 g     O .bss	00000004 alt_argv
1001f010 g       *ABS*	00000000 _gp
100127a8 g     F .text	00000030 usleep
10015e30 g     O .rwdata	00000180 alt_fd_list
100032cc g     F .text	0000079c __ieee754_rem_pio2
1001423c g     F .text	00000090 alt_find_dev
1000d788 g     F .text	00000138 memcpy
1000be94 g     F .text	0000000c _cleanup_r
10007d7c g     F .text	000000d0 .hidden __floatsidf
10013d64 g     F .text	00000078 alt_io_redirect
10006ad8 g     F .text	000000e0 .hidden __ltdf2
10014858 g       *ABS*	00000000 __DTOR_END__
10007fe0 g     F .text	00000014 puts
100053a0 g     F .text	00000074 __fpclassifyd
1000e96c g     F .text	000000a4 __ratio
10010894 g     F .text	00000024 __vfiprintf_internal
10013018 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
10007ec0 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10005720 g     F .text	00000008 .hidden __udivsi3
100121b0 g     F .text	000000ac isatty
10015448 g     O .rodata	000000c8 __mprec_tens
1000ccdc g     F .text	0000000c __locale_charset
10003cfc g     F .text	000004a4 __kernel_cos
10018b5c g     O .bss	00000004 __malloc_top_pad
10002564 g     F .text	00000264 UsbGetConfigDesc2
1001701c g     O .rwdata	00000004 __mb_cur_max
1000cd0c g     F .text	0000000c _localeconv_r
1000df68 g     F .text	0000003c __i2b
1000c64c g     F .text	000004a4 __sfvwrite_r
1000f128 g     F .text	00000054 _sbrk_r
10010e38 g     F .text	0000005c _read_r
1001703c g     O .rwdata	00000004 alt_max_fd
10010a40 g     F .text	00000100 _fclose_r
1000be54 g     F .text	00000030 fflush
10018b58 g     O .bss	00000004 __malloc_max_sbrked_mem
10004ed0 g     F .text	000002c8 __kernel_sin
10005758 g     F .text	0000089c .hidden __adddf3
1000e714 g     F .text	0000011c __b2d
10011844 g     F .text	0000061c .hidden __umoddi3
10012390 g     F .text	000000dc lseek
10017010 g     O .rwdata	00000004 __fdlib_version
10017014 g     O .rwdata	00000004 _global_impure_ptr
1000eb88 g     F .text	000005a0 _realloc_r
10018ca4 g       *ABS*	00000000 __bss_end
10013b94 g     F .text	000000f0 alt_iic_isr_register
10014118 g     F .text	00000104 alt_tick
10011204 g     F .text	00000640 .hidden __udivdi3
10010b54 g     F .text	00000184 _fputwc_r
10015420 g     O .rodata	00000028 __mprec_bigtens
1000dd4c g     F .text	00000104 __s2b
10011e60 g     F .text	000000a4 .hidden __floatunsidf
1000e4bc g     F .text	00000060 __mcmp
10001fc4 g     F .text	000000fc UsbSetAddress
1000c208 g     F .text	00000018 __fp_lock_all
10013b48 g     F .text	0000004c alt_ic_irq_enabled
1000031c g     F .text	00000174 dist
10014080 g     F .text	00000098 alt_alarm_stop
10018b70 g     O .bss	00000004 alt_irq_active
100000ec g     F .exceptions	000000d0 alt_irq_handler
10015e08 g     O .rwdata	00000028 alt_dev_null
100041a0 g     F .text	00000d30 __kernel_rem_pio2
100137d0 g     F .text	0000001c alt_dcache_flush_all
1000de50 g     F .text	00000068 __hi0bits
100002b4 g     F .text	00000068 IO_read
10007cf4 g     F .text	00000088 .hidden __fixdfsi
10017054 g       *ABS*	00000000 __ram_rwdata_end
10017034 g     O .rwdata	00000008 alt_dev_list
10012828 g     F .text	00000100 write
10015564 g       *ABS*	00000000 __ram_rodata_end
100120a8 g     F .text	000000b8 fstat
10006ad8 g     F .text	000000e0 .hidden __ledf2
10002f44 g     F .text	0000007c UsbPrintMem
1000e234 g     F .text	00000140 __pow5mult
1000f470 g     F .text	00001424 ___vfiprintf_internal_r
10018b50 g     O .bss	00000004 __nlocale_changed
10005728 g     F .text	00000008 .hidden __umodsi3
10018ca4 g       *ABS*	00000000 end
10012b54 g     F .text	000000c4 altera_avalon_jtag_uart_init
10014858 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
100134b0 g     F .text	00000088 alt_avalon_timer_sc_init
10007e4c g     F .text	00000064 .hidden __clzsi2
10013224 g     F .text	00000218 altera_avalon_jtag_uart_write
10002fc0 g     F .text	000000ec cos
1000c1f8 g     F .text	00000004 __sfp_lock_acquire
1000d6a0 g     F .text	000000e8 memchr
1000808c g     F .text	000020fc ___vfprintf_internal_r
100028c4 g     F .text	000000fc UsbClassRequest
1000c35c g     F .text	000002f0 _free_r
1000cce8 g     F .text	00000010 __locale_mb_cur_max
10014690 g     F .text	00000194 __call_exitprocs
10018b4c g     O .bss	00000004 __mlocale_changed
10017020 g     O .rwdata	00000004 __malloc_sbrk_base
100001bc g     F .text	0000003c _start
10018b74 g     O .bss	00000004 _alt_tick_rate
100030ac g     F .text	000000f0 sin
1000e374 g     F .text	00000148 __lshift
10018b78 g     O .bss	00000004 _alt_nticks
10012574 g     F .text	00000104 read
10012994 g     F .text	0000005c alt_sys_init
1001457c g     F .text	00000114 __register_exitproc
1000dfa4 g     F .text	00000290 __multiply
10012ec4 g     F .text	00000068 altera_avalon_jtag_uart_close
10005730 g     F .text	00000028 .hidden __mulsi3
10015564 g       *ABS*	00000000 __ram_rwdata_start
10014858 g       *ABS*	00000000 __ram_rodata_start
10018b7c g     O .bss	00000028 __malloc_current_mallinfo
1000e830 g     F .text	0000013c __d2b
100020c0 g     F .text	00000144 UsbGetDeviceDesc1
100129f0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
100143e0 g     F .text	000000d4 alt_get_fd
10013678 g     F .text	00000158 alt_busy_sleep
10010914 g     F .text	00000054 _close_r
10014500 g     F .text	0000007c memcmp
10012ab0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10018ca4 g       *ABS*	00000000 __alt_stack_base
10012b00 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
1000a1ac g     F .text	00000130 __swsetup_r
10005ff4 g     F .text	00000980 .hidden __divdf3
1000c0b8 g     F .text	00000118 __sfp
1000ea84 g     F .text	00000078 __copybits
10015a00 g     O .rwdata	00000408 __malloc_av_
1000c204 g     F .text	00000004 __sinit_lock_release
10006bb8 g     F .text	0000086c .hidden __muldf3
1000f17c g     F .text	00000054 __sread
10002e40 g     F .text	00000084 UsbWaitTDListDone
100142cc g     F .text	00000114 alt_find_file
1001383c g     F .text	000000a4 alt_dev_llist_insert
100124e4 g     F .text	00000020 __malloc_lock
100126f8 g     F .text	000000b0 sbrk
1000bc2c g     F .text	00000228 _fflush_r
10010968 g     F .text	000000d8 _calloc_r
10018b44 g       *ABS*	00000000 __bss_start
1000da1c g     F .text	00000124 memset
10000490 g     F .text	000019e4 main
10018b6c g     O .bss	00000004 alt_envp
10018b54 g     O .bss	00000004 __malloc_max_total_mem
10012a50 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
100027c8 g     F .text	000000fc UsbSetConfig
10010fe8 g     F .text	0000001c __swbuf
1000f2b0 g     F .text	00000008 __sclose
10005414 g     F .text	00000008 matherr
18000000 g       *ABS*	00000000 __alt_heap_limit
10010b40 g     F .text	00000014 fclose
1000a504 g     F .text	00001728 _dtoa_r
1000cef8 g     F .text	000007a8 _malloc_r
10011178 g     F .text	00000030 __ascii_wctomb
10017040 g     O .rwdata	00000004 alt_errno
1000caf0 g     F .text	000000b8 _fwalk
10005670 g     F .text	00000054 .hidden __divsi3
1000c238 g     F .text	00000124 _malloc_trim_r
100029c0 g     F .text	00000144 UsbGetHidDesc
10014858 g       *ABS*	00000000 __CTOR_END__
1000f2b8 g     F .text	000000a4 strcmp
10014858 g       *ABS*	00000000 __flash_rodata_start
10014858 g       *ABS*	00000000 __DTOR_LIST__
100055e8 g     F .text	0000001c copysign
10006974 g     F .text	00000084 .hidden __nedf2
10001ec8 g     F .text	0000004c UsbRead
10012960 g     F .text	00000034 alt_irq_init
10012678 g     F .text	00000080 alt_release_fd
10015264 g     O .rodata	00000100 .hidden __clz_tab
10018b48 g     O .bss	00000004 _PathLocale
100144b4 g     F .text	00000014 atexit
100108b8 g     F .text	0000005c _write_r
1000cd18 g     F .text	0000001c setlocale
10017018 g     O .rwdata	00000004 _impure_ptr
10018b64 g     O .bss	00000004 alt_argc
1000541c g     F .text	000001cc scalbn
1001393c g     F .text	0000005c _do_dtors
1000cd04 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
1000e6b4 g     F .text	00000060 __ulp
1000c220 g     F .text	00000018 __fp_unlock_all
1001702c g     O .rwdata	00000008 alt_fs_list
10002b04 g     F .text	0000033c UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000cd34 g     F .text	0000000c localeconv
10003a68 g     F .text	00000294 __ieee754_sqrt
100139b4 g     F .text	00000050 alt_ic_isr_register
10017054 g       *ABS*	00000000 _edata
10018ca4 g       *ABS*	00000000 _end
10001e74 g     F .text	00000054 UsbWrite
100001bc g       *ABS*	00000000 __ram_exceptions_end
10012f2c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
10013aa4 g     F .text	000000a4 alt_ic_irq_disable
1000f1d8 g     F .text	0000007c __swrite
10017024 g     O .rwdata	00000004 __malloc_trim_threshold
1001421c g     F .text	00000020 altera_nios2_qsys_irq_init
1000ccf8 g     F .text	0000000c __locale_msgcharset
100144c8 g     F .text	00000038 exit
1000cba8 g     F .text	000000b8 _fwalk_reent
1000e51c g     F .text	00000198 __mdiff
100056c4 g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
1000c1fc g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10000248 g     F .text	0000006c IO_write
10014824 g     F .text	00000034 _exit
10013538 g     F .text	00000140 alt_alarm_start
1000cd40 g     F .text	000001b8 __smakebuf_r
10007ff4 g     F .text	00000098 strlen
10013f20 g     F .text	00000160 open
100069f8 g     F .text	000000e0 .hidden __gedf2
10017028 g     O .rwdata	00000004 __wctomb
1000f458 g     F .text	00000018 __sprint_r
10013998 g     F .text	0000001c alt_icache_flush_all
10017048 g     O .rwdata	00000004 alt_priority_mask
10013a04 g     F .text	000000a0 alt_ic_irq_enable
1000a188 g     F .text	00000024 __vfprintf_internal
100111a8 g     F .text	0000005c _wctomb_r
10007424 g     F .text	000008d0 .hidden __subdf3
1000deb8 g     F .text	000000b0 __lo0bits
100023d8 g     F .text	0000018c UsbGetConfigDesc1
1001704c g     O .rwdata	00000008 alt_alarm_list
100138e0 g     F .text	0000005c _do_ctors
10001f14 g     F .text	000000b0 UsbSoftReset
100110a0 g     F .text	000000d8 wcrtomb
10011f54 g     F .text	000000d8 close
10002204 g     F .text	000001d4 UsbGetDeviceDesc2
100122c0 g     F .text	00000080 alt_load
10010cd8 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
1000c200 g     F .text	00000004 __sinit_lock_acquire
1000dc10 g     F .text	0000013c __multadd
1000dbe8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08406f14 	ori	at,at,444
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001426 	beq	r2,zero,1000017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	008400b4 	movhi	r2,4098
10000130:	10a2e904 	addi	r2,r2,-29788
10000134:	e0fffd17 	ldw	r3,-12(fp)
10000138:	180690fa 	slli	r3,r3,3
1000013c:	10c5883a 	add	r2,r2,r3
10000140:	10c00017 	ldw	r3,0(r2)
10000144:	008400b4 	movhi	r2,4098
10000148:	10a2e904 	addi	r2,r2,-29788
1000014c:	e13ffd17 	ldw	r4,-12(fp)
10000150:	200890fa 	slli	r4,r4,3
10000154:	1105883a 	add	r2,r2,r4
10000158:	10800104 	addi	r2,r2,4
1000015c:	10800017 	ldw	r2,0(r2)
10000160:	1009883a 	mov	r4,r2
10000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
10000178:	00000706 	br	10000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000017c:	e0bffc17 	ldw	r2,-16(fp)
10000180:	1085883a 	add	r2,r2,r2
10000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000188:	e0bffd17 	ldw	r2,-12(fp)
1000018c:	10800044 	addi	r2,r2,1
10000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
10000194:	003fe106 	br	1000011c <__alt_data_end+0xf800011c>

    active = alt_irq_pending ();
10000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000019c:	e0bffb17 	ldw	r2,-20(fp)
100001a0:	103fdb1e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a4:	0001883a 	nop
}
100001a8:	e037883a 	mov	sp,fp
100001ac:	dfc00117 	ldw	ra,4(sp)
100001b0:	df000017 	ldw	fp,0(sp)
100001b4:	dec00204 	addi	sp,sp,8
100001b8:	f800283a 	ret

Disassembly of section .text:

100001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001bc:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001c4:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
100001c8:	d6bc0414 	ori	gp,gp,61456
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001cc:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
100001d0:	10a2d114 	ori	r2,r2,35652

    movhi r3, %hi(__bss_end)
100001d4:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
100001d8:	18e32914 	ori	r3,r3,36004

    beq r2, r3, 1f
100001dc:	10c00326 	beq	r2,r3,100001ec <_start+0x30>

0:
    stw zero, (r2)
100001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001e8:	10fffd36 	bltu	r2,r3,100001e0 <__alt_data_end+0xf80001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001ec:	00122c00 	call	100122c0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001f0:	001246c0 	call	1001246c <alt_main>

100001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001f4:	003fff06 	br	100001f4 <__alt_data_end+0xf80001f4>

100001f8 <IO_init>:
#define otg_hpi_cs			(volatile char*)	OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w			(volatile char*)	OTG_HPI_W_BASE


void IO_init(void)
{
100001f8:	deffff04 	addi	sp,sp,-4
100001fc:	df000015 	stw	fp,0(sp)
10000200:	d839883a 	mov	fp,sp
	*otg_hpi_cs = 1;
10000204:	00804004 	movi	r2,256
10000208:	00c00044 	movi	r3,1
1000020c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10000210:	00803804 	movi	r2,224
10000214:	00c00044 	movi	r3,1
10000218:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
1000021c:	00803004 	movi	r2,192
10000220:	00c00044 	movi	r3,1
10000224:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
10000228:	00803c04 	movi	r2,240
1000022c:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
10000230:	00803404 	movi	r2,208
10000234:	10000015 	stw	zero,0(r2)
}
10000238:	e037883a 	mov	sp,fp
1000023c:	df000017 	ldw	fp,0(sp)
10000240:	dec00104 	addi	sp,sp,4
10000244:	f800283a 	ret

10000248 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
10000248:	defffd04 	addi	sp,sp,-12
1000024c:	df000215 	stw	fp,8(sp)
10000250:	df000204 	addi	fp,sp,8
10000254:	2007883a 	mov	r3,r4
10000258:	2805883a 	mov	r2,r5
1000025c:	e0fffe05 	stb	r3,-8(fp)
10000260:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
10000264:	00803c04 	movi	r2,240
10000268:	e0fffe03 	ldbu	r3,-8(fp)
1000026c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
10000270:	00803404 	movi	r2,208
10000274:	e0ffff0b 	ldhu	r3,-4(fp)
10000278:	10c00015 	stw	r3,0(r2)

	*otg_hpi_cs = 0;
1000027c:	00804004 	movi	r2,256
10000280:	10000005 	stb	zero,0(r2)
//	*otg_hpi_r = 1;
	*otg_hpi_w = 0;
10000284:	00803004 	movi	r2,192
10000288:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
1000028c:	00803004 	movi	r2,192
10000290:	00c00044 	movi	r3,1
10000294:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000298:	00804004 	movi	r2,256
1000029c:	00c00044 	movi	r3,1
100002a0:	10c00005 	stb	r3,0(r2)
}
100002a4:	e037883a 	mov	sp,fp
100002a8:	df000017 	ldw	fp,0(sp)
100002ac:	dec00104 	addi	sp,sp,4
100002b0:	f800283a 	ret

100002b4 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
100002b4:	defffd04 	addi	sp,sp,-12
100002b8:	df000215 	stw	fp,8(sp)
100002bc:	df000204 	addi	fp,sp,8
100002c0:	2005883a 	mov	r2,r4
100002c4:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;
	*otg_hpi_address = Address;
100002c8:	00803c04 	movi	r2,240
100002cc:	e0ffff03 	ldbu	r3,-4(fp)
100002d0:	10c00015 	stw	r3,0(r2)
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	//printf("%x\n",temp);

	*otg_hpi_cs = 0;
100002d4:	00804004 	movi	r2,256
100002d8:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
100002dc:	00803804 	movi	r2,224
100002e0:	10000005 	stb	zero,0(r2)
//	*otg_hpi_w = 1;

   temp= *otg_hpi_data;
100002e4:	00803404 	movi	r2,208
100002e8:	10800017 	ldw	r2,0(r2)
100002ec:	e0bffe0d 	sth	r2,-8(fp)
  // printf("data in %x is %x\n",*otg_hpi_address,temp);
	*otg_hpi_r = 1;
100002f0:	00803804 	movi	r2,224
100002f4:	00c00044 	movi	r3,1
100002f8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100002fc:	00804004 	movi	r2,256
10000300:	00c00044 	movi	r3,1
10000304:	10c00005 	stb	r3,0(r2)
	return temp;
10000308:	e0bffe0b 	ldhu	r2,-8(fp)
}
1000030c:	e037883a 	mov	sp,fp
10000310:	df000017 	ldw	fp,0(sp)
10000314:	dec00104 	addi	sp,sp,4
10000318:	f800283a 	ret

1000031c <dist>:
 /* declaration and initialization ends */

/* my dist function */

double dist(double rival_x, double rival_y, double cur_x, double cur_y )
{
1000031c:	defff604 	addi	sp,sp,-40
10000320:	dfc00915 	stw	ra,36(sp)
10000324:	df000815 	stw	fp,32(sp)
10000328:	dcc00715 	stw	r19,28(sp)
1000032c:	dc800615 	stw	r18,24(sp)
10000330:	dc400515 	stw	r17,20(sp)
10000334:	dc000415 	stw	r16,16(sp)
10000338:	df000804 	addi	fp,sp,32
1000033c:	e13ff815 	stw	r4,-32(fp)
10000340:	e17ff915 	stw	r5,-28(fp)
10000344:	e1bffa15 	stw	r6,-24(fp)
10000348:	e1fffb15 	stw	r7,-20(fp)
	return  sqrt(  (rival_x - cur_x) * (rival_x - cur_x)  +  (rival_y - cur_y) * (rival_y - cur_y) );
1000034c:	e13ff817 	ldw	r4,-32(fp)
10000350:	e17ff917 	ldw	r5,-28(fp)
10000354:	e1800217 	ldw	r6,8(fp)
10000358:	e1c00317 	ldw	r7,12(fp)
1000035c:	00074240 	call	10007424 <__subdf3>
10000360:	1009883a 	mov	r4,r2
10000364:	180b883a 	mov	r5,r3
10000368:	2021883a 	mov	r16,r4
1000036c:	2823883a 	mov	r17,r5
10000370:	e13ff817 	ldw	r4,-32(fp)
10000374:	e17ff917 	ldw	r5,-28(fp)
10000378:	e1800217 	ldw	r6,8(fp)
1000037c:	e1c00317 	ldw	r7,12(fp)
10000380:	00074240 	call	10007424 <__subdf3>
10000384:	1009883a 	mov	r4,r2
10000388:	180b883a 	mov	r5,r3
1000038c:	2005883a 	mov	r2,r4
10000390:	2807883a 	mov	r3,r5
10000394:	8009883a 	mov	r4,r16
10000398:	880b883a 	mov	r5,r17
1000039c:	100d883a 	mov	r6,r2
100003a0:	180f883a 	mov	r7,r3
100003a4:	0006bb80 	call	10006bb8 <__muldf3>
100003a8:	1009883a 	mov	r4,r2
100003ac:	180b883a 	mov	r5,r3
100003b0:	2021883a 	mov	r16,r4
100003b4:	2823883a 	mov	r17,r5
100003b8:	e13ffa17 	ldw	r4,-24(fp)
100003bc:	e17ffb17 	ldw	r5,-20(fp)
100003c0:	e1800417 	ldw	r6,16(fp)
100003c4:	e1c00517 	ldw	r7,20(fp)
100003c8:	00074240 	call	10007424 <__subdf3>
100003cc:	1009883a 	mov	r4,r2
100003d0:	180b883a 	mov	r5,r3
100003d4:	2025883a 	mov	r18,r4
100003d8:	2827883a 	mov	r19,r5
100003dc:	e13ffa17 	ldw	r4,-24(fp)
100003e0:	e17ffb17 	ldw	r5,-20(fp)
100003e4:	e1800417 	ldw	r6,16(fp)
100003e8:	e1c00517 	ldw	r7,20(fp)
100003ec:	00074240 	call	10007424 <__subdf3>
100003f0:	1009883a 	mov	r4,r2
100003f4:	180b883a 	mov	r5,r3
100003f8:	2005883a 	mov	r2,r4
100003fc:	2807883a 	mov	r3,r5
10000400:	9009883a 	mov	r4,r18
10000404:	980b883a 	mov	r5,r19
10000408:	100d883a 	mov	r6,r2
1000040c:	180f883a 	mov	r7,r3
10000410:	0006bb80 	call	10006bb8 <__muldf3>
10000414:	1009883a 	mov	r4,r2
10000418:	180b883a 	mov	r5,r3
1000041c:	2005883a 	mov	r2,r4
10000420:	2807883a 	mov	r3,r5
10000424:	8009883a 	mov	r4,r16
10000428:	880b883a 	mov	r5,r17
1000042c:	100d883a 	mov	r6,r2
10000430:	180f883a 	mov	r7,r3
10000434:	00057580 	call	10005758 <__adddf3>
10000438:	1009883a 	mov	r4,r2
1000043c:	180b883a 	mov	r5,r3
10000440:	2005883a 	mov	r2,r4
10000444:	2807883a 	mov	r3,r5
10000448:	1009883a 	mov	r4,r2
1000044c:	180b883a 	mov	r5,r3
10000450:	000319c0 	call	1000319c <sqrt>
10000454:	100b883a 	mov	r5,r2
10000458:	180d883a 	mov	r6,r3
1000045c:	2807883a 	mov	r3,r5
10000460:	3009883a 	mov	r4,r6
}
10000464:	1805883a 	mov	r2,r3
10000468:	2007883a 	mov	r3,r4
1000046c:	e6fffc04 	addi	sp,fp,-16
10000470:	dfc00517 	ldw	ra,20(sp)
10000474:	df000417 	ldw	fp,16(sp)
10000478:	dcc00317 	ldw	r19,12(sp)
1000047c:	dc800217 	ldw	r18,8(sp)
10000480:	dc400117 	ldw	r17,4(sp)
10000484:	dc000017 	ldw	r16,0(sp)
10000488:	dec00604 	addi	sp,sp,24
1000048c:	f800283a 	ret

10000490 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
10000490:	deffde04 	addi	sp,sp,-136
10000494:	dfc02115 	stw	ra,132(sp)
10000498:	df002015 	stw	fp,128(sp)
1000049c:	dd401f15 	stw	r21,124(sp)
100004a0:	dd001e15 	stw	r20,120(sp)
100004a4:	dcc01d15 	stw	r19,116(sp)
100004a8:	dc801c15 	stw	r18,112(sp)
100004ac:	dc401b15 	stw	r17,108(sp)
100004b0:	dc001a15 	stw	r16,104(sp)
100004b4:	df002004 	addi	fp,sp,128
	IO_init();
100004b8:	00001f80 	call	100001f8 <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
100004bc:	e03feb0d 	sth	zero,-84(fp)
	int keycode = 0;
100004c0:	e03fec15 	stw	zero,-80(fp)
	alt_u8 toggle = 0;
100004c4:	e03fe485 	stb	zero,-110(fp)


/* my variable declaration ends*/

/* steps that I don't care much */
	printf("USB keyboard setup...\n\n");
100004c8:	01040074 	movhi	r4,4097
100004cc:	21121604 	addi	r4,r4,18520
100004d0:	0007fe00 	call	10007fe0 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
100004d4:	0001f140 	call	10001f14 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
100004d8:	01005104 	movi	r4,324
100004dc:	000b883a 	mov	r5,zero
100004e0:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
100004e4:	01302414 	movui	r4,49296
100004e8:	017fffd4 	movui	r5,65535
100004ec:	0001e740 	call	10001e74 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
100004f0:	01006d04 	movi	r4,436
100004f4:	01409604 	movi	r5,600
100004f8:	0001e740 	call	10001e74 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
100004fc:	00811004 	movi	r2,1088
10000500:	e0bfe40d 	sth	r2,-112(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10000504:	e0bfe40b 	ldhu	r2,-112(fp)
10000508:	01005084 	movi	r4,322
1000050c:	100b883a 	mov	r5,r2
10000510:	0001e740 	call	10001e74 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
10000514:	00808404 	movi	r2,528
10000518:	e0bfed0d 	sth	r2,-76(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
1000051c:	e0bfed0b 	ldhu	r2,-76(fp)
10000520:	01302314 	movui	r4,49292
10000524:	100b883a 	mov	r5,r2
10000528:	0001e740 	call	10001e74 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
1000052c:	01007104 	movi	r4,452
10000530:	000b883a 	mov	r5,zero
10000534:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10000538:	01007184 	movi	r4,454
1000053c:	000b883a 	mov	r5,zero
10000540:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000544:	01007204 	movi	r4,456
10000548:	000b883a 	mov	r5,zero
1000054c:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10000550:	01007284 	movi	r4,458
10000554:	000b883a 	mov	r5,zero
10000558:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
1000055c:	01007304 	movi	r4,460
10000560:	000b883a 	mov	r5,zero
10000564:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10000568:	01007384 	movi	r4,462
1000056c:	000b883a 	mov	r5,zero
10000570:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10000574:	01007404 	movi	r4,464
10000578:	000b883a 	mov	r5,zero
1000057c:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10000580:	01007484 	movi	r4,466
10000584:	000b883a 	mov	r5,zero
10000588:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
1000058c:	01007504 	movi	r4,468
10000590:	000b883a 	mov	r5,zero
10000594:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10000598:	01007584 	movi	r4,470
1000059c:	000b883a 	mov	r5,zero
100005a0:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100005a4:	01007604 	movi	r4,472
100005a8:	000b883a 	mov	r5,zero
100005ac:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100005b0:	01007684 	movi	r4,474
100005b4:	000b883a 	mov	r5,zero
100005b8:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
100005bc:	01007704 	movi	r4,476
100005c0:	000b883a 	mov	r5,zero
100005c4:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
100005c8:	01007784 	movi	r4,478
100005cc:	000b883a 	mov	r5,zero
100005d0:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
100005d4:	01007084 	movi	r4,450
100005d8:	01401c84 	movi	r5,114
100005dc:	0001e740 	call	10001e74 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
100005e0:	01000044 	movi	r4,1
100005e4:	01738054 	movui	r5,52737
100005e8:	00002480 	call	10000248 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
100005ec:	0001883a 	nop
100005f0:	010000c4 	movi	r4,3
100005f4:	00002b40 	call	100002b4 <IO_read>
100005f8:	10bfffcc 	andi	r2,r2,65535
100005fc:	103ffc26 	beq	r2,zero,100005f0 <__alt_data_end+0xf80005f0>
	{
		//printf("xxxxx");
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000600:	0001883a 	nop
10000604:	01000044 	movi	r4,1
10000608:	00002b40 	call	100002b4 <IO_read>
1000060c:	10bfffcc 	andi	r2,r2,65535
10000610:	1083fb58 	cmpnei	r2,r2,4077
10000614:	10000826 	beq	r2,zero,10000638 <main+0x1a8>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10000618:	01000044 	movi	r4,1
1000061c:	00002b40 	call	100002b4 <IO_read>
10000620:	10bfffcc 	andi	r2,r2,65535
10000624:	01040074 	movhi	r4,4097
10000628:	21121c04 	addi	r4,r4,18544
1000062c:	100b883a 	mov	r5,r2
10000630:	0007eec0 	call	10007eec <printf>
		goto USB_HOT_PLUG;
10000634:	003fa706 	br	100004d4 <__alt_data_end+0xf80004d4>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
10000638:	01040074 	movhi	r4,4097
1000063c:	21122504 	addi	r4,r4,18580
10000640:	0007eec0 	call	10007eec <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
10000644:	01007084 	movi	r4,450
10000648:	01401d04 	movi	r5,116
1000064c:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
10000650:	01007104 	movi	r4,452
10000654:	01400f04 	movi	r5,60
10000658:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
1000065c:	01007184 	movi	r4,454
10000660:	000b883a 	mov	r5,zero
10000664:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000668:	01007204 	movi	r4,456
1000066c:	000b883a 	mov	r5,zero
10000670:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10000674:	01007284 	movi	r4,458
10000678:	000b883a 	mov	r5,zero
1000067c:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10000680:	01007304 	movi	r4,460
10000684:	000b883a 	mov	r5,zero
10000688:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
1000068c:	01007384 	movi	r4,462
10000690:	000b883a 	mov	r5,zero
10000694:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10000698:	01007404 	movi	r4,464
1000069c:	000b883a 	mov	r5,zero
100006a0:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
100006a4:	01007484 	movi	r4,466
100006a8:	000b883a 	mov	r5,zero
100006ac:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100006b0:	01007504 	movi	r4,468
100006b4:	000b883a 	mov	r5,zero
100006b8:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100006bc:	01007584 	movi	r4,470
100006c0:	000b883a 	mov	r5,zero
100006c4:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100006c8:	01007604 	movi	r4,472
100006cc:	000b883a 	mov	r5,zero
100006d0:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100006d4:	01007684 	movi	r4,474
100006d8:	000b883a 	mov	r5,zero
100006dc:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
100006e0:	01007704 	movi	r4,476
100006e4:	000b883a 	mov	r5,zero
100006e8:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
100006ec:	01007784 	movi	r4,478
100006f0:	000b883a 	mov	r5,zero
100006f4:	0001e740 	call	10001e74 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
100006f8:	01000044 	movi	r4,1
100006fc:	01738054 	movui	r5,52737
10000700:	00002480 	call	10000248 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000704:	0001883a 	nop
10000708:	01000044 	movi	r4,1
1000070c:	00002b40 	call	100002b4 <IO_read>
10000710:	10bfffcc 	andi	r2,r2,65535
10000714:	1083fb58 	cmpnei	r2,r2,4077
10000718:	10000826 	beq	r2,zero,1000073c <main+0x2ac>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
1000071c:	01000044 	movi	r4,1
10000720:	00002b40 	call	100002b4 <IO_read>
10000724:	10bfffcc 	andi	r2,r2,65535
10000728:	01040074 	movhi	r4,4097
1000072c:	21121c04 	addi	r4,r4,18544
10000730:	100b883a 	mov	r5,r2
10000734:	0007eec0 	call	10007eec <printf>
		goto USB_HOT_PLUG;
10000738:	003f6606 	br	100004d4 <__alt_data_end+0xf80004d4>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
1000073c:	00b02284 	movi	r2,-16246
10000740:	d0a6cd0d 	sth	r2,-25804(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
10000744:	008c0004 	movi	r2,12288
10000748:	d0a6cd8d 	sth	r2,-25802(gp)
	fs_device = A_DP_STAT;
1000074c:	00880004 	movi	r2,8192
10000750:	e0bfeb0d 	sth	r2,-84(fp)
	usb_ctl_val = UsbRead(ctl_reg);
10000754:	d0a6cd0b 	ldhu	r2,-25804(gp)
10000758:	10bfffcc 	andi	r2,r2,65535
1000075c:	1009883a 	mov	r4,r2
10000760:	0001ec80 	call	10001ec8 <UsbRead>
10000764:	e0bfe40d 	sth	r2,-112(fp)

	if (!(usb_ctl_val & no_device))
10000768:	d0a6cd8b 	ldhu	r2,-25802(gp)
1000076c:	e0ffe40b 	ldhu	r3,-112(fp)
10000770:	1884703a 	and	r2,r3,r2
10000774:	10bfffcc 	andi	r2,r2,65535
10000778:	1000341e 	bne	r2,zero,1000084c <main+0x3bc>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
1000077c:	e03fe4c5 	stb	zero,-109(fp)
10000780:	00001006 	br	100007c4 <main+0x334>
		{
			usleep(5*1000);
10000784:	0104e204 	movi	r4,5000
10000788:	00127a80 	call	100127a8 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
1000078c:	d0a6cd0b 	ldhu	r2,-25804(gp)
10000790:	10bfffcc 	andi	r2,r2,65535
10000794:	1009883a 	mov	r4,r2
10000798:	0001ec80 	call	10001ec8 <UsbRead>
1000079c:	e0bfe40d 	sth	r2,-112(fp)
			if(usb_ctl_val & no_device) break;
100007a0:	d0a6cd8b 	ldhu	r2,-25802(gp)
100007a4:	e0ffe40b 	ldhu	r3,-112(fp)
100007a8:	1884703a 	and	r2,r3,r2
100007ac:	10bfffcc 	andi	r2,r2,65535
100007b0:	10000126 	beq	r2,zero,100007b8 <main+0x328>
100007b4:	00000606 	br	100007d0 <main+0x340>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
100007b8:	e0bfe4c3 	ldbu	r2,-109(fp)
100007bc:	10800044 	addi	r2,r2,1
100007c0:	e0bfe4c5 	stb	r2,-109(fp)
100007c4:	e0bfe4c3 	ldbu	r2,-109(fp)
100007c8:	10800170 	cmpltui	r2,r2,5
100007cc:	103fed1e 	bne	r2,zero,10000784 <__alt_data_end+0xf8000784>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
		}
		if(!(usb_ctl_val & no_device))
100007d0:	d0a6cd8b 	ldhu	r2,-25802(gp)
100007d4:	e0ffe40b 	ldhu	r3,-112(fp)
100007d8:	1884703a 	and	r2,r3,r2
100007dc:	10bfffcc 	andi	r2,r2,65535
100007e0:	1000261e 	bne	r2,zero,1000087c <main+0x3ec>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
100007e4:	01040074 	movhi	r4,4097
100007e8:	21122904 	addi	r4,r4,18596
100007ec:	0007fe00 	call	10007fe0 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
100007f0:	01040074 	movhi	r4,4097
100007f4:	21123304 	addi	r4,r4,18636
100007f8:	0007fe00 	call	10007fe0 <puts>
			while (!(usb_ctl_val & no_device))
100007fc:	00000d06 	br	10000834 <main+0x3a4>
			{
				usb_ctl_val = UsbRead(ctl_reg);
10000800:	d0a6cd0b 	ldhu	r2,-25804(gp)
10000804:	10bfffcc 	andi	r2,r2,65535
10000808:	1009883a 	mov	r4,r2
1000080c:	0001ec80 	call	10001ec8 <UsbRead>
10000810:	e0bfe40d 	sth	r2,-112(fp)
				if(usb_ctl_val & no_device)
10000814:	d0a6cd8b 	ldhu	r2,-25802(gp)
10000818:	e0ffe40b 	ldhu	r3,-112(fp)
1000081c:	1884703a 	and	r2,r3,r2
10000820:	10bfffcc 	andi	r2,r2,65535
10000824:	10000126 	beq	r2,zero,1000082c <main+0x39c>
					goto USB_HOT_PLUG;
10000828:	003f2a06 	br	100004d4 <__alt_data_end+0xf80004d4>

				usleep(2000);
1000082c:	0101f404 	movi	r4,2000
10000830:	00127a80 	call	100127a8 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
10000834:	d0a6cd8b 	ldhu	r2,-25802(gp)
10000838:	e0ffe40b 	ldhu	r3,-112(fp)
1000083c:	1884703a 	and	r2,r3,r2
10000840:	10bfffcc 	andi	r2,r2,65535
10000844:	103fee26 	beq	r2,zero,10000800 <__alt_data_end+0xf8000800>
10000848:	00000c06 	br	1000087c <main+0x3ec>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
1000084c:	e0ffe40b 	ldhu	r3,-112(fp)
10000850:	e0bfeb0b 	ldhu	r2,-84(fp)
10000854:	1884703a 	and	r2,r3,r2
10000858:	10bfffcc 	andi	r2,r2,65535
1000085c:	10000426 	beq	r2,zero,10000870 <main+0x3e0>
		{
			printf("[INFO]: full speed device\n");
10000860:	01040074 	movhi	r4,4097
10000864:	21123f04 	addi	r4,r4,18684
10000868:	0007fe00 	call	10007fe0 <puts>
1000086c:	00000306 	br	1000087c <main+0x3ec>
		}
		else
		{
			printf("[INFO]: low speed device\n");
10000870:	01040074 	movhi	r4,4097
10000874:	21124604 	addi	r4,r4,18712
10000878:	0007fe00 	call	10007fe0 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
1000087c:	0001fc40 	call	10001fc4 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000880:	00000306 	br	10000890 <main+0x400>
	{
		UsbSetAddress();
10000884:	0001fc40 	call	10001fc4 <UsbSetAddress>
		usleep(10*1000);
10000888:	0109c404 	movi	r4,10000
1000088c:	00127a80 	call	100127a8 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000890:	010000c4 	movi	r4,3
10000894:	00002b40 	call	100002b4 <IO_read>
10000898:	10bfffcc 	andi	r2,r2,65535
1000089c:	1080040c 	andi	r2,r2,16
100008a0:	103ff826 	beq	r2,zero,10000884 <__alt_data_end+0xf8000884>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100008a4:	0002e400 	call	10002e40 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
100008a8:	01000084 	movi	r4,2
100008ac:	01414184 	movi	r5,1286
100008b0:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
100008b4:	0009883a 	mov	r4,zero
100008b8:	00002b40 	call	100002b4 <IO_read>
100008bc:	10bfffcc 	andi	r2,r2,65535
100008c0:	01040074 	movhi	r4,4097
100008c4:	21124d04 	addi	r4,r4,18740
100008c8:	100b883a 	mov	r5,r2
100008cc:	0007eec0 	call	10007eec <printf>

	IO_write(HPI_ADDR,0x0508); // n
100008d0:	01000084 	movi	r4,2
100008d4:	01414204 	movi	r5,1288
100008d8:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100008dc:	0009883a 	mov	r4,zero
100008e0:	00002b40 	call	100002b4 <IO_read>
100008e4:	e0bfe40d 	sth	r2,-112(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
100008e8:	e0bfe40b 	ldhu	r2,-112(fp)
100008ec:	01040074 	movhi	r4,4097
100008f0:	21125804 	addi	r4,r4,18784
100008f4:	100b883a 	mov	r5,r2
100008f8:	0007eec0 	call	10007eec <printf>
	while (usb_ctl_val != 0x03) // retries occurred
100008fc:	e0bfe40b 	ldhu	r2,-112(fp)
10000900:	108000e0 	cmpeqi	r2,r2,3
10000904:	1000031e 	bne	r2,zero,10000914 <main+0x484>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000908:	0002ec40 	call	10002ec4 <UsbGetRetryCnt>
1000090c:	e0bfe40d 	sth	r2,-112(fp)

		goto USB_HOT_PLUG;
10000910:	003ef006 	br	100004d4 <__alt_data_end+0xf80004d4>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
10000914:	01040074 	movhi	r4,4097
10000918:	21126404 	addi	r4,r4,18832
1000091c:	0007fe00 	call	10007fe0 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
10000920:	00020c00 	call	100020c0 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000924:	00000306 	br	10000934 <main+0x4a4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
10000928:	00020c00 	call	100020c0 <UsbGetDeviceDesc1>
		usleep(10*1000);
1000092c:	0109c404 	movi	r4,10000
10000930:	00127a80 	call	100127a8 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000934:	010000c4 	movi	r4,3
10000938:	00002b40 	call	100002b4 <IO_read>
1000093c:	10bfffcc 	andi	r2,r2,65535
10000940:	1080040c 	andi	r2,r2,16
10000944:	103ff826 	beq	r2,zero,10000928 <__alt_data_end+0xf8000928>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000948:	0002e400 	call	10002e40 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
1000094c:	01000084 	movi	r4,2
10000950:	01414184 	movi	r5,1286
10000954:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000958:	0009883a 	mov	r4,zero
1000095c:	00002b40 	call	100002b4 <IO_read>
10000960:	10bfffcc 	andi	r2,r2,65535
10000964:	01040074 	movhi	r4,4097
10000968:	21127304 	addi	r4,r4,18892
1000096c:	100b883a 	mov	r5,r2
10000970:	0007eec0 	call	10007eec <printf>

	IO_write(HPI_ADDR,0x0508);
10000974:	01000084 	movi	r4,2
10000978:	01414204 	movi	r5,1288
1000097c:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000980:	0009883a 	mov	r4,zero
10000984:	00002b40 	call	100002b4 <IO_read>
10000988:	e0bfe40d 	sth	r2,-112(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
1000098c:	e0bfe40b 	ldhu	r2,-112(fp)
10000990:	01040074 	movhi	r4,4097
10000994:	21127e04 	addi	r4,r4,18936
10000998:	100b883a 	mov	r5,r2
1000099c:	0007eec0 	call	10007eec <printf>
	while (usb_ctl_val != 0x03)
100009a0:	00000206 	br	100009ac <main+0x51c>
	{
		usb_ctl_val = UsbGetRetryCnt();
100009a4:	0002ec40 	call	10002ec4 <UsbGetRetryCnt>
100009a8:	e0bfe40d 	sth	r2,-112(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100009ac:	e0bfe40b 	ldhu	r2,-112(fp)
100009b0:	108000d8 	cmpnei	r2,r2,3
100009b4:	103ffb1e 	bne	r2,zero,100009a4 <__alt_data_end+0xf80009a4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
100009b8:	01040074 	movhi	r4,4097
100009bc:	21128a04 	addi	r4,r4,18984
100009c0:	0007fe00 	call	10007fe0 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
100009c4:	00022040 	call	10002204 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009c8:	00000306 	br	100009d8 <main+0x548>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
100009cc:	00022040 	call	10002204 <UsbGetDeviceDesc2>
		usleep(10*1000);
100009d0:	0109c404 	movi	r4,10000
100009d4:	00127a80 	call	100127a8 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009d8:	010000c4 	movi	r4,3
100009dc:	00002b40 	call	100002b4 <IO_read>
100009e0:	10bfffcc 	andi	r2,r2,65535
100009e4:	1080040c 	andi	r2,r2,16
100009e8:	103ff826 	beq	r2,zero,100009cc <__alt_data_end+0xf80009cc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100009ec:	0002e400 	call	10002e40 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100009f0:	01000084 	movi	r4,2
100009f4:	01414184 	movi	r5,1286
100009f8:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
100009fc:	0009883a 	mov	r4,zero
10000a00:	00002b40 	call	100002b4 <IO_read>
10000a04:	10bfffcc 	andi	r2,r2,65535
10000a08:	01040074 	movhi	r4,4097
10000a0c:	21127304 	addi	r4,r4,18892
10000a10:	100b883a 	mov	r5,r2
10000a14:	0007eec0 	call	10007eec <printf>

	IO_write(HPI_ADDR,0x0508);
10000a18:	01000084 	movi	r4,2
10000a1c:	01414204 	movi	r5,1288
10000a20:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000a24:	0009883a 	mov	r4,zero
10000a28:	00002b40 	call	100002b4 <IO_read>
10000a2c:	e0bfe40d 	sth	r2,-112(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10000a30:	e0bfe40b 	ldhu	r2,-112(fp)
10000a34:	01040074 	movhi	r4,4097
10000a38:	21127e04 	addi	r4,r4,18936
10000a3c:	100b883a 	mov	r5,r2
10000a40:	0007eec0 	call	10007eec <printf>
	while (usb_ctl_val != 0x03)
10000a44:	00000206 	br	10000a50 <main+0x5c0>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000a48:	0002ec40 	call	10002ec4 <UsbGetRetryCnt>
10000a4c:	e0bfe40d 	sth	r2,-112(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000a50:	e0bfe40b 	ldhu	r2,-112(fp)
10000a54:	108000d8 	cmpnei	r2,r2,3
10000a58:	103ffb1e 	bne	r2,zero,10000a48 <__alt_data_end+0xf8000a48>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
10000a5c:	01040074 	movhi	r4,4097
10000a60:	21129e04 	addi	r4,r4,19064
10000a64:	0007fe00 	call	10007fe0 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
10000a68:	00023d80 	call	100023d8 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000a6c:	00000306 	br	10000a7c <main+0x5ec>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
10000a70:	00023d80 	call	100023d8 <UsbGetConfigDesc1>
		usleep(10*1000);
10000a74:	0109c404 	movi	r4,10000
10000a78:	00127a80 	call	100127a8 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000a7c:	010000c4 	movi	r4,3
10000a80:	00002b40 	call	100002b4 <IO_read>
10000a84:	10bfffcc 	andi	r2,r2,65535
10000a88:	1080040c 	andi	r2,r2,16
10000a8c:	103ff826 	beq	r2,zero,10000a70 <__alt_data_end+0xf8000a70>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000a90:	0002e400 	call	10002e40 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000a94:	01000084 	movi	r4,2
10000a98:	01414184 	movi	r5,1286
10000a9c:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000aa0:	0009883a 	mov	r4,zero
10000aa4:	00002b40 	call	100002b4 <IO_read>
10000aa8:	10bfffcc 	andi	r2,r2,65535
10000aac:	01040074 	movhi	r4,4097
10000ab0:	2112b004 	addi	r4,r4,19136
10000ab4:	100b883a 	mov	r5,r2
10000ab8:	0007eec0 	call	10007eec <printf>

	IO_write(HPI_ADDR,0x0508);
10000abc:	01000084 	movi	r4,2
10000ac0:	01414204 	movi	r5,1288
10000ac4:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000ac8:	0009883a 	mov	r4,zero
10000acc:	00002b40 	call	100002b4 <IO_read>
10000ad0:	e0bfe40d 	sth	r2,-112(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
10000ad4:	e0bfe40b 	ldhu	r2,-112(fp)
10000ad8:	01040074 	movhi	r4,4097
10000adc:	2112bb04 	addi	r4,r4,19180
10000ae0:	100b883a 	mov	r5,r2
10000ae4:	0007eec0 	call	10007eec <printf>
	while (usb_ctl_val != 0x03)
10000ae8:	00000206 	br	10000af4 <main+0x664>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000aec:	0002ec40 	call	10002ec4 <UsbGetRetryCnt>
10000af0:	e0bfe40d 	sth	r2,-112(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000af4:	e0bfe40b 	ldhu	r2,-112(fp)
10000af8:	108000d8 	cmpnei	r2,r2,3
10000afc:	103ffb1e 	bne	r2,zero,10000aec <__alt_data_end+0xf8000aec>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10000b00:	01040074 	movhi	r4,4097
10000b04:	2112c704 	addi	r4,r4,19228
10000b08:	0007fe00 	call	10007fe0 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
10000b0c:	00025640 	call	10002564 <UsbGetConfigDesc2>

	usleep(100*1000);
10000b10:	010000b4 	movhi	r4,2
10000b14:	2121a804 	addi	r4,r4,-31072
10000b18:	00127a80 	call	100127a8 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b1c:	00000306 	br	10000b2c <main+0x69c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
10000b20:	00025640 	call	10002564 <UsbGetConfigDesc2>
		usleep(10*1000);
10000b24:	0109c404 	movi	r4,10000
10000b28:	00127a80 	call	100127a8 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b2c:	010000c4 	movi	r4,3
10000b30:	00002b40 	call	100002b4 <IO_read>
10000b34:	10bfffcc 	andi	r2,r2,65535
10000b38:	1080040c 	andi	r2,r2,16
10000b3c:	103ff826 	beq	r2,zero,10000b20 <__alt_data_end+0xf8000b20>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000b40:	0002e400 	call	10002e40 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000b44:	01000084 	movi	r4,2
10000b48:	01414184 	movi	r5,1286
10000b4c:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000b50:	0009883a 	mov	r4,zero
10000b54:	00002b40 	call	100002b4 <IO_read>
10000b58:	10bfffcc 	andi	r2,r2,65535
10000b5c:	01040074 	movhi	r4,4097
10000b60:	2112da04 	addi	r4,r4,19304
10000b64:	100b883a 	mov	r5,r2
10000b68:	0007eec0 	call	10007eec <printf>

	IO_write(HPI_ADDR,0x0508);
10000b6c:	01000084 	movi	r4,2
10000b70:	01414204 	movi	r5,1288
10000b74:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000b78:	0009883a 	mov	r4,zero
10000b7c:	00002b40 	call	100002b4 <IO_read>
10000b80:	e0bfe40d 	sth	r2,-112(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10000b84:	e0bfe40b 	ldhu	r2,-112(fp)
10000b88:	01040074 	movhi	r4,4097
10000b8c:	2112e504 	addi	r4,r4,19348
10000b90:	100b883a 	mov	r5,r2
10000b94:	0007eec0 	call	10007eec <printf>
	while (usb_ctl_val != 0x03)
10000b98:	00000206 	br	10000ba4 <main+0x714>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000b9c:	0002ec40 	call	10002ec4 <UsbGetRetryCnt>
10000ba0:	e0bfe40d 	sth	r2,-112(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000ba4:	e0bfe40b 	ldhu	r2,-112(fp)
10000ba8:	108000d8 	cmpnei	r2,r2,3
10000bac:	103ffb1e 	bne	r2,zero,10000b9c <__alt_data_end+0xf8000b9c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10000bb0:	01040074 	movhi	r4,4097
10000bb4:	2112f104 	addi	r4,r4,19396
10000bb8:	0007fe00 	call	10007fe0 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10000bbc:	01000084 	movi	r4,2
10000bc0:	01415b04 	movi	r5,1388
10000bc4:	00002480 	call	10000248 <IO_write>
	code = IO_read(HPI_DATA);
10000bc8:	0009883a 	mov	r4,zero
10000bcc:	00002b40 	call	100002b4 <IO_read>
10000bd0:	e0bfed8d 	sth	r2,-74(fp)
	code = code & 0x003;
10000bd4:	e0bfed8b 	ldhu	r2,-74(fp)
10000bd8:	108000cc 	andi	r2,r2,3
10000bdc:	e0bfed8d 	sth	r2,-74(fp)
	printf("\ncode = %x\n", code);
10000be0:	e0bfed8b 	ldhu	r2,-74(fp)
10000be4:	01040074 	movhi	r4,4097
10000be8:	21130404 	addi	r4,r4,19472
10000bec:	100b883a 	mov	r5,r2
10000bf0:	0007eec0 	call	10007eec <printf>

	if (code == 0x01)
10000bf4:	e0bfed8b 	ldhu	r2,-74(fp)
10000bf8:	10800058 	cmpnei	r2,r2,1
10000bfc:	1000041e 	bne	r2,zero,10000c10 <main+0x780>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10000c00:	01040074 	movhi	r4,4097
10000c04:	21130704 	addi	r4,r4,19484
10000c08:	0007fe00 	call	10007fe0 <puts>
10000c0c:	00000306 	br	10000c1c <main+0x78c>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10000c10:	01040074 	movhi	r4,4097
10000c14:	21131604 	addi	r4,r4,19544
10000c18:	0007fe00 	call	10007fe0 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10000c1c:	01000084 	movi	r4,2
10000c20:	01415d84 	movi	r5,1398
10000c24:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x073F);
10000c28:	0009883a 	mov	r4,zero
10000c2c:	0141cfc4 	movi	r5,1855
10000c30:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x8105);
10000c34:	0009883a 	mov	r4,zero
10000c38:	01604154 	movui	r5,33029
10000c3c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0003);
10000c40:	0009883a 	mov	r4,zero
10000c44:	014000c4 	movi	r5,3
10000c48:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);
10000c4c:	0009883a 	mov	r4,zero
10000c50:	01400204 	movi	r5,8
10000c54:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10000c58:	0009883a 	mov	r4,zero
10000c5c:	016b0294 	movui	r5,44042
10000c60:	00002480 	call	10000248 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10000c64:	01006c04 	movi	r4,432
10000c68:	01415d84 	movi	r5,1398
10000c6c:	0001e740 	call	10001e74 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10000c70:	01000084 	movi	r4,2
10000c74:	01415f04 	movi	r5,1404
10000c78:	00002480 	call	10000248 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10000c7c:	0009883a 	mov	r4,zero
10000c80:	00002b40 	call	100002b4 <IO_read>
10000c84:	e0bfee05 	stb	r2,-72(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10000c88:	e0bfee03 	ldbu	r2,-72(fp)
10000c8c:	01040074 	movhi	r4,4097
10000c90:	21131f04 	addi	r4,r4,19580
10000c94:	100b883a 	mov	r5,r2
10000c98:	0007eec0 	call	10007eec <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10000c9c:	00027c80 	call	100027c8 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000ca0:	00000306 	br	10000cb0 <main+0x820>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10000ca4:	00027c80 	call	100027c8 <UsbSetConfig>
		usleep(10*1000);
10000ca8:	0109c404 	movi	r4,10000
10000cac:	00127a80 	call	100127a8 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000cb0:	010000c4 	movi	r4,3
10000cb4:	00002b40 	call	100002b4 <IO_read>
10000cb8:	10bfffcc 	andi	r2,r2,65535
10000cbc:	1080040c 	andi	r2,r2,16
10000cc0:	103ff826 	beq	r2,zero,10000ca4 <__alt_data_end+0xf8000ca4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000cc4:	0002e400 	call	10002e40 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000cc8:	01000084 	movi	r4,2
10000ccc:	01414184 	movi	r5,1286
10000cd0:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000cd4:	0009883a 	mov	r4,zero
10000cd8:	00002b40 	call	100002b4 <IO_read>
10000cdc:	10bfffcc 	andi	r2,r2,65535
10000ce0:	01040074 	movhi	r4,4097
10000ce4:	21132904 	addi	r4,r4,19620
10000ce8:	100b883a 	mov	r5,r2
10000cec:	0007eec0 	call	10007eec <printf>

	IO_write(HPI_ADDR,0x0508);
10000cf0:	01000084 	movi	r4,2
10000cf4:	01414204 	movi	r5,1288
10000cf8:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000cfc:	0009883a 	mov	r4,zero
10000d00:	00002b40 	call	100002b4 <IO_read>
10000d04:	e0bfe40d 	sth	r2,-112(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10000d08:	e0bfe40b 	ldhu	r2,-112(fp)
10000d0c:	01040074 	movhi	r4,4097
10000d10:	21133404 	addi	r4,r4,19664
10000d14:	100b883a 	mov	r5,r2
10000d18:	0007eec0 	call	10007eec <printf>
	while (usb_ctl_val != 0x03)
10000d1c:	00000206 	br	10000d28 <main+0x898>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000d20:	0002ec40 	call	10002ec4 <UsbGetRetryCnt>
10000d24:	e0bfe40d 	sth	r2,-112(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000d28:	e0bfe40b 	ldhu	r2,-112(fp)
10000d2c:	108000d8 	cmpnei	r2,r2,3
10000d30:	103ffb1e 	bne	r2,zero,10000d20 <__alt_data_end+0xf8000d20>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10000d34:	01040074 	movhi	r4,4097
10000d38:	21134004 	addi	r4,r4,19712
10000d3c:	0007fe00 	call	10007fe0 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10000d40:	00028c40 	call	100028c4 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d44:	00000306 	br	10000d54 <main+0x8c4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10000d48:	00028c40 	call	100028c4 <UsbClassRequest>
		usleep(10*1000);
10000d4c:	0109c404 	movi	r4,10000
10000d50:	00127a80 	call	100127a8 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d54:	010000c4 	movi	r4,3
10000d58:	00002b40 	call	100002b4 <IO_read>
10000d5c:	10bfffcc 	andi	r2,r2,65535
10000d60:	1080040c 	andi	r2,r2,16
10000d64:	103ff826 	beq	r2,zero,10000d48 <__alt_data_end+0xf8000d48>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000d68:	0002e400 	call	10002e40 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000d6c:	01000084 	movi	r4,2
10000d70:	01414184 	movi	r5,1286
10000d74:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000d78:	0009883a 	mov	r4,zero
10000d7c:	00002b40 	call	100002b4 <IO_read>
10000d80:	10bfffcc 	andi	r2,r2,65535
10000d84:	01040074 	movhi	r4,4097
10000d88:	21135204 	addi	r4,r4,19784
10000d8c:	100b883a 	mov	r5,r2
10000d90:	0007eec0 	call	10007eec <printf>

	IO_write(HPI_ADDR,0x0508);
10000d94:	01000084 	movi	r4,2
10000d98:	01414204 	movi	r5,1288
10000d9c:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000da0:	0009883a 	mov	r4,zero
10000da4:	00002b40 	call	100002b4 <IO_read>
10000da8:	e0bfe40d 	sth	r2,-112(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000dac:	e0bfe40b 	ldhu	r2,-112(fp)
10000db0:	01040074 	movhi	r4,4097
10000db4:	21135d04 	addi	r4,r4,19828
10000db8:	100b883a 	mov	r5,r2
10000dbc:	0007eec0 	call	10007eec <printf>
	while (usb_ctl_val != 0x03)
10000dc0:	00000206 	br	10000dcc <main+0x93c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000dc4:	0002ec40 	call	10002ec4 <UsbGetRetryCnt>
10000dc8:	e0bfe40d 	sth	r2,-112(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000dcc:	e0bfe40b 	ldhu	r2,-112(fp)
10000dd0:	108000d8 	cmpnei	r2,r2,3
10000dd4:	103ffb1e 	bne	r2,zero,10000dc4 <__alt_data_end+0xf8000dc4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10000dd8:	01040074 	movhi	r4,4097
10000ddc:	21136904 	addi	r4,r4,19876
10000de0:	0007fe00 	call	10007fe0 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10000de4:	00029c00 	call	100029c0 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000de8:	00000306 	br	10000df8 <main+0x968>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10000dec:	00029c00 	call	100029c0 <UsbGetHidDesc>
		usleep(10*1000);
10000df0:	0109c404 	movi	r4,10000
10000df4:	00127a80 	call	100127a8 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000df8:	010000c4 	movi	r4,3
10000dfc:	00002b40 	call	100002b4 <IO_read>
10000e00:	10bfffcc 	andi	r2,r2,65535
10000e04:	1080040c 	andi	r2,r2,16
10000e08:	103ff826 	beq	r2,zero,10000dec <__alt_data_end+0xf8000dec>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000e0c:	0002e400 	call	10002e40 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000e10:	01000084 	movi	r4,2
10000e14:	01414184 	movi	r5,1286
10000e18:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000e1c:	0009883a 	mov	r4,zero
10000e20:	00002b40 	call	100002b4 <IO_read>
10000e24:	10bfffcc 	andi	r2,r2,65535
10000e28:	01040074 	movhi	r4,4097
10000e2c:	21135204 	addi	r4,r4,19784
10000e30:	100b883a 	mov	r5,r2
10000e34:	0007eec0 	call	10007eec <printf>

	IO_write(HPI_ADDR,0x0508);
10000e38:	01000084 	movi	r4,2
10000e3c:	01414204 	movi	r5,1288
10000e40:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000e44:	0009883a 	mov	r4,zero
10000e48:	00002b40 	call	100002b4 <IO_read>
10000e4c:	e0bfe40d 	sth	r2,-112(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000e50:	e0bfe40b 	ldhu	r2,-112(fp)
10000e54:	01040074 	movhi	r4,4097
10000e58:	21135d04 	addi	r4,r4,19828
10000e5c:	100b883a 	mov	r5,r2
10000e60:	0007eec0 	call	10007eec <printf>
	while (usb_ctl_val != 0x03)
10000e64:	00000206 	br	10000e70 <main+0x9e0>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000e68:	0002ec40 	call	10002ec4 <UsbGetRetryCnt>
10000e6c:	e0bfe40d 	sth	r2,-112(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000e70:	e0bfe40b 	ldhu	r2,-112(fp)
10000e74:	108000d8 	cmpnei	r2,r2,3
10000e78:	103ffb1e 	bne	r2,zero,10000e68 <__alt_data_end+0xf8000e68>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10000e7c:	01040074 	movhi	r4,4097
10000e80:	21137b04 	addi	r4,r4,19948
10000e84:	0007fe00 	call	10007fe0 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10000e88:	0002b040 	call	10002b04 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000e8c:	00000306 	br	10000e9c <main+0xa0c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10000e90:	0002b040 	call	10002b04 <UsbGetReportDesc>
		usleep(10*1000);
10000e94:	0109c404 	movi	r4,10000
10000e98:	00127a80 	call	100127a8 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000e9c:	010000c4 	movi	r4,3
10000ea0:	00002b40 	call	100002b4 <IO_read>
10000ea4:	10bfffcc 	andi	r2,r2,65535
10000ea8:	1080040c 	andi	r2,r2,16
10000eac:	103ff826 	beq	r2,zero,10000e90 <__alt_data_end+0xf8000e90>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000eb0:	0002e400 	call	10002e40 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000eb4:	01000084 	movi	r4,2
10000eb8:	01414184 	movi	r5,1286
10000ebc:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000ec0:	0009883a 	mov	r4,zero
10000ec4:	00002b40 	call	100002b4 <IO_read>
10000ec8:	10bfffcc 	andi	r2,r2,65535
10000ecc:	01040074 	movhi	r4,4097
10000ed0:	21138f04 	addi	r4,r4,20028
10000ed4:	100b883a 	mov	r5,r2
10000ed8:	0007eec0 	call	10007eec <printf>

	IO_write(HPI_ADDR,0x0508);
10000edc:	01000084 	movi	r4,2
10000ee0:	01414204 	movi	r5,1288
10000ee4:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000ee8:	0009883a 	mov	r4,zero
10000eec:	00002b40 	call	100002b4 <IO_read>
10000ef0:	e0bfe40d 	sth	r2,-112(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10000ef4:	e0bfe40b 	ldhu	r2,-112(fp)
10000ef8:	01040074 	movhi	r4,4097
10000efc:	21139b04 	addi	r4,r4,20076
10000f00:	100b883a 	mov	r5,r2
10000f04:	0007eec0 	call	10007eec <printf>
	while (usb_ctl_val != 0x03)
10000f08:	00000206 	br	10000f14 <main+0xa84>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000f0c:	0002ec40 	call	10002ec4 <UsbGetRetryCnt>
10000f10:	e0bfe40d 	sth	r2,-112(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000f14:	e0bfe40b 	ldhu	r2,-112(fp)
10000f18:	108000d8 	cmpnei	r2,r2,3
10000f1c:	103ffb1e 	bne	r2,zero,10000f0c <__alt_data_end+0xf8000f0c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10000f20:	01040074 	movhi	r4,4097
10000f24:	2113a704 	addi	r4,r4,20124
10000f28:	0007fe00 	call	10007fe0 <puts>

/* steps that I don't care much ends here */

	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
10000f2c:	0109c404 	movi	r4,10000
10000f30:	00127a80 	call	100127a8 <usleep>

	while(1)
	{
		toggle++;
10000f34:	e0bfe483 	ldbu	r2,-110(fp)
10000f38:	10800044 	addi	r2,r2,1
10000f3c:	e0bfe485 	stb	r2,-110(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
10000f40:	01000084 	movi	r4,2
10000f44:	01414004 	movi	r5,1280
10000f48:	00002480 	call	10000248 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10000f4c:	0009883a 	mov	r4,zero
10000f50:	01414704 	movi	r5,1308
10000f54:	00002480 	call	10000248 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000f58:	e0bfee03 	ldbu	r2,-72(fp)
10000f5c:	108003cc 	andi	r2,r2,15
10000f60:	0009883a 	mov	r4,zero
10000f64:	100b883a 	mov	r5,r2
10000f68:	00002480 	call	10000248 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000f6c:	0009883a 	mov	r4,zero
10000f70:	0140a444 	movi	r5,657
10000f74:	00002480 	call	10000248 <IO_write>
		if(toggle%2)
10000f78:	e0bfe483 	ldbu	r2,-110(fp)
10000f7c:	1080004c 	andi	r2,r2,1
10000f80:	10803fcc 	andi	r2,r2,255
10000f84:	10000426 	beq	r2,zero,10000f98 <main+0xb08>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10000f88:	0009883a 	mov	r4,zero
10000f8c:	01400044 	movi	r5,1
10000f90:	00002480 	call	10000248 <IO_write>
10000f94:	00000306 	br	10000fa4 <main+0xb14>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10000f98:	0009883a 	mov	r4,zero
10000f9c:	01401044 	movi	r5,65
10000fa0:	00002480 	call	10000248 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10000fa4:	0009883a 	mov	r4,zero
10000fa8:	014004c4 	movi	r5,19
10000fac:	00002480 	call	10000248 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
10000fb0:	0009883a 	mov	r4,zero
10000fb4:	000b883a 	mov	r5,zero
10000fb8:	00002480 	call	10000248 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000fbc:	01006c04 	movi	r4,432
10000fc0:	01414004 	movi	r5,1280
10000fc4:	0001e740 	call	10001e74 <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000fc8:	00002406 	br	1000105c <main+0xbcc>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
10000fcc:	01000084 	movi	r4,2
10000fd0:	01414004 	movi	r5,1280
10000fd4:	00002480 	call	10000248 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
10000fd8:	0009883a 	mov	r4,zero
10000fdc:	01414704 	movi	r5,1308
10000fe0:	00002480 	call	10000248 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000fe4:	e0bfee03 	ldbu	r2,-72(fp)
10000fe8:	108003cc 	andi	r2,r2,15
10000fec:	0009883a 	mov	r4,zero
10000ff0:	100b883a 	mov	r5,r2
10000ff4:	00002480 	call	10000248 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000ff8:	0009883a 	mov	r4,zero
10000ffc:	0140a444 	movi	r5,657
10001000:	00002480 	call	10000248 <IO_write>
			if(toggle%2)
10001004:	e0bfe483 	ldbu	r2,-110(fp)
10001008:	1080004c 	andi	r2,r2,1
1000100c:	10803fcc 	andi	r2,r2,255
10001010:	10000426 	beq	r2,zero,10001024 <main+0xb94>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10001014:	0009883a 	mov	r4,zero
10001018:	01400044 	movi	r5,1
1000101c:	00002480 	call	10000248 <IO_write>
10001020:	00000306 	br	10001030 <main+0xba0>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
10001024:	0009883a 	mov	r4,zero
10001028:	01401044 	movi	r5,65
1000102c:	00002480 	call	10000248 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
10001030:	0009883a 	mov	r4,zero
10001034:	014004c4 	movi	r5,19
10001038:	00002480 	call	10000248 <IO_write>
			IO_write(HPI_DATA,0x0000);//
1000103c:	0009883a 	mov	r4,zero
10001040:	000b883a 	mov	r5,zero
10001044:	00002480 	call	10000248 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001048:	01006c04 	movi	r4,432
1000104c:	01414004 	movi	r5,1280
10001050:	0001e740 	call	10001e74 <UsbWrite>
			usleep(10*1000);
10001054:	0109c404 	movi	r4,10000
10001058:	00127a80 	call	100127a8 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000105c:	010000c4 	movi	r4,3
10001060:	00002b40 	call	100002b4 <IO_read>
10001064:	10bfffcc 	andi	r2,r2,65535
10001068:	1080040c 	andi	r2,r2,16
1000106c:	103fd726 	beq	r2,zero,10000fcc <__alt_data_end+0xf8000fcc>
			usleep(10*1000);
		}//end while



		usb_ctl_val = UsbWaitTDListDone();
10001070:	0002e400 	call	10002e40 <UsbWaitTDListDone>
10001074:	e0bfe40d 	sth	r2,-112(fp)

		// packet starts from 0x051c, reading third byte
		// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
		IO_write(HPI_ADDR,0x051e); //the start address
10001078:	01000084 	movi	r4,2
1000107c:	01414784 	movi	r5,1310
10001080:	00002480 	call	10000248 <IO_write>
		keycode = IO_read(HPI_DATA);
10001084:	0009883a 	mov	r4,zero
10001088:	00002b40 	call	100002b4 <IO_read>
1000108c:	10bfffcc 	andi	r2,r2,65535
10001090:	e0bfec15 	stw	r2,-80(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
10001094:	01040074 	movhi	r4,4097
10001098:	2113bb04 	addi	r4,r4,20204
1000109c:	e17fec17 	ldw	r5,-80(fp)
100010a0:	0007eec0 	call	10007eec <printf>
		IOWR(KEYCODE_BASE, 0, keycode & 0xff);
100010a4:	e0bfec17 	ldw	r2,-80(fp)
100010a8:	10c03fcc 	andi	r3,r2,255
100010ac:	00804404 	movi	r2,272
100010b0:	10c00035 	stwio	r3,0(r2)

		/* logics to calculate trajectory positiions */

			// might have issue with double stroke case !!!!!!!!!!!!!!!!!!!!!!!!!!! will be take cared later

			keycode_after_mask = keycode & 0xff;
100010b4:	e0bfec17 	ldw	r2,-80(fp)
100010b8:	10803fcc 	andi	r2,r2,255
100010bc:	e0bfef15 	stw	r2,-68(fp)

			//attack by P1 is asserted: "J"
			if ( *game_turn_addr == 1 && keycode_after_mask==13)
100010c0:	00801004 	movi	r2,64
100010c4:	10800017 	ldw	r2,0(r2)
100010c8:	10800058 	cmpnei	r2,r2,1
100010cc:	1003191e 	bne	r2,zero,10001d34 <main+0x18a4>
100010d0:	e0bfef17 	ldw	r2,-68(fp)
100010d4:	10800358 	cmpnei	r2,r2,13
100010d8:	1003161e 	bne	r2,zero,10001d34 <main+0x18a4>
			{



				//first get info needed for calculation
				ball1_x = (*ball1_pos) & 0x3ff ; // get the lowest 10 bits
100010dc:	00801804 	movi	r2,96
100010e0:	10800017 	ldw	r2,0(r2)
100010e4:	1080ffcc 	andi	r2,r2,1023
100010e8:	e0bff015 	stw	r2,-64(fp)
				ball1_y = ((*ball1_pos) >> 10) & 0x3ff; // get the [19:10] bits
100010ec:	00801804 	movi	r2,96
100010f0:	10800017 	ldw	r2,0(r2)
100010f4:	1005d2ba 	srai	r2,r2,10
100010f8:	1080ffcc 	andi	r2,r2,1023
100010fc:	e0bff115 	stw	r2,-60(fp)
				//ball2_y = ((*ball2_pos) >> 10) & 0x3ff; // get the [19:10] bits
				//ball2_x = (*ball2_pos) & 0x3ff ; // get the lowest 10 bits
				temp_x = (int) (*p1_old_pos_to_sw) & 0x3ff;  // get the lowest 10 bits
10001100:	00802804 	movi	r2,160
10001104:	10800017 	ldw	r2,0(r2)
10001108:	1080ffcc 	andi	r2,r2,1023
1000110c:	e0bfe815 	stw	r2,-96(fp)
				temp_y = (int) ((*p1_old_pos_to_sw) >> 10) & 0x3ff; // get the [19:10] bits
10001110:	00802804 	movi	r2,160
10001114:	10800017 	ldw	r2,0(r2)
10001118:	1005d2ba 	srai	r2,r2,10
1000111c:	1080ffcc 	andi	r2,r2,1023
10001120:	e0bfe915 	stw	r2,-92(fp)
				ch2_x = (*p2_old_pos_to_sw) & 0x3ff; // get the lowest 10 bits
10001124:	00801c04 	movi	r2,112
10001128:	10800017 	ldw	r2,0(r2)
1000112c:	1080ffcc 	andi	r2,r2,1023
10001130:	e0bff215 	stw	r2,-56(fp)
				ch2_y = ((*p2_old_pos_to_sw) >> 10) & 0x3ff; // get the [19:10] bits
10001134:	00801c04 	movi	r2,112
10001138:	10800017 	ldw	r2,0(r2)
1000113c:	1005d2ba 	srai	r2,r2,10
10001140:	1080ffcc 	andi	r2,r2,1023
10001144:	e0bff315 	stw	r2,-52(fp)
				wp_mode1 = ((*ball1_pos) >> 20) & 1; // get [20]
10001148:	00801804 	movi	r2,96
1000114c:	10800017 	ldw	r2,0(r2)
10001150:	1005d53a 	srai	r2,r2,20
10001154:	1080004c 	andi	r2,r2,1
10001158:	e0bff415 	stw	r2,-48(fp)
				power1 = (*power_angle) & 0xf ;   //get lowest four bits
1000115c:	00802404 	movi	r2,144
10001160:	10800017 	ldw	r2,0(r2)
10001164:	108003cc 	andi	r2,r2,15
10001168:	e0bff515 	stw	r2,-44(fp)
				angle1 = ((*power_angle) >> 4 ) & 0xf; // get [7:4]
1000116c:	00802404 	movi	r2,144
10001170:	10800017 	ldw	r2,0(r2)
10001174:	1005d13a 	srai	r2,r2,4
10001178:	108003cc 	andi	r2,r2,15
1000117c:	e0bfe515 	stw	r2,-108(fp)
				power2 = ((*power_angle) >> 8 ) & 0xf; // get [11:8]
10001180:	00802404 	movi	r2,144
10001184:	10800017 	ldw	r2,0(r2)
10001188:	1005d23a 	srai	r2,r2,8
1000118c:	108003cc 	andi	r2,r2,15
10001190:	e0bff615 	stw	r2,-40(fp)
				angle2 = ((*power_angle) >> 12 ) & 0xf; // get [15:12]
10001194:	00802404 	movi	r2,144
10001198:	10800017 	ldw	r2,0(r2)
1000119c:	1005d33a 	srai	r2,r2,12
100011a0:	108003cc 	andi	r2,r2,15
100011a4:	e0bff715 	stw	r2,-36(fp)
				//game_turn = *gifame_turn_addr &  0x3; //get the LSB 2 bit
				//vsync_sig = *vsync ; // could be removed

			   	if(angle1 == 15)
100011a8:	e0bfe517 	ldw	r2,-108(fp)
100011ac:	108003d8 	cmpnei	r2,r2,15
100011b0:	1000031e 	bne	r2,zero,100011c0 <main+0xd30>
			   		angle1--; // so as to avoid shooting vertically, the range should be between 0-14 inclusive
100011b4:	e0bfe517 	ldw	r2,-108(fp)
100011b8:	10bfffc4 	addi	r2,r2,-1
100011bc:	e0bfe515 	stw	r2,-108(fp)

			    vx = power_scale * power1*cos(M_PI * (angle1 + 1) / 32);  // the inital vx and vy depending on the power and angle
100011c0:	e13ff517 	ldw	r4,-44(fp)
100011c4:	0007d7c0 	call	10007d7c <__floatsidf>
100011c8:	1021883a 	mov	r16,r2
100011cc:	1823883a 	mov	r17,r3
100011d0:	e0bfe517 	ldw	r2,-108(fp)
100011d4:	10800044 	addi	r2,r2,1
100011d8:	1009883a 	mov	r4,r2
100011dc:	0007d7c0 	call	10007d7c <__floatsidf>
100011e0:	100b883a 	mov	r5,r2
100011e4:	180d883a 	mov	r6,r3
100011e8:	2809883a 	mov	r4,r5
100011ec:	300b883a 	mov	r5,r6
100011f0:	01951134 	movhi	r6,21572
100011f4:	318b4604 	addi	r6,r6,11544
100011f8:	01d00274 	movhi	r7,16393
100011fc:	39c87ec4 	addi	r7,r7,8699
10001200:	0006bb80 	call	10006bb8 <__muldf3>
10001204:	1009883a 	mov	r4,r2
10001208:	180b883a 	mov	r5,r3
1000120c:	2005883a 	mov	r2,r4
10001210:	2807883a 	mov	r3,r5
10001214:	1009883a 	mov	r4,r2
10001218:	180b883a 	mov	r5,r3
1000121c:	000d883a 	mov	r6,zero
10001220:	01d01034 	movhi	r7,16448
10001224:	0005ff40 	call	10005ff4 <__divdf3>
10001228:	1009883a 	mov	r4,r2
1000122c:	180b883a 	mov	r5,r3
10001230:	2005883a 	mov	r2,r4
10001234:	2807883a 	mov	r3,r5
10001238:	1009883a 	mov	r4,r2
1000123c:	180b883a 	mov	r5,r3
10001240:	0002fc00 	call	10002fc0 <cos>
10001244:	100f883a 	mov	r7,r2
10001248:	1811883a 	mov	r8,r3
1000124c:	8009883a 	mov	r4,r16
10001250:	880b883a 	mov	r5,r17
10001254:	380d883a 	mov	r6,r7
10001258:	400f883a 	mov	r7,r8
1000125c:	0006bb80 	call	10006bb8 <__muldf3>
10001260:	1009883a 	mov	r4,r2
10001264:	180b883a 	mov	r5,r3
10001268:	e13ff815 	stw	r4,-32(fp)
1000126c:	e17ff915 	stw	r5,-28(fp)
			    vy = -power_scale * power1*sin(M_PI * (angle1 + 1) / 32); // it is negative becuase downward is set to be the positve y direction
10001270:	e0bff517 	ldw	r2,-44(fp)
10001274:	0085c83a 	sub	r2,zero,r2
10001278:	1009883a 	mov	r4,r2
1000127c:	0007d7c0 	call	10007d7c <__floatsidf>
10001280:	1021883a 	mov	r16,r2
10001284:	1823883a 	mov	r17,r3
10001288:	e0bfe517 	ldw	r2,-108(fp)
1000128c:	10800044 	addi	r2,r2,1
10001290:	1009883a 	mov	r4,r2
10001294:	0007d7c0 	call	10007d7c <__floatsidf>
10001298:	100b883a 	mov	r5,r2
1000129c:	180d883a 	mov	r6,r3
100012a0:	2809883a 	mov	r4,r5
100012a4:	300b883a 	mov	r5,r6
100012a8:	01951134 	movhi	r6,21572
100012ac:	318b4604 	addi	r6,r6,11544
100012b0:	01d00274 	movhi	r7,16393
100012b4:	39c87ec4 	addi	r7,r7,8699
100012b8:	0006bb80 	call	10006bb8 <__muldf3>
100012bc:	1009883a 	mov	r4,r2
100012c0:	180b883a 	mov	r5,r3
100012c4:	2005883a 	mov	r2,r4
100012c8:	2807883a 	mov	r3,r5
100012cc:	1009883a 	mov	r4,r2
100012d0:	180b883a 	mov	r5,r3
100012d4:	000d883a 	mov	r6,zero
100012d8:	01d01034 	movhi	r7,16448
100012dc:	0005ff40 	call	10005ff4 <__divdf3>
100012e0:	1009883a 	mov	r4,r2
100012e4:	180b883a 	mov	r5,r3
100012e8:	2005883a 	mov	r2,r4
100012ec:	2807883a 	mov	r3,r5
100012f0:	1009883a 	mov	r4,r2
100012f4:	180b883a 	mov	r5,r3
100012f8:	00030ac0 	call	100030ac <sin>
100012fc:	100f883a 	mov	r7,r2
10001300:	1811883a 	mov	r8,r3
10001304:	8009883a 	mov	r4,r16
10001308:	880b883a 	mov	r5,r17
1000130c:	380d883a 	mov	r6,r7
10001310:	400f883a 	mov	r7,r8
10001314:	0006bb80 	call	10006bb8 <__muldf3>
10001318:	1009883a 	mov	r4,r2
1000131c:	180b883a 	mov	r5,r3
10001320:	e13fe615 	stw	r4,-104(fp)
10001324:	e17fe715 	stw	r5,-100(fp)



			    // using two different calculate models depending on the actual value of weapon mode

			    if(wp_mode1==0)
10001328:	e0bff417 	ldw	r2,-48(fp)
1000132c:	1002811e 	bne	r2,zero,10001d34 <main+0x18a4>
			    {
			    	// cannon ball, no rebounce
					START_OF_MODE_1: ;


					if( (int)(temp_x+ vx*delta_t) >= ch2_x && (int)(temp_x+ vx*delta_t) < (ch2_x+ ch2_x_size) && (int)(temp_y+ vy*delta_t)>= ch2_y && (int)(temp_y+ vy*delta_t)< (ch2_y + ch2_y_size) )
10001330:	e13fe817 	ldw	r4,-96(fp)
10001334:	0007d7c0 	call	10007d7c <__floatsidf>
10001338:	1021883a 	mov	r16,r2
1000133c:	1823883a 	mov	r17,r3
10001340:	e13ff817 	ldw	r4,-32(fp)
10001344:	e17ff917 	ldw	r5,-28(fp)
10001348:	01844474 	movhi	r6,4369
1000134c:	318da644 	addi	r6,r6,13977
10001350:	01cfe474 	movhi	r7,16273
10001354:	39c44444 	addi	r7,r7,4369
10001358:	0006bb80 	call	10006bb8 <__muldf3>
1000135c:	1009883a 	mov	r4,r2
10001360:	180b883a 	mov	r5,r3
10001364:	2005883a 	mov	r2,r4
10001368:	2807883a 	mov	r3,r5
1000136c:	8009883a 	mov	r4,r16
10001370:	880b883a 	mov	r5,r17
10001374:	100d883a 	mov	r6,r2
10001378:	180f883a 	mov	r7,r3
1000137c:	00057580 	call	10005758 <__adddf3>
10001380:	1009883a 	mov	r4,r2
10001384:	180b883a 	mov	r5,r3
10001388:	2005883a 	mov	r2,r4
1000138c:	2807883a 	mov	r3,r5
10001390:	1009883a 	mov	r4,r2
10001394:	180b883a 	mov	r5,r3
10001398:	0007cf40 	call	10007cf4 <__fixdfsi>
1000139c:	1007883a 	mov	r3,r2
100013a0:	e0bff217 	ldw	r2,-56(fp)
100013a4:	1880ad16 	blt	r3,r2,1000165c <main+0x11cc>
100013a8:	e13fe817 	ldw	r4,-96(fp)
100013ac:	0007d7c0 	call	10007d7c <__floatsidf>
100013b0:	1021883a 	mov	r16,r2
100013b4:	1823883a 	mov	r17,r3
100013b8:	e13ff817 	ldw	r4,-32(fp)
100013bc:	e17ff917 	ldw	r5,-28(fp)
100013c0:	01844474 	movhi	r6,4369
100013c4:	318da644 	addi	r6,r6,13977
100013c8:	01cfe474 	movhi	r7,16273
100013cc:	39c44444 	addi	r7,r7,4369
100013d0:	0006bb80 	call	10006bb8 <__muldf3>
100013d4:	1009883a 	mov	r4,r2
100013d8:	180b883a 	mov	r5,r3
100013dc:	2005883a 	mov	r2,r4
100013e0:	2807883a 	mov	r3,r5
100013e4:	8009883a 	mov	r4,r16
100013e8:	880b883a 	mov	r5,r17
100013ec:	100d883a 	mov	r6,r2
100013f0:	180f883a 	mov	r7,r3
100013f4:	00057580 	call	10005758 <__adddf3>
100013f8:	1009883a 	mov	r4,r2
100013fc:	180b883a 	mov	r5,r3
10001400:	2005883a 	mov	r2,r4
10001404:	2807883a 	mov	r3,r5
10001408:	1009883a 	mov	r4,r2
1000140c:	180b883a 	mov	r5,r3
10001410:	0007cf40 	call	10007cf4 <__fixdfsi>
10001414:	1007883a 	mov	r3,r2
10001418:	e0bff217 	ldw	r2,-56(fp)
1000141c:	10800404 	addi	r2,r2,16
10001420:	18808e0e 	bge	r3,r2,1000165c <main+0x11cc>
10001424:	e13fe917 	ldw	r4,-92(fp)
10001428:	0007d7c0 	call	10007d7c <__floatsidf>
1000142c:	1021883a 	mov	r16,r2
10001430:	1823883a 	mov	r17,r3
10001434:	e13fe617 	ldw	r4,-104(fp)
10001438:	e17fe717 	ldw	r5,-100(fp)
1000143c:	01844474 	movhi	r6,4369
10001440:	318da644 	addi	r6,r6,13977
10001444:	01cfe474 	movhi	r7,16273
10001448:	39c44444 	addi	r7,r7,4369
1000144c:	0006bb80 	call	10006bb8 <__muldf3>
10001450:	1009883a 	mov	r4,r2
10001454:	180b883a 	mov	r5,r3
10001458:	2005883a 	mov	r2,r4
1000145c:	2807883a 	mov	r3,r5
10001460:	8009883a 	mov	r4,r16
10001464:	880b883a 	mov	r5,r17
10001468:	100d883a 	mov	r6,r2
1000146c:	180f883a 	mov	r7,r3
10001470:	00057580 	call	10005758 <__adddf3>
10001474:	1009883a 	mov	r4,r2
10001478:	180b883a 	mov	r5,r3
1000147c:	2005883a 	mov	r2,r4
10001480:	2807883a 	mov	r3,r5
10001484:	1009883a 	mov	r4,r2
10001488:	180b883a 	mov	r5,r3
1000148c:	0007cf40 	call	10007cf4 <__fixdfsi>
10001490:	1007883a 	mov	r3,r2
10001494:	e0bff317 	ldw	r2,-52(fp)
10001498:	18807016 	blt	r3,r2,1000165c <main+0x11cc>
1000149c:	e13fe917 	ldw	r4,-92(fp)
100014a0:	0007d7c0 	call	10007d7c <__floatsidf>
100014a4:	1021883a 	mov	r16,r2
100014a8:	1823883a 	mov	r17,r3
100014ac:	e13fe617 	ldw	r4,-104(fp)
100014b0:	e17fe717 	ldw	r5,-100(fp)
100014b4:	01844474 	movhi	r6,4369
100014b8:	318da644 	addi	r6,r6,13977
100014bc:	01cfe474 	movhi	r7,16273
100014c0:	39c44444 	addi	r7,r7,4369
100014c4:	0006bb80 	call	10006bb8 <__muldf3>
100014c8:	1009883a 	mov	r4,r2
100014cc:	180b883a 	mov	r5,r3
100014d0:	2005883a 	mov	r2,r4
100014d4:	2807883a 	mov	r3,r5
100014d8:	8009883a 	mov	r4,r16
100014dc:	880b883a 	mov	r5,r17
100014e0:	100d883a 	mov	r6,r2
100014e4:	180f883a 	mov	r7,r3
100014e8:	00057580 	call	10005758 <__adddf3>
100014ec:	1009883a 	mov	r4,r2
100014f0:	180b883a 	mov	r5,r3
100014f4:	2005883a 	mov	r2,r4
100014f8:	2807883a 	mov	r3,r5
100014fc:	1009883a 	mov	r4,r2
10001500:	180b883a 	mov	r5,r3
10001504:	0007cf40 	call	10007cf4 <__fixdfsi>
10001508:	1007883a 	mov	r3,r2
1000150c:	e0bff317 	ldw	r2,-52(fp)
10001510:	10800604 	addi	r2,r2,24
10001514:	1880510e 	bge	r3,r2,1000165c <main+0x11cc>
				    {
				    	// end_condition 1, it hits the rival
				    	vy = vy + gravity_const* delta_t;
10001518:	e13fe617 	ldw	r4,-104(fp)
1000151c:	e17fe717 	ldw	r5,-100(fp)
10001520:	0193a0b4 	movhi	r6,20098
10001524:	31b8b884 	addi	r6,r6,-7454
10001528:	01cff174 	movhi	r7,16325
1000152c:	39fa06c4 	addi	r7,r7,-6117
10001530:	00057580 	call	10005758 <__adddf3>
10001534:	1009883a 	mov	r4,r2
10001538:	180b883a 	mov	r5,r3
1000153c:	e13fe615 	stw	r4,-104(fp)
10001540:	e17fe715 	stw	r5,-100(fp)
				    	harm1 = 25 ; // full harm
10001544:	00800644 	movi	r2,25
10001548:	e0bfea15 	stw	r2,-88(fp)
				    	temp_y = (int)(temp_y+ vy*delta_t);
1000154c:	e13fe917 	ldw	r4,-92(fp)
10001550:	0007d7c0 	call	10007d7c <__floatsidf>
10001554:	1021883a 	mov	r16,r2
10001558:	1823883a 	mov	r17,r3
1000155c:	e13fe617 	ldw	r4,-104(fp)
10001560:	e17fe717 	ldw	r5,-100(fp)
10001564:	01844474 	movhi	r6,4369
10001568:	318da644 	addi	r6,r6,13977
1000156c:	01cfe474 	movhi	r7,16273
10001570:	39c44444 	addi	r7,r7,4369
10001574:	0006bb80 	call	10006bb8 <__muldf3>
10001578:	1009883a 	mov	r4,r2
1000157c:	180b883a 	mov	r5,r3
10001580:	2005883a 	mov	r2,r4
10001584:	2807883a 	mov	r3,r5
10001588:	8009883a 	mov	r4,r16
1000158c:	880b883a 	mov	r5,r17
10001590:	100d883a 	mov	r6,r2
10001594:	180f883a 	mov	r7,r3
10001598:	00057580 	call	10005758 <__adddf3>
1000159c:	1009883a 	mov	r4,r2
100015a0:	180b883a 	mov	r5,r3
100015a4:	2005883a 	mov	r2,r4
100015a8:	2807883a 	mov	r3,r5
100015ac:	1009883a 	mov	r4,r2
100015b0:	180b883a 	mov	r5,r3
100015b4:	0007cf40 	call	10007cf4 <__fixdfsi>
100015b8:	e0bfe915 	stw	r2,-92(fp)
				    	*new_pos_to_hw = 0x40000000 + (harm1 << 20) + ( temp_y << 10) + temp_x;
100015bc:	00802c04 	movi	r2,176
100015c0:	e0ffea17 	ldw	r3,-88(fp)
100015c4:	1808953a 	slli	r4,r3,20
100015c8:	00d00034 	movhi	r3,16384
100015cc:	20c9883a 	add	r4,r4,r3
100015d0:	e0ffe917 	ldw	r3,-92(fp)
100015d4:	180692ba 	slli	r3,r3,10
100015d8:	20c9883a 	add	r4,r4,r3
100015dc:	e0ffe817 	ldw	r3,-96(fp)
100015e0:	20c7883a 	add	r3,r4,r3
100015e4:	10c00015 	stw	r3,0(r2)

				    	printf("get to here !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1\n\n\n\n\n");
100015e8:	01040074 	movhi	r4,4097
100015ec:	2113c404 	addi	r4,r4,20240
100015f0:	0007fe00 	call	10007fe0 <puts>
				    	while (*vsync != 1 ) ;  // wait for the next frame_clk, so that the value could be mainitained before
100015f4:	0001883a 	nop
100015f8:	00802004 	movi	r2,128
100015fc:	10800003 	ldbu	r2,0(r2)
10001600:	10803fcc 	andi	r2,r2,255
10001604:	1080201c 	xori	r2,r2,128
10001608:	10bfe004 	addi	r2,r2,-128
1000160c:	10800058 	cmpnei	r2,r2,1
10001610:	103ff91e 	bne	r2,zero,100015f8 <__alt_data_end+0xf80015f8>
						while (*vsync != 0 ) ;
10001614:	0001883a 	nop
10001618:	00802004 	movi	r2,128
1000161c:	10800003 	ldbu	r2,0(r2)
10001620:	10803fcc 	andi	r2,r2,255
10001624:	1080201c 	xori	r2,r2,128
10001628:	10bfe004 	addi	r2,r2,-128
1000162c:	103ffa1e 	bne	r2,zero,10001618 <__alt_data_end+0xf8001618>
						while (*vsync != 1 ) ;
10001630:	0001883a 	nop
10001634:	00802004 	movi	r2,128
10001638:	10800003 	ldbu	r2,0(r2)
1000163c:	10803fcc 	andi	r2,r2,255
10001640:	1080201c 	xori	r2,r2,128
10001644:	10bfe004 	addi	r2,r2,-128
10001648:	10800058 	cmpnei	r2,r2,1
1000164c:	103ff91e 	bne	r2,zero,10001634 <__alt_data_end+0xf8001634>
						// jump out of the condition and proceed to get the next keyboard value

						//clear the value of the output
						*new_pos_to_hw = 0;
10001650:	00802c04 	movi	r2,176
10001654:	10000015 	stw	zero,0(r2)
						goto GET_NEXT_KEYBOARD;
10001658:	0001b606 	br	10001d34 <main+0x18a4>
				    }
				    // determine if the updated position is out of bound
				    else if( (int)(temp_x+ vx*delta_t) >= 640 || (int)(temp_y+ vy*delta_t) < 0 || (int)(temp_y+ vy*delta_t) >= 480 )
1000165c:	e13fe817 	ldw	r4,-96(fp)
10001660:	0007d7c0 	call	10007d7c <__floatsidf>
10001664:	1021883a 	mov	r16,r2
10001668:	1823883a 	mov	r17,r3
1000166c:	e13ff817 	ldw	r4,-32(fp)
10001670:	e17ff917 	ldw	r5,-28(fp)
10001674:	01844474 	movhi	r6,4369
10001678:	318da644 	addi	r6,r6,13977
1000167c:	01cfe474 	movhi	r7,16273
10001680:	39c44444 	addi	r7,r7,4369
10001684:	0006bb80 	call	10006bb8 <__muldf3>
10001688:	1009883a 	mov	r4,r2
1000168c:	180b883a 	mov	r5,r3
10001690:	2005883a 	mov	r2,r4
10001694:	2807883a 	mov	r3,r5
10001698:	8009883a 	mov	r4,r16
1000169c:	880b883a 	mov	r5,r17
100016a0:	100d883a 	mov	r6,r2
100016a4:	180f883a 	mov	r7,r3
100016a8:	00057580 	call	10005758 <__adddf3>
100016ac:	1009883a 	mov	r4,r2
100016b0:	180b883a 	mov	r5,r3
100016b4:	2005883a 	mov	r2,r4
100016b8:	2807883a 	mov	r3,r5
100016bc:	1009883a 	mov	r4,r2
100016c0:	180b883a 	mov	r5,r3
100016c4:	0007cf40 	call	10007cf4 <__fixdfsi>
100016c8:	1080a008 	cmpgei	r2,r2,640
100016cc:	1000391e 	bne	r2,zero,100017b4 <main+0x1324>
100016d0:	e13fe917 	ldw	r4,-92(fp)
100016d4:	0007d7c0 	call	10007d7c <__floatsidf>
100016d8:	1021883a 	mov	r16,r2
100016dc:	1823883a 	mov	r17,r3
100016e0:	e13fe617 	ldw	r4,-104(fp)
100016e4:	e17fe717 	ldw	r5,-100(fp)
100016e8:	01844474 	movhi	r6,4369
100016ec:	318da644 	addi	r6,r6,13977
100016f0:	01cfe474 	movhi	r7,16273
100016f4:	39c44444 	addi	r7,r7,4369
100016f8:	0006bb80 	call	10006bb8 <__muldf3>
100016fc:	1009883a 	mov	r4,r2
10001700:	180b883a 	mov	r5,r3
10001704:	2005883a 	mov	r2,r4
10001708:	2807883a 	mov	r3,r5
1000170c:	8009883a 	mov	r4,r16
10001710:	880b883a 	mov	r5,r17
10001714:	100d883a 	mov	r6,r2
10001718:	180f883a 	mov	r7,r3
1000171c:	00057580 	call	10005758 <__adddf3>
10001720:	1009883a 	mov	r4,r2
10001724:	180b883a 	mov	r5,r3
10001728:	2005883a 	mov	r2,r4
1000172c:	2807883a 	mov	r3,r5
10001730:	1009883a 	mov	r4,r2
10001734:	180b883a 	mov	r5,r3
10001738:	0007cf40 	call	10007cf4 <__fixdfsi>
1000173c:	10001d16 	blt	r2,zero,100017b4 <main+0x1324>
10001740:	e13fe917 	ldw	r4,-92(fp)
10001744:	0007d7c0 	call	10007d7c <__floatsidf>
10001748:	1021883a 	mov	r16,r2
1000174c:	1823883a 	mov	r17,r3
10001750:	e13fe617 	ldw	r4,-104(fp)
10001754:	e17fe717 	ldw	r5,-100(fp)
10001758:	01844474 	movhi	r6,4369
1000175c:	318da644 	addi	r6,r6,13977
10001760:	01cfe474 	movhi	r7,16273
10001764:	39c44444 	addi	r7,r7,4369
10001768:	0006bb80 	call	10006bb8 <__muldf3>
1000176c:	1009883a 	mov	r4,r2
10001770:	180b883a 	mov	r5,r3
10001774:	2005883a 	mov	r2,r4
10001778:	2807883a 	mov	r3,r5
1000177c:	8009883a 	mov	r4,r16
10001780:	880b883a 	mov	r5,r17
10001784:	100d883a 	mov	r6,r2
10001788:	180f883a 	mov	r7,r3
1000178c:	00057580 	call	10005758 <__adddf3>
10001790:	1009883a 	mov	r4,r2
10001794:	180b883a 	mov	r5,r3
10001798:	2005883a 	mov	r2,r4
1000179c:	2807883a 	mov	r3,r5
100017a0:	1009883a 	mov	r4,r2
100017a4:	180b883a 	mov	r5,r3
100017a8:	0007cf40 	call	10007cf4 <__fixdfsi>
100017ac:	10807810 	cmplti	r2,r2,480
100017b0:	1001001e 	bne	r2,zero,10001bb4 <main+0x1724>
				    {
				    	/* this is the end condition 2, should set the end_set1 signal back to hardware */
				    	printf("get to here !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!2\n\n\n\n\n");
100017b4:	01040074 	movhi	r4,4097
100017b8:	2113d304 	addi	r4,r4,20300
100017bc:	0007fe00 	call	10007fe0 <puts>
				    	// update the value of the address and vx vy, though will not be used
				    	temp_x =  (int)(temp_x+ vx*delta_t) >= 640 ? 639 : (int)(temp_x+ vx*delta_t);
100017c0:	e13fe817 	ldw	r4,-96(fp)
100017c4:	0007d7c0 	call	10007d7c <__floatsidf>
100017c8:	1021883a 	mov	r16,r2
100017cc:	1823883a 	mov	r17,r3
100017d0:	e13ff817 	ldw	r4,-32(fp)
100017d4:	e17ff917 	ldw	r5,-28(fp)
100017d8:	01844474 	movhi	r6,4369
100017dc:	318da644 	addi	r6,r6,13977
100017e0:	01cfe474 	movhi	r7,16273
100017e4:	39c44444 	addi	r7,r7,4369
100017e8:	0006bb80 	call	10006bb8 <__muldf3>
100017ec:	1009883a 	mov	r4,r2
100017f0:	180b883a 	mov	r5,r3
100017f4:	2005883a 	mov	r2,r4
100017f8:	2807883a 	mov	r3,r5
100017fc:	8009883a 	mov	r4,r16
10001800:	880b883a 	mov	r5,r17
10001804:	100d883a 	mov	r6,r2
10001808:	180f883a 	mov	r7,r3
1000180c:	00057580 	call	10005758 <__adddf3>
10001810:	1009883a 	mov	r4,r2
10001814:	180b883a 	mov	r5,r3
10001818:	2005883a 	mov	r2,r4
1000181c:	2807883a 	mov	r3,r5
10001820:	1009883a 	mov	r4,r2
10001824:	180b883a 	mov	r5,r3
10001828:	0007cf40 	call	10007cf4 <__fixdfsi>
1000182c:	10c0a010 	cmplti	r3,r2,640
10001830:	1800011e 	bne	r3,zero,10001838 <main+0x13a8>
10001834:	00809fc4 	movi	r2,639
10001838:	e0bfe815 	stw	r2,-96(fp)

				    	if ((int)(temp_y+ vy*delta_t) < 0)
1000183c:	e13fe917 	ldw	r4,-92(fp)
10001840:	0007d7c0 	call	10007d7c <__floatsidf>
10001844:	1021883a 	mov	r16,r2
10001848:	1823883a 	mov	r17,r3
1000184c:	e13fe617 	ldw	r4,-104(fp)
10001850:	e17fe717 	ldw	r5,-100(fp)
10001854:	01844474 	movhi	r6,4369
10001858:	318da644 	addi	r6,r6,13977
1000185c:	01cfe474 	movhi	r7,16273
10001860:	39c44444 	addi	r7,r7,4369
10001864:	0006bb80 	call	10006bb8 <__muldf3>
10001868:	1009883a 	mov	r4,r2
1000186c:	180b883a 	mov	r5,r3
10001870:	2005883a 	mov	r2,r4
10001874:	2807883a 	mov	r3,r5
10001878:	8009883a 	mov	r4,r16
1000187c:	880b883a 	mov	r5,r17
10001880:	100d883a 	mov	r6,r2
10001884:	180f883a 	mov	r7,r3
10001888:	00057580 	call	10005758 <__adddf3>
1000188c:	1009883a 	mov	r4,r2
10001890:	180b883a 	mov	r5,r3
10001894:	2005883a 	mov	r2,r4
10001898:	2807883a 	mov	r3,r5
1000189c:	1009883a 	mov	r4,r2
100018a0:	180b883a 	mov	r5,r3
100018a4:	0007cf40 	call	10007cf4 <__fixdfsi>
100018a8:	1000020e 	bge	r2,zero,100018b4 <main+0x1424>
				    		temp_y = 0;
100018ac:	e03fe915 	stw	zero,-92(fp)
100018b0:	00003c06 	br	100019a4 <main+0x1514>
				    	else if ((int)(temp_y+ vy*delta_t) >= 480)
100018b4:	e13fe917 	ldw	r4,-92(fp)
100018b8:	0007d7c0 	call	10007d7c <__floatsidf>
100018bc:	1021883a 	mov	r16,r2
100018c0:	1823883a 	mov	r17,r3
100018c4:	e13fe617 	ldw	r4,-104(fp)
100018c8:	e17fe717 	ldw	r5,-100(fp)
100018cc:	01844474 	movhi	r6,4369
100018d0:	318da644 	addi	r6,r6,13977
100018d4:	01cfe474 	movhi	r7,16273
100018d8:	39c44444 	addi	r7,r7,4369
100018dc:	0006bb80 	call	10006bb8 <__muldf3>
100018e0:	1009883a 	mov	r4,r2
100018e4:	180b883a 	mov	r5,r3
100018e8:	2005883a 	mov	r2,r4
100018ec:	2807883a 	mov	r3,r5
100018f0:	8009883a 	mov	r4,r16
100018f4:	880b883a 	mov	r5,r17
100018f8:	100d883a 	mov	r6,r2
100018fc:	180f883a 	mov	r7,r3
10001900:	00057580 	call	10005758 <__adddf3>
10001904:	1009883a 	mov	r4,r2
10001908:	180b883a 	mov	r5,r3
1000190c:	2005883a 	mov	r2,r4
10001910:	2807883a 	mov	r3,r5
10001914:	1009883a 	mov	r4,r2
10001918:	180b883a 	mov	r5,r3
1000191c:	0007cf40 	call	10007cf4 <__fixdfsi>
10001920:	10807810 	cmplti	r2,r2,480
10001924:	1000031e 	bne	r2,zero,10001934 <main+0x14a4>
				    		temp_y = 479;
10001928:	008077c4 	movi	r2,479
1000192c:	e0bfe915 	stw	r2,-92(fp)
10001930:	00001c06 	br	100019a4 <main+0x1514>
				    	else
				    		temp_y = (int)(temp_y+ vy*delta_t);
10001934:	e13fe917 	ldw	r4,-92(fp)
10001938:	0007d7c0 	call	10007d7c <__floatsidf>
1000193c:	1021883a 	mov	r16,r2
10001940:	1823883a 	mov	r17,r3
10001944:	e13fe617 	ldw	r4,-104(fp)
10001948:	e17fe717 	ldw	r5,-100(fp)
1000194c:	01844474 	movhi	r6,4369
10001950:	318da644 	addi	r6,r6,13977
10001954:	01cfe474 	movhi	r7,16273
10001958:	39c44444 	addi	r7,r7,4369
1000195c:	0006bb80 	call	10006bb8 <__muldf3>
10001960:	1009883a 	mov	r4,r2
10001964:	180b883a 	mov	r5,r3
10001968:	2005883a 	mov	r2,r4
1000196c:	2807883a 	mov	r3,r5
10001970:	8009883a 	mov	r4,r16
10001974:	880b883a 	mov	r5,r17
10001978:	100d883a 	mov	r6,r2
1000197c:	180f883a 	mov	r7,r3
10001980:	00057580 	call	10005758 <__adddf3>
10001984:	1009883a 	mov	r4,r2
10001988:	180b883a 	mov	r5,r3
1000198c:	2005883a 	mov	r2,r4
10001990:	2807883a 	mov	r3,r5
10001994:	1009883a 	mov	r4,r2
10001998:	180b883a 	mov	r5,r3
1000199c:	0007cf40 	call	10007cf4 <__fixdfsi>
100019a0:	e0bfe915 	stw	r2,-92(fp)

				    	vy = vy + gravity_const* delta_t;
100019a4:	e13fe617 	ldw	r4,-104(fp)
100019a8:	e17fe717 	ldw	r5,-100(fp)
100019ac:	0193a0b4 	movhi	r6,20098
100019b0:	31b8b884 	addi	r6,r6,-7454
100019b4:	01cff174 	movhi	r7,16325
100019b8:	39fa06c4 	addi	r7,r7,-6117
100019bc:	00057580 	call	10005758 <__adddf3>
100019c0:	1009883a 	mov	r4,r2
100019c4:	180b883a 	mov	r5,r3
100019c8:	e13fe615 	stw	r4,-104(fp)
100019cc:	e17fe715 	stw	r5,-100(fp)

				    	if(dist(temp_x,temp_y,ch2_x,ch2_y) <= 30.0)
100019d0:	e13fe817 	ldw	r4,-96(fp)
100019d4:	0007d7c0 	call	10007d7c <__floatsidf>
100019d8:	1029883a 	mov	r20,r2
100019dc:	182b883a 	mov	r21,r3
100019e0:	e13fe917 	ldw	r4,-92(fp)
100019e4:	0007d7c0 	call	10007d7c <__floatsidf>
100019e8:	1025883a 	mov	r18,r2
100019ec:	1827883a 	mov	r19,r3
100019f0:	e13ff217 	ldw	r4,-56(fp)
100019f4:	0007d7c0 	call	10007d7c <__floatsidf>
100019f8:	1021883a 	mov	r16,r2
100019fc:	1823883a 	mov	r17,r3
10001a00:	e13ff317 	ldw	r4,-52(fp)
10001a04:	0007d7c0 	call	10007d7c <__floatsidf>
10001a08:	1009883a 	mov	r4,r2
10001a0c:	180b883a 	mov	r5,r3
10001a10:	dc000015 	stw	r16,0(sp)
10001a14:	dc400115 	stw	r17,4(sp)
10001a18:	d9000215 	stw	r4,8(sp)
10001a1c:	d9400315 	stw	r5,12(sp)
10001a20:	a009883a 	mov	r4,r20
10001a24:	a80b883a 	mov	r5,r21
10001a28:	900d883a 	mov	r6,r18
10001a2c:	980f883a 	mov	r7,r19
10001a30:	000031c0 	call	1000031c <dist>
10001a34:	100b883a 	mov	r5,r2
10001a38:	180d883a 	mov	r6,r3
10001a3c:	2809883a 	mov	r4,r5
10001a40:	300b883a 	mov	r5,r6
10001a44:	000d883a 	mov	r6,zero
10001a48:	01d00fb4 	movhi	r7,16446
10001a4c:	0006ad80 	call	10006ad8 <__ledf2>
10001a50:	00803216 	blt	zero,r2,10001b1c <main+0x168c>
				    	{
				    		harm1= (int) (dist(temp_x,temp_y,ch2_x,ch2_y)/ 30.0 * 25 );
10001a54:	e13fe817 	ldw	r4,-96(fp)
10001a58:	0007d7c0 	call	10007d7c <__floatsidf>
10001a5c:	1029883a 	mov	r20,r2
10001a60:	182b883a 	mov	r21,r3
10001a64:	e13fe917 	ldw	r4,-92(fp)
10001a68:	0007d7c0 	call	10007d7c <__floatsidf>
10001a6c:	1025883a 	mov	r18,r2
10001a70:	1827883a 	mov	r19,r3
10001a74:	e13ff217 	ldw	r4,-56(fp)
10001a78:	0007d7c0 	call	10007d7c <__floatsidf>
10001a7c:	1021883a 	mov	r16,r2
10001a80:	1823883a 	mov	r17,r3
10001a84:	e13ff317 	ldw	r4,-52(fp)
10001a88:	0007d7c0 	call	10007d7c <__floatsidf>
10001a8c:	1009883a 	mov	r4,r2
10001a90:	180b883a 	mov	r5,r3
10001a94:	dc000015 	stw	r16,0(sp)
10001a98:	dc400115 	stw	r17,4(sp)
10001a9c:	d9000215 	stw	r4,8(sp)
10001aa0:	d9400315 	stw	r5,12(sp)
10001aa4:	a009883a 	mov	r4,r20
10001aa8:	a80b883a 	mov	r5,r21
10001aac:	900d883a 	mov	r6,r18
10001ab0:	980f883a 	mov	r7,r19
10001ab4:	000031c0 	call	1000031c <dist>
10001ab8:	100b883a 	mov	r5,r2
10001abc:	180d883a 	mov	r6,r3
10001ac0:	2809883a 	mov	r4,r5
10001ac4:	300b883a 	mov	r5,r6
10001ac8:	000d883a 	mov	r6,zero
10001acc:	01d00fb4 	movhi	r7,16446
10001ad0:	0005ff40 	call	10005ff4 <__divdf3>
10001ad4:	1009883a 	mov	r4,r2
10001ad8:	180b883a 	mov	r5,r3
10001adc:	2005883a 	mov	r2,r4
10001ae0:	2807883a 	mov	r3,r5
10001ae4:	1009883a 	mov	r4,r2
10001ae8:	180b883a 	mov	r5,r3
10001aec:	000d883a 	mov	r6,zero
10001af0:	01d00e74 	movhi	r7,16441
10001af4:	0006bb80 	call	10006bb8 <__muldf3>
10001af8:	1009883a 	mov	r4,r2
10001afc:	180b883a 	mov	r5,r3
10001b00:	2005883a 	mov	r2,r4
10001b04:	2807883a 	mov	r3,r5
10001b08:	1009883a 	mov	r4,r2
10001b0c:	180b883a 	mov	r5,r3
10001b10:	0007cf40 	call	10007cf4 <__fixdfsi>
10001b14:	e0bfea15 	stw	r2,-88(fp)
10001b18:	00000106 	br	10001b20 <main+0x1690>
				    	}
				    	else
				    	{
				    		harm1=0;
10001b1c:	e03fea15 	stw	zero,-88(fp)
				    	}

				    	//update the value for the signals sent to hardware

				    	*new_pos_to_hw = 0x40000000 + (harm1 << 20) + ( temp_y << 10) + temp_x;
10001b20:	00802c04 	movi	r2,176
10001b24:	e0ffea17 	ldw	r3,-88(fp)
10001b28:	1808953a 	slli	r4,r3,20
10001b2c:	00d00034 	movhi	r3,16384
10001b30:	20c9883a 	add	r4,r4,r3
10001b34:	e0ffe917 	ldw	r3,-92(fp)
10001b38:	180692ba 	slli	r3,r3,10
10001b3c:	20c9883a 	add	r4,r4,r3
10001b40:	e0ffe817 	ldw	r3,-96(fp)
10001b44:	20c7883a 	add	r3,r4,r3
10001b48:	10c00015 	stw	r3,0(r2)


				    	while (*vsync != 1 ) ;  // wait for the next frame_clk, so that the value could be mainitained before
10001b4c:	0001883a 	nop
10001b50:	00802004 	movi	r2,128
10001b54:	10800003 	ldbu	r2,0(r2)
10001b58:	10803fcc 	andi	r2,r2,255
10001b5c:	1080201c 	xori	r2,r2,128
10001b60:	10bfe004 	addi	r2,r2,-128
10001b64:	10800058 	cmpnei	r2,r2,1
10001b68:	103ff91e 	bne	r2,zero,10001b50 <__alt_data_end+0xf8001b50>
						while (*vsync != 0 ) ;
10001b6c:	0001883a 	nop
10001b70:	00802004 	movi	r2,128
10001b74:	10800003 	ldbu	r2,0(r2)
10001b78:	10803fcc 	andi	r2,r2,255
10001b7c:	1080201c 	xori	r2,r2,128
10001b80:	10bfe004 	addi	r2,r2,-128
10001b84:	103ffa1e 	bne	r2,zero,10001b70 <__alt_data_end+0xf8001b70>
						while (*vsync != 1 ) ;
10001b88:	0001883a 	nop
10001b8c:	00802004 	movi	r2,128
10001b90:	10800003 	ldbu	r2,0(r2)
10001b94:	10803fcc 	andi	r2,r2,255
10001b98:	1080201c 	xori	r2,r2,128
10001b9c:	10bfe004 	addi	r2,r2,-128
10001ba0:	10800058 	cmpnei	r2,r2,1
10001ba4:	103ff91e 	bne	r2,zero,10001b8c <__alt_data_end+0xf8001b8c>
						// jump out of the condition and proceed to get the next keyboard value

						//clear the value of the output
						*new_pos_to_hw = 0;
10001ba8:	00802c04 	movi	r2,176
10001bac:	10000015 	stw	zero,0(r2)
						goto GET_NEXT_KEYBOARD;
10001bb0:	00006006 	br	10001d34 <main+0x18a4>

				    }
				    else
				    {
				    	printf("get to here !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!3\n\n\n\n\n");
10001bb4:	01040074 	movhi	r4,4097
10001bb8:	2113e204 	addi	r4,r4,20360
10001bbc:	0007fe00 	call	10007fe0 <puts>
				    	// within the limit, update the x,y position and the vx vy, afterwards send back the new position
				    	temp_x =  (int)(temp_x+ vx*delta_t);
10001bc0:	e13fe817 	ldw	r4,-96(fp)
10001bc4:	0007d7c0 	call	10007d7c <__floatsidf>
10001bc8:	1021883a 	mov	r16,r2
10001bcc:	1823883a 	mov	r17,r3
10001bd0:	e13ff817 	ldw	r4,-32(fp)
10001bd4:	e17ff917 	ldw	r5,-28(fp)
10001bd8:	01844474 	movhi	r6,4369
10001bdc:	318da644 	addi	r6,r6,13977
10001be0:	01cfe474 	movhi	r7,16273
10001be4:	39c44444 	addi	r7,r7,4369
10001be8:	0006bb80 	call	10006bb8 <__muldf3>
10001bec:	1009883a 	mov	r4,r2
10001bf0:	180b883a 	mov	r5,r3
10001bf4:	2005883a 	mov	r2,r4
10001bf8:	2807883a 	mov	r3,r5
10001bfc:	8009883a 	mov	r4,r16
10001c00:	880b883a 	mov	r5,r17
10001c04:	100d883a 	mov	r6,r2
10001c08:	180f883a 	mov	r7,r3
10001c0c:	00057580 	call	10005758 <__adddf3>
10001c10:	1009883a 	mov	r4,r2
10001c14:	180b883a 	mov	r5,r3
10001c18:	2005883a 	mov	r2,r4
10001c1c:	2807883a 	mov	r3,r5
10001c20:	1009883a 	mov	r4,r2
10001c24:	180b883a 	mov	r5,r3
10001c28:	0007cf40 	call	10007cf4 <__fixdfsi>
10001c2c:	e0bfe815 	stw	r2,-96(fp)
				    	temp_y = (int)(temp_y+ vy*delta_t);
10001c30:	e13fe917 	ldw	r4,-92(fp)
10001c34:	0007d7c0 	call	10007d7c <__floatsidf>
10001c38:	1021883a 	mov	r16,r2
10001c3c:	1823883a 	mov	r17,r3
10001c40:	e13fe617 	ldw	r4,-104(fp)
10001c44:	e17fe717 	ldw	r5,-100(fp)
10001c48:	01844474 	movhi	r6,4369
10001c4c:	318da644 	addi	r6,r6,13977
10001c50:	01cfe474 	movhi	r7,16273
10001c54:	39c44444 	addi	r7,r7,4369
10001c58:	0006bb80 	call	10006bb8 <__muldf3>
10001c5c:	1009883a 	mov	r4,r2
10001c60:	180b883a 	mov	r5,r3
10001c64:	2005883a 	mov	r2,r4
10001c68:	2807883a 	mov	r3,r5
10001c6c:	8009883a 	mov	r4,r16
10001c70:	880b883a 	mov	r5,r17
10001c74:	100d883a 	mov	r6,r2
10001c78:	180f883a 	mov	r7,r3
10001c7c:	00057580 	call	10005758 <__adddf3>
10001c80:	1009883a 	mov	r4,r2
10001c84:	180b883a 	mov	r5,r3
10001c88:	2005883a 	mov	r2,r4
10001c8c:	2807883a 	mov	r3,r5
10001c90:	1009883a 	mov	r4,r2
10001c94:	180b883a 	mov	r5,r3
10001c98:	0007cf40 	call	10007cf4 <__fixdfsi>
10001c9c:	e0bfe915 	stw	r2,-92(fp)
				    	vy = vy +gravity_const * delta_t;
10001ca0:	e13fe617 	ldw	r4,-104(fp)
10001ca4:	e17fe717 	ldw	r5,-100(fp)
10001ca8:	0193a0b4 	movhi	r6,20098
10001cac:	31b8b884 	addi	r6,r6,-7454
10001cb0:	01cff174 	movhi	r7,16325
10001cb4:	39fa06c4 	addi	r7,r7,-6117
10001cb8:	00057580 	call	10005758 <__adddf3>
10001cbc:	1009883a 	mov	r4,r2
10001cc0:	180b883a 	mov	r5,r3
10001cc4:	e13fe615 	stw	r4,-104(fp)
10001cc8:	e17fe715 	stw	r5,-100(fp)
				    	while (*vsync != 1 ) ;  // wait for the next frame_clk, so that the value could be mainitained before
10001ccc:	0001883a 	nop
10001cd0:	00802004 	movi	r2,128
10001cd4:	10800003 	ldbu	r2,0(r2)
10001cd8:	10803fcc 	andi	r2,r2,255
10001cdc:	1080201c 	xori	r2,r2,128
10001ce0:	10bfe004 	addi	r2,r2,-128
10001ce4:	10800058 	cmpnei	r2,r2,1
10001ce8:	103ff91e 	bne	r2,zero,10001cd0 <__alt_data_end+0xf8001cd0>
						while (*vsync != 0 ) ;
10001cec:	0001883a 	nop
10001cf0:	00802004 	movi	r2,128
10001cf4:	10800003 	ldbu	r2,0(r2)
10001cf8:	10803fcc 	andi	r2,r2,255
10001cfc:	1080201c 	xori	r2,r2,128
10001d00:	10bfe004 	addi	r2,r2,-128
10001d04:	103ffa1e 	bne	r2,zero,10001cf0 <__alt_data_end+0xf8001cf0>
						while (*vsync != 1 ) ;
10001d08:	0001883a 	nop
10001d0c:	00802004 	movi	r2,128
10001d10:	10800003 	ldbu	r2,0(r2)
10001d14:	10803fcc 	andi	r2,r2,255
10001d18:	1080201c 	xori	r2,r2,128
10001d1c:	10bfe004 	addi	r2,r2,-128
10001d20:	10800058 	cmpnei	r2,r2,1
10001d24:	103ff91e 	bne	r2,zero,10001d0c <__alt_data_end+0xf8001d0c>
						//clear the value of the output
						*new_pos_to_hw = 0;
10001d28:	00802c04 	movi	r2,176
10001d2c:	10000015 	stw	zero,0(r2)
						//while(1);
						goto START_OF_MODE_1;
10001d30:	003d7f06 	br	10001330 <__alt_data_end+0xf8001330>


		GET_NEXT_KEYBOARD: ;


		usleep(200);//usleep(5000);
10001d34:	01003204 	movi	r4,200
10001d38:	00127a80 	call	100127a8 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10001d3c:	d0a6cd0b 	ldhu	r2,-25804(gp)
10001d40:	10bfffcc 	andi	r2,r2,65535
10001d44:	1009883a 	mov	r4,r2
10001d48:	0001ec80 	call	10001ec8 <UsbRead>
10001d4c:	e0bfe40d 	sth	r2,-112(fp)

		if(!(usb_ctl_val & no_device))
10001d50:	d0a6cd8b 	ldhu	r2,-25802(gp)
10001d54:	e0ffe40b 	ldhu	r3,-112(fp)
10001d58:	1884703a 	and	r2,r3,r2
10001d5c:	10bfffcc 	andi	r2,r2,65535
10001d60:	1000201e 	bne	r2,zero,10001de4 <main+0x1954>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10001d64:	e03fe4c5 	stb	zero,-109(fp)
10001d68:	00001006 	br	10001dac <main+0x191c>
			{
				usleep(5*1000);
10001d6c:	0104e204 	movi	r4,5000
10001d70:	00127a80 	call	100127a8 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
10001d74:	d0a6cd0b 	ldhu	r2,-25804(gp)
10001d78:	10bfffcc 	andi	r2,r2,65535
10001d7c:	1009883a 	mov	r4,r2
10001d80:	0001ec80 	call	10001ec8 <UsbRead>
10001d84:	e0bfe40d 	sth	r2,-112(fp)
				if(usb_ctl_val & no_device) break;
10001d88:	d0a6cd8b 	ldhu	r2,-25802(gp)
10001d8c:	e0ffe40b 	ldhu	r3,-112(fp)
10001d90:	1884703a 	and	r2,r3,r2
10001d94:	10bfffcc 	andi	r2,r2,65535
10001d98:	10000126 	beq	r2,zero,10001da0 <main+0x1910>
10001d9c:	00000606 	br	10001db8 <main+0x1928>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10001da0:	e0bfe4c3 	ldbu	r2,-109(fp)
10001da4:	10800044 	addi	r2,r2,1
10001da8:	e0bfe4c5 	stb	r2,-109(fp)
10001dac:	e0bfe4c3 	ldbu	r2,-109(fp)
10001db0:	108001f0 	cmpltui	r2,r2,7
10001db4:	103fed1e 	bne	r2,zero,10001d6c <__alt_data_end+0xf8001d6c>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
			}
			if(!(usb_ctl_val & no_device))
10001db8:	d0a6cd8b 	ldhu	r2,-25802(gp)
10001dbc:	e0ffe40b 	ldhu	r3,-112(fp)
10001dc0:	1884703a 	and	r2,r3,r2
10001dc4:	10bfffcc 	andi	r2,r2,65535
10001dc8:	1000061e 	bne	r2,zero,10001de4 <main+0x1954>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
10001dcc:	01040074 	movhi	r4,4097
10001dd0:	2113f104 	addi	r4,r4,20420
10001dd4:	0007fe00 	call	10007fe0 <puts>
				printf("[INFO]: please insert again!!! \n");
10001dd8:	01040074 	movhi	r4,4097
10001ddc:	2113fc04 	addi	r4,r4,20464
10001de0:	0007fe00 	call	10007fe0 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
10001de4:	00001d06 	br	10001e5c <main+0x19cc>
		{

			usb_ctl_val = UsbRead(ctl_reg);
10001de8:	d0a6cd0b 	ldhu	r2,-25804(gp)
10001dec:	10bfffcc 	andi	r2,r2,65535
10001df0:	1009883a 	mov	r4,r2
10001df4:	0001ec80 	call	10001ec8 <UsbRead>
10001df8:	e0bfe40d 	sth	r2,-112(fp)
			usleep(5*1000);
10001dfc:	0104e204 	movi	r4,5000
10001e00:	00127a80 	call	100127a8 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001e04:	d0a6cd0b 	ldhu	r2,-25804(gp)
10001e08:	10bfffcc 	andi	r2,r2,65535
10001e0c:	1009883a 	mov	r4,r2
10001e10:	0001ec80 	call	10001ec8 <UsbRead>
10001e14:	e0bfe40d 	sth	r2,-112(fp)
			usleep(5*1000);
10001e18:	0104e204 	movi	r4,5000
10001e1c:	00127a80 	call	100127a8 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001e20:	d0a6cd0b 	ldhu	r2,-25804(gp)
10001e24:	10bfffcc 	andi	r2,r2,65535
10001e28:	1009883a 	mov	r4,r2
10001e2c:	0001ec80 	call	10001ec8 <UsbRead>
10001e30:	e0bfe40d 	sth	r2,-112(fp)
			usleep(5*1000);
10001e34:	0104e204 	movi	r4,5000
10001e38:	00127a80 	call	100127a8 <usleep>

			if(usb_ctl_val & no_device)
10001e3c:	d0a6cd8b 	ldhu	r2,-25802(gp)
10001e40:	e0ffe40b 	ldhu	r3,-112(fp)
10001e44:	1884703a 	and	r2,r3,r2
10001e48:	10bfffcc 	andi	r2,r2,65535
10001e4c:	10000126 	beq	r2,zero,10001e54 <main+0x19c4>
				goto USB_HOT_PLUG;
10001e50:	0039a006 	br	100004d4 <__alt_data_end+0xf80004d4>

			usleep(200);
10001e54:	01003204 	movi	r4,200
10001e58:	00127a80 	call	100127a8 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
10001e5c:	d0a6cd8b 	ldhu	r2,-25802(gp)
10001e60:	e0ffe40b 	ldhu	r3,-112(fp)
10001e64:	1884703a 	and	r2,r3,r2
10001e68:	10bfffcc 	andi	r2,r2,65535
10001e6c:	103fde26 	beq	r2,zero,10001de8 <__alt_data_end+0xf8001de8>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
10001e70:	003c3006 	br	10000f34 <__alt_data_end+0xf8000f34>

10001e74 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
10001e74:	defffc04 	addi	sp,sp,-16
10001e78:	dfc00315 	stw	ra,12(sp)
10001e7c:	df000215 	stw	fp,8(sp)
10001e80:	df000204 	addi	fp,sp,8
10001e84:	2007883a 	mov	r3,r4
10001e88:	2805883a 	mov	r2,r5
10001e8c:	e0fffe0d 	sth	r3,-8(fp)
10001e90:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//


	IO_write(HPI_ADDR, Address);
10001e94:	e0bffe0b 	ldhu	r2,-8(fp)
10001e98:	01000084 	movi	r4,2
10001e9c:	100b883a 	mov	r5,r2
10001ea0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA, Data);
10001ea4:	e0bfff0b 	ldhu	r2,-4(fp)
10001ea8:	0009883a 	mov	r4,zero
10001eac:	100b883a 	mov	r5,r2
10001eb0:	00002480 	call	10000248 <IO_write>


}
10001eb4:	e037883a 	mov	sp,fp
10001eb8:	dfc00117 	ldw	ra,4(sp)
10001ebc:	df000017 	ldw	fp,0(sp)
10001ec0:	dec00204 	addi	sp,sp,8
10001ec4:	f800283a 	ret

10001ec8 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10001ec8:	defffc04 	addi	sp,sp,-16
10001ecc:	dfc00315 	stw	ra,12(sp)
10001ed0:	df000215 	stw	fp,8(sp)
10001ed4:	df000204 	addi	fp,sp,8
10001ed8:	2005883a 	mov	r2,r4
10001edc:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//

	alt_u16 result;
	IO_write(HPI_ADDR, Address);
10001ee0:	e0bfff0b 	ldhu	r2,-4(fp)
10001ee4:	01000084 	movi	r4,2
10001ee8:	100b883a 	mov	r5,r2
10001eec:	00002480 	call	10000248 <IO_write>
	result= IO_read(HPI_DATA);
10001ef0:	0009883a 	mov	r4,zero
10001ef4:	00002b40 	call	100002b4 <IO_read>
10001ef8:	e0bffe0d 	sth	r2,-8(fp)
	return result;
10001efc:	e0bffe0b 	ldhu	r2,-8(fp)
}
10001f00:	e037883a 	mov	sp,fp
10001f04:	dfc00117 	ldw	ra,4(sp)
10001f08:	df000017 	ldw	fp,0(sp)
10001f0c:	dec00204 	addi	sp,sp,8
10001f10:	f800283a 	ret

10001f14 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
10001f14:	defffe04 	addi	sp,sp,-8
10001f18:	dfc00115 	stw	ra,4(sp)
10001f1c:	df000015 	stw	fp,0(sp)
10001f20:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
10001f24:	01000044 	movi	r4,1
10001f28:	017e9414 	movui	r5,64080
10001f2c:	00002480 	call	10000248 <IO_write>
	usleep(100000);
10001f30:	010000b4 	movhi	r4,2
10001f34:	2121a804 	addi	r4,r4,-31072
10001f38:	00127a80 	call	100127a8 <usleep>
	printf("[USB INIT]:reset finished!\n");
10001f3c:	01040074 	movhi	r4,4097
10001f40:	21140404 	addi	r4,r4,20496
10001f44:	0007fe00 	call	10007fe0 <puts>

	usleep(500000);
10001f48:	01000234 	movhi	r4,8
10001f4c:	21284804 	addi	r4,r4,-24288
10001f50:	00127a80 	call	100127a8 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
10001f54:	01040074 	movhi	r4,4097
10001f58:	21140b04 	addi	r4,r4,20524
10001f5c:	0007fe00 	call	10007fe0 <puts>
	IO_read(HPI_MAILBOX);
10001f60:	01000044 	movi	r4,1
10001f64:	00002b40 	call	100002b4 <IO_read>
	IO_read(HPI_STATUS);
10001f68:	010000c4 	movi	r4,3
10001f6c:	00002b40 	call	100002b4 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
10001f70:	01005104 	movi	r4,324
10001f74:	0001ec80 	call	10001ec8 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10001f78:	01005104 	movi	r4,324
10001f7c:	000b883a 	mov	r5,zero
10001f80:	0001e740 	call	10001e74 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
10001f84:	01005204 	movi	r4,328
10001f88:	0001ec80 	call	10001ec8 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
10001f8c:	01005204 	movi	r4,328
10001f90:	000b883a 	mov	r5,zero
10001f94:	0001e740 	call	10001e74 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10001f98:	01302414 	movui	r4,49296
10001f9c:	017fffd4 	movui	r5,65535
10001fa0:	0001e740 	call	10001e74 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
10001fa4:	01302c14 	movui	r4,49328
10001fa8:	017fffd4 	movui	r5,65535
10001fac:	0001e740 	call	10001e74 <UsbWrite>
}
10001fb0:	e037883a 	mov	sp,fp
10001fb4:	dfc00117 	ldw	ra,4(sp)
10001fb8:	df000017 	ldw	fp,0(sp)
10001fbc:	dec00204 	addi	sp,sp,8
10001fc0:	f800283a 	ret

10001fc4 <UsbSetAddress>:


void UsbSetAddress()
{
10001fc4:	defffe04 	addi	sp,sp,-8
10001fc8:	dfc00115 	stw	ra,4(sp)
10001fcc:	df000015 	stw	fp,0(sp)
10001fd0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001fd4:	01000084 	movi	r4,2
10001fd8:	01414004 	movi	r5,1280
10001fdc:	00002480 	call	10000248 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
10001fe0:	0009883a 	mov	r4,zero
10001fe4:	01414304 	movi	r5,1292
10001fe8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001fec:	0009883a 	mov	r4,zero
10001ff0:	01400204 	movi	r5,8
10001ff4:	00002480 	call	10000248 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
10001ff8:	0009883a 	mov	r4,zero
10001ffc:	01403404 	movi	r5,208
10002000:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002004:	0009883a 	mov	r4,zero
10002008:	01400044 	movi	r5,1
1000200c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002010:	0009883a 	mov	r4,zero
10002014:	014004c4 	movi	r5,19
10002018:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000201c:	0009883a 	mov	r4,zero
10002020:	01414504 	movi	r5,1300
10002024:	00002480 	call	10000248 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
10002028:	0009883a 	mov	r4,zero
1000202c:	01414004 	movi	r5,1280
10002030:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0002);
10002034:	0009883a 	mov	r4,zero
10002038:	01400084 	movi	r5,2
1000203c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002040:	0009883a 	mov	r4,zero
10002044:	000b883a 	mov	r5,zero
10002048:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000204c:	0009883a 	mov	r4,zero
10002050:	000b883a 	mov	r5,zero
10002054:	00002480 	call	10000248 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
10002058:	0009883a 	mov	r4,zero
1000205c:	000b883a 	mov	r5,zero
10002060:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//
10002064:	0009883a 	mov	r4,zero
10002068:	000b883a 	mov	r5,zero
1000206c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0090);//
10002070:	0009883a 	mov	r4,zero
10002074:	01402404 	movi	r5,144
10002078:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
1000207c:	0009883a 	mov	r4,zero
10002080:	01401044 	movi	r5,65
10002084:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002088:	0009883a 	mov	r4,zero
1000208c:	014004c4 	movi	r5,19
10002090:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002094:	0009883a 	mov	r4,zero
10002098:	000b883a 	mov	r5,zero
1000209c:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100020a0:	01006c04 	movi	r4,432
100020a4:	01414004 	movi	r5,1280
100020a8:	0001e740 	call	10001e74 <UsbWrite>
}
100020ac:	e037883a 	mov	sp,fp
100020b0:	dfc00117 	ldw	ra,4(sp)
100020b4:	df000017 	ldw	fp,0(sp)
100020b8:	dec00204 	addi	sp,sp,8
100020bc:	f800283a 	ret

100020c0 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
100020c0:	defffe04 	addi	sp,sp,-8
100020c4:	dfc00115 	stw	ra,4(sp)
100020c8:	df000015 	stw	fp,0(sp)
100020cc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100020d0:	01000084 	movi	r4,2
100020d4:	01414004 	movi	r5,1280
100020d8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
100020dc:	0009883a 	mov	r4,zero
100020e0:	01414304 	movi	r5,1292
100020e4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100020e8:	0009883a 	mov	r4,zero
100020ec:	01400204 	movi	r5,8
100020f0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100020f4:	0009883a 	mov	r4,zero
100020f8:	0140b404 	movi	r5,720
100020fc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002100:	0009883a 	mov	r4,zero
10002104:	01400044 	movi	r5,1
10002108:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000210c:	0009883a 	mov	r4,zero
10002110:	014004c4 	movi	r5,19
10002114:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002118:	0009883a 	mov	r4,zero
1000211c:	01414504 	movi	r5,1300
10002120:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10002124:	0009883a 	mov	r4,zero
10002128:	0141a004 	movi	r5,1664
1000212c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
10002130:	0009883a 	mov	r4,zero
10002134:	01404004 	movi	r5,256
10002138:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000213c:	0009883a 	mov	r4,zero
10002140:	000b883a 	mov	r5,zero
10002144:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);
10002148:	0009883a 	mov	r4,zero
1000214c:	01400204 	movi	r5,8
10002150:	00002480 	call	10000248 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
10002154:	0009883a 	mov	r4,zero
10002158:	01414b04 	movi	r5,1324
1000215c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//
10002160:	0009883a 	mov	r4,zero
10002164:	01400204 	movi	r5,8
10002168:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//
1000216c:	0009883a 	mov	r4,zero
10002170:	0140a404 	movi	r5,656
10002174:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
10002178:	0009883a 	mov	r4,zero
1000217c:	01401044 	movi	r5,65
10002180:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002184:	0009883a 	mov	r4,zero
10002188:	014004c4 	movi	r5,19
1000218c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);
10002190:	0009883a 	mov	r4,zero
10002194:	01414804 	movi	r5,1312
10002198:	00002480 	call	10000248 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
1000219c:	0009883a 	mov	r4,zero
100021a0:	000b883a 	mov	r5,zero
100021a4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
100021a8:	0009883a 	mov	r4,zero
100021ac:	000b883a 	mov	r5,zero
100021b0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
100021b4:	0009883a 	mov	r4,zero
100021b8:	01408404 	movi	r5,528
100021bc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
100021c0:	0009883a 	mov	r4,zero
100021c4:	01401044 	movi	r5,65
100021c8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
100021cc:	0009883a 	mov	r4,zero
100021d0:	014004c4 	movi	r5,19
100021d4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
100021d8:	0009883a 	mov	r4,zero
100021dc:	000b883a 	mov	r5,zero
100021e0:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100021e4:	01006c04 	movi	r4,432
100021e8:	01414004 	movi	r5,1280
100021ec:	0001e740 	call	10001e74 <UsbWrite>
}
100021f0:	e037883a 	mov	sp,fp
100021f4:	dfc00117 	ldw	ra,4(sp)
100021f8:	df000017 	ldw	fp,0(sp)
100021fc:	dec00204 	addi	sp,sp,8
10002200:	f800283a 	ret

10002204 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
10002204:	defffe04 	addi	sp,sp,-8
10002208:	dfc00115 	stw	ra,4(sp)
1000220c:	df000015 	stw	fp,0(sp)
10002210:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002214:	01000084 	movi	r4,2
10002218:	01414004 	movi	r5,1280
1000221c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002220:	0009883a 	mov	r4,zero
10002224:	01414304 	movi	r5,1292
10002228:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000222c:	0009883a 	mov	r4,zero
10002230:	01400204 	movi	r5,8
10002234:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002238:	0009883a 	mov	r4,zero
1000223c:	0140b404 	movi	r5,720
10002240:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002244:	0009883a 	mov	r4,zero
10002248:	01400044 	movi	r5,1
1000224c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002250:	0009883a 	mov	r4,zero
10002254:	014004c4 	movi	r5,19
10002258:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000225c:	0009883a 	mov	r4,zero
10002260:	01414504 	movi	r5,1300
10002264:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10002268:	0009883a 	mov	r4,zero
1000226c:	0141a004 	movi	r5,1664
10002270:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
10002274:	0009883a 	mov	r4,zero
10002278:	01404004 	movi	r5,256
1000227c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002280:	0009883a 	mov	r4,zero
10002284:	000b883a 	mov	r5,zero
10002288:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
1000228c:	0009883a 	mov	r4,zero
10002290:	01400484 	movi	r5,18
10002294:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10002298:	0009883a 	mov	r4,zero
1000229c:	01415104 	movi	r5,1348
100022a0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100022a4:	0009883a 	mov	r4,zero
100022a8:	01400204 	movi	r5,8
100022ac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100022b0:	0009883a 	mov	r4,zero
100022b4:	0140a404 	movi	r5,656
100022b8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100022bc:	0009883a 	mov	r4,zero
100022c0:	01401044 	movi	r5,65
100022c4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100022c8:	0009883a 	mov	r4,zero
100022cc:	014004c4 	movi	r5,19
100022d0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100022d4:	0009883a 	mov	r4,zero
100022d8:	01414804 	movi	r5,1312
100022dc:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
100022e0:	0009883a 	mov	r4,zero
100022e4:	01415304 	movi	r5,1356
100022e8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100022ec:	0009883a 	mov	r4,zero
100022f0:	01400204 	movi	r5,8
100022f4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100022f8:	0009883a 	mov	r4,zero
100022fc:	0140a404 	movi	r5,656
10002300:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
10002304:	0009883a 	mov	r4,zero
10002308:	01400044 	movi	r5,1
1000230c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002310:	0009883a 	mov	r4,zero
10002314:	014004c4 	movi	r5,19
10002318:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
1000231c:	0009883a 	mov	r4,zero
10002320:	01414b04 	movi	r5,1324
10002324:	00002480 	call	10000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
10002328:	0009883a 	mov	r4,zero
1000232c:	01415504 	movi	r5,1364
10002330:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
10002334:	0009883a 	mov	r4,zero
10002338:	01400084 	movi	r5,2
1000233c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10002340:	0009883a 	mov	r4,zero
10002344:	0140a404 	movi	r5,656
10002348:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
1000234c:	0009883a 	mov	r4,zero
10002350:	01401044 	movi	r5,65
10002354:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002358:	0009883a 	mov	r4,zero
1000235c:	014004c4 	movi	r5,19
10002360:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10002364:	0009883a 	mov	r4,zero
10002368:	01414e04 	movi	r5,1336
1000236c:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
10002370:	0009883a 	mov	r4,zero
10002374:	000b883a 	mov	r5,zero
10002378:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
1000237c:	0009883a 	mov	r4,zero
10002380:	000b883a 	mov	r5,zero
10002384:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
10002388:	0009883a 	mov	r4,zero
1000238c:	01408404 	movi	r5,528
10002390:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
10002394:	0009883a 	mov	r4,zero
10002398:	01401044 	movi	r5,65
1000239c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
100023a0:	0009883a 	mov	r4,zero
100023a4:	014004c4 	movi	r5,19
100023a8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
100023ac:	0009883a 	mov	r4,zero
100023b0:	000b883a 	mov	r5,zero
100023b4:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100023b8:	01006c04 	movi	r4,432
100023bc:	01414004 	movi	r5,1280
100023c0:	0001e740 	call	10001e74 <UsbWrite>
}
100023c4:	e037883a 	mov	sp,fp
100023c8:	dfc00117 	ldw	ra,4(sp)
100023cc:	df000017 	ldw	fp,0(sp)
100023d0:	dec00204 	addi	sp,sp,8
100023d4:	f800283a 	ret

100023d8 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
100023d8:	defffe04 	addi	sp,sp,-8
100023dc:	dfc00115 	stw	ra,4(sp)
100023e0:	df000015 	stw	fp,0(sp)
100023e4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100023e8:	01000084 	movi	r4,2
100023ec:	01414004 	movi	r5,1280
100023f0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
100023f4:	0009883a 	mov	r4,zero
100023f8:	01414304 	movi	r5,1292
100023fc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002400:	0009883a 	mov	r4,zero
10002404:	01400204 	movi	r5,8
10002408:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
1000240c:	0009883a 	mov	r4,zero
10002410:	0140b404 	movi	r5,720
10002414:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002418:	0009883a 	mov	r4,zero
1000241c:	01400044 	movi	r5,1
10002420:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002424:	0009883a 	mov	r4,zero
10002428:	014004c4 	movi	r5,19
1000242c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002430:	0009883a 	mov	r4,zero
10002434:	01414504 	movi	r5,1300
10002438:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
1000243c:	0009883a 	mov	r4,zero
10002440:	0141a004 	movi	r5,1664
10002444:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10002448:	0009883a 	mov	r4,zero
1000244c:	01408004 	movi	r5,512
10002450:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002454:	0009883a 	mov	r4,zero
10002458:	000b883a 	mov	r5,zero
1000245c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
10002460:	0009883a 	mov	r4,zero
10002464:	01400244 	movi	r5,9
10002468:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
1000246c:	0009883a 	mov	r4,zero
10002470:	01415104 	movi	r5,1348
10002474:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002478:	0009883a 	mov	r4,zero
1000247c:	01400204 	movi	r5,8
10002480:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002484:	0009883a 	mov	r4,zero
10002488:	0140a404 	movi	r5,656
1000248c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002490:	0009883a 	mov	r4,zero
10002494:	01401044 	movi	r5,65
10002498:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
1000249c:	0009883a 	mov	r4,zero
100024a0:	014004c4 	movi	r5,19
100024a4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100024a8:	0009883a 	mov	r4,zero
100024ac:	01414804 	movi	r5,1312
100024b0:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
100024b4:	0009883a 	mov	r4,zero
100024b8:	01415304 	movi	r5,1356
100024bc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
100024c0:	0009883a 	mov	r4,zero
100024c4:	01400044 	movi	r5,1
100024c8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100024cc:	0009883a 	mov	r4,zero
100024d0:	0140a404 	movi	r5,656
100024d4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100024d8:	0009883a 	mov	r4,zero
100024dc:	01400044 	movi	r5,1
100024e0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100024e4:	0009883a 	mov	r4,zero
100024e8:	014004c4 	movi	r5,19
100024ec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100024f0:	0009883a 	mov	r4,zero
100024f4:	01414b04 	movi	r5,1324
100024f8:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
100024fc:	0009883a 	mov	r4,zero
10002500:	000b883a 	mov	r5,zero
10002504:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002508:	0009883a 	mov	r4,zero
1000250c:	000b883a 	mov	r5,zero
10002510:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10002514:	0009883a 	mov	r4,zero
10002518:	01408404 	movi	r5,528
1000251c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002520:	0009883a 	mov	r4,zero
10002524:	01401044 	movi	r5,65
10002528:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
1000252c:	0009883a 	mov	r4,zero
10002530:	014004c4 	movi	r5,19
10002534:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10002538:	0009883a 	mov	r4,zero
1000253c:	000b883a 	mov	r5,zero
10002540:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002544:	01006c04 	movi	r4,432
10002548:	01414004 	movi	r5,1280
1000254c:	0001e740 	call	10001e74 <UsbWrite>
}
10002550:	e037883a 	mov	sp,fp
10002554:	dfc00117 	ldw	ra,4(sp)
10002558:	df000017 	ldw	fp,0(sp)
1000255c:	dec00204 	addi	sp,sp,8
10002560:	f800283a 	ret

10002564 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
10002564:	defffe04 	addi	sp,sp,-8
10002568:	dfc00115 	stw	ra,4(sp)
1000256c:	df000015 	stw	fp,0(sp)
10002570:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002574:	01000084 	movi	r4,2
10002578:	01414004 	movi	r5,1280
1000257c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002580:	0009883a 	mov	r4,zero
10002584:	01414304 	movi	r5,1292
10002588:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000258c:	0009883a 	mov	r4,zero
10002590:	01400204 	movi	r5,8
10002594:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002598:	0009883a 	mov	r4,zero
1000259c:	0140b404 	movi	r5,720
100025a0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
100025a4:	0009883a 	mov	r4,zero
100025a8:	01400044 	movi	r5,1
100025ac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
100025b0:	0009883a 	mov	r4,zero
100025b4:	014004c4 	movi	r5,19
100025b8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
100025bc:	0009883a 	mov	r4,zero
100025c0:	01414504 	movi	r5,1300
100025c4:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100025c8:	0009883a 	mov	r4,zero
100025cc:	0141a004 	movi	r5,1664
100025d0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
100025d4:	0009883a 	mov	r4,zero
100025d8:	01408004 	movi	r5,512
100025dc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100025e0:	0009883a 	mov	r4,zero
100025e4:	000b883a 	mov	r5,zero
100025e8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
100025ec:	0009883a 	mov	r4,zero
100025f0:	01403fc4 	movi	r5,255
100025f4:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
100025f8:	0009883a 	mov	r4,zero
100025fc:	01415704 	movi	r5,1372
10002600:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002604:	0009883a 	mov	r4,zero
10002608:	01400204 	movi	r5,8
1000260c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002610:	0009883a 	mov	r4,zero
10002614:	0140a404 	movi	r5,656
10002618:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000261c:	0009883a 	mov	r4,zero
10002620:	01401044 	movi	r5,65
10002624:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002628:	0009883a 	mov	r4,zero
1000262c:	014004c4 	movi	r5,19
10002630:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002634:	0009883a 	mov	r4,zero
10002638:	01414804 	movi	r5,1312
1000263c:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
10002640:	0009883a 	mov	r4,zero
10002644:	01415904 	movi	r5,1380
10002648:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
1000264c:	0009883a 	mov	r4,zero
10002650:	01400204 	movi	r5,8
10002654:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002658:	0009883a 	mov	r4,zero
1000265c:	0140a404 	movi	r5,656
10002660:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002664:	0009883a 	mov	r4,zero
10002668:	01400044 	movi	r5,1
1000266c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002670:	0009883a 	mov	r4,zero
10002674:	014004c4 	movi	r5,19
10002678:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
1000267c:	0009883a 	mov	r4,zero
10002680:	01414b04 	movi	r5,1324
10002684:	00002480 	call	10000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
10002688:	0009883a 	mov	r4,zero
1000268c:	01415b04 	movi	r5,1388
10002690:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10002694:	0009883a 	mov	r4,zero
10002698:	01400204 	movi	r5,8
1000269c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
100026a0:	0009883a 	mov	r4,zero
100026a4:	0140a404 	movi	r5,656
100026a8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100026ac:	0009883a 	mov	r4,zero
100026b0:	01401044 	movi	r5,65
100026b4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100026b8:	0009883a 	mov	r4,zero
100026bc:	014004c4 	movi	r5,19
100026c0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
100026c4:	0009883a 	mov	r4,zero
100026c8:	01414e04 	movi	r5,1336
100026cc:	00002480 	call	10000248 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
100026d0:	0009883a 	mov	r4,zero
100026d4:	01415d04 	movi	r5,1396
100026d8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
100026dc:	0009883a 	mov	r4,zero
100026e0:	01400204 	movi	r5,8
100026e4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
100026e8:	0009883a 	mov	r4,zero
100026ec:	0140a404 	movi	r5,656
100026f0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
100026f4:	0009883a 	mov	r4,zero
100026f8:	01400044 	movi	r5,1
100026fc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10002700:	0009883a 	mov	r4,zero
10002704:	014004c4 	movi	r5,19
10002708:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
1000270c:	0009883a 	mov	r4,zero
10002710:	01415104 	movi	r5,1348
10002714:	00002480 	call	10000248 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
10002718:	0009883a 	mov	r4,zero
1000271c:	01415f04 	movi	r5,1404
10002720:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
10002724:	0009883a 	mov	r4,zero
10002728:	01400084 	movi	r5,2
1000272c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002730:	0009883a 	mov	r4,zero
10002734:	0140a404 	movi	r5,656
10002738:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
1000273c:	0009883a 	mov	r4,zero
10002740:	01401044 	movi	r5,65
10002744:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002748:	0009883a 	mov	r4,zero
1000274c:	014004c4 	movi	r5,19
10002750:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10002754:	0009883a 	mov	r4,zero
10002758:	01415404 	movi	r5,1360
1000275c:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
10002760:	0009883a 	mov	r4,zero
10002764:	000b883a 	mov	r5,zero
10002768:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
1000276c:	0009883a 	mov	r4,zero
10002770:	000b883a 	mov	r5,zero
10002774:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
10002778:	0009883a 	mov	r4,zero
1000277c:	01408404 	movi	r5,528
10002780:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10002784:	0009883a 	mov	r4,zero
10002788:	01401044 	movi	r5,65
1000278c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002790:	0009883a 	mov	r4,zero
10002794:	014004c4 	movi	r5,19
10002798:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
1000279c:	0009883a 	mov	r4,zero
100027a0:	000b883a 	mov	r5,zero
100027a4:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100027a8:	01006c04 	movi	r4,432
100027ac:	01414004 	movi	r5,1280
100027b0:	0001e740 	call	10001e74 <UsbWrite>
}
100027b4:	e037883a 	mov	sp,fp
100027b8:	dfc00117 	ldw	ra,4(sp)
100027bc:	df000017 	ldw	fp,0(sp)
100027c0:	dec00204 	addi	sp,sp,8
100027c4:	f800283a 	ret

100027c8 <UsbSetConfig>:

void UsbSetConfig()
{
100027c8:	defffe04 	addi	sp,sp,-8
100027cc:	dfc00115 	stw	ra,4(sp)
100027d0:	df000015 	stw	fp,0(sp)
100027d4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100027d8:	01000084 	movi	r4,2
100027dc:	01414004 	movi	r5,1280
100027e0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
100027e4:	0009883a 	mov	r4,zero
100027e8:	01414304 	movi	r5,1292
100027ec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100027f0:	0009883a 	mov	r4,zero
100027f4:	01400204 	movi	r5,8
100027f8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
100027fc:	0009883a 	mov	r4,zero
10002800:	0140b404 	movi	r5,720
10002804:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002808:	0009883a 	mov	r4,zero
1000280c:	01400044 	movi	r5,1
10002810:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002814:	0009883a 	mov	r4,zero
10002818:	014004c4 	movi	r5,19
1000281c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002820:	0009883a 	mov	r4,zero
10002824:	01414504 	movi	r5,1300
10002828:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
1000282c:	0009883a 	mov	r4,zero
10002830:	01424004 	movi	r5,2304
10002834:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
10002838:	0009883a 	mov	r4,zero
1000283c:	01400044 	movi	r5,1
10002840:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002844:	0009883a 	mov	r4,zero
10002848:	000b883a 	mov	r5,zero
1000284c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002850:	0009883a 	mov	r4,zero
10002854:	000b883a 	mov	r5,zero
10002858:	00002480 	call	10000248 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
1000285c:	0009883a 	mov	r4,zero
10002860:	000b883a 	mov	r5,zero
10002864:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10002868:	0009883a 	mov	r4,zero
1000286c:	000b883a 	mov	r5,zero
10002870:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10002874:	0009883a 	mov	r4,zero
10002878:	0140a404 	movi	r5,656
1000287c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10002880:	0009883a 	mov	r4,zero
10002884:	01401044 	movi	r5,65
10002888:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000288c:	0009883a 	mov	r4,zero
10002890:	014004c4 	movi	r5,19
10002894:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002898:	0009883a 	mov	r4,zero
1000289c:	000b883a 	mov	r5,zero
100028a0:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100028a4:	01006c04 	movi	r4,432
100028a8:	01414004 	movi	r5,1280
100028ac:	0001e740 	call	10001e74 <UsbWrite>

}
100028b0:	e037883a 	mov	sp,fp
100028b4:	dfc00117 	ldw	ra,4(sp)
100028b8:	df000017 	ldw	fp,0(sp)
100028bc:	dec00204 	addi	sp,sp,8
100028c0:	f800283a 	ret

100028c4 <UsbClassRequest>:

void UsbClassRequest()
{
100028c4:	defffe04 	addi	sp,sp,-8
100028c8:	dfc00115 	stw	ra,4(sp)
100028cc:	df000015 	stw	fp,0(sp)
100028d0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100028d4:	01000084 	movi	r4,2
100028d8:	01414004 	movi	r5,1280
100028dc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
100028e0:	0009883a 	mov	r4,zero
100028e4:	01414304 	movi	r5,1292
100028e8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100028ec:	0009883a 	mov	r4,zero
100028f0:	01400204 	movi	r5,8
100028f4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
100028f8:	0009883a 	mov	r4,zero
100028fc:	0140b404 	movi	r5,720
10002900:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002904:	0009883a 	mov	r4,zero
10002908:	01400044 	movi	r5,1
1000290c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002910:	0009883a 	mov	r4,zero
10002914:	014004c4 	movi	r5,19
10002918:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000291c:	0009883a 	mov	r4,zero
10002920:	01414504 	movi	r5,1300
10002924:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10002928:	0009883a 	mov	r4,zero
1000292c:	01428844 	movi	r5,2593
10002930:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10002934:	0009883a 	mov	r4,zero
10002938:	000b883a 	mov	r5,zero
1000293c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002940:	0009883a 	mov	r4,zero
10002944:	000b883a 	mov	r5,zero
10002948:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000294c:	0009883a 	mov	r4,zero
10002950:	000b883a 	mov	r5,zero
10002954:	00002480 	call	10000248 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10002958:	0009883a 	mov	r4,zero
1000295c:	000b883a 	mov	r5,zero
10002960:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10002964:	0009883a 	mov	r4,zero
10002968:	000b883a 	mov	r5,zero
1000296c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10002970:	0009883a 	mov	r4,zero
10002974:	0140a404 	movi	r5,656
10002978:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
1000297c:	0009883a 	mov	r4,zero
10002980:	01401044 	movi	r5,65
10002984:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002988:	0009883a 	mov	r4,zero
1000298c:	014004c4 	movi	r5,19
10002990:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002994:	0009883a 	mov	r4,zero
10002998:	000b883a 	mov	r5,zero
1000299c:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100029a0:	01006c04 	movi	r4,432
100029a4:	01414004 	movi	r5,1280
100029a8:	0001e740 	call	10001e74 <UsbWrite>
}
100029ac:	e037883a 	mov	sp,fp
100029b0:	dfc00117 	ldw	ra,4(sp)
100029b4:	df000017 	ldw	fp,0(sp)
100029b8:	dec00204 	addi	sp,sp,8
100029bc:	f800283a 	ret

100029c0 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
100029c0:	defffe04 	addi	sp,sp,-8
100029c4:	dfc00115 	stw	ra,4(sp)
100029c8:	df000015 	stw	fp,0(sp)
100029cc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100029d0:	01000084 	movi	r4,2
100029d4:	01414004 	movi	r5,1280
100029d8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
100029dc:	0009883a 	mov	r4,zero
100029e0:	01414304 	movi	r5,1292
100029e4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100029e8:	0009883a 	mov	r4,zero
100029ec:	01400204 	movi	r5,8
100029f0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
100029f4:	0009883a 	mov	r4,zero
100029f8:	0140b404 	movi	r5,720
100029fc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002a00:	0009883a 	mov	r4,zero
10002a04:	01400044 	movi	r5,1
10002a08:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002a0c:	0009883a 	mov	r4,zero
10002a10:	014004c4 	movi	r5,19
10002a14:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002a18:	0009883a 	mov	r4,zero
10002a1c:	01414504 	movi	r5,1300
10002a20:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10002a24:	0009883a 	mov	r4,zero
10002a28:	0141a044 	movi	r5,1665
10002a2c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10002a30:	0009883a 	mov	r4,zero
10002a34:	01484004 	movi	r5,8448
10002a38:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002a3c:	0009883a 	mov	r4,zero
10002a40:	000b883a 	mov	r5,zero
10002a44:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10002a48:	0009883a 	mov	r4,zero
10002a4c:	01401ec4 	movi	r5,123
10002a50:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10002a54:	0009883a 	mov	r4,zero
10002a58:	01415104 	movi	r5,1348
10002a5c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002a60:	0009883a 	mov	r4,zero
10002a64:	01400204 	movi	r5,8
10002a68:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002a6c:	0009883a 	mov	r4,zero
10002a70:	0140a404 	movi	r5,656
10002a74:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002a78:	0009883a 	mov	r4,zero
10002a7c:	01401044 	movi	r5,65
10002a80:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002a84:	0009883a 	mov	r4,zero
10002a88:	014004c4 	movi	r5,19
10002a8c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002a90:	0009883a 	mov	r4,zero
10002a94:	01414804 	movi	r5,1312
10002a98:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10002a9c:	0009883a 	mov	r4,zero
10002aa0:	000b883a 	mov	r5,zero
10002aa4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002aa8:	0009883a 	mov	r4,zero
10002aac:	000b883a 	mov	r5,zero
10002ab0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10002ab4:	0009883a 	mov	r4,zero
10002ab8:	01408404 	movi	r5,528
10002abc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002ac0:	0009883a 	mov	r4,zero
10002ac4:	01401044 	movi	r5,65
10002ac8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002acc:	0009883a 	mov	r4,zero
10002ad0:	014004c4 	movi	r5,19
10002ad4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10002ad8:	0009883a 	mov	r4,zero
10002adc:	000b883a 	mov	r5,zero
10002ae0:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002ae4:	01006c04 	movi	r4,432
10002ae8:	01414004 	movi	r5,1280
10002aec:	0001e740 	call	10001e74 <UsbWrite>

}
10002af0:	e037883a 	mov	sp,fp
10002af4:	dfc00117 	ldw	ra,4(sp)
10002af8:	df000017 	ldw	fp,0(sp)
10002afc:	dec00204 	addi	sp,sp,8
10002b00:	f800283a 	ret

10002b04 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10002b04:	defffe04 	addi	sp,sp,-8
10002b08:	dfc00115 	stw	ra,4(sp)
10002b0c:	df000015 	stw	fp,0(sp)
10002b10:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002b14:	01000084 	movi	r4,2
10002b18:	01414004 	movi	r5,1280
10002b1c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002b20:	0009883a 	mov	r4,zero
10002b24:	01414304 	movi	r5,1292
10002b28:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002b2c:	0009883a 	mov	r4,zero
10002b30:	01400204 	movi	r5,8
10002b34:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002b38:	0009883a 	mov	r4,zero
10002b3c:	0140b404 	movi	r5,720
10002b40:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002b44:	0009883a 	mov	r4,zero
10002b48:	01400044 	movi	r5,1
10002b4c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002b50:	0009883a 	mov	r4,zero
10002b54:	014004c4 	movi	r5,19
10002b58:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002b5c:	0009883a 	mov	r4,zero
10002b60:	01414504 	movi	r5,1300
10002b64:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10002b68:	0009883a 	mov	r4,zero
10002b6c:	0141a044 	movi	r5,1665
10002b70:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10002b74:	0009883a 	mov	r4,zero
10002b78:	01488004 	movi	r5,8704
10002b7c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002b80:	0009883a 	mov	r4,zero
10002b84:	000b883a 	mov	r5,zero
10002b88:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10002b8c:	0009883a 	mov	r4,zero
10002b90:	01401ec4 	movi	r5,123
10002b94:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10002b98:	0009883a 	mov	r4,zero
10002b9c:	01416004 	movi	r5,1408
10002ba0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002ba4:	0009883a 	mov	r4,zero
10002ba8:	01400204 	movi	r5,8
10002bac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002bb0:	0009883a 	mov	r4,zero
10002bb4:	0140a404 	movi	r5,656
10002bb8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002bbc:	0009883a 	mov	r4,zero
10002bc0:	01401044 	movi	r5,65
10002bc4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002bc8:	0009883a 	mov	r4,zero
10002bcc:	014004c4 	movi	r5,19
10002bd0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002bd4:	0009883a 	mov	r4,zero
10002bd8:	01414804 	movi	r5,1312
10002bdc:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10002be0:	0009883a 	mov	r4,zero
10002be4:	01416204 	movi	r5,1416
10002be8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10002bec:	0009883a 	mov	r4,zero
10002bf0:	01400204 	movi	r5,8
10002bf4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002bf8:	0009883a 	mov	r4,zero
10002bfc:	0140a404 	movi	r5,656
10002c00:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002c04:	0009883a 	mov	r4,zero
10002c08:	01400044 	movi	r5,1
10002c0c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002c10:	0009883a 	mov	r4,zero
10002c14:	014004c4 	movi	r5,19
10002c18:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10002c1c:	0009883a 	mov	r4,zero
10002c20:	01414b04 	movi	r5,1324
10002c24:	00002480 	call	10000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10002c28:	0009883a 	mov	r4,zero
10002c2c:	01416404 	movi	r5,1424
10002c30:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10002c34:	0009883a 	mov	r4,zero
10002c38:	01400204 	movi	r5,8
10002c3c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10002c40:	0009883a 	mov	r4,zero
10002c44:	0140a404 	movi	r5,656
10002c48:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002c4c:	0009883a 	mov	r4,zero
10002c50:	01401044 	movi	r5,65
10002c54:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002c58:	0009883a 	mov	r4,zero
10002c5c:	014004c4 	movi	r5,19
10002c60:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10002c64:	0009883a 	mov	r4,zero
10002c68:	01414e04 	movi	r5,1336
10002c6c:	00002480 	call	10000248 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10002c70:	0009883a 	mov	r4,zero
10002c74:	01416604 	movi	r5,1432
10002c78:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10002c7c:	0009883a 	mov	r4,zero
10002c80:	01400204 	movi	r5,8
10002c84:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10002c88:	0009883a 	mov	r4,zero
10002c8c:	0140a404 	movi	r5,656
10002c90:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002c94:	0009883a 	mov	r4,zero
10002c98:	01400044 	movi	r5,1
10002c9c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10002ca0:	0009883a 	mov	r4,zero
10002ca4:	014004c4 	movi	r5,19
10002ca8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10002cac:	0009883a 	mov	r4,zero
10002cb0:	01415104 	movi	r5,1348
10002cb4:	00002480 	call	10000248 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10002cb8:	0009883a 	mov	r4,zero
10002cbc:	01416804 	movi	r5,1440
10002cc0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002cc4:	0009883a 	mov	r4,zero
10002cc8:	01400204 	movi	r5,8
10002ccc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002cd0:	0009883a 	mov	r4,zero
10002cd4:	0140a404 	movi	r5,656
10002cd8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10002cdc:	0009883a 	mov	r4,zero
10002ce0:	01401044 	movi	r5,65
10002ce4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002ce8:	0009883a 	mov	r4,zero
10002cec:	014004c4 	movi	r5,19
10002cf0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10002cf4:	0009883a 	mov	r4,zero
10002cf8:	01415404 	movi	r5,1360
10002cfc:	00002480 	call	10000248 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
10002d00:	0009883a 	mov	r4,zero
10002d04:	01416a04 	movi	r5,1448
10002d08:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10002d0c:	0009883a 	mov	r4,zero
10002d10:	01400204 	movi	r5,8
10002d14:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002d18:	0009883a 	mov	r4,zero
10002d1c:	0140a404 	movi	r5,656
10002d20:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002d24:	0009883a 	mov	r4,zero
10002d28:	01400044 	movi	r5,1
10002d2c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002d30:	0009883a 	mov	r4,zero
10002d34:	014004c4 	movi	r5,19
10002d38:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
10002d3c:	0009883a 	mov	r4,zero
10002d40:	01415704 	movi	r5,1372
10002d44:	00002480 	call	10000248 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
10002d48:	0009883a 	mov	r4,zero
10002d4c:	01416c04 	movi	r5,1456
10002d50:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10002d54:	0009883a 	mov	r4,zero
10002d58:	01400204 	movi	r5,8
10002d5c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
10002d60:	0009883a 	mov	r4,zero
10002d64:	0140a404 	movi	r5,656
10002d68:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
10002d6c:	0009883a 	mov	r4,zero
10002d70:	01401044 	movi	r5,65
10002d74:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002d78:	0009883a 	mov	r4,zero
10002d7c:	014004c4 	movi	r5,19
10002d80:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
10002d84:	0009883a 	mov	r4,zero
10002d88:	01415a04 	movi	r5,1384
10002d8c:	00002480 	call	10000248 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10002d90:	0009883a 	mov	r4,zero
10002d94:	01416e04 	movi	r5,1464
10002d98:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
10002d9c:	0009883a 	mov	r4,zero
10002da0:	014000c4 	movi	r5,3
10002da4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10002da8:	0009883a 	mov	r4,zero
10002dac:	0140a404 	movi	r5,656
10002db0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002db4:	0009883a 	mov	r4,zero
10002db8:	01400044 	movi	r5,1
10002dbc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
10002dc0:	0009883a 	mov	r4,zero
10002dc4:	014004c4 	movi	r5,19
10002dc8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
10002dcc:	0009883a 	mov	r4,zero
10002dd0:	01415d04 	movi	r5,1396
10002dd4:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
10002dd8:	0009883a 	mov	r4,zero
10002ddc:	000b883a 	mov	r5,zero
10002de0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10002de4:	0009883a 	mov	r4,zero
10002de8:	000b883a 	mov	r5,zero
10002dec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
10002df0:	0009883a 	mov	r4,zero
10002df4:	01408404 	movi	r5,528
10002df8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002dfc:	0009883a 	mov	r4,zero
10002e00:	01401044 	movi	r5,65
10002e04:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002e08:	0009883a 	mov	r4,zero
10002e0c:	014004c4 	movi	r5,19
10002e10:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002e14:	0009883a 	mov	r4,zero
10002e18:	000b883a 	mov	r5,zero
10002e1c:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002e20:	01006c04 	movi	r4,432
10002e24:	01414004 	movi	r5,1280
10002e28:	0001e740 	call	10001e74 <UsbWrite>

}
10002e2c:	e037883a 	mov	sp,fp
10002e30:	dfc00117 	ldw	ra,4(sp)
10002e34:	df000017 	ldw	fp,0(sp)
10002e38:	dec00204 	addi	sp,sp,8
10002e3c:	f800283a 	ret

10002e40 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
10002e40:	defffd04 	addi	sp,sp,-12
10002e44:	dfc00215 	stw	ra,8(sp)
10002e48:	df000115 	stw	fp,4(sp)
10002e4c:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
10002e50:	01005104 	movi	r4,324
10002e54:	0001ec80 	call	10001ec8 <UsbRead>
10002e58:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002e5c:	01005104 	movi	r4,324
10002e60:	000b883a 	mov	r5,zero
10002e64:	0001e740 	call	10001e74 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002e68:	00000d06 	br	10002ea0 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
10002e6c:	e0bfff0b 	ldhu	r2,-4(fp)
10002e70:	10000526 	beq	r2,zero,10002e88 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
10002e74:	e0bfff0b 	ldhu	r2,-4(fp)
10002e78:	01040074 	movhi	r4,4097
10002e7c:	21141404 	addi	r4,r4,20560
10002e80:	100b883a 	mov	r5,r2
10002e84:	0007eec0 	call	10007eec <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10002e88:	01005104 	movi	r4,324
10002e8c:	0001ec80 	call	10001ec8 <UsbRead>
10002e90:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002e94:	01005104 	movi	r4,324
10002e98:	000b883a 	mov	r5,zero
10002e9c:	0001e740 	call	10001e74 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002ea0:	e0bfff0b 	ldhu	r2,-4(fp)
10002ea4:	10840018 	cmpnei	r2,r2,4096
10002ea8:	103ff01e 	bne	r2,zero,10002e6c <__alt_data_end+0xf8002e6c>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
10002eac:	e0bfff0b 	ldhu	r2,-4(fp)
}
10002eb0:	e037883a 	mov	sp,fp
10002eb4:	dfc00117 	ldw	ra,4(sp)
10002eb8:	df000017 	ldw	fp,0(sp)
10002ebc:	dec00204 	addi	sp,sp,8
10002ec0:	f800283a 	ret

10002ec4 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10002ec4:	defffd04 	addi	sp,sp,-12
10002ec8:	dfc00215 	stw	ra,8(sp)
10002ecc:	df000115 	stw	fp,4(sp)
10002ed0:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
10002ed4:	010000c4 	movi	r4,3
10002ed8:	00002b40 	call	100002b4 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
10002edc:	01005104 	movi	r4,324
10002ee0:	0001ec80 	call	10001ec8 <UsbRead>
10002ee4:	10bfffcc 	andi	r2,r2,65535
10002ee8:	10840018 	cmpnei	r2,r2,4096
10002eec:	1000091e 	bne	r2,zero,10002f14 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002ef0:	01005104 	movi	r4,324
10002ef4:	000b883a 	mov	r5,zero
10002ef8:	0001e740 	call	10001e74 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002efc:	0001883a 	nop
10002f00:	010000c4 	movi	r4,3
10002f04:	00002b40 	call	100002b4 <IO_read>
10002f08:	10bfffcc 	andi	r2,r2,65535
10002f0c:	1080040c 	andi	r2,r2,16
10002f10:	103ffb26 	beq	r2,zero,10002f00 <__alt_data_end+0xf8002f00>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10002f14:	01000084 	movi	r4,2
10002f18:	01414204 	movi	r5,1288
10002f1c:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10002f20:	0009883a 	mov	r4,zero
10002f24:	00002b40 	call	100002b4 <IO_read>
10002f28:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
10002f2c:	e0bfff0b 	ldhu	r2,-4(fp)
}
10002f30:	e037883a 	mov	sp,fp
10002f34:	dfc00117 	ldw	ra,4(sp)
10002f38:	df000017 	ldw	fp,0(sp)
10002f3c:	dec00204 	addi	sp,sp,8
10002f40:	f800283a 	ret

10002f44 <UsbPrintMem>:


void UsbPrintMem()
{
10002f44:	defffc04 	addi	sp,sp,-16
10002f48:	dfc00315 	stw	ra,12(sp)
10002f4c:	df000215 	stw	fp,8(sp)
10002f50:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
10002f54:	01000084 	movi	r4,2
10002f58:	01414004 	movi	r5,1280
10002f5c:	00002480 	call	10000248 <IO_write>
	for (i = 0; i <= 200; i += 2)
10002f60:	e03ffe15 	stw	zero,-8(fp)
10002f64:	00000e06 	br	10002fa0 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
10002f68:	0009883a 	mov	r4,zero
10002f6c:	00002b40 	call	100002b4 <IO_read>
10002f70:	10bfffcc 	andi	r2,r2,65535
10002f74:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
10002f78:	e0bffe17 	ldw	r2,-8(fp)
10002f7c:	10814004 	addi	r2,r2,1280
10002f80:	01040074 	movhi	r4,4097
10002f84:	21141c04 	addi	r4,r4,20592
10002f88:	100b883a 	mov	r5,r2
10002f8c:	e1bfff17 	ldw	r6,-4(fp)
10002f90:	0007eec0 	call	10007eec <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
10002f94:	e0bffe17 	ldw	r2,-8(fp)
10002f98:	10800084 	addi	r2,r2,2
10002f9c:	e0bffe15 	stw	r2,-8(fp)
10002fa0:	e0bffe17 	ldw	r2,-8(fp)
10002fa4:	10803250 	cmplti	r2,r2,201
10002fa8:	103fef1e 	bne	r2,zero,10002f68 <__alt_data_end+0xf8002f68>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
10002fac:	e037883a 	mov	sp,fp
10002fb0:	dfc00117 	ldw	ra,4(sp)
10002fb4:	df000017 	ldw	fp,0(sp)
10002fb8:	dec00204 	addi	sp,sp,8
10002fbc:	f800283a 	ret

10002fc0 <cos>:
10002fc0:	00a00034 	movhi	r2,32768
10002fc4:	defffa04 	addi	sp,sp,-24
10002fc8:	10bfffc4 	addi	r2,r2,-1
10002fcc:	00cffa74 	movhi	r3,16361
10002fd0:	dfc00515 	stw	ra,20(sp)
10002fd4:	2884703a 	and	r2,r5,r2
10002fd8:	18c87ec4 	addi	r3,r3,8699
10002fdc:	280f883a 	mov	r7,r5
10002fe0:	1880170e 	bge	r3,r2,10003040 <cos+0x80>
10002fe4:	00dffc34 	movhi	r3,32752
10002fe8:	18ffffc4 	addi	r3,r3,-1
10002fec:	1880050e 	bge	r3,r2,10003004 <cos+0x44>
10002ff0:	200d883a 	mov	r6,r4
10002ff4:	00074240 	call	10007424 <__subdf3>
10002ff8:	dfc00517 	ldw	ra,20(sp)
10002ffc:	dec00604 	addi	sp,sp,24
10003000:	f800283a 	ret
10003004:	d9800104 	addi	r6,sp,4
10003008:	00032cc0 	call	100032cc <__ieee754_rem_pio2>
1000300c:	108000cc 	andi	r2,r2,3
10003010:	00c00044 	movi	r3,1
10003014:	10c01726 	beq	r2,r3,10003074 <cos+0xb4>
10003018:	01000084 	movi	r4,2
1000301c:	11000e26 	beq	r2,r4,10003058 <cos+0x98>
10003020:	10001c26 	beq	r2,zero,10003094 <cos+0xd4>
10003024:	d9000117 	ldw	r4,4(sp)
10003028:	d9400217 	ldw	r5,8(sp)
1000302c:	d9800317 	ldw	r6,12(sp)
10003030:	d9c00417 	ldw	r7,16(sp)
10003034:	d8c00015 	stw	r3,0(sp)
10003038:	0004ed00 	call	10004ed0 <__kernel_sin>
1000303c:	003fee06 	br	10002ff8 <__alt_data_end+0xf8002ff8>
10003040:	000d883a 	mov	r6,zero
10003044:	000f883a 	mov	r7,zero
10003048:	0003cfc0 	call	10003cfc <__kernel_cos>
1000304c:	dfc00517 	ldw	ra,20(sp)
10003050:	dec00604 	addi	sp,sp,24
10003054:	f800283a 	ret
10003058:	d9000117 	ldw	r4,4(sp)
1000305c:	d9400217 	ldw	r5,8(sp)
10003060:	d9800317 	ldw	r6,12(sp)
10003064:	d9c00417 	ldw	r7,16(sp)
10003068:	0003cfc0 	call	10003cfc <__kernel_cos>
1000306c:	18e0003c 	xorhi	r3,r3,32768
10003070:	003fe106 	br	10002ff8 <__alt_data_end+0xf8002ff8>
10003074:	d9000117 	ldw	r4,4(sp)
10003078:	d9400217 	ldw	r5,8(sp)
1000307c:	d9800317 	ldw	r6,12(sp)
10003080:	d9c00417 	ldw	r7,16(sp)
10003084:	d8800015 	stw	r2,0(sp)
10003088:	0004ed00 	call	10004ed0 <__kernel_sin>
1000308c:	18e0003c 	xorhi	r3,r3,32768
10003090:	003fd906 	br	10002ff8 <__alt_data_end+0xf8002ff8>
10003094:	d9000117 	ldw	r4,4(sp)
10003098:	d9400217 	ldw	r5,8(sp)
1000309c:	d9800317 	ldw	r6,12(sp)
100030a0:	d9c00417 	ldw	r7,16(sp)
100030a4:	0003cfc0 	call	10003cfc <__kernel_cos>
100030a8:	003fd306 	br	10002ff8 <__alt_data_end+0xf8002ff8>

100030ac <sin>:
100030ac:	00a00034 	movhi	r2,32768
100030b0:	defffa04 	addi	sp,sp,-24
100030b4:	10bfffc4 	addi	r2,r2,-1
100030b8:	00cffa74 	movhi	r3,16361
100030bc:	dfc00515 	stw	ra,20(sp)
100030c0:	2884703a 	and	r2,r5,r2
100030c4:	18c87ec4 	addi	r3,r3,8699
100030c8:	280f883a 	mov	r7,r5
100030cc:	1880170e 	bge	r3,r2,1000312c <sin+0x80>
100030d0:	00dffc34 	movhi	r3,32752
100030d4:	18ffffc4 	addi	r3,r3,-1
100030d8:	1880050e 	bge	r3,r2,100030f0 <sin+0x44>
100030dc:	200d883a 	mov	r6,r4
100030e0:	00074240 	call	10007424 <__subdf3>
100030e4:	dfc00517 	ldw	ra,20(sp)
100030e8:	dec00604 	addi	sp,sp,24
100030ec:	f800283a 	ret
100030f0:	d9800104 	addi	r6,sp,4
100030f4:	00032cc0 	call	100032cc <__ieee754_rem_pio2>
100030f8:	108000cc 	andi	r2,r2,3
100030fc:	00c00044 	movi	r3,1
10003100:	10c01926 	beq	r2,r3,10003168 <sin+0xbc>
10003104:	01000084 	movi	r4,2
10003108:	11000f26 	beq	r2,r4,10003148 <sin+0x9c>
1000310c:	10001c26 	beq	r2,zero,10003180 <sin+0xd4>
10003110:	d9000117 	ldw	r4,4(sp)
10003114:	d9400217 	ldw	r5,8(sp)
10003118:	d9800317 	ldw	r6,12(sp)
1000311c:	d9c00417 	ldw	r7,16(sp)
10003120:	0003cfc0 	call	10003cfc <__kernel_cos>
10003124:	18e0003c 	xorhi	r3,r3,32768
10003128:	003fee06 	br	100030e4 <__alt_data_end+0xf80030e4>
1000312c:	d8000015 	stw	zero,0(sp)
10003130:	000d883a 	mov	r6,zero
10003134:	000f883a 	mov	r7,zero
10003138:	0004ed00 	call	10004ed0 <__kernel_sin>
1000313c:	dfc00517 	ldw	ra,20(sp)
10003140:	dec00604 	addi	sp,sp,24
10003144:	f800283a 	ret
10003148:	d9000117 	ldw	r4,4(sp)
1000314c:	d9400217 	ldw	r5,8(sp)
10003150:	d9800317 	ldw	r6,12(sp)
10003154:	d9c00417 	ldw	r7,16(sp)
10003158:	d8c00015 	stw	r3,0(sp)
1000315c:	0004ed00 	call	10004ed0 <__kernel_sin>
10003160:	18e0003c 	xorhi	r3,r3,32768
10003164:	003fdf06 	br	100030e4 <__alt_data_end+0xf80030e4>
10003168:	d9000117 	ldw	r4,4(sp)
1000316c:	d9400217 	ldw	r5,8(sp)
10003170:	d9800317 	ldw	r6,12(sp)
10003174:	d9c00417 	ldw	r7,16(sp)
10003178:	0003cfc0 	call	10003cfc <__kernel_cos>
1000317c:	003fd906 	br	100030e4 <__alt_data_end+0xf80030e4>
10003180:	d9000117 	ldw	r4,4(sp)
10003184:	d9400217 	ldw	r5,8(sp)
10003188:	d9800317 	ldw	r6,12(sp)
1000318c:	d9c00417 	ldw	r7,16(sp)
10003190:	d8c00015 	stw	r3,0(sp)
10003194:	0004ed00 	call	10004ed0 <__kernel_sin>
10003198:	003fd206 	br	100030e4 <__alt_data_end+0xf80030e4>

1000319c <sqrt>:
1000319c:	defff104 	addi	sp,sp,-60
100031a0:	dd000d15 	stw	r20,52(sp)
100031a4:	05040074 	movhi	r20,4097
100031a8:	dcc00c15 	stw	r19,48(sp)
100031ac:	dc800b15 	stw	r18,44(sp)
100031b0:	dc400a15 	stw	r17,40(sp)
100031b4:	dc000915 	stw	r16,36(sp)
100031b8:	dfc00e15 	stw	ra,56(sp)
100031bc:	a51c0404 	addi	r20,r20,28688
100031c0:	2027883a 	mov	r19,r4
100031c4:	2825883a 	mov	r18,r5
100031c8:	0003a680 	call	10003a68 <__ieee754_sqrt>
100031cc:	1821883a 	mov	r16,r3
100031d0:	a0c00017 	ldw	r3,0(r20)
100031d4:	1023883a 	mov	r17,r2
100031d8:	00bfffc4 	movi	r2,-1
100031dc:	18800a26 	beq	r3,r2,10003208 <sqrt+0x6c>
100031e0:	9809883a 	mov	r4,r19
100031e4:	900b883a 	mov	r5,r18
100031e8:	00053a00 	call	100053a0 <__fpclassifyd>
100031ec:	10000626 	beq	r2,zero,10003208 <sqrt+0x6c>
100031f0:	9809883a 	mov	r4,r19
100031f4:	900b883a 	mov	r5,r18
100031f8:	000d883a 	mov	r6,zero
100031fc:	000f883a 	mov	r7,zero
10003200:	0006ad80 	call	10006ad8 <__ledf2>
10003204:	10000a16 	blt	r2,zero,10003230 <sqrt+0x94>
10003208:	8805883a 	mov	r2,r17
1000320c:	8007883a 	mov	r3,r16
10003210:	dfc00e17 	ldw	ra,56(sp)
10003214:	dd000d17 	ldw	r20,52(sp)
10003218:	dcc00c17 	ldw	r19,48(sp)
1000321c:	dc800b17 	ldw	r18,44(sp)
10003220:	dc400a17 	ldw	r17,40(sp)
10003224:	dc000917 	ldw	r16,36(sp)
10003228:	dec00f04 	addi	sp,sp,60
1000322c:	f800283a 	ret
10003230:	00800044 	movi	r2,1
10003234:	d8800015 	stw	r2,0(sp)
10003238:	a4000017 	ldw	r16,0(r20)
1000323c:	00840074 	movhi	r2,4097
10003240:	10942104 	addi	r2,r2,20612
10003244:	d8800115 	stw	r2,4(sp)
10003248:	d8000815 	stw	zero,32(sp)
1000324c:	dcc00415 	stw	r19,16(sp)
10003250:	dc800515 	stw	r18,20(sp)
10003254:	dcc00215 	stw	r19,8(sp)
10003258:	dc800315 	stw	r18,12(sp)
1000325c:	80000a1e 	bne	r16,zero,10003288 <sqrt+0xec>
10003260:	d8000615 	stw	zero,24(sp)
10003264:	d8000715 	stw	zero,28(sp)
10003268:	d809883a 	mov	r4,sp
1000326c:	00054140 	call	10005414 <matherr>
10003270:	10000e26 	beq	r2,zero,100032ac <sqrt+0x110>
10003274:	d8800817 	ldw	r2,32(sp)
10003278:	1000101e 	bne	r2,zero,100032bc <sqrt+0x120>
1000327c:	d8800617 	ldw	r2,24(sp)
10003280:	d8c00717 	ldw	r3,28(sp)
10003284:	003fe206 	br	10003210 <__alt_data_end+0xf8003210>
10003288:	0009883a 	mov	r4,zero
1000328c:	000b883a 	mov	r5,zero
10003290:	000d883a 	mov	r6,zero
10003294:	000f883a 	mov	r7,zero
10003298:	0005ff40 	call	10005ff4 <__divdf3>
1000329c:	d8800615 	stw	r2,24(sp)
100032a0:	d8c00715 	stw	r3,28(sp)
100032a4:	00800084 	movi	r2,2
100032a8:	80bfef1e 	bne	r16,r2,10003268 <__alt_data_end+0xf8003268>
100032ac:	0007eb00 	call	10007eb0 <__errno>
100032b0:	00c00844 	movi	r3,33
100032b4:	10c00015 	stw	r3,0(r2)
100032b8:	003fee06 	br	10003274 <__alt_data_end+0xf8003274>
100032bc:	0007eb00 	call	10007eb0 <__errno>
100032c0:	d8c00817 	ldw	r3,32(sp)
100032c4:	10c00015 	stw	r3,0(r2)
100032c8:	003fec06 	br	1000327c <__alt_data_end+0xf800327c>

100032cc <__ieee754_rem_pio2>:
100032cc:	02200034 	movhi	r8,32768
100032d0:	deffea04 	addi	sp,sp,-88
100032d4:	423fffc4 	addi	r8,r8,-1
100032d8:	00cffa74 	movhi	r3,16361
100032dc:	ddc01315 	stw	r23,76(sp)
100032e0:	dc400d15 	stw	r17,52(sp)
100032e4:	dfc01515 	stw	ra,84(sp)
100032e8:	df001415 	stw	fp,80(sp)
100032ec:	dd801215 	stw	r22,72(sp)
100032f0:	dd401115 	stw	r21,68(sp)
100032f4:	dd001015 	stw	r20,64(sp)
100032f8:	dcc00f15 	stw	r19,60(sp)
100032fc:	dc800e15 	stw	r18,56(sp)
10003300:	dc000c15 	stw	r16,48(sp)
10003304:	2a2e703a 	and	r23,r5,r8
10003308:	18c87ec4 	addi	r3,r3,8699
1000330c:	2823883a 	mov	r17,r5
10003310:	1dc0790e 	bge	r3,r23,100034f8 <__ieee754_rem_pio2+0x22c>
10003314:	009000f4 	movhi	r2,16387
10003318:	10b65ec4 	addi	r2,r2,-9861
1000331c:	3021883a 	mov	r16,r6
10003320:	2027883a 	mov	r19,r4
10003324:	15c02316 	blt	r2,r23,100033b4 <__ieee754_rem_pio2+0xe8>
10003328:	01cffe74 	movhi	r7,16377
1000332c:	39c87ec4 	addi	r7,r7,8699
10003330:	01951034 	movhi	r6,21568
10003334:	0141800e 	bge	zero,r5,10003938 <__ieee754_rem_pio2+0x66c>
10003338:	00074240 	call	10007424 <__subdf3>
1000333c:	1025883a 	mov	r18,r2
10003340:	008ffe74 	movhi	r2,16377
10003344:	10887ec4 	addi	r2,r2,8699
10003348:	1823883a 	mov	r17,r3
1000334c:	b8808426 	beq	r23,r2,10003560 <__ieee754_rem_pio2+0x294>
10003350:	018698b4 	movhi	r6,6754
10003354:	01cf7474 	movhi	r7,15825
10003358:	3198cc44 	addi	r6,r6,25393
1000335c:	39ed1844 	addi	r7,r7,-19359
10003360:	9009883a 	mov	r4,r18
10003364:	180b883a 	mov	r5,r3
10003368:	00074240 	call	10007424 <__subdf3>
1000336c:	100d883a 	mov	r6,r2
10003370:	180f883a 	mov	r7,r3
10003374:	9009883a 	mov	r4,r18
10003378:	880b883a 	mov	r5,r17
1000337c:	80800015 	stw	r2,0(r16)
10003380:	80c00115 	stw	r3,4(r16)
10003384:	00074240 	call	10007424 <__subdf3>
10003388:	018698b4 	movhi	r6,6754
1000338c:	01cf7474 	movhi	r7,15825
10003390:	1009883a 	mov	r4,r2
10003394:	180b883a 	mov	r5,r3
10003398:	3198cc44 	addi	r6,r6,25393
1000339c:	39ed1844 	addi	r7,r7,-19359
100033a0:	00074240 	call	10007424 <__subdf3>
100033a4:	80800215 	stw	r2,8(r16)
100033a8:	80c00315 	stw	r3,12(r16)
100033ac:	00800044 	movi	r2,1
100033b0:	00005606 	br	1000350c <__ieee754_rem_pio2+0x240>
100033b4:	00904e74 	movhi	r2,16697
100033b8:	10887ec4 	addi	r2,r2,8699
100033bc:	15c0890e 	bge	r2,r23,100035e4 <__ieee754_rem_pio2+0x318>
100033c0:	009ffc34 	movhi	r2,32752
100033c4:	10bfffc4 	addi	r2,r2,-1
100033c8:	15c05c16 	blt	r2,r23,1000353c <__ieee754_rem_pio2+0x270>
100033cc:	b829d53a 	srai	r20,r23,20
100033d0:	a53efa84 	addi	r20,r20,-1046
100033d4:	a024953a 	slli	r18,r20,20
100033d8:	bca5c83a 	sub	r18,r23,r18
100033dc:	900b883a 	mov	r5,r18
100033e0:	0007cf40 	call	10007cf4 <__fixdfsi>
100033e4:	1009883a 	mov	r4,r2
100033e8:	0007d7c0 	call	10007d7c <__floatsidf>
100033ec:	9809883a 	mov	r4,r19
100033f0:	900b883a 	mov	r5,r18
100033f4:	100d883a 	mov	r6,r2
100033f8:	180f883a 	mov	r7,r3
100033fc:	d8800215 	stw	r2,8(sp)
10003400:	d8c00315 	stw	r3,12(sp)
10003404:	00074240 	call	10007424 <__subdf3>
10003408:	000d883a 	mov	r6,zero
1000340c:	01d05c34 	movhi	r7,16752
10003410:	1009883a 	mov	r4,r2
10003414:	180b883a 	mov	r5,r3
10003418:	0006bb80 	call	10006bb8 <__muldf3>
1000341c:	180b883a 	mov	r5,r3
10003420:	1009883a 	mov	r4,r2
10003424:	182b883a 	mov	r21,r3
10003428:	102d883a 	mov	r22,r2
1000342c:	0007cf40 	call	10007cf4 <__fixdfsi>
10003430:	1009883a 	mov	r4,r2
10003434:	0007d7c0 	call	10007d7c <__floatsidf>
10003438:	100d883a 	mov	r6,r2
1000343c:	180f883a 	mov	r7,r3
10003440:	b009883a 	mov	r4,r22
10003444:	a80b883a 	mov	r5,r21
10003448:	1027883a 	mov	r19,r2
1000344c:	1825883a 	mov	r18,r3
10003450:	d8800415 	stw	r2,16(sp)
10003454:	d8c00515 	stw	r3,20(sp)
10003458:	00074240 	call	10007424 <__subdf3>
1000345c:	1009883a 	mov	r4,r2
10003460:	180b883a 	mov	r5,r3
10003464:	000d883a 	mov	r6,zero
10003468:	01d05c34 	movhi	r7,16752
1000346c:	0006bb80 	call	10006bb8 <__muldf3>
10003470:	1009883a 	mov	r4,r2
10003474:	180b883a 	mov	r5,r3
10003478:	000d883a 	mov	r6,zero
1000347c:	000f883a 	mov	r7,zero
10003480:	d8800615 	stw	r2,24(sp)
10003484:	d8c00715 	stw	r3,28(sp)
10003488:	00069740 	call	10006974 <__eqdf2>
1000348c:	1001491e 	bne	r2,zero,100039b4 <__ieee754_rem_pio2+0x6e8>
10003490:	000f883a 	mov	r7,zero
10003494:	9809883a 	mov	r4,r19
10003498:	900b883a 	mov	r5,r18
1000349c:	000d883a 	mov	r6,zero
100034a0:	00069740 	call	10006974 <__eqdf2>
100034a4:	100f003a 	cmpeq	r7,r2,zero
100034a8:	00800084 	movi	r2,2
100034ac:	11cfc83a 	sub	r7,r2,r7
100034b0:	00800084 	movi	r2,2
100034b4:	d8800015 	stw	r2,0(sp)
100034b8:	00840074 	movhi	r2,4097
100034bc:	10944304 	addi	r2,r2,20748
100034c0:	d8800115 	stw	r2,4(sp)
100034c4:	d9000204 	addi	r4,sp,8
100034c8:	800b883a 	mov	r5,r16
100034cc:	a00d883a 	mov	r6,r20
100034d0:	00041a00 	call	100041a0 <__kernel_rem_pio2>
100034d4:	88000d0e 	bge	r17,zero,1000350c <__ieee754_rem_pio2+0x240>
100034d8:	81000117 	ldw	r4,4(r16)
100034dc:	80c00317 	ldw	r3,12(r16)
100034e0:	0085c83a 	sub	r2,zero,r2
100034e4:	2120003c 	xorhi	r4,r4,32768
100034e8:	18e0003c 	xorhi	r3,r3,32768
100034ec:	81000115 	stw	r4,4(r16)
100034f0:	80c00315 	stw	r3,12(r16)
100034f4:	00000506 	br	1000350c <__ieee754_rem_pio2+0x240>
100034f8:	31000015 	stw	r4,0(r6)
100034fc:	31400115 	stw	r5,4(r6)
10003500:	30000215 	stw	zero,8(r6)
10003504:	30000315 	stw	zero,12(r6)
10003508:	0005883a 	mov	r2,zero
1000350c:	dfc01517 	ldw	ra,84(sp)
10003510:	df001417 	ldw	fp,80(sp)
10003514:	ddc01317 	ldw	r23,76(sp)
10003518:	dd801217 	ldw	r22,72(sp)
1000351c:	dd401117 	ldw	r21,68(sp)
10003520:	dd001017 	ldw	r20,64(sp)
10003524:	dcc00f17 	ldw	r19,60(sp)
10003528:	dc800e17 	ldw	r18,56(sp)
1000352c:	dc400d17 	ldw	r17,52(sp)
10003530:	dc000c17 	ldw	r16,48(sp)
10003534:	dec01604 	addi	sp,sp,88
10003538:	f800283a 	ret
1000353c:	200d883a 	mov	r6,r4
10003540:	280f883a 	mov	r7,r5
10003544:	00074240 	call	10007424 <__subdf3>
10003548:	80800215 	stw	r2,8(r16)
1000354c:	80800015 	stw	r2,0(r16)
10003550:	80c00315 	stw	r3,12(r16)
10003554:	80c00115 	stw	r3,4(r16)
10003558:	0005883a 	mov	r2,zero
1000355c:	003feb06 	br	1000350c <__alt_data_end+0xf800350c>
10003560:	01cf7474 	movhi	r7,15825
10003564:	9009883a 	mov	r4,r18
10003568:	39ed1844 	addi	r7,r7,-19359
1000356c:	01869834 	movhi	r6,6752
10003570:	180b883a 	mov	r5,r3
10003574:	00074240 	call	10007424 <__subdf3>
10003578:	018b80f4 	movhi	r6,11779
1000357c:	01cee8f4 	movhi	r7,15267
10003580:	1009883a 	mov	r4,r2
10003584:	180b883a 	mov	r5,r3
10003588:	319c1cc4 	addi	r6,r6,28787
1000358c:	39c66284 	addi	r7,r7,6538
10003590:	1025883a 	mov	r18,r2
10003594:	1823883a 	mov	r17,r3
10003598:	00074240 	call	10007424 <__subdf3>
1000359c:	100d883a 	mov	r6,r2
100035a0:	180f883a 	mov	r7,r3
100035a4:	9009883a 	mov	r4,r18
100035a8:	880b883a 	mov	r5,r17
100035ac:	80800015 	stw	r2,0(r16)
100035b0:	80c00115 	stw	r3,4(r16)
100035b4:	00074240 	call	10007424 <__subdf3>
100035b8:	018b80f4 	movhi	r6,11779
100035bc:	01cee8f4 	movhi	r7,15267
100035c0:	1009883a 	mov	r4,r2
100035c4:	180b883a 	mov	r5,r3
100035c8:	319c1cc4 	addi	r6,r6,28787
100035cc:	39c66284 	addi	r7,r7,6538
100035d0:	00074240 	call	10007424 <__subdf3>
100035d4:	80800215 	stw	r2,8(r16)
100035d8:	80c00315 	stw	r3,12(r16)
100035dc:	00800044 	movi	r2,1
100035e0:	003fca06 	br	1000350c <__alt_data_end+0xf800350c>
100035e4:	00051980 	call	10005198 <fabs>
100035e8:	019b72b4 	movhi	r6,28106
100035ec:	01cff934 	movhi	r7,16356
100035f0:	1009883a 	mov	r4,r2
100035f4:	180b883a 	mov	r5,r3
100035f8:	31b220c4 	addi	r6,r6,-14205
100035fc:	39d7cc04 	addi	r7,r7,24368
10003600:	102d883a 	mov	r22,r2
10003604:	182b883a 	mov	r21,r3
10003608:	0006bb80 	call	10006bb8 <__muldf3>
1000360c:	000d883a 	mov	r6,zero
10003610:	01cff834 	movhi	r7,16352
10003614:	1009883a 	mov	r4,r2
10003618:	180b883a 	mov	r5,r3
1000361c:	00057580 	call	10005758 <__adddf3>
10003620:	180b883a 	mov	r5,r3
10003624:	1009883a 	mov	r4,r2
10003628:	0007cf40 	call	10007cf4 <__fixdfsi>
1000362c:	1009883a 	mov	r4,r2
10003630:	1025883a 	mov	r18,r2
10003634:	0007d7c0 	call	10007d7c <__floatsidf>
10003638:	01cffe74 	movhi	r7,16377
1000363c:	1009883a 	mov	r4,r2
10003640:	180b883a 	mov	r5,r3
10003644:	39c87ec4 	addi	r7,r7,8699
10003648:	01951034 	movhi	r6,21568
1000364c:	1029883a 	mov	r20,r2
10003650:	1827883a 	mov	r19,r3
10003654:	0006bb80 	call	10006bb8 <__muldf3>
10003658:	b009883a 	mov	r4,r22
1000365c:	a80b883a 	mov	r5,r21
10003660:	100d883a 	mov	r6,r2
10003664:	180f883a 	mov	r7,r3
10003668:	00074240 	call	10007424 <__subdf3>
1000366c:	018698b4 	movhi	r6,6754
10003670:	01cf7474 	movhi	r7,15825
10003674:	a009883a 	mov	r4,r20
10003678:	3198cc44 	addi	r6,r6,25393
1000367c:	39ed1844 	addi	r7,r7,-19359
10003680:	980b883a 	mov	r5,r19
10003684:	1039883a 	mov	fp,r2
10003688:	d8c00815 	stw	r3,32(sp)
1000368c:	0006bb80 	call	10006bb8 <__muldf3>
10003690:	010007c4 	movi	r4,31
10003694:	e017883a 	mov	r11,fp
10003698:	da800817 	ldw	r10,32(sp)
1000369c:	102d883a 	mov	r22,r2
100036a0:	182b883a 	mov	r21,r3
100036a4:	24802816 	blt	r4,r18,10003748 <__ieee754_rem_pio2+0x47c>
100036a8:	927fffc4 	addi	r9,r18,-1
100036ac:	4a53883a 	add	r9,r9,r9
100036b0:	01040074 	movhi	r4,4097
100036b4:	21142304 	addi	r4,r4,20620
100036b8:	4a53883a 	add	r9,r9,r9
100036bc:	2253883a 	add	r9,r4,r9
100036c0:	49000017 	ldw	r4,0(r9)
100036c4:	25c02026 	beq	r4,r23,10003748 <__ieee754_rem_pio2+0x47c>
100036c8:	e009883a 	mov	r4,fp
100036cc:	500b883a 	mov	r5,r10
100036d0:	100d883a 	mov	r6,r2
100036d4:	180f883a 	mov	r7,r3
100036d8:	da800b15 	stw	r10,44(sp)
100036dc:	df000a15 	stw	fp,40(sp)
100036e0:	00074240 	call	10007424 <__subdf3>
100036e4:	da800b17 	ldw	r10,44(sp)
100036e8:	dac00a17 	ldw	r11,40(sp)
100036ec:	1019883a 	mov	r12,r2
100036f0:	1813883a 	mov	r9,r3
100036f4:	80800015 	stw	r2,0(r16)
100036f8:	80c00115 	stw	r3,4(r16)
100036fc:	600d883a 	mov	r6,r12
10003700:	480f883a 	mov	r7,r9
10003704:	5809883a 	mov	r4,r11
10003708:	500b883a 	mov	r5,r10
1000370c:	da400b15 	stw	r9,44(sp)
10003710:	db000a15 	stw	r12,40(sp)
10003714:	00074240 	call	10007424 <__subdf3>
10003718:	1009883a 	mov	r4,r2
1000371c:	180b883a 	mov	r5,r3
10003720:	b00d883a 	mov	r6,r22
10003724:	a80f883a 	mov	r7,r21
10003728:	00074240 	call	10007424 <__subdf3>
1000372c:	80800215 	stw	r2,8(r16)
10003730:	80c00315 	stw	r3,12(r16)
10003734:	da400b17 	ldw	r9,44(sp)
10003738:	db000a17 	ldw	r12,40(sp)
1000373c:	88009f16 	blt	r17,zero,100039bc <__ieee754_rem_pio2+0x6f0>
10003740:	9005883a 	mov	r2,r18
10003744:	003f7106 	br	1000350c <__alt_data_end+0xf800350c>
10003748:	d9400817 	ldw	r5,32(sp)
1000374c:	e009883a 	mov	r4,fp
10003750:	100d883a 	mov	r6,r2
10003754:	180f883a 	mov	r7,r3
10003758:	da800b15 	stw	r10,44(sp)
1000375c:	dac00a15 	stw	r11,40(sp)
10003760:	00074240 	call	10007424 <__subdf3>
10003764:	1019883a 	mov	r12,r2
10003768:	1804d53a 	srli	r2,r3,20
1000376c:	b811d53a 	srai	r8,r23,20
10003770:	1813883a 	mov	r9,r3
10003774:	1081ffcc 	andi	r2,r2,2047
10003778:	80c00115 	stw	r3,4(r16)
1000377c:	83000015 	stw	r12,0(r16)
10003780:	4085c83a 	sub	r2,r8,r2
10003784:	00c00404 	movi	r3,16
10003788:	da800b17 	ldw	r10,44(sp)
1000378c:	dac00a17 	ldw	r11,40(sp)
10003790:	18bfda0e 	bge	r3,r2,100036fc <__alt_data_end+0xf80036fc>
10003794:	01cf7474 	movhi	r7,15825
10003798:	39ed1844 	addi	r7,r7,-19359
1000379c:	a009883a 	mov	r4,r20
100037a0:	980b883a 	mov	r5,r19
100037a4:	01869834 	movhi	r6,6752
100037a8:	da000a15 	stw	r8,40(sp)
100037ac:	0006bb80 	call	10006bb8 <__muldf3>
100037b0:	d9400817 	ldw	r5,32(sp)
100037b4:	e009883a 	mov	r4,fp
100037b8:	100d883a 	mov	r6,r2
100037bc:	180f883a 	mov	r7,r3
100037c0:	102d883a 	mov	r22,r2
100037c4:	182b883a 	mov	r21,r3
100037c8:	00074240 	call	10007424 <__subdf3>
100037cc:	d9400817 	ldw	r5,32(sp)
100037d0:	e009883a 	mov	r4,fp
100037d4:	100d883a 	mov	r6,r2
100037d8:	180f883a 	mov	r7,r3
100037dc:	182f883a 	mov	r23,r3
100037e0:	d8800915 	stw	r2,36(sp)
100037e4:	00074240 	call	10007424 <__subdf3>
100037e8:	b00d883a 	mov	r6,r22
100037ec:	a80f883a 	mov	r7,r21
100037f0:	1009883a 	mov	r4,r2
100037f4:	180b883a 	mov	r5,r3
100037f8:	00074240 	call	10007424 <__subdf3>
100037fc:	018b80f4 	movhi	r6,11779
10003800:	01cee8f4 	movhi	r7,15267
10003804:	a009883a 	mov	r4,r20
10003808:	980b883a 	mov	r5,r19
1000380c:	319c1cc4 	addi	r6,r6,28787
10003810:	39c66284 	addi	r7,r7,6538
10003814:	102d883a 	mov	r22,r2
10003818:	182b883a 	mov	r21,r3
1000381c:	0006bb80 	call	10006bb8 <__muldf3>
10003820:	b00d883a 	mov	r6,r22
10003824:	a80f883a 	mov	r7,r21
10003828:	1009883a 	mov	r4,r2
1000382c:	180b883a 	mov	r5,r3
10003830:	00074240 	call	10007424 <__subdf3>
10003834:	d9000917 	ldw	r4,36(sp)
10003838:	b80b883a 	mov	r5,r23
1000383c:	100d883a 	mov	r6,r2
10003840:	180f883a 	mov	r7,r3
10003844:	102d883a 	mov	r22,r2
10003848:	182b883a 	mov	r21,r3
1000384c:	00074240 	call	10007424 <__subdf3>
10003850:	1019883a 	mov	r12,r2
10003854:	1804d53a 	srli	r2,r3,20
10003858:	da000a17 	ldw	r8,40(sp)
1000385c:	83000015 	stw	r12,0(r16)
10003860:	1081ffcc 	andi	r2,r2,2047
10003864:	4091c83a 	sub	r8,r8,r2
10003868:	80c00115 	stw	r3,4(r16)
1000386c:	00800c44 	movi	r2,49
10003870:	1813883a 	mov	r9,r3
10003874:	1200790e 	bge	r2,r8,10003a5c <__ieee754_rem_pio2+0x790>
10003878:	01cee8f4 	movhi	r7,15267
1000387c:	39c66284 	addi	r7,r7,6538
10003880:	a009883a 	mov	r4,r20
10003884:	980b883a 	mov	r5,r19
10003888:	018b8034 	movhi	r6,11776
1000388c:	0006bb80 	call	10006bb8 <__muldf3>
10003890:	d9000917 	ldw	r4,36(sp)
10003894:	b80b883a 	mov	r5,r23
10003898:	100d883a 	mov	r6,r2
1000389c:	180f883a 	mov	r7,r3
100038a0:	102d883a 	mov	r22,r2
100038a4:	182b883a 	mov	r21,r3
100038a8:	00074240 	call	10007424 <__subdf3>
100038ac:	d9000917 	ldw	r4,36(sp)
100038b0:	b80b883a 	mov	r5,r23
100038b4:	100d883a 	mov	r6,r2
100038b8:	180f883a 	mov	r7,r3
100038bc:	d8c00b15 	stw	r3,44(sp)
100038c0:	d8800a15 	stw	r2,40(sp)
100038c4:	00074240 	call	10007424 <__subdf3>
100038c8:	b00d883a 	mov	r6,r22
100038cc:	a80f883a 	mov	r7,r21
100038d0:	1009883a 	mov	r4,r2
100038d4:	180b883a 	mov	r5,r3
100038d8:	00074240 	call	10007424 <__subdf3>
100038dc:	01894834 	movhi	r6,9504
100038e0:	01ce5f34 	movhi	r7,14716
100038e4:	a009883a 	mov	r4,r20
100038e8:	980b883a 	mov	r5,r19
100038ec:	31927044 	addi	r6,r6,18881
100038f0:	39e0e684 	addi	r7,r7,-31846
100038f4:	102d883a 	mov	r22,r2
100038f8:	182b883a 	mov	r21,r3
100038fc:	0006bb80 	call	10006bb8 <__muldf3>
10003900:	b00d883a 	mov	r6,r22
10003904:	a80f883a 	mov	r7,r21
10003908:	1009883a 	mov	r4,r2
1000390c:	180b883a 	mov	r5,r3
10003910:	00074240 	call	10007424 <__subdf3>
10003914:	dac00a17 	ldw	r11,40(sp)
10003918:	da800b17 	ldw	r10,44(sp)
1000391c:	102d883a 	mov	r22,r2
10003920:	182b883a 	mov	r21,r3
10003924:	5809883a 	mov	r4,r11
10003928:	500b883a 	mov	r5,r10
1000392c:	100d883a 	mov	r6,r2
10003930:	180f883a 	mov	r7,r3
10003934:	003f6a06 	br	100036e0 <__alt_data_end+0xf80036e0>
10003938:	00057580 	call	10005758 <__adddf3>
1000393c:	1025883a 	mov	r18,r2
10003940:	008ffe74 	movhi	r2,16377
10003944:	10887ec4 	addi	r2,r2,8699
10003948:	1823883a 	mov	r17,r3
1000394c:	b8802226 	beq	r23,r2,100039d8 <__ieee754_rem_pio2+0x70c>
10003950:	018698b4 	movhi	r6,6754
10003954:	01cf7474 	movhi	r7,15825
10003958:	3198cc44 	addi	r6,r6,25393
1000395c:	39ed1844 	addi	r7,r7,-19359
10003960:	9009883a 	mov	r4,r18
10003964:	180b883a 	mov	r5,r3
10003968:	00057580 	call	10005758 <__adddf3>
1000396c:	100d883a 	mov	r6,r2
10003970:	180f883a 	mov	r7,r3
10003974:	9009883a 	mov	r4,r18
10003978:	880b883a 	mov	r5,r17
1000397c:	80800015 	stw	r2,0(r16)
10003980:	80c00115 	stw	r3,4(r16)
10003984:	00074240 	call	10007424 <__subdf3>
10003988:	018698b4 	movhi	r6,6754
1000398c:	01cf7474 	movhi	r7,15825
10003990:	1009883a 	mov	r4,r2
10003994:	180b883a 	mov	r5,r3
10003998:	3198cc44 	addi	r6,r6,25393
1000399c:	39ed1844 	addi	r7,r7,-19359
100039a0:	00057580 	call	10005758 <__adddf3>
100039a4:	80800215 	stw	r2,8(r16)
100039a8:	80c00315 	stw	r3,12(r16)
100039ac:	00bfffc4 	movi	r2,-1
100039b0:	003ed606 	br	1000350c <__alt_data_end+0xf800350c>
100039b4:	01c000c4 	movi	r7,3
100039b8:	003ebd06 	br	100034b0 <__alt_data_end+0xf80034b0>
100039bc:	4a60003c 	xorhi	r9,r9,32768
100039c0:	18e0003c 	xorhi	r3,r3,32768
100039c4:	83000015 	stw	r12,0(r16)
100039c8:	82400115 	stw	r9,4(r16)
100039cc:	80c00315 	stw	r3,12(r16)
100039d0:	0485c83a 	sub	r2,zero,r18
100039d4:	003ecd06 	br	1000350c <__alt_data_end+0xf800350c>
100039d8:	01cf7474 	movhi	r7,15825
100039dc:	9009883a 	mov	r4,r18
100039e0:	39ed1844 	addi	r7,r7,-19359
100039e4:	01869834 	movhi	r6,6752
100039e8:	180b883a 	mov	r5,r3
100039ec:	00057580 	call	10005758 <__adddf3>
100039f0:	018b80f4 	movhi	r6,11779
100039f4:	01cee8f4 	movhi	r7,15267
100039f8:	1009883a 	mov	r4,r2
100039fc:	180b883a 	mov	r5,r3
10003a00:	319c1cc4 	addi	r6,r6,28787
10003a04:	39c66284 	addi	r7,r7,6538
10003a08:	1025883a 	mov	r18,r2
10003a0c:	1823883a 	mov	r17,r3
10003a10:	00057580 	call	10005758 <__adddf3>
10003a14:	100d883a 	mov	r6,r2
10003a18:	180f883a 	mov	r7,r3
10003a1c:	9009883a 	mov	r4,r18
10003a20:	880b883a 	mov	r5,r17
10003a24:	80800015 	stw	r2,0(r16)
10003a28:	80c00115 	stw	r3,4(r16)
10003a2c:	00074240 	call	10007424 <__subdf3>
10003a30:	018b80f4 	movhi	r6,11779
10003a34:	01cee8f4 	movhi	r7,15267
10003a38:	1009883a 	mov	r4,r2
10003a3c:	180b883a 	mov	r5,r3
10003a40:	319c1cc4 	addi	r6,r6,28787
10003a44:	39c66284 	addi	r7,r7,6538
10003a48:	00057580 	call	10005758 <__adddf3>
10003a4c:	80800215 	stw	r2,8(r16)
10003a50:	80c00315 	stw	r3,12(r16)
10003a54:	00bfffc4 	movi	r2,-1
10003a58:	003eac06 	br	1000350c <__alt_data_end+0xf800350c>
10003a5c:	dac00917 	ldw	r11,36(sp)
10003a60:	b815883a 	mov	r10,r23
10003a64:	003f2506 	br	100036fc <__alt_data_end+0xf80036fc>

10003a68 <__ieee754_sqrt>:
10003a68:	defffd04 	addi	sp,sp,-12
10003a6c:	dc400115 	stw	r17,4(sp)
10003a70:	dc000015 	stw	r16,0(sp)
10003a74:	dfc00215 	stw	ra,8(sp)
10003a78:	28dffc2c 	andhi	r3,r5,32752
10003a7c:	009ffc34 	movhi	r2,32752
10003a80:	2821883a 	mov	r16,r5
10003a84:	2023883a 	mov	r17,r4
10003a88:	18807c26 	beq	r3,r2,10003c7c <__ieee754_sqrt+0x214>
10003a8c:	2011883a 	mov	r8,r4
10003a90:	01405f0e 	bge	zero,r5,10003c10 <__ieee754_sqrt+0x1a8>
10003a94:	2815d53a 	srai	r10,r5,20
10003a98:	50006a26 	beq	r10,zero,10003c44 <__ieee754_sqrt+0x1dc>
10003a9c:	00800434 	movhi	r2,16
10003aa0:	52bf0044 	addi	r10,r10,-1023
10003aa4:	10bfffc4 	addi	r2,r2,-1
10003aa8:	8084703a 	and	r2,r16,r2
10003aac:	50c0004c 	andi	r3,r10,1
10003ab0:	10800434 	orhi	r2,r2,16
10003ab4:	18004f1e 	bne	r3,zero,10003bf4 <__ieee754_sqrt+0x18c>
10003ab8:	4006d7fa 	srli	r3,r8,31
10003abc:	5015d07a 	srai	r10,r10,1
10003ac0:	1085883a 	add	r2,r2,r2
10003ac4:	10c5883a 	add	r2,r2,r3
10003ac8:	01800584 	movi	r6,22
10003acc:	4207883a 	add	r3,r8,r8
10003ad0:	0013883a 	mov	r9,zero
10003ad4:	000b883a 	mov	r5,zero
10003ad8:	01000834 	movhi	r4,32
10003adc:	290f883a 	add	r7,r5,r4
10003ae0:	1810d7fa 	srli	r8,r3,31
10003ae4:	31bfffc4 	addi	r6,r6,-1
10003ae8:	11c00316 	blt	r2,r7,10003af8 <__ieee754_sqrt+0x90>
10003aec:	11c5c83a 	sub	r2,r2,r7
10003af0:	390b883a 	add	r5,r7,r4
10003af4:	4913883a 	add	r9,r9,r4
10003af8:	1085883a 	add	r2,r2,r2
10003afc:	1205883a 	add	r2,r2,r8
10003b00:	18c7883a 	add	r3,r3,r3
10003b04:	2008d07a 	srli	r4,r4,1
10003b08:	303ff41e 	bne	r6,zero,10003adc <__alt_data_end+0xf8003adc>
10003b0c:	01200034 	movhi	r4,32768
10003b10:	01c00804 	movi	r7,32
10003b14:	0011883a 	mov	r8,zero
10003b18:	0017883a 	mov	r11,zero
10003b1c:	201b883a 	mov	r13,r4
10003b20:	00000806 	br	10003b44 <__ieee754_sqrt+0xdc>
10003b24:	11401726 	beq	r2,r5,10003b84 <__ieee754_sqrt+0x11c>
10003b28:	180cd7fa 	srli	r6,r3,31
10003b2c:	1085883a 	add	r2,r2,r2
10003b30:	39ffffc4 	addi	r7,r7,-1
10003b34:	1185883a 	add	r2,r2,r6
10003b38:	18c7883a 	add	r3,r3,r3
10003b3c:	2008d07a 	srli	r4,r4,1
10003b40:	38001726 	beq	r7,zero,10003ba0 <__ieee754_sqrt+0x138>
10003b44:	590d883a 	add	r6,r11,r4
10003b48:	28bff60e 	bge	r5,r2,10003b24 <__alt_data_end+0xf8003b24>
10003b4c:	3320002c 	andhi	r12,r6,32768
10003b50:	3117883a 	add	r11,r6,r4
10003b54:	63400826 	beq	r12,r13,10003b78 <__ieee754_sqrt+0x110>
10003b58:	2819883a 	mov	r12,r5
10003b5c:	1145c83a 	sub	r2,r2,r5
10003b60:	1980012e 	bgeu	r3,r6,10003b68 <__ieee754_sqrt+0x100>
10003b64:	10bfffc4 	addi	r2,r2,-1
10003b68:	1987c83a 	sub	r3,r3,r6
10003b6c:	4111883a 	add	r8,r8,r4
10003b70:	600b883a 	mov	r5,r12
10003b74:	003fec06 	br	10003b28 <__alt_data_end+0xf8003b28>
10003b78:	583ff716 	blt	r11,zero,10003b58 <__alt_data_end+0xf8003b58>
10003b7c:	2b000044 	addi	r12,r5,1
10003b80:	003ff606 	br	10003b5c <__alt_data_end+0xf8003b5c>
10003b84:	19801936 	bltu	r3,r6,10003bec <__ieee754_sqrt+0x184>
10003b88:	3320002c 	andhi	r12,r6,32768
10003b8c:	3117883a 	add	r11,r6,r4
10003b90:	63404626 	beq	r12,r13,10003cac <__ieee754_sqrt+0x244>
10003b94:	1019883a 	mov	r12,r2
10003b98:	0005883a 	mov	r2,zero
10003b9c:	003ff206 	br	10003b68 <__alt_data_end+0xf8003b68>
10003ba0:	10c4b03a 	or	r2,r2,r3
10003ba4:	10000426 	beq	r2,zero,10003bb8 <__ieee754_sqrt+0x150>
10003ba8:	00bfffc4 	movi	r2,-1
10003bac:	40804326 	beq	r8,r2,10003cbc <__ieee754_sqrt+0x254>
10003bb0:	4080004c 	andi	r2,r8,1
10003bb4:	1211883a 	add	r8,r2,r8
10003bb8:	4004d07a 	srli	r2,r8,1
10003bbc:	4807d07a 	srai	r3,r9,1
10003bc0:	010ff834 	movhi	r4,16352
10003bc4:	4a40004c 	andi	r9,r9,1
10003bc8:	1909883a 	add	r4,r3,r4
10003bcc:	48000e1e 	bne	r9,zero,10003c08 <__ieee754_sqrt+0x1a0>
10003bd0:	5006953a 	slli	r3,r10,20
10003bd4:	1907883a 	add	r3,r3,r4
10003bd8:	dfc00217 	ldw	ra,8(sp)
10003bdc:	dc400117 	ldw	r17,4(sp)
10003be0:	dc000017 	ldw	r16,0(sp)
10003be4:	dec00304 	addi	sp,sp,12
10003be8:	f800283a 	ret
10003bec:	100b883a 	mov	r5,r2
10003bf0:	003fcd06 	br	10003b28 <__alt_data_end+0xf8003b28>
10003bf4:	4006d7fa 	srli	r3,r8,31
10003bf8:	1085883a 	add	r2,r2,r2
10003bfc:	4211883a 	add	r8,r8,r8
10003c00:	10c5883a 	add	r2,r2,r3
10003c04:	003fac06 	br	10003ab8 <__alt_data_end+0xf8003ab8>
10003c08:	10a00034 	orhi	r2,r2,32768
10003c0c:	003ff006 	br	10003bd0 <__alt_data_end+0xf8003bd0>
10003c10:	00a00034 	movhi	r2,32768
10003c14:	10bfffc4 	addi	r2,r2,-1
10003c18:	2884703a 	and	r2,r5,r2
10003c1c:	1104b03a 	or	r2,r2,r4
10003c20:	10001f26 	beq	r2,zero,10003ca0 <__ieee754_sqrt+0x238>
10003c24:	28002c1e 	bne	r5,zero,10003cd8 <__ieee754_sqrt+0x270>
10003c28:	0015883a 	mov	r10,zero
10003c2c:	4020d2fa 	srli	r16,r8,11
10003c30:	52bffac4 	addi	r10,r10,-21
10003c34:	4010957a 	slli	r8,r8,21
10003c38:	803ffc26 	beq	r16,zero,10003c2c <__alt_data_end+0xf8003c2c>
10003c3c:	8080042c 	andhi	r2,r16,16
10003c40:	1000211e 	bne	r2,zero,10003cc8 <__ieee754_sqrt+0x260>
10003c44:	0005883a 	mov	r2,zero
10003c48:	8421883a 	add	r16,r16,r16
10003c4c:	80c0042c 	andhi	r3,r16,16
10003c50:	10800044 	addi	r2,r2,1
10003c54:	183ffc26 	beq	r3,zero,10003c48 <__alt_data_end+0xf8003c48>
10003c58:	01000044 	movi	r4,1
10003c5c:	00c00804 	movi	r3,32
10003c60:	2089c83a 	sub	r4,r4,r2
10003c64:	1887c83a 	sub	r3,r3,r2
10003c68:	40c6d83a 	srl	r3,r8,r3
10003c6c:	5115883a 	add	r10,r10,r4
10003c70:	4090983a 	sll	r8,r8,r2
10003c74:	80e0b03a 	or	r16,r16,r3
10003c78:	003f8806 	br	10003a9c <__alt_data_end+0xf8003a9c>
10003c7c:	200d883a 	mov	r6,r4
10003c80:	280f883a 	mov	r7,r5
10003c84:	0006bb80 	call	10006bb8 <__muldf3>
10003c88:	1009883a 	mov	r4,r2
10003c8c:	180b883a 	mov	r5,r3
10003c90:	880d883a 	mov	r6,r17
10003c94:	800f883a 	mov	r7,r16
10003c98:	00057580 	call	10005758 <__adddf3>
10003c9c:	003fce06 	br	10003bd8 <__alt_data_end+0xf8003bd8>
10003ca0:	2005883a 	mov	r2,r4
10003ca4:	2807883a 	mov	r3,r5
10003ca8:	003fcb06 	br	10003bd8 <__alt_data_end+0xf8003bd8>
10003cac:	583fb30e 	bge	r11,zero,10003b7c <__alt_data_end+0xf8003b7c>
10003cb0:	0005883a 	mov	r2,zero
10003cb4:	2819883a 	mov	r12,r5
10003cb8:	003fab06 	br	10003b68 <__alt_data_end+0xf8003b68>
10003cbc:	4a400044 	addi	r9,r9,1
10003cc0:	0005883a 	mov	r2,zero
10003cc4:	003fbd06 	br	10003bbc <__alt_data_end+0xf8003bbc>
10003cc8:	00c00804 	movi	r3,32
10003ccc:	01000044 	movi	r4,1
10003cd0:	0005883a 	mov	r2,zero
10003cd4:	003fe406 	br	10003c68 <__alt_data_end+0xf8003c68>
10003cd8:	200d883a 	mov	r6,r4
10003cdc:	280f883a 	mov	r7,r5
10003ce0:	00074240 	call	10007424 <__subdf3>
10003ce4:	1009883a 	mov	r4,r2
10003ce8:	180b883a 	mov	r5,r3
10003cec:	100d883a 	mov	r6,r2
10003cf0:	180f883a 	mov	r7,r3
10003cf4:	0005ff40 	call	10005ff4 <__divdf3>
10003cf8:	003fb706 	br	10003bd8 <__alt_data_end+0xf8003bd8>

10003cfc <__kernel_cos>:
10003cfc:	defff304 	addi	sp,sp,-52
10003d00:	dc000315 	stw	r16,12(sp)
10003d04:	04200034 	movhi	r16,32768
10003d08:	843fffc4 	addi	r16,r16,-1
10003d0c:	008f9034 	movhi	r2,15936
10003d10:	df000b15 	stw	fp,44(sp)
10003d14:	ddc00a15 	stw	r23,40(sp)
10003d18:	dd800915 	stw	r22,36(sp)
10003d1c:	dcc00615 	stw	r19,24(sp)
10003d20:	dfc00c15 	stw	ra,48(sp)
10003d24:	dd400815 	stw	r21,32(sp)
10003d28:	dd000715 	stw	r20,28(sp)
10003d2c:	dc800515 	stw	r18,20(sp)
10003d30:	dc400415 	stw	r17,16(sp)
10003d34:	2c20703a 	and	r16,r5,r16
10003d38:	10bfffc4 	addi	r2,r2,-1
10003d3c:	2827883a 	mov	r19,r5
10003d40:	202d883a 	mov	r22,r4
10003d44:	302f883a 	mov	r23,r6
10003d48:	3839883a 	mov	fp,r7
10003d4c:	14007516 	blt	r2,r16,10003f24 <__kernel_cos+0x228>
10003d50:	0007cf40 	call	10007cf4 <__fixdfsi>
10003d54:	10010f26 	beq	r2,zero,10004194 <__kernel_cos+0x498>
10003d58:	b00d883a 	mov	r6,r22
10003d5c:	980f883a 	mov	r7,r19
10003d60:	b009883a 	mov	r4,r22
10003d64:	980b883a 	mov	r5,r19
10003d68:	0006bb80 	call	10006bb8 <__muldf3>
10003d6c:	01afa234 	movhi	r6,48776
10003d70:	01ef6a74 	movhi	r7,48553
10003d74:	1009883a 	mov	r4,r2
10003d78:	180b883a 	mov	r5,r3
10003d7c:	318e3504 	addi	r6,r6,14548
10003d80:	39feba44 	addi	r7,r7,-1303
10003d84:	102b883a 	mov	r21,r2
10003d88:	1829883a 	mov	r20,r3
10003d8c:	0006bb80 	call	10006bb8 <__muldf3>
10003d90:	01af6d74 	movhi	r6,48565
10003d94:	01cf88b4 	movhi	r7,15906
10003d98:	1009883a 	mov	r4,r2
10003d9c:	180b883a 	mov	r5,r3
10003da0:	31ac7104 	addi	r6,r6,-20028
10003da4:	39fba784 	addi	r7,r7,-4450
10003da8:	00057580 	call	10005758 <__adddf3>
10003dac:	1009883a 	mov	r4,r2
10003db0:	180b883a 	mov	r5,r3
10003db4:	a80d883a 	mov	r6,r21
10003db8:	a00f883a 	mov	r7,r20
10003dbc:	0006bb80 	call	10006bb8 <__muldf3>
10003dc0:	01a02734 	movhi	r6,32924
10003dc4:	01cfa4b4 	movhi	r7,16018
10003dc8:	1009883a 	mov	r4,r2
10003dcc:	180b883a 	mov	r5,r3
10003dd0:	3194ab44 	addi	r6,r6,21165
10003dd4:	39df93c4 	addi	r7,r7,32335
10003dd8:	00074240 	call	10007424 <__subdf3>
10003ddc:	1009883a 	mov	r4,r2
10003de0:	180b883a 	mov	r5,r3
10003de4:	a80d883a 	mov	r6,r21
10003de8:	a00f883a 	mov	r7,r20
10003dec:	0006bb80 	call	10006bb8 <__muldf3>
10003df0:	018672f4 	movhi	r6,6603
10003df4:	01cfbeb4 	movhi	r7,16122
10003df8:	1009883a 	mov	r4,r2
10003dfc:	180b883a 	mov	r5,r3
10003e00:	31856404 	addi	r6,r6,5520
10003e04:	39c06804 	addi	r7,r7,416
10003e08:	00057580 	call	10005758 <__adddf3>
10003e0c:	1009883a 	mov	r4,r2
10003e10:	180b883a 	mov	r5,r3
10003e14:	a80d883a 	mov	r6,r21
10003e18:	a00f883a 	mov	r7,r20
10003e1c:	0006bb80 	call	10006bb8 <__muldf3>
10003e20:	0185b074 	movhi	r6,5825
10003e24:	01cfd5f4 	movhi	r7,16215
10003e28:	1009883a 	mov	r4,r2
10003e2c:	180b883a 	mov	r5,r3
10003e30:	31945dc4 	addi	r6,r6,20855
10003e34:	39f05b04 	addi	r7,r7,-16020
10003e38:	00074240 	call	10007424 <__subdf3>
10003e3c:	1009883a 	mov	r4,r2
10003e40:	180b883a 	mov	r5,r3
10003e44:	a80d883a 	mov	r6,r21
10003e48:	a00f883a 	mov	r7,r20
10003e4c:	0006bb80 	call	10006bb8 <__muldf3>
10003e50:	01955574 	movhi	r6,21845
10003e54:	01cfe974 	movhi	r7,16293
10003e58:	1009883a 	mov	r4,r2
10003e5c:	180b883a 	mov	r5,r3
10003e60:	31955304 	addi	r6,r6,21836
10003e64:	39d55544 	addi	r7,r7,21845
10003e68:	00057580 	call	10005758 <__adddf3>
10003e6c:	1009883a 	mov	r4,r2
10003e70:	180b883a 	mov	r5,r3
10003e74:	a80d883a 	mov	r6,r21
10003e78:	a00f883a 	mov	r7,r20
10003e7c:	0006bb80 	call	10006bb8 <__muldf3>
10003e80:	1017883a 	mov	r11,r2
10003e84:	1815883a 	mov	r10,r3
10003e88:	a809883a 	mov	r4,r21
10003e8c:	a00b883a 	mov	r5,r20
10003e90:	000d883a 	mov	r6,zero
10003e94:	01cff834 	movhi	r7,16352
10003e98:	da800215 	stw	r10,8(sp)
10003e9c:	dac00115 	stw	r11,4(sp)
10003ea0:	0006bb80 	call	10006bb8 <__muldf3>
10003ea4:	dac00117 	ldw	r11,4(sp)
10003ea8:	da800217 	ldw	r10,8(sp)
10003eac:	a809883a 	mov	r4,r21
10003eb0:	580d883a 	mov	r6,r11
10003eb4:	500f883a 	mov	r7,r10
10003eb8:	a00b883a 	mov	r5,r20
10003ebc:	1023883a 	mov	r17,r2
10003ec0:	1821883a 	mov	r16,r3
10003ec4:	0006bb80 	call	10006bb8 <__muldf3>
10003ec8:	b009883a 	mov	r4,r22
10003ecc:	980b883a 	mov	r5,r19
10003ed0:	b80d883a 	mov	r6,r23
10003ed4:	e00f883a 	mov	r7,fp
10003ed8:	1029883a 	mov	r20,r2
10003edc:	1825883a 	mov	r18,r3
10003ee0:	0006bb80 	call	10006bb8 <__muldf3>
10003ee4:	a009883a 	mov	r4,r20
10003ee8:	900b883a 	mov	r5,r18
10003eec:	100d883a 	mov	r6,r2
10003ef0:	180f883a 	mov	r7,r3
10003ef4:	00074240 	call	10007424 <__subdf3>
10003ef8:	8809883a 	mov	r4,r17
10003efc:	800b883a 	mov	r5,r16
10003f00:	100d883a 	mov	r6,r2
10003f04:	180f883a 	mov	r7,r3
10003f08:	00074240 	call	10007424 <__subdf3>
10003f0c:	0009883a 	mov	r4,zero
10003f10:	014ffc34 	movhi	r5,16368
10003f14:	100d883a 	mov	r6,r2
10003f18:	180f883a 	mov	r7,r3
10003f1c:	00074240 	call	10007424 <__subdf3>
10003f20:	00008b06 	br	10004150 <__kernel_cos+0x454>
10003f24:	200d883a 	mov	r6,r4
10003f28:	280f883a 	mov	r7,r5
10003f2c:	0006bb80 	call	10006bb8 <__muldf3>
10003f30:	01afa234 	movhi	r6,48776
10003f34:	01ef6a74 	movhi	r7,48553
10003f38:	318e3504 	addi	r6,r6,14548
10003f3c:	39feba44 	addi	r7,r7,-1303
10003f40:	1009883a 	mov	r4,r2
10003f44:	180b883a 	mov	r5,r3
10003f48:	1025883a 	mov	r18,r2
10003f4c:	1823883a 	mov	r17,r3
10003f50:	0006bb80 	call	10006bb8 <__muldf3>
10003f54:	01af6d74 	movhi	r6,48565
10003f58:	01cf88b4 	movhi	r7,15906
10003f5c:	1009883a 	mov	r4,r2
10003f60:	180b883a 	mov	r5,r3
10003f64:	31ac7104 	addi	r6,r6,-20028
10003f68:	39fba784 	addi	r7,r7,-4450
10003f6c:	00057580 	call	10005758 <__adddf3>
10003f70:	1009883a 	mov	r4,r2
10003f74:	180b883a 	mov	r5,r3
10003f78:	900d883a 	mov	r6,r18
10003f7c:	880f883a 	mov	r7,r17
10003f80:	0006bb80 	call	10006bb8 <__muldf3>
10003f84:	01a02734 	movhi	r6,32924
10003f88:	01cfa4b4 	movhi	r7,16018
10003f8c:	1009883a 	mov	r4,r2
10003f90:	180b883a 	mov	r5,r3
10003f94:	3194ab44 	addi	r6,r6,21165
10003f98:	39df93c4 	addi	r7,r7,32335
10003f9c:	00074240 	call	10007424 <__subdf3>
10003fa0:	1009883a 	mov	r4,r2
10003fa4:	180b883a 	mov	r5,r3
10003fa8:	900d883a 	mov	r6,r18
10003fac:	880f883a 	mov	r7,r17
10003fb0:	0006bb80 	call	10006bb8 <__muldf3>
10003fb4:	018672f4 	movhi	r6,6603
10003fb8:	01cfbeb4 	movhi	r7,16122
10003fbc:	1009883a 	mov	r4,r2
10003fc0:	180b883a 	mov	r5,r3
10003fc4:	31856404 	addi	r6,r6,5520
10003fc8:	39c06804 	addi	r7,r7,416
10003fcc:	00057580 	call	10005758 <__adddf3>
10003fd0:	1009883a 	mov	r4,r2
10003fd4:	180b883a 	mov	r5,r3
10003fd8:	900d883a 	mov	r6,r18
10003fdc:	880f883a 	mov	r7,r17
10003fe0:	0006bb80 	call	10006bb8 <__muldf3>
10003fe4:	0185b074 	movhi	r6,5825
10003fe8:	01cfd5f4 	movhi	r7,16215
10003fec:	1009883a 	mov	r4,r2
10003ff0:	180b883a 	mov	r5,r3
10003ff4:	31945dc4 	addi	r6,r6,20855
10003ff8:	39f05b04 	addi	r7,r7,-16020
10003ffc:	00074240 	call	10007424 <__subdf3>
10004000:	1009883a 	mov	r4,r2
10004004:	180b883a 	mov	r5,r3
10004008:	900d883a 	mov	r6,r18
1000400c:	880f883a 	mov	r7,r17
10004010:	0006bb80 	call	10006bb8 <__muldf3>
10004014:	01955574 	movhi	r6,21845
10004018:	01cfe974 	movhi	r7,16293
1000401c:	1009883a 	mov	r4,r2
10004020:	180b883a 	mov	r5,r3
10004024:	31955304 	addi	r6,r6,21836
10004028:	39d55544 	addi	r7,r7,21845
1000402c:	00057580 	call	10005758 <__adddf3>
10004030:	1009883a 	mov	r4,r2
10004034:	180b883a 	mov	r5,r3
10004038:	900d883a 	mov	r6,r18
1000403c:	880f883a 	mov	r7,r17
10004040:	0006bb80 	call	10006bb8 <__muldf3>
10004044:	1013883a 	mov	r9,r2
10004048:	1017883a 	mov	r11,r2
1000404c:	008ff4f4 	movhi	r2,16339
10004050:	108ccc84 	addi	r2,r2,13106
10004054:	902b883a 	mov	r21,r18
10004058:	8829883a 	mov	r20,r17
1000405c:	1811883a 	mov	r8,r3
10004060:	1815883a 	mov	r10,r3
10004064:	143f880e 	bge	r2,r16,10003e88 <__alt_data_end+0xf8003e88>
10004068:	008ffa74 	movhi	r2,16361
1000406c:	14004416 	blt	r2,r16,10004180 <__kernel_cos+0x484>
10004070:	00bff834 	movhi	r2,65504
10004074:	80a1883a 	add	r16,r16,r2
10004078:	0009883a 	mov	r4,zero
1000407c:	014ffc34 	movhi	r5,16368
10004080:	000d883a 	mov	r6,zero
10004084:	800f883a 	mov	r7,r16
10004088:	da400115 	stw	r9,4(sp)
1000408c:	d8c00215 	stw	r3,8(sp)
10004090:	00074240 	call	10007424 <__subdf3>
10004094:	da000217 	ldw	r8,8(sp)
10004098:	da400117 	ldw	r9,4(sp)
1000409c:	102b883a 	mov	r21,r2
100040a0:	d8c00015 	stw	r3,0(sp)
100040a4:	9009883a 	mov	r4,r18
100040a8:	880b883a 	mov	r5,r17
100040ac:	000d883a 	mov	r6,zero
100040b0:	01cff834 	movhi	r7,16352
100040b4:	da000215 	stw	r8,8(sp)
100040b8:	da400115 	stw	r9,4(sp)
100040bc:	0006bb80 	call	10006bb8 <__muldf3>
100040c0:	800f883a 	mov	r7,r16
100040c4:	1009883a 	mov	r4,r2
100040c8:	180b883a 	mov	r5,r3
100040cc:	000d883a 	mov	r6,zero
100040d0:	00074240 	call	10007424 <__subdf3>
100040d4:	da400117 	ldw	r9,4(sp)
100040d8:	da000217 	ldw	r8,8(sp)
100040dc:	9009883a 	mov	r4,r18
100040e0:	480d883a 	mov	r6,r9
100040e4:	400f883a 	mov	r7,r8
100040e8:	880b883a 	mov	r5,r17
100040ec:	1029883a 	mov	r20,r2
100040f0:	1821883a 	mov	r16,r3
100040f4:	0006bb80 	call	10006bb8 <__muldf3>
100040f8:	b009883a 	mov	r4,r22
100040fc:	980b883a 	mov	r5,r19
10004100:	b80d883a 	mov	r6,r23
10004104:	e00f883a 	mov	r7,fp
10004108:	1025883a 	mov	r18,r2
1000410c:	1823883a 	mov	r17,r3
10004110:	0006bb80 	call	10006bb8 <__muldf3>
10004114:	9009883a 	mov	r4,r18
10004118:	880b883a 	mov	r5,r17
1000411c:	100d883a 	mov	r6,r2
10004120:	180f883a 	mov	r7,r3
10004124:	00074240 	call	10007424 <__subdf3>
10004128:	a009883a 	mov	r4,r20
1000412c:	800b883a 	mov	r5,r16
10004130:	100d883a 	mov	r6,r2
10004134:	180f883a 	mov	r7,r3
10004138:	00074240 	call	10007424 <__subdf3>
1000413c:	d9400017 	ldw	r5,0(sp)
10004140:	a809883a 	mov	r4,r21
10004144:	100d883a 	mov	r6,r2
10004148:	180f883a 	mov	r7,r3
1000414c:	00074240 	call	10007424 <__subdf3>
10004150:	dfc00c17 	ldw	ra,48(sp)
10004154:	df000b17 	ldw	fp,44(sp)
10004158:	ddc00a17 	ldw	r23,40(sp)
1000415c:	dd800917 	ldw	r22,36(sp)
10004160:	dd400817 	ldw	r21,32(sp)
10004164:	dd000717 	ldw	r20,28(sp)
10004168:	dcc00617 	ldw	r19,24(sp)
1000416c:	dc800517 	ldw	r18,20(sp)
10004170:	dc400417 	ldw	r17,16(sp)
10004174:	dc000317 	ldw	r16,12(sp)
10004178:	dec00d04 	addi	sp,sp,52
1000417c:	f800283a 	ret
10004180:	008ff9f4 	movhi	r2,16359
10004184:	002b883a 	mov	r21,zero
10004188:	d8800015 	stw	r2,0(sp)
1000418c:	040ff4b4 	movhi	r16,16338
10004190:	003fc406 	br	100040a4 <__alt_data_end+0xf80040a4>
10004194:	0005883a 	mov	r2,zero
10004198:	00cffc34 	movhi	r3,16368
1000419c:	003fec06 	br	10004150 <__alt_data_end+0xf8004150>

100041a0 <__kernel_rem_pio2>:
100041a0:	deff5b04 	addi	sp,sp,-660
100041a4:	da00a517 	ldw	r8,660(sp)
100041a8:	00c40074 	movhi	r3,4097
100041ac:	18d49504 	addi	r3,r3,21076
100041b0:	4205883a 	add	r2,r8,r8
100041b4:	1085883a 	add	r2,r2,r2
100041b8:	1885883a 	add	r2,r3,r2
100041bc:	d9008d15 	stw	r4,564(sp)
100041c0:	d9409015 	stw	r5,576(sp)
100041c4:	313fff44 	addi	r4,r6,-3
100041c8:	01400604 	movi	r5,24
100041cc:	dd80a115 	stw	r22,644(sp)
100041d0:	dc009b15 	stw	r16,620(sp)
100041d4:	dfc0a415 	stw	ra,656(sp)
100041d8:	df00a315 	stw	fp,652(sp)
100041dc:	ddc0a215 	stw	r23,648(sp)
100041e0:	dd40a015 	stw	r21,640(sp)
100041e4:	dd009f15 	stw	r20,636(sp)
100041e8:	dcc09e15 	stw	r19,632(sp)
100041ec:	dc809d15 	stw	r18,628(sp)
100041f0:	dc409c15 	stw	r17,624(sp)
100041f4:	3021883a 	mov	r16,r6
100041f8:	d9c09315 	stw	r7,588(sp)
100041fc:	15800017 	ldw	r22,0(r2)
10004200:	00056700 	call	10005670 <__divsi3>
10004204:	da009317 	ldw	r8,588(sp)
10004208:	d8809215 	stw	r2,584(sp)
1000420c:	423fffc4 	addi	r8,r8,-1
10004210:	da008c15 	stw	r8,560(sp)
10004214:	10032c16 	blt	r2,zero,10004ec8 <__kernel_rem_pio2+0xd28>
10004218:	da009217 	ldw	r8,584(sp)
1000421c:	01400604 	movi	r5,24
10004220:	0208303a 	nor	r4,zero,r8
10004224:	00057300 	call	10005730 <__mulsi3>
10004228:	da008c17 	ldw	r8,560(sp)
1000422c:	1421883a 	add	r16,r2,r16
10004230:	d8809217 	ldw	r2,584(sp)
10004234:	4587883a 	add	r3,r8,r22
10004238:	dc008f15 	stw	r16,572(sp)
1000423c:	1223c83a 	sub	r17,r2,r8
10004240:	18001016 	blt	r3,zero,10004284 <__kernel_rem_pio2+0xe4>
10004244:	da00a617 	ldw	r8,664(sp)
10004248:	8c65883a 	add	r18,r17,r17
1000424c:	94a5883a 	add	r18,r18,r18
10004250:	88c7883a 	add	r3,r17,r3
10004254:	dcc05004 	addi	r19,sp,320
10004258:	44a5883a 	add	r18,r8,r18
1000425c:	1c000044 	addi	r16,r3,1
10004260:	88014616 	blt	r17,zero,1000477c <__kernel_rem_pio2+0x5dc>
10004264:	91000017 	ldw	r4,0(r18)
10004268:	0007d7c0 	call	10007d7c <__floatsidf>
1000426c:	98800015 	stw	r2,0(r19)
10004270:	98c00115 	stw	r3,4(r19)
10004274:	8c400044 	addi	r17,r17,1
10004278:	9cc00204 	addi	r19,r19,8
1000427c:	94800104 	addi	r18,r18,4
10004280:	8c3ff71e 	bne	r17,r16,10004260 <__alt_data_end+0xf8004260>
10004284:	b0002116 	blt	r22,zero,1000430c <__kernel_rem_pio2+0x16c>
10004288:	da009317 	ldw	r8,588(sp)
1000428c:	b02490fa 	slli	r18,r22,3
10004290:	d8805004 	addi	r2,sp,320
10004294:	402e90fa 	slli	r23,r8,3
10004298:	d823883a 	mov	r17,sp
1000429c:	dc004e04 	addi	r16,sp,312
100042a0:	14b9883a 	add	fp,r2,r18
100042a4:	da008c17 	ldw	r8,560(sp)
100042a8:	40015916 	blt	r8,zero,10004810 <__kernel_rem_pio2+0x670>
100042ac:	dcc08d17 	ldw	r19,564(sp)
100042b0:	85e5883a 	add	r18,r16,r23
100042b4:	002b883a 	mov	r21,zero
100042b8:	0029883a 	mov	r20,zero
100042bc:	99000017 	ldw	r4,0(r19)
100042c0:	99400117 	ldw	r5,4(r19)
100042c4:	91800017 	ldw	r6,0(r18)
100042c8:	91c00117 	ldw	r7,4(r18)
100042cc:	94bffe04 	addi	r18,r18,-8
100042d0:	9cc00204 	addi	r19,r19,8
100042d4:	0006bb80 	call	10006bb8 <__muldf3>
100042d8:	a809883a 	mov	r4,r21
100042dc:	a00b883a 	mov	r5,r20
100042e0:	100d883a 	mov	r6,r2
100042e4:	180f883a 	mov	r7,r3
100042e8:	00057580 	call	10005758 <__adddf3>
100042ec:	102b883a 	mov	r21,r2
100042f0:	1829883a 	mov	r20,r3
100042f4:	84bff11e 	bne	r16,r18,100042bc <__alt_data_end+0xf80042bc>
100042f8:	8d400015 	stw	r21,0(r17)
100042fc:	8d000115 	stw	r20,4(r17)
10004300:	84000204 	addi	r16,r16,8
10004304:	8c400204 	addi	r17,r17,8
10004308:	873fe61e 	bne	r16,fp,100042a4 <__alt_data_end+0xf80042a4>
1000430c:	b02090ba 	slli	r16,r22,2
10004310:	d9009317 	ldw	r4,588(sp)
10004314:	017ffe04 	movi	r5,-8
10004318:	8161883a 	add	r16,r16,r5
1000431c:	00057300 	call	10005730 <__mulsi3>
10004320:	d8808e15 	stw	r2,568(sp)
10004324:	b0bfffc4 	addi	r2,r22,-1
10004328:	1085883a 	add	r2,r2,r2
1000432c:	da007804 	addi	r8,sp,480
10004330:	4411883a 	add	r8,r8,r16
10004334:	1085883a 	add	r2,r2,r2
10004338:	80c00104 	addi	r3,r16,4
1000433c:	d885883a 	add	r2,sp,r2
10004340:	da009515 	stw	r8,596(sp)
10004344:	da007804 	addi	r8,sp,480
10004348:	40d1883a 	add	r8,r8,r3
1000434c:	10807804 	addi	r2,r2,480
10004350:	da009615 	stw	r8,600(sp)
10004354:	b021883a 	mov	r16,r22
10004358:	d8809715 	stw	r2,604(sp)
1000435c:	dd809415 	stw	r22,592(sp)
10004360:	800490fa 	slli	r2,r16,3
10004364:	d885883a 	add	r2,sp,r2
10004368:	15c00017 	ldw	r23,0(r2)
1000436c:	15000117 	ldw	r20,4(r2)
10004370:	04002d0e 	bge	zero,r16,10004428 <__kernel_rem_pio2+0x288>
10004374:	00880034 	movhi	r2,8192
10004378:	10bfffc4 	addi	r2,r2,-1
1000437c:	80a5883a 	add	r18,r16,r2
10004380:	902490fa 	slli	r18,r18,3
10004384:	8423883a 	add	r17,r16,r16
10004388:	8c63883a 	add	r17,r17,r17
1000438c:	dcc07804 	addi	r19,sp,480
10004390:	dca5883a 	add	r18,sp,r18
10004394:	9c63883a 	add	r17,r19,r17
10004398:	000d883a 	mov	r6,zero
1000439c:	01cf9c34 	movhi	r7,15984
100043a0:	b809883a 	mov	r4,r23
100043a4:	a00b883a 	mov	r5,r20
100043a8:	0006bb80 	call	10006bb8 <__muldf3>
100043ac:	180b883a 	mov	r5,r3
100043b0:	1009883a 	mov	r4,r2
100043b4:	0007cf40 	call	10007cf4 <__fixdfsi>
100043b8:	1009883a 	mov	r4,r2
100043bc:	0007d7c0 	call	10007d7c <__floatsidf>
100043c0:	1009883a 	mov	r4,r2
100043c4:	180b883a 	mov	r5,r3
100043c8:	000d883a 	mov	r6,zero
100043cc:	01d05c34 	movhi	r7,16752
100043d0:	102d883a 	mov	r22,r2
100043d4:	182b883a 	mov	r21,r3
100043d8:	0006bb80 	call	10006bb8 <__muldf3>
100043dc:	b809883a 	mov	r4,r23
100043e0:	a00b883a 	mov	r5,r20
100043e4:	100d883a 	mov	r6,r2
100043e8:	180f883a 	mov	r7,r3
100043ec:	00074240 	call	10007424 <__subdf3>
100043f0:	180b883a 	mov	r5,r3
100043f4:	1009883a 	mov	r4,r2
100043f8:	0007cf40 	call	10007cf4 <__fixdfsi>
100043fc:	91800017 	ldw	r6,0(r18)
10004400:	91c00117 	ldw	r7,4(r18)
10004404:	98800015 	stw	r2,0(r19)
10004408:	b009883a 	mov	r4,r22
1000440c:	a80b883a 	mov	r5,r21
10004410:	00057580 	call	10005758 <__adddf3>
10004414:	9cc00104 	addi	r19,r19,4
10004418:	102f883a 	mov	r23,r2
1000441c:	1829883a 	mov	r20,r3
10004420:	94bffe04 	addi	r18,r18,-8
10004424:	9c7fdc1e 	bne	r19,r17,10004398 <__alt_data_end+0xf8004398>
10004428:	d9808f17 	ldw	r6,572(sp)
1000442c:	a00b883a 	mov	r5,r20
10004430:	b809883a 	mov	r4,r23
10004434:	000541c0 	call	1000541c <scalbn>
10004438:	000d883a 	mov	r6,zero
1000443c:	01cff034 	movhi	r7,16320
10004440:	1009883a 	mov	r4,r2
10004444:	180b883a 	mov	r5,r3
10004448:	1025883a 	mov	r18,r2
1000444c:	1823883a 	mov	r17,r3
10004450:	0006bb80 	call	10006bb8 <__muldf3>
10004454:	1009883a 	mov	r4,r2
10004458:	180b883a 	mov	r5,r3
1000445c:	00051ac0 	call	100051ac <floor>
10004460:	1009883a 	mov	r4,r2
10004464:	180b883a 	mov	r5,r3
10004468:	000d883a 	mov	r6,zero
1000446c:	01d00834 	movhi	r7,16416
10004470:	0006bb80 	call	10006bb8 <__muldf3>
10004474:	100d883a 	mov	r6,r2
10004478:	180f883a 	mov	r7,r3
1000447c:	9009883a 	mov	r4,r18
10004480:	880b883a 	mov	r5,r17
10004484:	00074240 	call	10007424 <__subdf3>
10004488:	180b883a 	mov	r5,r3
1000448c:	1009883a 	mov	r4,r2
10004490:	1825883a 	mov	r18,r3
10004494:	1027883a 	mov	r19,r2
10004498:	0007cf40 	call	10007cf4 <__fixdfsi>
1000449c:	1009883a 	mov	r4,r2
100044a0:	1023883a 	mov	r17,r2
100044a4:	0007d7c0 	call	10007d7c <__floatsidf>
100044a8:	9809883a 	mov	r4,r19
100044ac:	900b883a 	mov	r5,r18
100044b0:	100d883a 	mov	r6,r2
100044b4:	180f883a 	mov	r7,r3
100044b8:	00074240 	call	10007424 <__subdf3>
100044bc:	da008f17 	ldw	r8,572(sp)
100044c0:	1019883a 	mov	r12,r2
100044c4:	1029883a 	mov	r20,r2
100044c8:	1817883a 	mov	r11,r3
100044cc:	0200ae0e 	bge	zero,r8,10004788 <__kernel_rem_pio2+0x5e8>
100044d0:	80bfffc4 	addi	r2,r16,-1
100044d4:	1085883a 	add	r2,r2,r2
100044d8:	1085883a 	add	r2,r2,r2
100044dc:	d885883a 	add	r2,sp,r2
100044e0:	10807804 	addi	r2,r2,480
100044e4:	11400017 	ldw	r5,0(r2)
100044e8:	01000604 	movi	r4,24
100044ec:	2209c83a 	sub	r4,r4,r8
100044f0:	290dd83a 	sra	r6,r5,r4
100044f4:	048005c4 	movi	r18,23
100044f8:	9225c83a 	sub	r18,r18,r8
100044fc:	3108983a 	sll	r4,r6,r4
10004500:	89a3883a 	add	r17,r17,r6
10004504:	2909c83a 	sub	r4,r5,r4
10004508:	24a5d83a 	sra	r18,r4,r18
1000450c:	11000015 	stw	r4,0(r2)
10004510:	04802a0e 	bge	zero,r18,100045bc <__kernel_rem_pio2+0x41c>
10004514:	8c400044 	addi	r17,r17,1
10004518:	0400c40e 	bge	zero,r16,1000482c <__kernel_rem_pio2+0x68c>
1000451c:	01404034 	movhi	r5,256
10004520:	297fffc4 	addi	r5,r5,-1
10004524:	da007804 	addi	r8,sp,480
10004528:	0015883a 	mov	r10,zero
1000452c:	0027883a 	mov	r19,zero
10004530:	01004034 	movhi	r4,256
10004534:	00000706 	br	10004554 <__kernel_rem_pio2+0x3b4>
10004538:	208dc83a 	sub	r6,r4,r2
1000453c:	10000226 	beq	r2,zero,10004548 <__kernel_rem_pio2+0x3a8>
10004540:	41800015 	stw	r6,0(r8)
10004544:	04c00044 	movi	r19,1
10004548:	52800044 	addi	r10,r10,1
1000454c:	42000104 	addi	r8,r8,4
10004550:	5400080e 	bge	r10,r16,10004574 <__kernel_rem_pio2+0x3d4>
10004554:	40800017 	ldw	r2,0(r8)
10004558:	983ff726 	beq	r19,zero,10004538 <__alt_data_end+0xf8004538>
1000455c:	2885c83a 	sub	r2,r5,r2
10004560:	40800015 	stw	r2,0(r8)
10004564:	52800044 	addi	r10,r10,1
10004568:	04c00044 	movi	r19,1
1000456c:	42000104 	addi	r8,r8,4
10004570:	543ff816 	blt	r10,r16,10004554 <__alt_data_end+0xf8004554>
10004574:	da008f17 	ldw	r8,572(sp)
10004578:	02000e0e 	bge	zero,r8,100045b4 <__kernel_rem_pio2+0x414>
1000457c:	00800044 	movi	r2,1
10004580:	40808a26 	beq	r8,r2,100047ac <__kernel_rem_pio2+0x60c>
10004584:	00800084 	movi	r2,2
10004588:	40800a1e 	bne	r8,r2,100045b4 <__kernel_rem_pio2+0x414>
1000458c:	80bfffc4 	addi	r2,r16,-1
10004590:	1085883a 	add	r2,r2,r2
10004594:	1085883a 	add	r2,r2,r2
10004598:	d885883a 	add	r2,sp,r2
1000459c:	10807804 	addi	r2,r2,480
100045a0:	11400017 	ldw	r5,0(r2)
100045a4:	01001034 	movhi	r4,64
100045a8:	213fffc4 	addi	r4,r4,-1
100045ac:	2908703a 	and	r4,r5,r4
100045b0:	11000015 	stw	r4,0(r2)
100045b4:	00800084 	movi	r2,2
100045b8:	90805a26 	beq	r18,r2,10004724 <__kernel_rem_pio2+0x584>
100045bc:	580b883a 	mov	r5,r11
100045c0:	a009883a 	mov	r4,r20
100045c4:	000d883a 	mov	r6,zero
100045c8:	000f883a 	mov	r7,zero
100045cc:	dac09a15 	stw	r11,616(sp)
100045d0:	00069740 	call	10006974 <__eqdf2>
100045d4:	dac09a17 	ldw	r11,616(sp)
100045d8:	1000961e 	bne	r2,zero,10004834 <__kernel_rem_pio2+0x694>
100045dc:	da009417 	ldw	r8,592(sp)
100045e0:	817fffc4 	addi	r5,r16,-1
100045e4:	2a000b16 	blt	r5,r8,10004614 <__kernel_rem_pio2+0x474>
100045e8:	800490ba 	slli	r2,r16,2
100045ec:	d9809617 	ldw	r6,600(sp)
100045f0:	d9007804 	addi	r4,sp,480
100045f4:	10bfff04 	addi	r2,r2,-4
100045f8:	0007883a 	mov	r3,zero
100045fc:	2085883a 	add	r2,r4,r2
10004600:	11000017 	ldw	r4,0(r2)
10004604:	10bfff04 	addi	r2,r2,-4
10004608:	1906b03a 	or	r3,r3,r4
1000460c:	11bffc1e 	bne	r2,r6,10004600 <__alt_data_end+0xf8004600>
10004610:	18013c1e 	bne	r3,zero,10004b04 <__kernel_rem_pio2+0x964>
10004614:	da009717 	ldw	r8,604(sp)
10004618:	40800017 	ldw	r2,0(r8)
1000461c:	1001371e 	bne	r2,zero,10004afc <__kernel_rem_pio2+0x95c>
10004620:	d8809517 	ldw	r2,596(sp)
10004624:	00c00044 	movi	r3,1
10004628:	10bfff04 	addi	r2,r2,-4
1000462c:	11000117 	ldw	r4,4(r2)
10004630:	18c00044 	addi	r3,r3,1
10004634:	203ffc26 	beq	r4,zero,10004628 <__alt_data_end+0xf8004628>
10004638:	80c7883a 	add	r3,r16,r3
1000463c:	80800044 	addi	r2,r16,1
10004640:	d8c09115 	stw	r3,580(sp)
10004644:	18803216 	blt	r3,r2,10004710 <__kernel_rem_pio2+0x570>
10004648:	da009317 	ldw	r8,588(sp)
1000464c:	8223883a 	add	r17,r16,r8
10004650:	da009117 	ldw	r8,580(sp)
10004654:	882290fa 	slli	r17,r17,3
10004658:	45000044 	addi	r20,r8,1
1000465c:	da009217 	ldw	r8,584(sp)
10004660:	a02890fa 	slli	r20,r20,3
10004664:	1227883a 	add	r19,r2,r8
10004668:	100490fa 	slli	r2,r2,3
1000466c:	da00a617 	ldw	r8,664(sp)
10004670:	9ce7883a 	add	r19,r19,r19
10004674:	9ce7883a 	add	r19,r19,r19
10004678:	d8a5883a 	add	r18,sp,r2
1000467c:	d8805004 	addi	r2,sp,320
10004680:	44e7883a 	add	r19,r8,r19
10004684:	1463883a 	add	r17,r2,r17
10004688:	dd29883a 	add	r20,sp,r20
1000468c:	99000017 	ldw	r4,0(r19)
10004690:	0007d7c0 	call	10007d7c <__floatsidf>
10004694:	da008c17 	ldw	r8,560(sp)
10004698:	88800015 	stw	r2,0(r17)
1000469c:	88c00115 	stw	r3,4(r17)
100046a0:	40001d16 	blt	r8,zero,10004718 <__kernel_rem_pio2+0x578>
100046a4:	da008e17 	ldw	r8,568(sp)
100046a8:	dd808d17 	ldw	r22,564(sp)
100046ac:	8821883a 	mov	r16,r17
100046b0:	8a2b883a 	add	r21,r17,r8
100046b4:	0039883a 	mov	fp,zero
100046b8:	002f883a 	mov	r23,zero
100046bc:	b1000017 	ldw	r4,0(r22)
100046c0:	b1400117 	ldw	r5,4(r22)
100046c4:	81800017 	ldw	r6,0(r16)
100046c8:	81c00117 	ldw	r7,4(r16)
100046cc:	843ffe04 	addi	r16,r16,-8
100046d0:	b5800204 	addi	r22,r22,8
100046d4:	0006bb80 	call	10006bb8 <__muldf3>
100046d8:	e009883a 	mov	r4,fp
100046dc:	b80b883a 	mov	r5,r23
100046e0:	100d883a 	mov	r6,r2
100046e4:	180f883a 	mov	r7,r3
100046e8:	00057580 	call	10005758 <__adddf3>
100046ec:	1039883a 	mov	fp,r2
100046f0:	182f883a 	mov	r23,r3
100046f4:	857ff11e 	bne	r16,r21,100046bc <__alt_data_end+0xf80046bc>
100046f8:	97000015 	stw	fp,0(r18)
100046fc:	95c00115 	stw	r23,4(r18)
10004700:	94800204 	addi	r18,r18,8
10004704:	9cc00104 	addi	r19,r19,4
10004708:	8c400204 	addi	r17,r17,8
1000470c:	953fdf1e 	bne	r18,r20,1000468c <__alt_data_end+0xf800468c>
10004710:	dc009117 	ldw	r16,580(sp)
10004714:	003f1206 	br	10004360 <__alt_data_end+0xf8004360>
10004718:	0039883a 	mov	fp,zero
1000471c:	002f883a 	mov	r23,zero
10004720:	003ff506 	br	100046f8 <__alt_data_end+0xf80046f8>
10004724:	0009883a 	mov	r4,zero
10004728:	014ffc34 	movhi	r5,16368
1000472c:	600d883a 	mov	r6,r12
10004730:	180f883a 	mov	r7,r3
10004734:	00074240 	call	10007424 <__subdf3>
10004738:	1029883a 	mov	r20,r2
1000473c:	1817883a 	mov	r11,r3
10004740:	983f9e26 	beq	r19,zero,100045bc <__alt_data_end+0xf80045bc>
10004744:	d9808f17 	ldw	r6,572(sp)
10004748:	0009883a 	mov	r4,zero
1000474c:	014ffc34 	movhi	r5,16368
10004750:	d8c09a15 	stw	r3,616(sp)
10004754:	000541c0 	call	1000541c <scalbn>
10004758:	dac09a17 	ldw	r11,616(sp)
1000475c:	a009883a 	mov	r4,r20
10004760:	100d883a 	mov	r6,r2
10004764:	580b883a 	mov	r5,r11
10004768:	180f883a 	mov	r7,r3
1000476c:	00074240 	call	10007424 <__subdf3>
10004770:	1029883a 	mov	r20,r2
10004774:	1817883a 	mov	r11,r3
10004778:	003f9006 	br	100045bc <__alt_data_end+0xf80045bc>
1000477c:	0005883a 	mov	r2,zero
10004780:	0007883a 	mov	r3,zero
10004784:	003eb906 	br	1000426c <__alt_data_end+0xf800426c>
10004788:	da008f17 	ldw	r8,572(sp)
1000478c:	4000121e 	bne	r8,zero,100047d8 <__kernel_rem_pio2+0x638>
10004790:	80bfffc4 	addi	r2,r16,-1
10004794:	1085883a 	add	r2,r2,r2
10004798:	1085883a 	add	r2,r2,r2
1000479c:	d885883a 	add	r2,sp,r2
100047a0:	14807817 	ldw	r18,480(r2)
100047a4:	9025d5fa 	srai	r18,r18,23
100047a8:	003f5906 	br	10004510 <__alt_data_end+0xf8004510>
100047ac:	80bfffc4 	addi	r2,r16,-1
100047b0:	1085883a 	add	r2,r2,r2
100047b4:	1085883a 	add	r2,r2,r2
100047b8:	d885883a 	add	r2,sp,r2
100047bc:	10807804 	addi	r2,r2,480
100047c0:	11000017 	ldw	r4,0(r2)
100047c4:	01402034 	movhi	r5,128
100047c8:	297fffc4 	addi	r5,r5,-1
100047cc:	2148703a 	and	r4,r4,r5
100047d0:	11000015 	stw	r4,0(r2)
100047d4:	003f7706 	br	100045b4 <__alt_data_end+0xf80045b4>
100047d8:	180b883a 	mov	r5,r3
100047dc:	1009883a 	mov	r4,r2
100047e0:	000d883a 	mov	r6,zero
100047e4:	01cff834 	movhi	r7,16352
100047e8:	d8c09915 	stw	r3,612(sp)
100047ec:	d8c09a15 	stw	r3,616(sp)
100047f0:	d8809815 	stw	r2,608(sp)
100047f4:	00069f80 	call	100069f8 <__gedf2>
100047f8:	d8c09917 	ldw	r3,612(sp)
100047fc:	dac09a17 	ldw	r11,616(sp)
10004800:	db009817 	ldw	r12,608(sp)
10004804:	1000050e 	bge	r2,zero,1000481c <__kernel_rem_pio2+0x67c>
10004808:	0025883a 	mov	r18,zero
1000480c:	003f6b06 	br	100045bc <__alt_data_end+0xf80045bc>
10004810:	002b883a 	mov	r21,zero
10004814:	0029883a 	mov	r20,zero
10004818:	003eb706 	br	100042f8 <__alt_data_end+0xf80042f8>
1000481c:	8c400044 	addi	r17,r17,1
10004820:	0401960e 	bge	zero,r16,10004e7c <__kernel_rem_pio2+0xcdc>
10004824:	04800084 	movi	r18,2
10004828:	003f3c06 	br	1000451c <__alt_data_end+0xf800451c>
1000482c:	0027883a 	mov	r19,zero
10004830:	003f5006 	br	10004574 <__alt_data_end+0xf8004574>
10004834:	da008f17 	ldw	r8,572(sp)
10004838:	a009883a 	mov	r4,r20
1000483c:	580b883a 	mov	r5,r11
10004840:	020dc83a 	sub	r6,zero,r8
10004844:	dc808c15 	stw	r18,560(sp)
10004848:	dd809417 	ldw	r22,592(sp)
1000484c:	dc408e15 	stw	r17,568(sp)
10004850:	000541c0 	call	1000541c <scalbn>
10004854:	1009883a 	mov	r4,r2
10004858:	180b883a 	mov	r5,r3
1000485c:	000d883a 	mov	r6,zero
10004860:	01d05c34 	movhi	r7,16752
10004864:	1029883a 	mov	r20,r2
10004868:	182f883a 	mov	r23,r3
1000486c:	00069f80 	call	100069f8 <__gedf2>
10004870:	10018b16 	blt	r2,zero,10004ea0 <__kernel_rem_pio2+0xd00>
10004874:	01cf9c34 	movhi	r7,15984
10004878:	000d883a 	mov	r6,zero
1000487c:	a009883a 	mov	r4,r20
10004880:	b80b883a 	mov	r5,r23
10004884:	0006bb80 	call	10006bb8 <__muldf3>
10004888:	180b883a 	mov	r5,r3
1000488c:	1009883a 	mov	r4,r2
10004890:	0007cf40 	call	10007cf4 <__fixdfsi>
10004894:	840d883a 	add	r6,r16,r16
10004898:	318d883a 	add	r6,r6,r6
1000489c:	1009883a 	mov	r4,r2
100048a0:	d9a7883a 	add	r19,sp,r6
100048a4:	102b883a 	mov	r21,r2
100048a8:	0007d7c0 	call	10007d7c <__floatsidf>
100048ac:	1009883a 	mov	r4,r2
100048b0:	180b883a 	mov	r5,r3
100048b4:	000d883a 	mov	r6,zero
100048b8:	01d05c34 	movhi	r7,16752
100048bc:	0006bb80 	call	10006bb8 <__muldf3>
100048c0:	a009883a 	mov	r4,r20
100048c4:	b80b883a 	mov	r5,r23
100048c8:	100d883a 	mov	r6,r2
100048cc:	180f883a 	mov	r7,r3
100048d0:	00074240 	call	10007424 <__subdf3>
100048d4:	180b883a 	mov	r5,r3
100048d8:	1009883a 	mov	r4,r2
100048dc:	0007cf40 	call	10007cf4 <__fixdfsi>
100048e0:	da008f17 	ldw	r8,572(sp)
100048e4:	84400044 	addi	r17,r16,1
100048e8:	8c47883a 	add	r3,r17,r17
100048ec:	9cc07804 	addi	r19,r19,480
100048f0:	18c7883a 	add	r3,r3,r3
100048f4:	98800015 	stw	r2,0(r19)
100048f8:	d8c7883a 	add	r3,sp,r3
100048fc:	42000604 	addi	r8,r8,24
10004900:	da008f15 	stw	r8,572(sp)
10004904:	1d407815 	stw	r21,480(r3)
10004908:	d9808f17 	ldw	r6,572(sp)
1000490c:	0009883a 	mov	r4,zero
10004910:	014ffc34 	movhi	r5,16368
10004914:	000541c0 	call	1000541c <scalbn>
10004918:	1029883a 	mov	r20,r2
1000491c:	182b883a 	mov	r21,r3
10004920:	88006e16 	blt	r17,zero,10004adc <__kernel_rem_pio2+0x93c>
10004924:	881090fa 	slli	r8,r17,3
10004928:	d8c07804 	addi	r3,sp,480
1000492c:	dc3ffe04 	addi	r16,sp,-8
10004930:	da008d15 	stw	r8,564(sp)
10004934:	d8808d17 	ldw	r2,564(sp)
10004938:	8c51883a 	add	r8,r17,r17
1000493c:	4211883a 	add	r8,r8,r8
10004940:	d8a7883a 	add	r19,sp,r2
10004944:	1a2f883a 	add	r23,r3,r8
10004948:	9839883a 	mov	fp,r19
1000494c:	b9000017 	ldw	r4,0(r23)
10004950:	e73ffe04 	addi	fp,fp,-8
10004954:	bdffff04 	addi	r23,r23,-4
10004958:	0007d7c0 	call	10007d7c <__floatsidf>
1000495c:	a00d883a 	mov	r6,r20
10004960:	a80f883a 	mov	r7,r21
10004964:	1009883a 	mov	r4,r2
10004968:	180b883a 	mov	r5,r3
1000496c:	0006bb80 	call	10006bb8 <__muldf3>
10004970:	a009883a 	mov	r4,r20
10004974:	a80b883a 	mov	r5,r21
10004978:	e0800215 	stw	r2,8(fp)
1000497c:	e0c00315 	stw	r3,12(fp)
10004980:	000d883a 	mov	r6,zero
10004984:	01cf9c34 	movhi	r7,15984
10004988:	0006bb80 	call	10006bb8 <__muldf3>
1000498c:	1029883a 	mov	r20,r2
10004990:	182b883a 	mov	r21,r3
10004994:	e43fed1e 	bne	fp,r16,1000494c <__alt_data_end+0xf800494c>
10004998:	8a000044 	addi	r8,r17,1
1000499c:	0029883a 	mov	r20,zero
100049a0:	4039883a 	mov	fp,r8
100049a4:	dc408f15 	stw	r17,572(sp)
100049a8:	b0004916 	blt	r22,zero,10004ad0 <__kernel_rem_pio2+0x930>
100049ac:	a0004816 	blt	r20,zero,10004ad0 <__kernel_rem_pio2+0x930>
100049b0:	04040074 	movhi	r16,4097
100049b4:	84148504 	addi	r16,r16,21012
100049b8:	982b883a 	mov	r21,r19
100049bc:	0023883a 	mov	r17,zero
100049c0:	002f883a 	mov	r23,zero
100049c4:	0025883a 	mov	r18,zero
100049c8:	00000206 	br	100049d4 <__kernel_rem_pio2+0x834>
100049cc:	ad400204 	addi	r21,r21,8
100049d0:	a4800f16 	blt	r20,r18,10004a10 <__kernel_rem_pio2+0x870>
100049d4:	81000017 	ldw	r4,0(r16)
100049d8:	81400117 	ldw	r5,4(r16)
100049dc:	a9800017 	ldw	r6,0(r21)
100049e0:	a9c00117 	ldw	r7,4(r21)
100049e4:	94800044 	addi	r18,r18,1
100049e8:	84000204 	addi	r16,r16,8
100049ec:	0006bb80 	call	10006bb8 <__muldf3>
100049f0:	8809883a 	mov	r4,r17
100049f4:	b80b883a 	mov	r5,r23
100049f8:	100d883a 	mov	r6,r2
100049fc:	180f883a 	mov	r7,r3
10004a00:	00057580 	call	10005758 <__adddf3>
10004a04:	1023883a 	mov	r17,r2
10004a08:	182f883a 	mov	r23,r3
10004a0c:	b4bfef0e 	bge	r22,r18,100049cc <__alt_data_end+0xf80049cc>
10004a10:	a00490fa 	slli	r2,r20,3
10004a14:	a5000044 	addi	r20,r20,1
10004a18:	9cfffe04 	addi	r19,r19,-8
10004a1c:	d885883a 	add	r2,sp,r2
10004a20:	10802804 	addi	r2,r2,160
10004a24:	14400015 	stw	r17,0(r2)
10004a28:	15c00115 	stw	r23,4(r2)
10004a2c:	a73fde1e 	bne	r20,fp,100049a8 <__alt_data_end+0xf80049a8>
10004a30:	da00a517 	ldw	r8,660(sp)
10004a34:	00800084 	movi	r2,2
10004a38:	dc408f17 	ldw	r17,572(sp)
10004a3c:	12007316 	blt	r2,r8,10004c0c <__kernel_rem_pio2+0xa6c>
10004a40:	02004816 	blt	zero,r8,10004b64 <__kernel_rem_pio2+0x9c4>
10004a44:	4000141e 	bne	r8,zero,10004a98 <__kernel_rem_pio2+0x8f8>
10004a48:	da008d17 	ldw	r8,564(sp)
10004a4c:	d8802804 	addi	r2,sp,160
10004a50:	0007883a 	mov	r3,zero
10004a54:	1221883a 	add	r16,r2,r8
10004a58:	04ffffc4 	movi	r19,-1
10004a5c:	0005883a 	mov	r2,zero
10004a60:	81800017 	ldw	r6,0(r16)
10004a64:	81c00117 	ldw	r7,4(r16)
10004a68:	1009883a 	mov	r4,r2
10004a6c:	180b883a 	mov	r5,r3
10004a70:	8c7fffc4 	addi	r17,r17,-1
10004a74:	00057580 	call	10005758 <__adddf3>
10004a78:	843ffe04 	addi	r16,r16,-8
10004a7c:	8cfff81e 	bne	r17,r19,10004a60 <__alt_data_end+0xf8004a60>
10004a80:	da008c17 	ldw	r8,560(sp)
10004a84:	40000126 	beq	r8,zero,10004a8c <__kernel_rem_pio2+0x8ec>
10004a88:	18e0003c 	xorhi	r3,r3,32768
10004a8c:	da009017 	ldw	r8,576(sp)
10004a90:	40800015 	stw	r2,0(r8)
10004a94:	40c00115 	stw	r3,4(r8)
10004a98:	da008e17 	ldw	r8,568(sp)
10004a9c:	408001cc 	andi	r2,r8,7
10004aa0:	dfc0a417 	ldw	ra,656(sp)
10004aa4:	df00a317 	ldw	fp,652(sp)
10004aa8:	ddc0a217 	ldw	r23,648(sp)
10004aac:	dd80a117 	ldw	r22,644(sp)
10004ab0:	dd40a017 	ldw	r21,640(sp)
10004ab4:	dd009f17 	ldw	r20,636(sp)
10004ab8:	dcc09e17 	ldw	r19,632(sp)
10004abc:	dc809d17 	ldw	r18,628(sp)
10004ac0:	dc409c17 	ldw	r17,624(sp)
10004ac4:	dc009b17 	ldw	r16,620(sp)
10004ac8:	dec0a504 	addi	sp,sp,660
10004acc:	f800283a 	ret
10004ad0:	0023883a 	mov	r17,zero
10004ad4:	002f883a 	mov	r23,zero
10004ad8:	003fcd06 	br	10004a10 <__alt_data_end+0xf8004a10>
10004adc:	da00a517 	ldw	r8,660(sp)
10004ae0:	00800084 	movi	r2,2
10004ae4:	1200d216 	blt	r2,r8,10004e30 <__kernel_rem_pio2+0xc90>
10004ae8:	0200c016 	blt	zero,r8,10004dec <__kernel_rem_pio2+0xc4c>
10004aec:	403fea1e 	bne	r8,zero,10004a98 <__alt_data_end+0xf8004a98>
10004af0:	0005883a 	mov	r2,zero
10004af4:	0007883a 	mov	r3,zero
10004af8:	003fe106 	br	10004a80 <__alt_data_end+0xf8004a80>
10004afc:	00c00044 	movi	r3,1
10004b00:	003ecd06 	br	10004638 <__alt_data_end+0xf8004638>
10004b04:	2945883a 	add	r2,r5,r5
10004b08:	da008f17 	ldw	r8,572(sp)
10004b0c:	1085883a 	add	r2,r2,r2
10004b10:	d885883a 	add	r2,sp,r2
10004b14:	10807817 	ldw	r2,480(r2)
10004b18:	423ffa04 	addi	r8,r8,-24
10004b1c:	dc408e15 	stw	r17,568(sp)
10004b20:	dc808c15 	stw	r18,560(sp)
10004b24:	da008f15 	stw	r8,572(sp)
10004b28:	dd809417 	ldw	r22,592(sp)
10004b2c:	2823883a 	mov	r17,r5
10004b30:	103f751e 	bne	r2,zero,10004908 <__alt_data_end+0xf8004908>
10004b34:	280490ba 	slli	r2,r5,2
10004b38:	d8c07804 	addi	r3,sp,480
10004b3c:	10bfff04 	addi	r2,r2,-4
10004b40:	1885883a 	add	r2,r3,r2
10004b44:	4007883a 	mov	r3,r8
10004b48:	10bfff04 	addi	r2,r2,-4
10004b4c:	11000117 	ldw	r4,4(r2)
10004b50:	8c7fffc4 	addi	r17,r17,-1
10004b54:	18fffa04 	addi	r3,r3,-24
10004b58:	203ffb26 	beq	r4,zero,10004b48 <__alt_data_end+0xf8004b48>
10004b5c:	d8c08f15 	stw	r3,572(sp)
10004b60:	003f6906 	br	10004908 <__alt_data_end+0xf8004908>
10004b64:	da008d17 	ldw	r8,564(sp)
10004b68:	d8802804 	addi	r2,sp,160
10004b6c:	dcc02604 	addi	r19,sp,152
10004b70:	1221883a 	add	r16,r2,r8
10004b74:	0007883a 	mov	r3,zero
10004b78:	0005883a 	mov	r2,zero
10004b7c:	81800017 	ldw	r6,0(r16)
10004b80:	81c00117 	ldw	r7,4(r16)
10004b84:	1009883a 	mov	r4,r2
10004b88:	843ffe04 	addi	r16,r16,-8
10004b8c:	180b883a 	mov	r5,r3
10004b90:	00057580 	call	10005758 <__adddf3>
10004b94:	84fff91e 	bne	r16,r19,10004b7c <__alt_data_end+0xf8004b7c>
10004b98:	da008c17 	ldw	r8,560(sp)
10004b9c:	d9002817 	ldw	r4,160(sp)
10004ba0:	d9402917 	ldw	r5,164(sp)
10004ba4:	40009726 	beq	r8,zero,10004e04 <__kernel_rem_pio2+0xc64>
10004ba8:	da009017 	ldw	r8,576(sp)
10004bac:	19a0003c 	xorhi	r6,r3,32768
10004bb0:	180f883a 	mov	r7,r3
10004bb4:	41800115 	stw	r6,4(r8)
10004bb8:	40800015 	stw	r2,0(r8)
10004bbc:	100d883a 	mov	r6,r2
10004bc0:	00074240 	call	10007424 <__subdf3>
10004bc4:	04400c0e 	bge	zero,r17,10004bf8 <__kernel_rem_pio2+0xa58>
10004bc8:	dc002a04 	addi	r16,sp,168
10004bcc:	04c00044 	movi	r19,1
10004bd0:	81800017 	ldw	r6,0(r16)
10004bd4:	81c00117 	ldw	r7,4(r16)
10004bd8:	1009883a 	mov	r4,r2
10004bdc:	180b883a 	mov	r5,r3
10004be0:	9cc00044 	addi	r19,r19,1
10004be4:	00057580 	call	10005758 <__adddf3>
10004be8:	84000204 	addi	r16,r16,8
10004bec:	8cfff80e 	bge	r17,r19,10004bd0 <__alt_data_end+0xf8004bd0>
10004bf0:	da008c17 	ldw	r8,560(sp)
10004bf4:	40000126 	beq	r8,zero,10004bfc <__kernel_rem_pio2+0xa5c>
10004bf8:	18e0003c 	xorhi	r3,r3,32768
10004bfc:	da009017 	ldw	r8,576(sp)
10004c00:	40800215 	stw	r2,8(r8)
10004c04:	40c00315 	stw	r3,12(r8)
10004c08:	003fa306 	br	10004a98 <__alt_data_end+0xf8004a98>
10004c0c:	da00a517 	ldw	r8,660(sp)
10004c10:	008000c4 	movi	r2,3
10004c14:	40bfa01e 	bne	r8,r2,10004a98 <__alt_data_end+0xf8004a98>
10004c18:	0440880e 	bge	zero,r17,10004e3c <__kernel_rem_pio2+0xc9c>
10004c1c:	da008d17 	ldw	r8,564(sp)
10004c20:	882690fa 	slli	r19,r17,3
10004c24:	dd402804 	addi	r21,sp,160
10004c28:	da05883a 	add	r2,sp,r8
10004c2c:	10802804 	addi	r2,r2,160
10004c30:	15c00017 	ldw	r23,0(r2)
10004c34:	15800117 	ldw	r22,4(r2)
10004c38:	9829883a 	mov	r20,r19
10004c3c:	9cfffe04 	addi	r19,r19,-8
10004c40:	ace7883a 	add	r19,r21,r19
10004c44:	ad29883a 	add	r20,r21,r20
10004c48:	dac02604 	addi	r11,sp,152
10004c4c:	8811883a 	mov	r8,r17
10004c50:	9c400017 	ldw	r17,0(r19)
10004c54:	9f000117 	ldw	fp,4(r19)
10004c58:	b809883a 	mov	r4,r23
10004c5c:	b00b883a 	mov	r5,r22
10004c60:	880d883a 	mov	r6,r17
10004c64:	e00f883a 	mov	r7,fp
10004c68:	da009815 	stw	r8,608(sp)
10004c6c:	dac09a15 	stw	r11,616(sp)
10004c70:	00057580 	call	10005758 <__adddf3>
10004c74:	8809883a 	mov	r4,r17
10004c78:	e00b883a 	mov	r5,fp
10004c7c:	100d883a 	mov	r6,r2
10004c80:	180f883a 	mov	r7,r3
10004c84:	1025883a 	mov	r18,r2
10004c88:	1821883a 	mov	r16,r3
10004c8c:	00074240 	call	10007424 <__subdf3>
10004c90:	b809883a 	mov	r4,r23
10004c94:	b00b883a 	mov	r5,r22
10004c98:	100d883a 	mov	r6,r2
10004c9c:	180f883a 	mov	r7,r3
10004ca0:	00057580 	call	10005758 <__adddf3>
10004ca4:	dac09a17 	ldw	r11,616(sp)
10004ca8:	a0800015 	stw	r2,0(r20)
10004cac:	a0c00115 	stw	r3,4(r20)
10004cb0:	9c800015 	stw	r18,0(r19)
10004cb4:	9c000115 	stw	r16,4(r19)
10004cb8:	9cfffe04 	addi	r19,r19,-8
10004cbc:	a53ffe04 	addi	r20,r20,-8
10004cc0:	902f883a 	mov	r23,r18
10004cc4:	802d883a 	mov	r22,r16
10004cc8:	da009817 	ldw	r8,608(sp)
10004ccc:	9affe01e 	bne	r19,r11,10004c50 <__alt_data_end+0xf8004c50>
10004cd0:	00800044 	movi	r2,1
10004cd4:	1200590e 	bge	r2,r8,10004e3c <__kernel_rem_pio2+0xc9c>
10004cd8:	402290fa 	slli	r17,r8,3
10004cdc:	da008d17 	ldw	r8,564(sp)
10004ce0:	8c3ffe04 	addi	r16,r17,-8
10004ce4:	da05883a 	add	r2,sp,r8
10004ce8:	10802804 	addi	r2,r2,160
10004cec:	15800017 	ldw	r22,0(r2)
10004cf0:	15000117 	ldw	r20,4(r2)
10004cf4:	ac63883a 	add	r17,r21,r17
10004cf8:	ac21883a 	add	r16,r21,r16
10004cfc:	8827883a 	mov	r19,r17
10004d00:	8811883a 	mov	r8,r17
10004d04:	84400017 	ldw	r17,0(r16)
10004d08:	87000117 	ldw	fp,4(r16)
10004d0c:	b00d883a 	mov	r6,r22
10004d10:	a00f883a 	mov	r7,r20
10004d14:	8809883a 	mov	r4,r17
10004d18:	e00b883a 	mov	r5,fp
10004d1c:	da009815 	stw	r8,608(sp)
10004d20:	00057580 	call	10005758 <__adddf3>
10004d24:	8809883a 	mov	r4,r17
10004d28:	e00b883a 	mov	r5,fp
10004d2c:	100d883a 	mov	r6,r2
10004d30:	180f883a 	mov	r7,r3
10004d34:	102f883a 	mov	r23,r2
10004d38:	1825883a 	mov	r18,r3
10004d3c:	00074240 	call	10007424 <__subdf3>
10004d40:	b00d883a 	mov	r6,r22
10004d44:	a00f883a 	mov	r7,r20
10004d48:	1009883a 	mov	r4,r2
10004d4c:	180b883a 	mov	r5,r3
10004d50:	00057580 	call	10005758 <__adddf3>
10004d54:	98800015 	stw	r2,0(r19)
10004d58:	98c00115 	stw	r3,4(r19)
10004d5c:	85c00015 	stw	r23,0(r16)
10004d60:	84800115 	stw	r18,4(r16)
10004d64:	843ffe04 	addi	r16,r16,-8
10004d68:	9cfffe04 	addi	r19,r19,-8
10004d6c:	b82d883a 	mov	r22,r23
10004d70:	9029883a 	mov	r20,r18
10004d74:	da009817 	ldw	r8,608(sp)
10004d78:	ac3fe21e 	bne	r21,r16,10004d04 <__alt_data_end+0xf8004d04>
10004d7c:	4023883a 	mov	r17,r8
10004d80:	dc002a04 	addi	r16,sp,168
10004d84:	0005883a 	mov	r2,zero
10004d88:	0007883a 	mov	r3,zero
10004d8c:	89800017 	ldw	r6,0(r17)
10004d90:	89c00117 	ldw	r7,4(r17)
10004d94:	1009883a 	mov	r4,r2
10004d98:	8c7ffe04 	addi	r17,r17,-8
10004d9c:	180b883a 	mov	r5,r3
10004da0:	00057580 	call	10005758 <__adddf3>
10004da4:	8c3ff91e 	bne	r17,r16,10004d8c <__alt_data_end+0xf8004d8c>
10004da8:	da008c17 	ldw	r8,560(sp)
10004dac:	40002726 	beq	r8,zero,10004e4c <__kernel_rem_pio2+0xcac>
10004db0:	d9002b17 	ldw	r4,172(sp)
10004db4:	d9402917 	ldw	r5,164(sp)
10004db8:	d9802a17 	ldw	r6,168(sp)
10004dbc:	da009017 	ldw	r8,576(sp)
10004dc0:	d9c02817 	ldw	r7,160(sp)
10004dc4:	2960003c 	xorhi	r5,r5,32768
10004dc8:	2120003c 	xorhi	r4,r4,32768
10004dcc:	18e0003c 	xorhi	r3,r3,32768
10004dd0:	41c00015 	stw	r7,0(r8)
10004dd4:	41400115 	stw	r5,4(r8)
10004dd8:	41800215 	stw	r6,8(r8)
10004ddc:	41000315 	stw	r4,12(r8)
10004de0:	40800415 	stw	r2,16(r8)
10004de4:	40c00515 	stw	r3,20(r8)
10004de8:	003f2b06 	br	10004a98 <__alt_data_end+0xf8004a98>
10004dec:	da008c17 	ldw	r8,560(sp)
10004df0:	0005883a 	mov	r2,zero
10004df4:	0007883a 	mov	r3,zero
10004df8:	d9002817 	ldw	r4,160(sp)
10004dfc:	d9402917 	ldw	r5,164(sp)
10004e00:	403f691e 	bne	r8,zero,10004ba8 <__alt_data_end+0xf8004ba8>
10004e04:	da009017 	ldw	r8,576(sp)
10004e08:	100d883a 	mov	r6,r2
10004e0c:	180f883a 	mov	r7,r3
10004e10:	40800015 	stw	r2,0(r8)
10004e14:	40c00115 	stw	r3,4(r8)
10004e18:	00074240 	call	10007424 <__subdf3>
10004e1c:	047f6a16 	blt	zero,r17,10004bc8 <__alt_data_end+0xf8004bc8>
10004e20:	da009017 	ldw	r8,576(sp)
10004e24:	40800215 	stw	r2,8(r8)
10004e28:	40c00315 	stw	r3,12(r8)
10004e2c:	003f1a06 	br	10004a98 <__alt_data_end+0xf8004a98>
10004e30:	da00a517 	ldw	r8,660(sp)
10004e34:	008000c4 	movi	r2,3
10004e38:	40bf171e 	bne	r8,r2,10004a98 <__alt_data_end+0xf8004a98>
10004e3c:	da008c17 	ldw	r8,560(sp)
10004e40:	0005883a 	mov	r2,zero
10004e44:	0007883a 	mov	r3,zero
10004e48:	403fd91e 	bne	r8,zero,10004db0 <__alt_data_end+0xf8004db0>
10004e4c:	da009017 	ldw	r8,576(sp)
10004e50:	d9802817 	ldw	r6,160(sp)
10004e54:	d9402a17 	ldw	r5,168(sp)
10004e58:	d9002b17 	ldw	r4,172(sp)
10004e5c:	41800015 	stw	r6,0(r8)
10004e60:	d9802917 	ldw	r6,164(sp)
10004e64:	41400215 	stw	r5,8(r8)
10004e68:	41000315 	stw	r4,12(r8)
10004e6c:	41800115 	stw	r6,4(r8)
10004e70:	40800415 	stw	r2,16(r8)
10004e74:	40c00515 	stw	r3,20(r8)
10004e78:	003f0706 	br	10004a98 <__alt_data_end+0xf8004a98>
10004e7c:	a00d883a 	mov	r6,r20
10004e80:	580f883a 	mov	r7,r11
10004e84:	0009883a 	mov	r4,zero
10004e88:	014ffc34 	movhi	r5,16368
10004e8c:	00074240 	call	10007424 <__subdf3>
10004e90:	1029883a 	mov	r20,r2
10004e94:	1817883a 	mov	r11,r3
10004e98:	04800084 	movi	r18,2
10004e9c:	003dc706 	br	100045bc <__alt_data_end+0xf80045bc>
10004ea0:	840d883a 	add	r6,r16,r16
10004ea4:	318d883a 	add	r6,r6,r6
10004ea8:	d9a3883a 	add	r17,sp,r6
10004eac:	a009883a 	mov	r4,r20
10004eb0:	b80b883a 	mov	r5,r23
10004eb4:	8c407804 	addi	r17,r17,480
10004eb8:	0007cf40 	call	10007cf4 <__fixdfsi>
10004ebc:	88800015 	stw	r2,0(r17)
10004ec0:	8023883a 	mov	r17,r16
10004ec4:	003e9006 	br	10004908 <__alt_data_end+0xf8004908>
10004ec8:	d8009215 	stw	zero,584(sp)
10004ecc:	003cd206 	br	10004218 <__alt_data_end+0xf8004218>

10004ed0 <__kernel_sin>:
10004ed0:	00a00034 	movhi	r2,32768
10004ed4:	defff404 	addi	sp,sp,-48
10004ed8:	10bfffc4 	addi	r2,r2,-1
10004edc:	00cf9034 	movhi	r3,15936
10004ee0:	ddc00915 	stw	r23,36(sp)
10004ee4:	dd800815 	stw	r22,32(sp)
10004ee8:	dc400315 	stw	r17,12(sp)
10004eec:	dc000215 	stw	r16,8(sp)
10004ef0:	dfc00b15 	stw	ra,44(sp)
10004ef4:	df000a15 	stw	fp,40(sp)
10004ef8:	dd400715 	stw	r21,28(sp)
10004efc:	dd000615 	stw	r20,24(sp)
10004f00:	dcc00515 	stw	r19,20(sp)
10004f04:	dc800415 	stw	r18,16(sp)
10004f08:	2884703a 	and	r2,r5,r2
10004f0c:	18ffffc4 	addi	r3,r3,-1
10004f10:	2821883a 	mov	r16,r5
10004f14:	2023883a 	mov	r17,r4
10004f18:	302f883a 	mov	r23,r6
10004f1c:	382d883a 	mov	r22,r7
10004f20:	18800216 	blt	r3,r2,10004f2c <__kernel_sin+0x5c>
10004f24:	0007cf40 	call	10007cf4 <__fixdfsi>
10004f28:	10009826 	beq	r2,zero,1000518c <__kernel_sin+0x2bc>
10004f2c:	8809883a 	mov	r4,r17
10004f30:	800b883a 	mov	r5,r16
10004f34:	880d883a 	mov	r6,r17
10004f38:	800f883a 	mov	r7,r16
10004f3c:	0006bb80 	call	10006bb8 <__muldf3>
10004f40:	1009883a 	mov	r4,r2
10004f44:	180b883a 	mov	r5,r3
10004f48:	880d883a 	mov	r6,r17
10004f4c:	800f883a 	mov	r7,r16
10004f50:	1027883a 	mov	r19,r2
10004f54:	1825883a 	mov	r18,r3
10004f58:	0006bb80 	call	10006bb8 <__muldf3>
10004f5c:	0196b434 	movhi	r6,23248
10004f60:	01cf79b4 	movhi	r7,15846
10004f64:	9809883a 	mov	r4,r19
10004f68:	900b883a 	mov	r5,r18
10004f6c:	31b55f04 	addi	r6,r6,-10884
10004f70:	39f64e84 	addi	r7,r7,-9926
10004f74:	102b883a 	mov	r21,r2
10004f78:	1829883a 	mov	r20,r3
10004f7c:	0006bb80 	call	10006bb8 <__muldf3>
10004f80:	01a28b34 	movhi	r6,35372
10004f84:	01cf96f4 	movhi	r7,15963
10004f88:	1009883a 	mov	r4,r2
10004f8c:	180b883a 	mov	r5,r3
10004f90:	31a73ac4 	addi	r6,r6,-25365
10004f94:	39f97984 	addi	r7,r7,-6682
10004f98:	00074240 	call	10007424 <__subdf3>
10004f9c:	1009883a 	mov	r4,r2
10004fa0:	180b883a 	mov	r5,r3
10004fa4:	980d883a 	mov	r6,r19
10004fa8:	900f883a 	mov	r7,r18
10004fac:	0006bb80 	call	10006bb8 <__muldf3>
10004fb0:	0195ecb4 	movhi	r6,22450
10004fb4:	01cfb1f4 	movhi	r7,16071
10004fb8:	1009883a 	mov	r4,r2
10004fbc:	180b883a 	mov	r5,r3
10004fc0:	31bf9f44 	addi	r6,r6,-387
10004fc4:	39c778c4 	addi	r7,r7,7651
10004fc8:	00057580 	call	10005758 <__adddf3>
10004fcc:	1009883a 	mov	r4,r2
10004fd0:	180b883a 	mov	r5,r3
10004fd4:	980d883a 	mov	r6,r19
10004fd8:	900f883a 	mov	r7,r18
10004fdc:	0006bb80 	call	10006bb8 <__muldf3>
10004fe0:	01867074 	movhi	r6,6593
10004fe4:	01cfcab4 	movhi	r7,16170
10004fe8:	1009883a 	mov	r4,r2
10004fec:	180b883a 	mov	r5,r3
10004ff0:	31987544 	addi	r6,r6,25045
10004ff4:	39c06804 	addi	r7,r7,416
10004ff8:	00074240 	call	10007424 <__subdf3>
10004ffc:	1009883a 	mov	r4,r2
10005000:	180b883a 	mov	r5,r3
10005004:	980d883a 	mov	r6,r19
10005008:	900f883a 	mov	r7,r18
1000500c:	0006bb80 	call	10006bb8 <__muldf3>
10005010:	01844474 	movhi	r6,4369
10005014:	01cfe074 	movhi	r7,16257
10005018:	1009883a 	mov	r4,r2
1000501c:	180b883a 	mov	r5,r3
10005020:	31be2984 	addi	r6,r6,-1882
10005024:	39c44444 	addi	r7,r7,4369
10005028:	00057580 	call	10005758 <__adddf3>
1000502c:	d9000c17 	ldw	r4,48(sp)
10005030:	1839883a 	mov	fp,r3
10005034:	20003e26 	beq	r4,zero,10005130 <__kernel_sin+0x260>
10005038:	b809883a 	mov	r4,r23
1000503c:	b00b883a 	mov	r5,r22
10005040:	000d883a 	mov	r6,zero
10005044:	01cff834 	movhi	r7,16352
10005048:	d8800015 	stw	r2,0(sp)
1000504c:	0006bb80 	call	10006bb8 <__muldf3>
10005050:	da000017 	ldw	r8,0(sp)
10005054:	a809883a 	mov	r4,r21
10005058:	a00b883a 	mov	r5,r20
1000505c:	400d883a 	mov	r6,r8
10005060:	e00f883a 	mov	r7,fp
10005064:	d8c00115 	stw	r3,4(sp)
10005068:	d8800015 	stw	r2,0(sp)
1000506c:	0006bb80 	call	10006bb8 <__muldf3>
10005070:	da800017 	ldw	r10,0(sp)
10005074:	da400117 	ldw	r9,4(sp)
10005078:	100d883a 	mov	r6,r2
1000507c:	5009883a 	mov	r4,r10
10005080:	480b883a 	mov	r5,r9
10005084:	180f883a 	mov	r7,r3
10005088:	00074240 	call	10007424 <__subdf3>
1000508c:	980d883a 	mov	r6,r19
10005090:	900f883a 	mov	r7,r18
10005094:	1009883a 	mov	r4,r2
10005098:	180b883a 	mov	r5,r3
1000509c:	0006bb80 	call	10006bb8 <__muldf3>
100050a0:	1009883a 	mov	r4,r2
100050a4:	180b883a 	mov	r5,r3
100050a8:	b80d883a 	mov	r6,r23
100050ac:	b00f883a 	mov	r7,r22
100050b0:	00074240 	call	10007424 <__subdf3>
100050b4:	01955574 	movhi	r6,21845
100050b8:	01cff174 	movhi	r7,16325
100050bc:	a809883a 	mov	r4,r21
100050c0:	a00b883a 	mov	r5,r20
100050c4:	31955244 	addi	r6,r6,21833
100050c8:	39d55544 	addi	r7,r7,21845
100050cc:	1027883a 	mov	r19,r2
100050d0:	1825883a 	mov	r18,r3
100050d4:	0006bb80 	call	10006bb8 <__muldf3>
100050d8:	9809883a 	mov	r4,r19
100050dc:	900b883a 	mov	r5,r18
100050e0:	100d883a 	mov	r6,r2
100050e4:	180f883a 	mov	r7,r3
100050e8:	00057580 	call	10005758 <__adddf3>
100050ec:	8809883a 	mov	r4,r17
100050f0:	800b883a 	mov	r5,r16
100050f4:	100d883a 	mov	r6,r2
100050f8:	180f883a 	mov	r7,r3
100050fc:	00074240 	call	10007424 <__subdf3>
10005100:	dfc00b17 	ldw	ra,44(sp)
10005104:	df000a17 	ldw	fp,40(sp)
10005108:	ddc00917 	ldw	r23,36(sp)
1000510c:	dd800817 	ldw	r22,32(sp)
10005110:	dd400717 	ldw	r21,28(sp)
10005114:	dd000617 	ldw	r20,24(sp)
10005118:	dcc00517 	ldw	r19,20(sp)
1000511c:	dc800417 	ldw	r18,16(sp)
10005120:	dc400317 	ldw	r17,12(sp)
10005124:	dc000217 	ldw	r16,8(sp)
10005128:	dec00c04 	addi	sp,sp,48
1000512c:	f800283a 	ret
10005130:	9809883a 	mov	r4,r19
10005134:	900b883a 	mov	r5,r18
10005138:	100d883a 	mov	r6,r2
1000513c:	180f883a 	mov	r7,r3
10005140:	0006bb80 	call	10006bb8 <__muldf3>
10005144:	01955574 	movhi	r6,21845
10005148:	01cff174 	movhi	r7,16325
1000514c:	1009883a 	mov	r4,r2
10005150:	180b883a 	mov	r5,r3
10005154:	31955244 	addi	r6,r6,21833
10005158:	39d55544 	addi	r7,r7,21845
1000515c:	00074240 	call	10007424 <__subdf3>
10005160:	a80d883a 	mov	r6,r21
10005164:	a00f883a 	mov	r7,r20
10005168:	1009883a 	mov	r4,r2
1000516c:	180b883a 	mov	r5,r3
10005170:	0006bb80 	call	10006bb8 <__muldf3>
10005174:	1009883a 	mov	r4,r2
10005178:	180b883a 	mov	r5,r3
1000517c:	880d883a 	mov	r6,r17
10005180:	800f883a 	mov	r7,r16
10005184:	00057580 	call	10005758 <__adddf3>
10005188:	003fdd06 	br	10005100 <__alt_data_end+0xf8005100>
1000518c:	8805883a 	mov	r2,r17
10005190:	8007883a 	mov	r3,r16
10005194:	003fda06 	br	10005100 <__alt_data_end+0xf8005100>

10005198 <fabs>:
10005198:	00e00034 	movhi	r3,32768
1000519c:	18ffffc4 	addi	r3,r3,-1
100051a0:	2005883a 	mov	r2,r4
100051a4:	28c6703a 	and	r3,r5,r3
100051a8:	f800283a 	ret

100051ac <floor>:
100051ac:	defff904 	addi	sp,sp,-28
100051b0:	dc800215 	stw	r18,8(sp)
100051b4:	2825d53a 	srai	r18,r5,20
100051b8:	dd000415 	stw	r20,16(sp)
100051bc:	dcc00315 	stw	r19,12(sp)
100051c0:	9481ffcc 	andi	r18,r18,2047
100051c4:	dc400115 	stw	r17,4(sp)
100051c8:	dc000015 	stw	r16,0(sp)
100051cc:	dfc00615 	stw	ra,24(sp)
100051d0:	dd400515 	stw	r21,20(sp)
100051d4:	94ff0044 	addi	r19,r18,-1023
100051d8:	018004c4 	movi	r6,19
100051dc:	2821883a 	mov	r16,r5
100051e0:	2005883a 	mov	r2,r4
100051e4:	280f883a 	mov	r7,r5
100051e8:	2829883a 	mov	r20,r5
100051ec:	2023883a 	mov	r17,r4
100051f0:	34c01916 	blt	r6,r19,10005258 <floor+0xac>
100051f4:	98003d16 	blt	r19,zero,100052ec <floor+0x140>
100051f8:	04800434 	movhi	r18,16
100051fc:	94bfffc4 	addi	r18,r18,-1
10005200:	94e5d83a 	sra	r18,r18,r19
10005204:	914c703a 	and	r6,r18,r5
10005208:	310cb03a 	or	r6,r6,r4
1000520c:	30001626 	beq	r6,zero,10005268 <floor+0xbc>
10005210:	01a20034 	movhi	r6,34816
10005214:	01df8e34 	movhi	r7,32312
10005218:	319d6704 	addi	r6,r6,30108
1000521c:	39f90f04 	addi	r7,r7,-7108
10005220:	00057580 	call	10005758 <__adddf3>
10005224:	1009883a 	mov	r4,r2
10005228:	180b883a 	mov	r5,r3
1000522c:	000d883a 	mov	r6,zero
10005230:	000f883a 	mov	r7,zero
10005234:	00069f80 	call	100069f8 <__gedf2>
10005238:	0080040e 	bge	zero,r2,1000524c <floor+0xa0>
1000523c:	80003d16 	blt	r16,zero,10005334 <floor+0x188>
10005240:	04a0303a 	nor	r16,zero,r18
10005244:	a420703a 	and	r16,r20,r16
10005248:	0023883a 	mov	r17,zero
1000524c:	8805883a 	mov	r2,r17
10005250:	8007883a 	mov	r3,r16
10005254:	00000506 	br	1000526c <floor+0xc0>
10005258:	01800cc4 	movi	r6,51
1000525c:	34c00c0e 	bge	r6,r19,10005290 <floor+0xe4>
10005260:	01810004 	movi	r6,1024
10005264:	99803026 	beq	r19,r6,10005328 <floor+0x17c>
10005268:	3807883a 	mov	r3,r7
1000526c:	dfc00617 	ldw	ra,24(sp)
10005270:	dd400517 	ldw	r21,20(sp)
10005274:	dd000417 	ldw	r20,16(sp)
10005278:	dcc00317 	ldw	r19,12(sp)
1000527c:	dc800217 	ldw	r18,8(sp)
10005280:	dc400117 	ldw	r17,4(sp)
10005284:	dc000017 	ldw	r16,0(sp)
10005288:	dec00704 	addi	sp,sp,28
1000528c:	f800283a 	ret
10005290:	01bfffc4 	movi	r6,-1
10005294:	957efb44 	addi	r21,r18,-1043
10005298:	356ad83a 	srl	r21,r6,r21
1000529c:	a90c703a 	and	r6,r21,r4
100052a0:	303ff126 	beq	r6,zero,10005268 <__alt_data_end+0xf8005268>
100052a4:	01a20034 	movhi	r6,34816
100052a8:	01df8e34 	movhi	r7,32312
100052ac:	319d6704 	addi	r6,r6,30108
100052b0:	39f90f04 	addi	r7,r7,-7108
100052b4:	00057580 	call	10005758 <__adddf3>
100052b8:	1009883a 	mov	r4,r2
100052bc:	180b883a 	mov	r5,r3
100052c0:	000d883a 	mov	r6,zero
100052c4:	000f883a 	mov	r7,zero
100052c8:	00069f80 	call	100069f8 <__gedf2>
100052cc:	00bfdf0e 	bge	zero,r2,1000524c <__alt_data_end+0xf800524c>
100052d0:	80001c16 	blt	r16,zero,10005344 <floor+0x198>
100052d4:	056a303a 	nor	r21,zero,r21
100052d8:	a021883a 	mov	r16,r20
100052dc:	8d62703a 	and	r17,r17,r21
100052e0:	8805883a 	mov	r2,r17
100052e4:	8007883a 	mov	r3,r16
100052e8:	003fe006 	br	1000526c <__alt_data_end+0xf800526c>
100052ec:	01a20034 	movhi	r6,34816
100052f0:	01df8e34 	movhi	r7,32312
100052f4:	319d6704 	addi	r6,r6,30108
100052f8:	39f90f04 	addi	r7,r7,-7108
100052fc:	00057580 	call	10005758 <__adddf3>
10005300:	1009883a 	mov	r4,r2
10005304:	180b883a 	mov	r5,r3
10005308:	000d883a 	mov	r6,zero
1000530c:	000f883a 	mov	r7,zero
10005310:	00069f80 	call	100069f8 <__gedf2>
10005314:	00bfcd0e 	bge	zero,r2,1000524c <__alt_data_end+0xf800524c>
10005318:	80001516 	blt	r16,zero,10005370 <floor+0x1c4>
1000531c:	0023883a 	mov	r17,zero
10005320:	0021883a 	mov	r16,zero
10005324:	003fc906 	br	1000524c <__alt_data_end+0xf800524c>
10005328:	200d883a 	mov	r6,r4
1000532c:	00057580 	call	10005758 <__adddf3>
10005330:	003fce06 	br	1000526c <__alt_data_end+0xf800526c>
10005334:	00800434 	movhi	r2,16
10005338:	14e7d83a 	sra	r19,r2,r19
1000533c:	84e9883a 	add	r20,r16,r19
10005340:	003fbf06 	br	10005240 <__alt_data_end+0xf8005240>
10005344:	00800504 	movi	r2,20
10005348:	98801326 	beq	r19,r2,10005398 <floor+0x1ec>
1000534c:	00810cc4 	movi	r2,1075
10005350:	14a5c83a 	sub	r18,r2,r18
10005354:	00800044 	movi	r2,1
10005358:	1484983a 	sll	r2,r2,r18
1000535c:	1445883a 	add	r2,r2,r17
10005360:	14400b2e 	bgeu	r2,r17,10005390 <floor+0x1e4>
10005364:	85000044 	addi	r20,r16,1
10005368:	1023883a 	mov	r17,r2
1000536c:	003fd906 	br	100052d4 <__alt_data_end+0xf80052d4>
10005370:	00a00034 	movhi	r2,32768
10005374:	10bfffc4 	addi	r2,r2,-1
10005378:	8084703a 	and	r2,r16,r2
1000537c:	1462b03a 	or	r17,r2,r17
10005380:	883fb226 	beq	r17,zero,1000524c <__alt_data_end+0xf800524c>
10005384:	0023883a 	mov	r17,zero
10005388:	042ffc34 	movhi	r16,49136
1000538c:	003faf06 	br	1000524c <__alt_data_end+0xf800524c>
10005390:	1023883a 	mov	r17,r2
10005394:	003fcf06 	br	100052d4 <__alt_data_end+0xf80052d4>
10005398:	85000044 	addi	r20,r16,1
1000539c:	003fcd06 	br	100052d4 <__alt_data_end+0xf80052d4>

100053a0 <__fpclassifyd>:
100053a0:	00a00034 	movhi	r2,32768
100053a4:	10bfffc4 	addi	r2,r2,-1
100053a8:	2884703a 	and	r2,r5,r2
100053ac:	10000726 	beq	r2,zero,100053cc <__fpclassifyd+0x2c>
100053b0:	00fffc34 	movhi	r3,65520
100053b4:	019ff834 	movhi	r6,32736
100053b8:	28c7883a 	add	r3,r5,r3
100053bc:	31bfffc4 	addi	r6,r6,-1
100053c0:	30c00536 	bltu	r6,r3,100053d8 <__fpclassifyd+0x38>
100053c4:	00800104 	movi	r2,4
100053c8:	f800283a 	ret
100053cc:	2000021e 	bne	r4,zero,100053d8 <__fpclassifyd+0x38>
100053d0:	00800084 	movi	r2,2
100053d4:	f800283a 	ret
100053d8:	00dffc34 	movhi	r3,32752
100053dc:	019ff834 	movhi	r6,32736
100053e0:	28cb883a 	add	r5,r5,r3
100053e4:	31bfffc4 	addi	r6,r6,-1
100053e8:	317ff62e 	bgeu	r6,r5,100053c4 <__alt_data_end+0xf80053c4>
100053ec:	01400434 	movhi	r5,16
100053f0:	297fffc4 	addi	r5,r5,-1
100053f4:	28800236 	bltu	r5,r2,10005400 <__fpclassifyd+0x60>
100053f8:	008000c4 	movi	r2,3
100053fc:	f800283a 	ret
10005400:	10c00226 	beq	r2,r3,1000540c <__fpclassifyd+0x6c>
10005404:	0005883a 	mov	r2,zero
10005408:	f800283a 	ret
1000540c:	2005003a 	cmpeq	r2,r4,zero
10005410:	f800283a 	ret

10005414 <matherr>:
10005414:	0005883a 	mov	r2,zero
10005418:	f800283a 	ret

1000541c <scalbn>:
1000541c:	2a1ffc2c 	andhi	r8,r5,32752
10005420:	4011d53a 	srai	r8,r8,20
10005424:	defffe04 	addi	sp,sp,-8
10005428:	dc000015 	stw	r16,0(sp)
1000542c:	dfc00115 	stw	ra,4(sp)
10005430:	280f883a 	mov	r7,r5
10005434:	2015883a 	mov	r10,r4
10005438:	3021883a 	mov	r16,r6
1000543c:	4000251e 	bne	r8,zero,100054d4 <scalbn+0xb8>
10005440:	00a00034 	movhi	r2,32768
10005444:	10bfffc4 	addi	r2,r2,-1
10005448:	2884703a 	and	r2,r5,r2
1000544c:	1104b03a 	or	r2,r2,r4
10005450:	10003126 	beq	r2,zero,10005518 <scalbn+0xfc>
10005454:	01d0d434 	movhi	r7,17232
10005458:	000d883a 	mov	r6,zero
1000545c:	0006bb80 	call	10006bb8 <__muldf3>
10005460:	013ffff4 	movhi	r4,65535
10005464:	210f2c04 	addi	r4,r4,15536
10005468:	1015883a 	mov	r10,r2
1000546c:	180f883a 	mov	r7,r3
10005470:	81002f16 	blt	r16,r4,10005530 <scalbn+0x114>
10005474:	1a5ffc2c 	andhi	r9,r3,32752
10005478:	4813d53a 	srai	r9,r9,20
1000547c:	0081ff84 	movi	r2,2046
10005480:	180d883a 	mov	r6,r3
10005484:	4a3ff284 	addi	r8,r9,-54
10005488:	4411883a 	add	r8,r8,r16
1000548c:	1200170e 	bge	r2,r8,100054ec <scalbn+0xd0>
10005490:	01220034 	movhi	r4,34816
10005494:	015f8e34 	movhi	r5,32312
10005498:	500d883a 	mov	r6,r10
1000549c:	211d6704 	addi	r4,r4,30108
100054a0:	29790f04 	addi	r5,r5,-7108
100054a4:	00055e80 	call	100055e8 <copysign>
100054a8:	01a20034 	movhi	r6,34816
100054ac:	01df8e34 	movhi	r7,32312
100054b0:	1009883a 	mov	r4,r2
100054b4:	180b883a 	mov	r5,r3
100054b8:	319d6704 	addi	r6,r6,30108
100054bc:	39f90f04 	addi	r7,r7,-7108
100054c0:	0006bb80 	call	10006bb8 <__muldf3>
100054c4:	dfc00117 	ldw	ra,4(sp)
100054c8:	dc000017 	ldw	r16,0(sp)
100054cc:	dec00204 	addi	sp,sp,8
100054d0:	f800283a 	ret
100054d4:	0081ffc4 	movi	r2,2047
100054d8:	280d883a 	mov	r6,r5
100054dc:	40803126 	beq	r8,r2,100055a4 <scalbn+0x188>
100054e0:	4411883a 	add	r8,r8,r16
100054e4:	0081ff84 	movi	r2,2046
100054e8:	123fe916 	blt	r2,r8,10005490 <__alt_data_end+0xf8005490>
100054ec:	02001b0e 	bge	zero,r8,1000555c <scalbn+0x140>
100054f0:	4010953a 	slli	r8,r8,20
100054f4:	00e00434 	movhi	r3,32784
100054f8:	18ffffc4 	addi	r3,r3,-1
100054fc:	30ce703a 	and	r7,r6,r3
10005500:	5005883a 	mov	r2,r10
10005504:	41c6b03a 	or	r3,r8,r7
10005508:	dfc00117 	ldw	ra,4(sp)
1000550c:	dc000017 	ldw	r16,0(sp)
10005510:	dec00204 	addi	sp,sp,8
10005514:	f800283a 	ret
10005518:	2005883a 	mov	r2,r4
1000551c:	2807883a 	mov	r3,r5
10005520:	dfc00117 	ldw	ra,4(sp)
10005524:	dc000017 	ldw	r16,0(sp)
10005528:	dec00204 	addi	sp,sp,8
1000552c:	f800283a 	ret
10005530:	01b0be74 	movhi	r6,49913
10005534:	01c06974 	movhi	r7,421
10005538:	31bcd644 	addi	r6,r6,-3239
1000553c:	39db87c4 	addi	r7,r7,28191
10005540:	1009883a 	mov	r4,r2
10005544:	180b883a 	mov	r5,r3
10005548:	0006bb80 	call	10006bb8 <__muldf3>
1000554c:	dfc00117 	ldw	ra,4(sp)
10005550:	dc000017 	ldw	r16,0(sp)
10005554:	dec00204 	addi	sp,sp,8
10005558:	f800283a 	ret
1000555c:	00bff2c4 	movi	r2,-53
10005560:	4080160e 	bge	r8,r2,100055bc <scalbn+0x1a0>
10005564:	00b0d414 	movui	r2,50000
10005568:	143fc916 	blt	r2,r16,10005490 <__alt_data_end+0xf8005490>
1000556c:	0130be74 	movhi	r4,49913
10005570:	01406974 	movhi	r5,421
10005574:	500d883a 	mov	r6,r10
10005578:	213cd644 	addi	r4,r4,-3239
1000557c:	295b87c4 	addi	r5,r5,28191
10005580:	00055e80 	call	100055e8 <copysign>
10005584:	01b0be74 	movhi	r6,49913
10005588:	01c06974 	movhi	r7,421
1000558c:	1009883a 	mov	r4,r2
10005590:	180b883a 	mov	r5,r3
10005594:	31bcd644 	addi	r6,r6,-3239
10005598:	39db87c4 	addi	r7,r7,28191
1000559c:	0006bb80 	call	10006bb8 <__muldf3>
100055a0:	003fd906 	br	10005508 <__alt_data_end+0xf8005508>
100055a4:	200d883a 	mov	r6,r4
100055a8:	00057580 	call	10005758 <__adddf3>
100055ac:	dfc00117 	ldw	ra,4(sp)
100055b0:	dc000017 	ldw	r16,0(sp)
100055b4:	dec00204 	addi	sp,sp,8
100055b8:	f800283a 	ret
100055bc:	42000d84 	addi	r8,r8,54
100055c0:	4012953a 	slli	r9,r8,20
100055c4:	01e00434 	movhi	r7,32784
100055c8:	39ffffc4 	addi	r7,r7,-1
100055cc:	31ca703a 	and	r5,r6,r7
100055d0:	5009883a 	mov	r4,r10
100055d4:	494ab03a 	or	r5,r9,r5
100055d8:	000d883a 	mov	r6,zero
100055dc:	01cf2434 	movhi	r7,15504
100055e0:	0006bb80 	call	10006bb8 <__muldf3>
100055e4:	003fc806 	br	10005508 <__alt_data_end+0xf8005508>

100055e8 <copysign>:
100055e8:	2005883a 	mov	r2,r4
100055ec:	01200034 	movhi	r4,32768
100055f0:	213fffc4 	addi	r4,r4,-1
100055f4:	38e0002c 	andhi	r3,r7,32768
100055f8:	290a703a 	and	r5,r5,r4
100055fc:	1946b03a 	or	r3,r3,r5
10005600:	f800283a 	ret

10005604 <udivmodsi4>:
10005604:	2900182e 	bgeu	r5,r4,10005668 <udivmodsi4+0x64>
10005608:	28001716 	blt	r5,zero,10005668 <udivmodsi4+0x64>
1000560c:	00800804 	movi	r2,32
10005610:	00c00044 	movi	r3,1
10005614:	00000206 	br	10005620 <udivmodsi4+0x1c>
10005618:	10001126 	beq	r2,zero,10005660 <udivmodsi4+0x5c>
1000561c:	28000516 	blt	r5,zero,10005634 <udivmodsi4+0x30>
10005620:	294b883a 	add	r5,r5,r5
10005624:	10bfffc4 	addi	r2,r2,-1
10005628:	18c7883a 	add	r3,r3,r3
1000562c:	293ffa36 	bltu	r5,r4,10005618 <__alt_data_end+0xf8005618>
10005630:	18000b26 	beq	r3,zero,10005660 <udivmodsi4+0x5c>
10005634:	0005883a 	mov	r2,zero
10005638:	21400236 	bltu	r4,r5,10005644 <udivmodsi4+0x40>
1000563c:	2149c83a 	sub	r4,r4,r5
10005640:	10c4b03a 	or	r2,r2,r3
10005644:	1806d07a 	srli	r3,r3,1
10005648:	280ad07a 	srli	r5,r5,1
1000564c:	183ffa1e 	bne	r3,zero,10005638 <__alt_data_end+0xf8005638>
10005650:	3000011e 	bne	r6,zero,10005658 <udivmodsi4+0x54>
10005654:	f800283a 	ret
10005658:	2005883a 	mov	r2,r4
1000565c:	f800283a 	ret
10005660:	0005883a 	mov	r2,zero
10005664:	003ffa06 	br	10005650 <__alt_data_end+0xf8005650>
10005668:	00c00044 	movi	r3,1
1000566c:	003ff106 	br	10005634 <__alt_data_end+0xf8005634>

10005670 <__divsi3>:
10005670:	defffe04 	addi	sp,sp,-8
10005674:	dfc00115 	stw	ra,4(sp)
10005678:	dc000015 	stw	r16,0(sp)
1000567c:	20000b16 	blt	r4,zero,100056ac <__divsi3+0x3c>
10005680:	0021883a 	mov	r16,zero
10005684:	28000c16 	blt	r5,zero,100056b8 <__divsi3+0x48>
10005688:	000d883a 	mov	r6,zero
1000568c:	00056040 	call	10005604 <udivmodsi4>
10005690:	0407c83a 	sub	r3,zero,r16
10005694:	1884f03a 	xor	r2,r3,r2
10005698:	1405883a 	add	r2,r2,r16
1000569c:	dfc00117 	ldw	ra,4(sp)
100056a0:	dc000017 	ldw	r16,0(sp)
100056a4:	dec00204 	addi	sp,sp,8
100056a8:	f800283a 	ret
100056ac:	0109c83a 	sub	r4,zero,r4
100056b0:	04000044 	movi	r16,1
100056b4:	283ff40e 	bge	r5,zero,10005688 <__alt_data_end+0xf8005688>
100056b8:	014bc83a 	sub	r5,zero,r5
100056bc:	8400005c 	xori	r16,r16,1
100056c0:	003ff106 	br	10005688 <__alt_data_end+0xf8005688>

100056c4 <__modsi3>:
100056c4:	defffd04 	addi	sp,sp,-12
100056c8:	dfc00215 	stw	ra,8(sp)
100056cc:	dc400115 	stw	r17,4(sp)
100056d0:	dc000015 	stw	r16,0(sp)
100056d4:	20000c16 	blt	r4,zero,10005708 <__modsi3+0x44>
100056d8:	0023883a 	mov	r17,zero
100056dc:	0021883a 	mov	r16,zero
100056e0:	28000d16 	blt	r5,zero,10005718 <__modsi3+0x54>
100056e4:	01800044 	movi	r6,1
100056e8:	00056040 	call	10005604 <udivmodsi4>
100056ec:	1404f03a 	xor	r2,r2,r16
100056f0:	8885883a 	add	r2,r17,r2
100056f4:	dfc00217 	ldw	ra,8(sp)
100056f8:	dc400117 	ldw	r17,4(sp)
100056fc:	dc000017 	ldw	r16,0(sp)
10005700:	dec00304 	addi	sp,sp,12
10005704:	f800283a 	ret
10005708:	0109c83a 	sub	r4,zero,r4
1000570c:	04400044 	movi	r17,1
10005710:	043fffc4 	movi	r16,-1
10005714:	283ff30e 	bge	r5,zero,100056e4 <__alt_data_end+0xf80056e4>
10005718:	014bc83a 	sub	r5,zero,r5
1000571c:	003ff106 	br	100056e4 <__alt_data_end+0xf80056e4>

10005720 <__udivsi3>:
10005720:	000d883a 	mov	r6,zero
10005724:	00056041 	jmpi	10005604 <udivmodsi4>

10005728 <__umodsi3>:
10005728:	01800044 	movi	r6,1
1000572c:	00056041 	jmpi	10005604 <udivmodsi4>

10005730 <__mulsi3>:
10005730:	0005883a 	mov	r2,zero
10005734:	20000726 	beq	r4,zero,10005754 <__mulsi3+0x24>
10005738:	20c0004c 	andi	r3,r4,1
1000573c:	2008d07a 	srli	r4,r4,1
10005740:	18000126 	beq	r3,zero,10005748 <__mulsi3+0x18>
10005744:	1145883a 	add	r2,r2,r5
10005748:	294b883a 	add	r5,r5,r5
1000574c:	203ffa1e 	bne	r4,zero,10005738 <__alt_data_end+0xf8005738>
10005750:	f800283a 	ret
10005754:	f800283a 	ret

10005758 <__adddf3>:
10005758:	02000434 	movhi	r8,16
1000575c:	423fffc4 	addi	r8,r8,-1
10005760:	defffb04 	addi	sp,sp,-20
10005764:	2a12703a 	and	r9,r5,r8
10005768:	2806d7fa 	srli	r3,r5,31
1000576c:	3a10703a 	and	r8,r7,r8
10005770:	3804d53a 	srli	r2,r7,20
10005774:	3014d77a 	srli	r10,r6,29
10005778:	dc000015 	stw	r16,0(sp)
1000577c:	481290fa 	slli	r9,r9,3
10005780:	2820d53a 	srli	r16,r5,20
10005784:	401090fa 	slli	r8,r8,3
10005788:	200ad77a 	srli	r5,r4,29
1000578c:	380ed7fa 	srli	r7,r7,31
10005790:	dc800215 	stw	r18,8(sp)
10005794:	dc400115 	stw	r17,4(sp)
10005798:	dfc00415 	stw	ra,16(sp)
1000579c:	dcc00315 	stw	r19,12(sp)
100057a0:	1c803fcc 	andi	r18,r3,255
100057a4:	8401ffcc 	andi	r16,r16,2047
100057a8:	494ab03a 	or	r5,r9,r5
100057ac:	202290fa 	slli	r17,r4,3
100057b0:	1081ffcc 	andi	r2,r2,2047
100057b4:	4290b03a 	or	r8,r8,r10
100057b8:	300c90fa 	slli	r6,r6,3
100057bc:	91c07026 	beq	r18,r7,10005980 <__adddf3+0x228>
100057c0:	8087c83a 	sub	r3,r16,r2
100057c4:	00c0b30e 	bge	zero,r3,10005a94 <__adddf3+0x33c>
100057c8:	10002a1e 	bne	r2,zero,10005874 <__adddf3+0x11c>
100057cc:	4184b03a 	or	r2,r8,r6
100057d0:	1000991e 	bne	r2,zero,10005a38 <__adddf3+0x2e0>
100057d4:	888001cc 	andi	r2,r17,7
100057d8:	10005b26 	beq	r2,zero,10005948 <__adddf3+0x1f0>
100057dc:	88c003cc 	andi	r3,r17,15
100057e0:	00800104 	movi	r2,4
100057e4:	18805826 	beq	r3,r2,10005948 <__adddf3+0x1f0>
100057e8:	89800104 	addi	r6,r17,4
100057ec:	3463803a 	cmpltu	r17,r6,r17
100057f0:	2c4b883a 	add	r5,r5,r17
100057f4:	2880202c 	andhi	r2,r5,128
100057f8:	9007883a 	mov	r3,r18
100057fc:	3023883a 	mov	r17,r6
10005800:	10005426 	beq	r2,zero,10005954 <__adddf3+0x1fc>
10005804:	84000044 	addi	r16,r16,1
10005808:	0081ffc4 	movi	r2,2047
1000580c:	8080c126 	beq	r16,r2,10005b14 <__adddf3+0x3bc>
10005810:	013fe034 	movhi	r4,65408
10005814:	213fffc4 	addi	r4,r4,-1
10005818:	290a703a 	and	r5,r5,r4
1000581c:	2804977a 	slli	r2,r5,29
10005820:	280a927a 	slli	r5,r5,9
10005824:	8822d0fa 	srli	r17,r17,3
10005828:	8401ffcc 	andi	r16,r16,2047
1000582c:	2808d33a 	srli	r4,r5,12
10005830:	1444b03a 	or	r2,r2,r17
10005834:	8401ffcc 	andi	r16,r16,2047
10005838:	800a953a 	slli	r5,r16,20
1000583c:	18c03fcc 	andi	r3,r3,255
10005840:	04000434 	movhi	r16,16
10005844:	180697fa 	slli	r3,r3,31
10005848:	843fffc4 	addi	r16,r16,-1
1000584c:	2420703a 	and	r16,r4,r16
10005850:	8160b03a 	or	r16,r16,r5
10005854:	80c6b03a 	or	r3,r16,r3
10005858:	dfc00417 	ldw	ra,16(sp)
1000585c:	dcc00317 	ldw	r19,12(sp)
10005860:	dc800217 	ldw	r18,8(sp)
10005864:	dc400117 	ldw	r17,4(sp)
10005868:	dc000017 	ldw	r16,0(sp)
1000586c:	dec00504 	addi	sp,sp,20
10005870:	f800283a 	ret
10005874:	0081ffc4 	movi	r2,2047
10005878:	80bfd626 	beq	r16,r2,100057d4 <__alt_data_end+0xf80057d4>
1000587c:	42002034 	orhi	r8,r8,128
10005880:	00800e04 	movi	r2,56
10005884:	10c0a616 	blt	r2,r3,10005b20 <__adddf3+0x3c8>
10005888:	008007c4 	movi	r2,31
1000588c:	10c0c916 	blt	r2,r3,10005bb4 <__adddf3+0x45c>
10005890:	00800804 	movi	r2,32
10005894:	10c5c83a 	sub	r2,r2,r3
10005898:	408e983a 	sll	r7,r8,r2
1000589c:	30c8d83a 	srl	r4,r6,r3
100058a0:	3084983a 	sll	r2,r6,r2
100058a4:	40c6d83a 	srl	r3,r8,r3
100058a8:	390cb03a 	or	r6,r7,r4
100058ac:	1004c03a 	cmpne	r2,r2,zero
100058b0:	308cb03a 	or	r6,r6,r2
100058b4:	898dc83a 	sub	r6,r17,r6
100058b8:	89a3803a 	cmpltu	r17,r17,r6
100058bc:	28cbc83a 	sub	r5,r5,r3
100058c0:	2c4bc83a 	sub	r5,r5,r17
100058c4:	3023883a 	mov	r17,r6
100058c8:	2880202c 	andhi	r2,r5,128
100058cc:	10006d26 	beq	r2,zero,10005a84 <__adddf3+0x32c>
100058d0:	04c02034 	movhi	r19,128
100058d4:	9cffffc4 	addi	r19,r19,-1
100058d8:	2ce6703a 	and	r19,r5,r19
100058dc:	98007e26 	beq	r19,zero,10005ad8 <__adddf3+0x380>
100058e0:	9809883a 	mov	r4,r19
100058e4:	0007e4c0 	call	10007e4c <__clzsi2>
100058e8:	10fffe04 	addi	r3,r2,-8
100058ec:	010007c4 	movi	r4,31
100058f0:	20c07f16 	blt	r4,r3,10005af0 <__adddf3+0x398>
100058f4:	01400a04 	movi	r5,40
100058f8:	2885c83a 	sub	r2,r5,r2
100058fc:	888ad83a 	srl	r5,r17,r2
10005900:	98e6983a 	sll	r19,r19,r3
10005904:	88e2983a 	sll	r17,r17,r3
10005908:	2ce6b03a 	or	r19,r5,r19
1000590c:	1c007c16 	blt	r3,r16,10005b00 <__adddf3+0x3a8>
10005910:	1c21c83a 	sub	r16,r3,r16
10005914:	81400044 	addi	r5,r16,1
10005918:	00c007c4 	movi	r3,31
1000591c:	19409816 	blt	r3,r5,10005b80 <__adddf3+0x428>
10005920:	1c21c83a 	sub	r16,r3,r16
10005924:	8c08983a 	sll	r4,r17,r16
10005928:	8946d83a 	srl	r3,r17,r5
1000592c:	9c20983a 	sll	r16,r19,r16
10005930:	2008c03a 	cmpne	r4,r4,zero
10005934:	994ad83a 	srl	r5,r19,r5
10005938:	1c06b03a 	or	r3,r3,r16
1000593c:	1922b03a 	or	r17,r3,r4
10005940:	0021883a 	mov	r16,zero
10005944:	003fa306 	br	100057d4 <__alt_data_end+0xf80057d4>
10005948:	2880202c 	andhi	r2,r5,128
1000594c:	9007883a 	mov	r3,r18
10005950:	103fac1e 	bne	r2,zero,10005804 <__alt_data_end+0xf8005804>
10005954:	2804977a 	slli	r2,r5,29
10005958:	8822d0fa 	srli	r17,r17,3
1000595c:	0101ffc4 	movi	r4,2047
10005960:	280ad0fa 	srli	r5,r5,3
10005964:	1444b03a 	or	r2,r2,r17
10005968:	81002c26 	beq	r16,r4,10005a1c <__adddf3+0x2c4>
1000596c:	8120703a 	and	r16,r16,r4
10005970:	01000434 	movhi	r4,16
10005974:	213fffc4 	addi	r4,r4,-1
10005978:	2908703a 	and	r4,r5,r4
1000597c:	003fad06 	br	10005834 <__alt_data_end+0xf8005834>
10005980:	8089c83a 	sub	r4,r16,r2
10005984:	01006a0e 	bge	zero,r4,10005b30 <__adddf3+0x3d8>
10005988:	10003326 	beq	r2,zero,10005a58 <__adddf3+0x300>
1000598c:	0081ffc4 	movi	r2,2047
10005990:	80bf9026 	beq	r16,r2,100057d4 <__alt_data_end+0xf80057d4>
10005994:	42002034 	orhi	r8,r8,128
10005998:	00800e04 	movi	r2,56
1000599c:	1100b116 	blt	r2,r4,10005c64 <__adddf3+0x50c>
100059a0:	008007c4 	movi	r2,31
100059a4:	1100e216 	blt	r2,r4,10005d30 <__adddf3+0x5d8>
100059a8:	00800804 	movi	r2,32
100059ac:	1105c83a 	sub	r2,r2,r4
100059b0:	4092983a 	sll	r9,r8,r2
100059b4:	310ed83a 	srl	r7,r6,r4
100059b8:	3084983a 	sll	r2,r6,r2
100059bc:	4110d83a 	srl	r8,r8,r4
100059c0:	49ccb03a 	or	r6,r9,r7
100059c4:	1004c03a 	cmpne	r2,r2,zero
100059c8:	308cb03a 	or	r6,r6,r2
100059cc:	344d883a 	add	r6,r6,r17
100059d0:	3463803a 	cmpltu	r17,r6,r17
100059d4:	414b883a 	add	r5,r8,r5
100059d8:	2c4b883a 	add	r5,r5,r17
100059dc:	3023883a 	mov	r17,r6
100059e0:	2880202c 	andhi	r2,r5,128
100059e4:	10002726 	beq	r2,zero,10005a84 <__adddf3+0x32c>
100059e8:	84000044 	addi	r16,r16,1
100059ec:	0081ffc4 	movi	r2,2047
100059f0:	8080ae26 	beq	r16,r2,10005cac <__adddf3+0x554>
100059f4:	00bfe034 	movhi	r2,65408
100059f8:	10bfffc4 	addi	r2,r2,-1
100059fc:	288a703a 	and	r5,r5,r2
10005a00:	880cd07a 	srli	r6,r17,1
10005a04:	280897fa 	slli	r4,r5,31
10005a08:	88c0004c 	andi	r3,r17,1
10005a0c:	30e2b03a 	or	r17,r6,r3
10005a10:	280ad07a 	srli	r5,r5,1
10005a14:	8922b03a 	or	r17,r17,r4
10005a18:	003f6e06 	br	100057d4 <__alt_data_end+0xf80057d4>
10005a1c:	1148b03a 	or	r4,r2,r5
10005a20:	20003c26 	beq	r4,zero,10005b14 <__adddf3+0x3bc>
10005a24:	29000234 	orhi	r4,r5,8
10005a28:	01400434 	movhi	r5,16
10005a2c:	297fffc4 	addi	r5,r5,-1
10005a30:	2148703a 	and	r4,r4,r5
10005a34:	003f7f06 	br	10005834 <__alt_data_end+0xf8005834>
10005a38:	18ffffc4 	addi	r3,r3,-1
10005a3c:	18004d1e 	bne	r3,zero,10005b74 <__adddf3+0x41c>
10005a40:	898dc83a 	sub	r6,r17,r6
10005a44:	89a3803a 	cmpltu	r17,r17,r6
10005a48:	2a0bc83a 	sub	r5,r5,r8
10005a4c:	2c4bc83a 	sub	r5,r5,r17
10005a50:	3023883a 	mov	r17,r6
10005a54:	003f9c06 	br	100058c8 <__alt_data_end+0xf80058c8>
10005a58:	4184b03a 	or	r2,r8,r6
10005a5c:	103f5d26 	beq	r2,zero,100057d4 <__alt_data_end+0xf80057d4>
10005a60:	213fffc4 	addi	r4,r4,-1
10005a64:	203fd926 	beq	r4,zero,100059cc <__alt_data_end+0xf80059cc>
10005a68:	0081ffc4 	movi	r2,2047
10005a6c:	80bfca1e 	bne	r16,r2,10005998 <__alt_data_end+0xf8005998>
10005a70:	003f5806 	br	100057d4 <__alt_data_end+0xf80057d4>
10005a74:	10c8b03a 	or	r4,r2,r3
10005a78:	20008b26 	beq	r4,zero,10005ca8 <__adddf3+0x550>
10005a7c:	100b883a 	mov	r5,r2
10005a80:	1823883a 	mov	r17,r3
10005a84:	888001cc 	andi	r2,r17,7
10005a88:	103f541e 	bne	r2,zero,100057dc <__alt_data_end+0xf80057dc>
10005a8c:	9007883a 	mov	r3,r18
10005a90:	003fb006 	br	10005954 <__alt_data_end+0xf8005954>
10005a94:	1800531e 	bne	r3,zero,10005be4 <__adddf3+0x48c>
10005a98:	80800044 	addi	r2,r16,1
10005a9c:	1081ffcc 	andi	r2,r2,2047
10005aa0:	00c00044 	movi	r3,1
10005aa4:	1880990e 	bge	r3,r2,10005d0c <__adddf3+0x5b4>
10005aa8:	8985c83a 	sub	r2,r17,r6
10005aac:	8887803a 	cmpltu	r3,r17,r2
10005ab0:	2a27c83a 	sub	r19,r5,r8
10005ab4:	98e7c83a 	sub	r19,r19,r3
10005ab8:	98c0202c 	andhi	r3,r19,128
10005abc:	18006226 	beq	r3,zero,10005c48 <__adddf3+0x4f0>
10005ac0:	3463c83a 	sub	r17,r6,r17
10005ac4:	4151c83a 	sub	r8,r8,r5
10005ac8:	344d803a 	cmpltu	r6,r6,r17
10005acc:	41a7c83a 	sub	r19,r8,r6
10005ad0:	3825883a 	mov	r18,r7
10005ad4:	983f821e 	bne	r19,zero,100058e0 <__alt_data_end+0xf80058e0>
10005ad8:	8809883a 	mov	r4,r17
10005adc:	0007e4c0 	call	10007e4c <__clzsi2>
10005ae0:	10800804 	addi	r2,r2,32
10005ae4:	10fffe04 	addi	r3,r2,-8
10005ae8:	010007c4 	movi	r4,31
10005aec:	20ff810e 	bge	r4,r3,100058f4 <__alt_data_end+0xf80058f4>
10005af0:	14fff604 	addi	r19,r2,-40
10005af4:	8ce6983a 	sll	r19,r17,r19
10005af8:	0023883a 	mov	r17,zero
10005afc:	1c3f840e 	bge	r3,r16,10005910 <__alt_data_end+0xf8005910>
10005b00:	017fe034 	movhi	r5,65408
10005b04:	297fffc4 	addi	r5,r5,-1
10005b08:	80e1c83a 	sub	r16,r16,r3
10005b0c:	994a703a 	and	r5,r19,r5
10005b10:	003f3006 	br	100057d4 <__alt_data_end+0xf80057d4>
10005b14:	0009883a 	mov	r4,zero
10005b18:	0005883a 	mov	r2,zero
10005b1c:	003f4506 	br	10005834 <__alt_data_end+0xf8005834>
10005b20:	418cb03a 	or	r6,r8,r6
10005b24:	300cc03a 	cmpne	r6,r6,zero
10005b28:	0007883a 	mov	r3,zero
10005b2c:	003f6106 	br	100058b4 <__alt_data_end+0xf80058b4>
10005b30:	2000921e 	bne	r4,zero,10005d7c <__adddf3+0x624>
10005b34:	80800044 	addi	r2,r16,1
10005b38:	11c1ffcc 	andi	r7,r2,2047
10005b3c:	01000044 	movi	r4,1
10005b40:	21c0610e 	bge	r4,r7,10005cc8 <__adddf3+0x570>
10005b44:	0101ffc4 	movi	r4,2047
10005b48:	1100a326 	beq	r2,r4,10005dd8 <__adddf3+0x680>
10005b4c:	344d883a 	add	r6,r6,r17
10005b50:	3463803a 	cmpltu	r17,r6,r17
10005b54:	414b883a 	add	r5,r8,r5
10005b58:	2c4b883a 	add	r5,r5,r17
10005b5c:	282297fa 	slli	r17,r5,31
10005b60:	300cd07a 	srli	r6,r6,1
10005b64:	280ad07a 	srli	r5,r5,1
10005b68:	1021883a 	mov	r16,r2
10005b6c:	89a2b03a 	or	r17,r17,r6
10005b70:	003f1806 	br	100057d4 <__alt_data_end+0xf80057d4>
10005b74:	0081ffc4 	movi	r2,2047
10005b78:	80bf411e 	bne	r16,r2,10005880 <__alt_data_end+0xf8005880>
10005b7c:	003f1506 	br	100057d4 <__alt_data_end+0xf80057d4>
10005b80:	80bff844 	addi	r2,r16,-31
10005b84:	00c00804 	movi	r3,32
10005b88:	9884d83a 	srl	r2,r19,r2
10005b8c:	28c04a26 	beq	r5,r3,10005cb8 <__adddf3+0x560>
10005b90:	00c00fc4 	movi	r3,63
10005b94:	1c21c83a 	sub	r16,r3,r16
10005b98:	9c26983a 	sll	r19,r19,r16
10005b9c:	9c62b03a 	or	r17,r19,r17
10005ba0:	8822c03a 	cmpne	r17,r17,zero
10005ba4:	88a2b03a 	or	r17,r17,r2
10005ba8:	000b883a 	mov	r5,zero
10005bac:	0021883a 	mov	r16,zero
10005bb0:	003fb406 	br	10005a84 <__alt_data_end+0xf8005a84>
10005bb4:	18bff804 	addi	r2,r3,-32
10005bb8:	01000804 	movi	r4,32
10005bbc:	4084d83a 	srl	r2,r8,r2
10005bc0:	19003f26 	beq	r3,r4,10005cc0 <__adddf3+0x568>
10005bc4:	01001004 	movi	r4,64
10005bc8:	20c7c83a 	sub	r3,r4,r3
10005bcc:	40d0983a 	sll	r8,r8,r3
10005bd0:	418cb03a 	or	r6,r8,r6
10005bd4:	300cc03a 	cmpne	r6,r6,zero
10005bd8:	308cb03a 	or	r6,r6,r2
10005bdc:	0007883a 	mov	r3,zero
10005be0:	003f3406 	br	100058b4 <__alt_data_end+0xf80058b4>
10005be4:	80002326 	beq	r16,zero,10005c74 <__adddf3+0x51c>
10005be8:	0101ffc4 	movi	r4,2047
10005bec:	11005e26 	beq	r2,r4,10005d68 <__adddf3+0x610>
10005bf0:	00c7c83a 	sub	r3,zero,r3
10005bf4:	29402034 	orhi	r5,r5,128
10005bf8:	01000e04 	movi	r4,56
10005bfc:	20c07216 	blt	r4,r3,10005dc8 <__adddf3+0x670>
10005c00:	010007c4 	movi	r4,31
10005c04:	20c0ce16 	blt	r4,r3,10005f40 <__adddf3+0x7e8>
10005c08:	01000804 	movi	r4,32
10005c0c:	20c9c83a 	sub	r4,r4,r3
10005c10:	2914983a 	sll	r10,r5,r4
10005c14:	88d2d83a 	srl	r9,r17,r3
10005c18:	8908983a 	sll	r4,r17,r4
10005c1c:	28c6d83a 	srl	r3,r5,r3
10005c20:	5262b03a 	or	r17,r10,r9
10005c24:	2008c03a 	cmpne	r4,r4,zero
10005c28:	8922b03a 	or	r17,r17,r4
10005c2c:	3463c83a 	sub	r17,r6,r17
10005c30:	40c7c83a 	sub	r3,r8,r3
10005c34:	344d803a 	cmpltu	r6,r6,r17
10005c38:	198bc83a 	sub	r5,r3,r6
10005c3c:	1021883a 	mov	r16,r2
10005c40:	3825883a 	mov	r18,r7
10005c44:	003f2006 	br	100058c8 <__alt_data_end+0xf80058c8>
10005c48:	9886b03a 	or	r3,r19,r2
10005c4c:	1800141e 	bne	r3,zero,10005ca0 <__adddf3+0x548>
10005c50:	0007883a 	mov	r3,zero
10005c54:	000b883a 	mov	r5,zero
10005c58:	0023883a 	mov	r17,zero
10005c5c:	0021883a 	mov	r16,zero
10005c60:	003f3c06 	br	10005954 <__alt_data_end+0xf8005954>
10005c64:	418cb03a 	or	r6,r8,r6
10005c68:	300cc03a 	cmpne	r6,r6,zero
10005c6c:	0011883a 	mov	r8,zero
10005c70:	003f5606 	br	100059cc <__alt_data_end+0xf80059cc>
10005c74:	2c48b03a 	or	r4,r5,r17
10005c78:	20003b26 	beq	r4,zero,10005d68 <__adddf3+0x610>
10005c7c:	00c6303a 	nor	r3,zero,r3
10005c80:	1800371e 	bne	r3,zero,10005d60 <__adddf3+0x608>
10005c84:	3463c83a 	sub	r17,r6,r17
10005c88:	414bc83a 	sub	r5,r8,r5
10005c8c:	344d803a 	cmpltu	r6,r6,r17
10005c90:	298bc83a 	sub	r5,r5,r6
10005c94:	1021883a 	mov	r16,r2
10005c98:	3825883a 	mov	r18,r7
10005c9c:	003f0a06 	br	100058c8 <__alt_data_end+0xf80058c8>
10005ca0:	1023883a 	mov	r17,r2
10005ca4:	003f0d06 	br	100058dc <__alt_data_end+0xf80058dc>
10005ca8:	0007883a 	mov	r3,zero
10005cac:	000b883a 	mov	r5,zero
10005cb0:	0023883a 	mov	r17,zero
10005cb4:	003f2706 	br	10005954 <__alt_data_end+0xf8005954>
10005cb8:	0027883a 	mov	r19,zero
10005cbc:	003fb706 	br	10005b9c <__alt_data_end+0xf8005b9c>
10005cc0:	0011883a 	mov	r8,zero
10005cc4:	003fc206 	br	10005bd0 <__alt_data_end+0xf8005bd0>
10005cc8:	2c44b03a 	or	r2,r5,r17
10005ccc:	8000871e 	bne	r16,zero,10005eec <__adddf3+0x794>
10005cd0:	1000b126 	beq	r2,zero,10005f98 <__adddf3+0x840>
10005cd4:	4184b03a 	or	r2,r8,r6
10005cd8:	103ebe26 	beq	r2,zero,100057d4 <__alt_data_end+0xf80057d4>
10005cdc:	3445883a 	add	r2,r6,r17
10005ce0:	1463803a 	cmpltu	r17,r2,r17
10005ce4:	414b883a 	add	r5,r8,r5
10005ce8:	2c4b883a 	add	r5,r5,r17
10005cec:	28c0202c 	andhi	r3,r5,128
10005cf0:	1023883a 	mov	r17,r2
10005cf4:	183f6326 	beq	r3,zero,10005a84 <__alt_data_end+0xf8005a84>
10005cf8:	00bfe034 	movhi	r2,65408
10005cfc:	10bfffc4 	addi	r2,r2,-1
10005d00:	2021883a 	mov	r16,r4
10005d04:	288a703a 	and	r5,r5,r2
10005d08:	003eb206 	br	100057d4 <__alt_data_end+0xf80057d4>
10005d0c:	2c44b03a 	or	r2,r5,r17
10005d10:	8000251e 	bne	r16,zero,10005da8 <__adddf3+0x650>
10005d14:	10004b1e 	bne	r2,zero,10005e44 <__adddf3+0x6ec>
10005d18:	4184b03a 	or	r2,r8,r6
10005d1c:	103fe226 	beq	r2,zero,10005ca8 <__alt_data_end+0xf8005ca8>
10005d20:	400b883a 	mov	r5,r8
10005d24:	3023883a 	mov	r17,r6
10005d28:	3825883a 	mov	r18,r7
10005d2c:	003ea906 	br	100057d4 <__alt_data_end+0xf80057d4>
10005d30:	20bff804 	addi	r2,r4,-32
10005d34:	01c00804 	movi	r7,32
10005d38:	4084d83a 	srl	r2,r8,r2
10005d3c:	21c07e26 	beq	r4,r7,10005f38 <__adddf3+0x7e0>
10005d40:	01c01004 	movi	r7,64
10005d44:	3909c83a 	sub	r4,r7,r4
10005d48:	4110983a 	sll	r8,r8,r4
10005d4c:	418cb03a 	or	r6,r8,r6
10005d50:	300cc03a 	cmpne	r6,r6,zero
10005d54:	308cb03a 	or	r6,r6,r2
10005d58:	0011883a 	mov	r8,zero
10005d5c:	003f1b06 	br	100059cc <__alt_data_end+0xf80059cc>
10005d60:	0101ffc4 	movi	r4,2047
10005d64:	113fa41e 	bne	r2,r4,10005bf8 <__alt_data_end+0xf8005bf8>
10005d68:	400b883a 	mov	r5,r8
10005d6c:	3023883a 	mov	r17,r6
10005d70:	1021883a 	mov	r16,r2
10005d74:	3825883a 	mov	r18,r7
10005d78:	003e9606 	br	100057d4 <__alt_data_end+0xf80057d4>
10005d7c:	80001a1e 	bne	r16,zero,10005de8 <__adddf3+0x690>
10005d80:	2c4eb03a 	or	r7,r5,r17
10005d84:	38005526 	beq	r7,zero,10005edc <__adddf3+0x784>
10005d88:	0108303a 	nor	r4,zero,r4
10005d8c:	2000511e 	bne	r4,zero,10005ed4 <__adddf3+0x77c>
10005d90:	89a3883a 	add	r17,r17,r6
10005d94:	414b883a 	add	r5,r8,r5
10005d98:	898d803a 	cmpltu	r6,r17,r6
10005d9c:	298b883a 	add	r5,r5,r6
10005da0:	1021883a 	mov	r16,r2
10005da4:	003f0e06 	br	100059e0 <__alt_data_end+0xf80059e0>
10005da8:	1000341e 	bne	r2,zero,10005e7c <__adddf3+0x724>
10005dac:	4184b03a 	or	r2,r8,r6
10005db0:	10006f26 	beq	r2,zero,10005f70 <__adddf3+0x818>
10005db4:	400b883a 	mov	r5,r8
10005db8:	3023883a 	mov	r17,r6
10005dbc:	3825883a 	mov	r18,r7
10005dc0:	0401ffc4 	movi	r16,2047
10005dc4:	003e8306 	br	100057d4 <__alt_data_end+0xf80057d4>
10005dc8:	2c62b03a 	or	r17,r5,r17
10005dcc:	8822c03a 	cmpne	r17,r17,zero
10005dd0:	0007883a 	mov	r3,zero
10005dd4:	003f9506 	br	10005c2c <__alt_data_end+0xf8005c2c>
10005dd8:	1021883a 	mov	r16,r2
10005ddc:	000b883a 	mov	r5,zero
10005de0:	0023883a 	mov	r17,zero
10005de4:	003edb06 	br	10005954 <__alt_data_end+0xf8005954>
10005de8:	01c1ffc4 	movi	r7,2047
10005dec:	11c03b26 	beq	r2,r7,10005edc <__adddf3+0x784>
10005df0:	0109c83a 	sub	r4,zero,r4
10005df4:	29402034 	orhi	r5,r5,128
10005df8:	01c00e04 	movi	r7,56
10005dfc:	39006216 	blt	r7,r4,10005f88 <__adddf3+0x830>
10005e00:	01c007c4 	movi	r7,31
10005e04:	39006b16 	blt	r7,r4,10005fb4 <__adddf3+0x85c>
10005e08:	01c00804 	movi	r7,32
10005e0c:	390fc83a 	sub	r7,r7,r4
10005e10:	29d4983a 	sll	r10,r5,r7
10005e14:	8912d83a 	srl	r9,r17,r4
10005e18:	89ce983a 	sll	r7,r17,r7
10005e1c:	2908d83a 	srl	r4,r5,r4
10005e20:	5262b03a 	or	r17,r10,r9
10005e24:	380ac03a 	cmpne	r5,r7,zero
10005e28:	8962b03a 	or	r17,r17,r5
10005e2c:	89a3883a 	add	r17,r17,r6
10005e30:	2211883a 	add	r8,r4,r8
10005e34:	898d803a 	cmpltu	r6,r17,r6
10005e38:	418b883a 	add	r5,r8,r6
10005e3c:	1021883a 	mov	r16,r2
10005e40:	003ee706 	br	100059e0 <__alt_data_end+0xf80059e0>
10005e44:	4184b03a 	or	r2,r8,r6
10005e48:	103e6226 	beq	r2,zero,100057d4 <__alt_data_end+0xf80057d4>
10005e4c:	8987c83a 	sub	r3,r17,r6
10005e50:	88c9803a 	cmpltu	r4,r17,r3
10005e54:	2a05c83a 	sub	r2,r5,r8
10005e58:	1105c83a 	sub	r2,r2,r4
10005e5c:	1100202c 	andhi	r4,r2,128
10005e60:	203f0426 	beq	r4,zero,10005a74 <__alt_data_end+0xf8005a74>
10005e64:	3463c83a 	sub	r17,r6,r17
10005e68:	414bc83a 	sub	r5,r8,r5
10005e6c:	344d803a 	cmpltu	r6,r6,r17
10005e70:	298bc83a 	sub	r5,r5,r6
10005e74:	3825883a 	mov	r18,r7
10005e78:	003e5606 	br	100057d4 <__alt_data_end+0xf80057d4>
10005e7c:	4184b03a 	or	r2,r8,r6
10005e80:	10002b26 	beq	r2,zero,10005f30 <__adddf3+0x7d8>
10005e84:	2804d0fa 	srli	r2,r5,3
10005e88:	8822d0fa 	srli	r17,r17,3
10005e8c:	280a977a 	slli	r5,r5,29
10005e90:	10c0022c 	andhi	r3,r2,8
10005e94:	2c62b03a 	or	r17,r5,r17
10005e98:	18000826 	beq	r3,zero,10005ebc <__adddf3+0x764>
10005e9c:	4008d0fa 	srli	r4,r8,3
10005ea0:	20c0022c 	andhi	r3,r4,8
10005ea4:	1800051e 	bne	r3,zero,10005ebc <__adddf3+0x764>
10005ea8:	300cd0fa 	srli	r6,r6,3
10005eac:	4010977a 	slli	r8,r8,29
10005eb0:	2005883a 	mov	r2,r4
10005eb4:	3825883a 	mov	r18,r7
10005eb8:	41a2b03a 	or	r17,r8,r6
10005ebc:	880ad77a 	srli	r5,r17,29
10005ec0:	100490fa 	slli	r2,r2,3
10005ec4:	882290fa 	slli	r17,r17,3
10005ec8:	0401ffc4 	movi	r16,2047
10005ecc:	288ab03a 	or	r5,r5,r2
10005ed0:	003e4006 	br	100057d4 <__alt_data_end+0xf80057d4>
10005ed4:	01c1ffc4 	movi	r7,2047
10005ed8:	11ffc71e 	bne	r2,r7,10005df8 <__alt_data_end+0xf8005df8>
10005edc:	400b883a 	mov	r5,r8
10005ee0:	3023883a 	mov	r17,r6
10005ee4:	1021883a 	mov	r16,r2
10005ee8:	003e3a06 	br	100057d4 <__alt_data_end+0xf80057d4>
10005eec:	10002d26 	beq	r2,zero,10005fa4 <__adddf3+0x84c>
10005ef0:	4184b03a 	or	r2,r8,r6
10005ef4:	10000e26 	beq	r2,zero,10005f30 <__adddf3+0x7d8>
10005ef8:	2804d0fa 	srli	r2,r5,3
10005efc:	8822d0fa 	srli	r17,r17,3
10005f00:	280a977a 	slli	r5,r5,29
10005f04:	10c0022c 	andhi	r3,r2,8
10005f08:	2c62b03a 	or	r17,r5,r17
10005f0c:	183feb26 	beq	r3,zero,10005ebc <__alt_data_end+0xf8005ebc>
10005f10:	4008d0fa 	srli	r4,r8,3
10005f14:	20c0022c 	andhi	r3,r4,8
10005f18:	183fe81e 	bne	r3,zero,10005ebc <__alt_data_end+0xf8005ebc>
10005f1c:	300cd0fa 	srli	r6,r6,3
10005f20:	4010977a 	slli	r8,r8,29
10005f24:	2005883a 	mov	r2,r4
10005f28:	41a2b03a 	or	r17,r8,r6
10005f2c:	003fe306 	br	10005ebc <__alt_data_end+0xf8005ebc>
10005f30:	0401ffc4 	movi	r16,2047
10005f34:	003e2706 	br	100057d4 <__alt_data_end+0xf80057d4>
10005f38:	0011883a 	mov	r8,zero
10005f3c:	003f8306 	br	10005d4c <__alt_data_end+0xf8005d4c>
10005f40:	193ff804 	addi	r4,r3,-32
10005f44:	02400804 	movi	r9,32
10005f48:	2908d83a 	srl	r4,r5,r4
10005f4c:	1a402526 	beq	r3,r9,10005fe4 <__adddf3+0x88c>
10005f50:	02401004 	movi	r9,64
10005f54:	48c7c83a 	sub	r3,r9,r3
10005f58:	28ca983a 	sll	r5,r5,r3
10005f5c:	2c62b03a 	or	r17,r5,r17
10005f60:	8822c03a 	cmpne	r17,r17,zero
10005f64:	8922b03a 	or	r17,r17,r4
10005f68:	0007883a 	mov	r3,zero
10005f6c:	003f2f06 	br	10005c2c <__alt_data_end+0xf8005c2c>
10005f70:	01402034 	movhi	r5,128
10005f74:	0007883a 	mov	r3,zero
10005f78:	297fffc4 	addi	r5,r5,-1
10005f7c:	047ffe04 	movi	r17,-8
10005f80:	0401ffc4 	movi	r16,2047
10005f84:	003e7306 	br	10005954 <__alt_data_end+0xf8005954>
10005f88:	2c62b03a 	or	r17,r5,r17
10005f8c:	8822c03a 	cmpne	r17,r17,zero
10005f90:	0009883a 	mov	r4,zero
10005f94:	003fa506 	br	10005e2c <__alt_data_end+0xf8005e2c>
10005f98:	400b883a 	mov	r5,r8
10005f9c:	3023883a 	mov	r17,r6
10005fa0:	003e0c06 	br	100057d4 <__alt_data_end+0xf80057d4>
10005fa4:	400b883a 	mov	r5,r8
10005fa8:	3023883a 	mov	r17,r6
10005fac:	0401ffc4 	movi	r16,2047
10005fb0:	003e0806 	br	100057d4 <__alt_data_end+0xf80057d4>
10005fb4:	21fff804 	addi	r7,r4,-32
10005fb8:	02400804 	movi	r9,32
10005fbc:	29ced83a 	srl	r7,r5,r7
10005fc0:	22400a26 	beq	r4,r9,10005fec <__adddf3+0x894>
10005fc4:	02401004 	movi	r9,64
10005fc8:	4909c83a 	sub	r4,r9,r4
10005fcc:	290a983a 	sll	r5,r5,r4
10005fd0:	2c62b03a 	or	r17,r5,r17
10005fd4:	8822c03a 	cmpne	r17,r17,zero
10005fd8:	89e2b03a 	or	r17,r17,r7
10005fdc:	0009883a 	mov	r4,zero
10005fe0:	003f9206 	br	10005e2c <__alt_data_end+0xf8005e2c>
10005fe4:	000b883a 	mov	r5,zero
10005fe8:	003fdc06 	br	10005f5c <__alt_data_end+0xf8005f5c>
10005fec:	000b883a 	mov	r5,zero
10005ff0:	003ff706 	br	10005fd0 <__alt_data_end+0xf8005fd0>

10005ff4 <__divdf3>:
10005ff4:	defff004 	addi	sp,sp,-64
10005ff8:	dc800815 	stw	r18,32(sp)
10005ffc:	2824d53a 	srli	r18,r5,20
10006000:	dd800c15 	stw	r22,48(sp)
10006004:	282cd7fa 	srli	r22,r5,31
10006008:	dc000615 	stw	r16,24(sp)
1000600c:	04000434 	movhi	r16,16
10006010:	df000e15 	stw	fp,56(sp)
10006014:	dd000a15 	stw	r20,40(sp)
10006018:	dcc00915 	stw	r19,36(sp)
1000601c:	dc400715 	stw	r17,28(sp)
10006020:	843fffc4 	addi	r16,r16,-1
10006024:	dfc00f15 	stw	ra,60(sp)
10006028:	ddc00d15 	stw	r23,52(sp)
1000602c:	dd400b15 	stw	r21,44(sp)
10006030:	9481ffcc 	andi	r18,r18,2047
10006034:	2029883a 	mov	r20,r4
10006038:	2027883a 	mov	r19,r4
1000603c:	2c22703a 	and	r17,r5,r16
10006040:	b7003fcc 	andi	fp,r22,255
10006044:	90005e26 	beq	r18,zero,100061c0 <__divdf3+0x1cc>
10006048:	0081ffc4 	movi	r2,2047
1000604c:	90803526 	beq	r18,r2,10006124 <__divdf3+0x130>
10006050:	8c000434 	orhi	r16,r17,16
10006054:	2004d77a 	srli	r2,r4,29
10006058:	802090fa 	slli	r16,r16,3
1000605c:	202690fa 	slli	r19,r4,3
10006060:	94bf0044 	addi	r18,r18,-1023
10006064:	80a2b03a 	or	r17,r16,r2
10006068:	0029883a 	mov	r20,zero
1000606c:	0011883a 	mov	r8,zero
10006070:	380ad53a 	srli	r5,r7,20
10006074:	382ed7fa 	srli	r23,r7,31
10006078:	04000434 	movhi	r16,16
1000607c:	843fffc4 	addi	r16,r16,-1
10006080:	2941ffcc 	andi	r5,r5,2047
10006084:	302b883a 	mov	r21,r6
10006088:	3c20703a 	and	r16,r7,r16
1000608c:	ba403fcc 	andi	r9,r23,255
10006090:	28006726 	beq	r5,zero,10006230 <__divdf3+0x23c>
10006094:	0081ffc4 	movi	r2,2047
10006098:	28805f26 	beq	r5,r2,10006218 <__divdf3+0x224>
1000609c:	84000434 	orhi	r16,r16,16
100060a0:	3004d77a 	srli	r2,r6,29
100060a4:	802090fa 	slli	r16,r16,3
100060a8:	302a90fa 	slli	r21,r6,3
100060ac:	297f0044 	addi	r5,r5,-1023
100060b0:	80a0b03a 	or	r16,r16,r2
100060b4:	000f883a 	mov	r7,zero
100060b8:	3d06b03a 	or	r3,r7,r20
100060bc:	180690ba 	slli	r3,r3,2
100060c0:	00840034 	movhi	r2,4096
100060c4:	10983904 	addi	r2,r2,24804
100060c8:	1885883a 	add	r2,r3,r2
100060cc:	10800017 	ldw	r2,0(r2)
100060d0:	b5c8f03a 	xor	r4,r22,r23
100060d4:	200d883a 	mov	r6,r4
100060d8:	25003fcc 	andi	r20,r4,255
100060dc:	9165c83a 	sub	r18,r18,r5
100060e0:	1000683a 	jmp	r2
100060e4:	1000632c 	andhi	zero,r2,396
100060e8:	1000615c 	xori	zero,r2,389
100060ec:	100062f0 	cmpltui	zero,r2,395
100060f0:	10006140 	call	11000614 <_gp+0xfe1604>
100060f4:	100062f0 	cmpltui	zero,r2,395
100060f8:	100062c4 	addi	zero,r2,395
100060fc:	100062f0 	cmpltui	zero,r2,395
10006100:	10006140 	call	11000614 <_gp+0xfe1604>
10006104:	1000615c 	xori	zero,r2,389
10006108:	1000615c 	xori	zero,r2,389
1000610c:	100062c4 	addi	zero,r2,395
10006110:	10006140 	call	11000614 <_gp+0xfe1604>
10006114:	10006150 	cmplti	zero,r2,389
10006118:	10006150 	cmplti	zero,r2,389
1000611c:	10006150 	cmplti	zero,r2,389
10006120:	10006300 	call	11000630 <_gp+0xfe1620>
10006124:	8904b03a 	or	r2,r17,r4
10006128:	1000631e 	bne	r2,zero,100062b8 <__divdf3+0x2c4>
1000612c:	05000204 	movi	r20,8
10006130:	0023883a 	mov	r17,zero
10006134:	0027883a 	mov	r19,zero
10006138:	02000084 	movi	r8,2
1000613c:	003fcc06 	br	10006070 <__alt_data_end+0xf8006070>
10006140:	8023883a 	mov	r17,r16
10006144:	a827883a 	mov	r19,r21
10006148:	4839883a 	mov	fp,r9
1000614c:	3811883a 	mov	r8,r7
10006150:	00800084 	movi	r2,2
10006154:	4081531e 	bne	r8,r2,100066a4 <__divdf3+0x6b0>
10006158:	e029883a 	mov	r20,fp
1000615c:	a180004c 	andi	r6,r20,1
10006160:	0201ffc4 	movi	r8,2047
10006164:	000b883a 	mov	r5,zero
10006168:	0027883a 	mov	r19,zero
1000616c:	4010953a 	slli	r8,r8,20
10006170:	30c03fcc 	andi	r3,r6,255
10006174:	04000434 	movhi	r16,16
10006178:	180697fa 	slli	r3,r3,31
1000617c:	843fffc4 	addi	r16,r16,-1
10006180:	2c20703a 	and	r16,r5,r16
10006184:	8220b03a 	or	r16,r16,r8
10006188:	80c6b03a 	or	r3,r16,r3
1000618c:	9805883a 	mov	r2,r19
10006190:	dfc00f17 	ldw	ra,60(sp)
10006194:	df000e17 	ldw	fp,56(sp)
10006198:	ddc00d17 	ldw	r23,52(sp)
1000619c:	dd800c17 	ldw	r22,48(sp)
100061a0:	dd400b17 	ldw	r21,44(sp)
100061a4:	dd000a17 	ldw	r20,40(sp)
100061a8:	dcc00917 	ldw	r19,36(sp)
100061ac:	dc800817 	ldw	r18,32(sp)
100061b0:	dc400717 	ldw	r17,28(sp)
100061b4:	dc000617 	ldw	r16,24(sp)
100061b8:	dec01004 	addi	sp,sp,64
100061bc:	f800283a 	ret
100061c0:	8904b03a 	or	r2,r17,r4
100061c4:	10003726 	beq	r2,zero,100062a4 <__divdf3+0x2b0>
100061c8:	88014d26 	beq	r17,zero,10006700 <__divdf3+0x70c>
100061cc:	8809883a 	mov	r4,r17
100061d0:	d9800215 	stw	r6,8(sp)
100061d4:	d9c00515 	stw	r7,20(sp)
100061d8:	0007e4c0 	call	10007e4c <__clzsi2>
100061dc:	d9800217 	ldw	r6,8(sp)
100061e0:	d9c00517 	ldw	r7,20(sp)
100061e4:	1007883a 	mov	r3,r2
100061e8:	01000a04 	movi	r4,40
100061ec:	1cfffe04 	addi	r19,r3,-8
100061f0:	20c9c83a 	sub	r4,r4,r3
100061f4:	8cca983a 	sll	r5,r17,r19
100061f8:	a108d83a 	srl	r4,r20,r4
100061fc:	a4e6983a 	sll	r19,r20,r19
10006200:	2162b03a 	or	r17,r4,r5
10006204:	04bf0344 	movi	r18,-1011
10006208:	90e5c83a 	sub	r18,r18,r3
1000620c:	0029883a 	mov	r20,zero
10006210:	0011883a 	mov	r8,zero
10006214:	003f9606 	br	10006070 <__alt_data_end+0xf8006070>
10006218:	8184b03a 	or	r2,r16,r6
1000621c:	10001f1e 	bne	r2,zero,1000629c <__divdf3+0x2a8>
10006220:	0021883a 	mov	r16,zero
10006224:	002b883a 	mov	r21,zero
10006228:	01c00084 	movi	r7,2
1000622c:	003fa206 	br	100060b8 <__alt_data_end+0xf80060b8>
10006230:	8184b03a 	or	r2,r16,r6
10006234:	10001526 	beq	r2,zero,1000628c <__divdf3+0x298>
10006238:	80013d26 	beq	r16,zero,10006730 <__divdf3+0x73c>
1000623c:	8009883a 	mov	r4,r16
10006240:	d9800215 	stw	r6,8(sp)
10006244:	da000315 	stw	r8,12(sp)
10006248:	da400415 	stw	r9,16(sp)
1000624c:	0007e4c0 	call	10007e4c <__clzsi2>
10006250:	d9800217 	ldw	r6,8(sp)
10006254:	da000317 	ldw	r8,12(sp)
10006258:	da400417 	ldw	r9,16(sp)
1000625c:	1007883a 	mov	r3,r2
10006260:	01000a04 	movi	r4,40
10006264:	1d7ffe04 	addi	r21,r3,-8
10006268:	20c9c83a 	sub	r4,r4,r3
1000626c:	8560983a 	sll	r16,r16,r21
10006270:	3108d83a 	srl	r4,r6,r4
10006274:	356a983a 	sll	r21,r6,r21
10006278:	2420b03a 	or	r16,r4,r16
1000627c:	017f0344 	movi	r5,-1011
10006280:	28cbc83a 	sub	r5,r5,r3
10006284:	000f883a 	mov	r7,zero
10006288:	003f8b06 	br	100060b8 <__alt_data_end+0xf80060b8>
1000628c:	0021883a 	mov	r16,zero
10006290:	002b883a 	mov	r21,zero
10006294:	01c00044 	movi	r7,1
10006298:	003f8706 	br	100060b8 <__alt_data_end+0xf80060b8>
1000629c:	01c000c4 	movi	r7,3
100062a0:	003f8506 	br	100060b8 <__alt_data_end+0xf80060b8>
100062a4:	05000104 	movi	r20,4
100062a8:	0023883a 	mov	r17,zero
100062ac:	0027883a 	mov	r19,zero
100062b0:	02000044 	movi	r8,1
100062b4:	003f6e06 	br	10006070 <__alt_data_end+0xf8006070>
100062b8:	05000304 	movi	r20,12
100062bc:	020000c4 	movi	r8,3
100062c0:	003f6b06 	br	10006070 <__alt_data_end+0xf8006070>
100062c4:	01400434 	movhi	r5,16
100062c8:	000d883a 	mov	r6,zero
100062cc:	297fffc4 	addi	r5,r5,-1
100062d0:	04ffffc4 	movi	r19,-1
100062d4:	0201ffc4 	movi	r8,2047
100062d8:	003fa406 	br	1000616c <__alt_data_end+0xf800616c>
100062dc:	043f0084 	movi	r16,-1022
100062e0:	84a1c83a 	sub	r16,r16,r18
100062e4:	00800e04 	movi	r2,56
100062e8:	14014d0e 	bge	r2,r16,10006820 <__divdf3+0x82c>
100062ec:	a180004c 	andi	r6,r20,1
100062f0:	0011883a 	mov	r8,zero
100062f4:	000b883a 	mov	r5,zero
100062f8:	0027883a 	mov	r19,zero
100062fc:	003f9b06 	br	1000616c <__alt_data_end+0xf800616c>
10006300:	8880022c 	andhi	r2,r17,8
10006304:	1000f026 	beq	r2,zero,100066c8 <__divdf3+0x6d4>
10006308:	8080022c 	andhi	r2,r16,8
1000630c:	1000ee1e 	bne	r2,zero,100066c8 <__divdf3+0x6d4>
10006310:	00800434 	movhi	r2,16
10006314:	81400234 	orhi	r5,r16,8
10006318:	10bfffc4 	addi	r2,r2,-1
1000631c:	b80d883a 	mov	r6,r23
10006320:	288a703a 	and	r5,r5,r2
10006324:	a827883a 	mov	r19,r21
10006328:	003fea06 	br	100062d4 <__alt_data_end+0xf80062d4>
1000632c:	84411c36 	bltu	r16,r17,100067a0 <__divdf3+0x7ac>
10006330:	8c011a26 	beq	r17,r16,1000679c <__divdf3+0x7a8>
10006334:	94bfffc4 	addi	r18,r18,-1
10006338:	dcc00015 	stw	r19,0(sp)
1000633c:	8811883a 	mov	r8,r17
10006340:	002d883a 	mov	r22,zero
10006344:	a80cd63a 	srli	r6,r21,24
10006348:	8020923a 	slli	r16,r16,8
1000634c:	a82a923a 	slli	r21,r21,8
10006350:	4009883a 	mov	r4,r8
10006354:	342eb03a 	or	r23,r6,r16
10006358:	dd400115 	stw	r21,4(sp)
1000635c:	b82ad43a 	srli	r21,r23,16
10006360:	da000315 	stw	r8,12(sp)
10006364:	bcffffcc 	andi	r19,r23,65535
10006368:	a80b883a 	mov	r5,r21
1000636c:	00057200 	call	10005720 <__udivsi3>
10006370:	1009883a 	mov	r4,r2
10006374:	980b883a 	mov	r5,r19
10006378:	1023883a 	mov	r17,r2
1000637c:	00057300 	call	10005730 <__mulsi3>
10006380:	da000317 	ldw	r8,12(sp)
10006384:	a80b883a 	mov	r5,r21
10006388:	1039883a 	mov	fp,r2
1000638c:	4009883a 	mov	r4,r8
10006390:	00057280 	call	10005728 <__umodsi3>
10006394:	d8c00017 	ldw	r3,0(sp)
10006398:	1004943a 	slli	r2,r2,16
1000639c:	1810d43a 	srli	r8,r3,16
100063a0:	120eb03a 	or	r7,r2,r8
100063a4:	3f00062e 	bgeu	r7,fp,100063c0 <__divdf3+0x3cc>
100063a8:	3dcf883a 	add	r7,r7,r23
100063ac:	88bfffc4 	addi	r2,r17,-1
100063b0:	3dc10a36 	bltu	r7,r23,100067dc <__divdf3+0x7e8>
100063b4:	3f01092e 	bgeu	r7,fp,100067dc <__divdf3+0x7e8>
100063b8:	8c7fff84 	addi	r17,r17,-2
100063bc:	3dcf883a 	add	r7,r7,r23
100063c0:	3f39c83a 	sub	fp,r7,fp
100063c4:	e009883a 	mov	r4,fp
100063c8:	a80b883a 	mov	r5,r21
100063cc:	00057200 	call	10005720 <__udivsi3>
100063d0:	1009883a 	mov	r4,r2
100063d4:	980b883a 	mov	r5,r19
100063d8:	1021883a 	mov	r16,r2
100063dc:	00057300 	call	10005730 <__mulsi3>
100063e0:	e009883a 	mov	r4,fp
100063e4:	a80b883a 	mov	r5,r21
100063e8:	d8800315 	stw	r2,12(sp)
100063ec:	00057280 	call	10005728 <__umodsi3>
100063f0:	d9000017 	ldw	r4,0(sp)
100063f4:	1004943a 	slli	r2,r2,16
100063f8:	da000317 	ldw	r8,12(sp)
100063fc:	20ffffcc 	andi	r3,r4,65535
10006400:	10ceb03a 	or	r7,r2,r3
10006404:	3a00062e 	bgeu	r7,r8,10006420 <__divdf3+0x42c>
10006408:	3dcf883a 	add	r7,r7,r23
1000640c:	80bfffc4 	addi	r2,r16,-1
10006410:	3dc0f036 	bltu	r7,r23,100067d4 <__divdf3+0x7e0>
10006414:	3a00ef2e 	bgeu	r7,r8,100067d4 <__divdf3+0x7e0>
10006418:	843fff84 	addi	r16,r16,-2
1000641c:	3dcf883a 	add	r7,r7,r23
10006420:	d8c00117 	ldw	r3,4(sp)
10006424:	8822943a 	slli	r17,r17,16
10006428:	3a0fc83a 	sub	r7,r7,r8
1000642c:	1806d43a 	srli	r3,r3,16
10006430:	8462b03a 	or	r17,r16,r17
10006434:	8affffcc 	andi	r11,r17,65535
10006438:	d8c00015 	stw	r3,0(sp)
1000643c:	d8c00117 	ldw	r3,4(sp)
10006440:	8820d43a 	srli	r16,r17,16
10006444:	5809883a 	mov	r4,r11
10006448:	1f3fffcc 	andi	fp,r3,65535
1000644c:	e00b883a 	mov	r5,fp
10006450:	d9c00515 	stw	r7,20(sp)
10006454:	dac00215 	stw	r11,8(sp)
10006458:	00057300 	call	10005730 <__mulsi3>
1000645c:	8009883a 	mov	r4,r16
10006460:	e00b883a 	mov	r5,fp
10006464:	d8800415 	stw	r2,16(sp)
10006468:	00057300 	call	10005730 <__mulsi3>
1000646c:	d9400017 	ldw	r5,0(sp)
10006470:	8009883a 	mov	r4,r16
10006474:	d8800315 	stw	r2,12(sp)
10006478:	00057300 	call	10005730 <__mulsi3>
1000647c:	dac00217 	ldw	r11,8(sp)
10006480:	d9400017 	ldw	r5,0(sp)
10006484:	d8800215 	stw	r2,8(sp)
10006488:	5809883a 	mov	r4,r11
1000648c:	00057300 	call	10005730 <__mulsi3>
10006490:	da400417 	ldw	r9,16(sp)
10006494:	da800317 	ldw	r10,12(sp)
10006498:	d9c00517 	ldw	r7,20(sp)
1000649c:	480ad43a 	srli	r5,r9,16
100064a0:	5085883a 	add	r2,r10,r2
100064a4:	db000217 	ldw	r12,8(sp)
100064a8:	1151883a 	add	r8,r2,r5
100064ac:	4280022e 	bgeu	r8,r10,100064b8 <__divdf3+0x4c4>
100064b0:	00800074 	movhi	r2,1
100064b4:	6099883a 	add	r12,r12,r2
100064b8:	400ad43a 	srli	r5,r8,16
100064bc:	4010943a 	slli	r8,r8,16
100064c0:	4c3fffcc 	andi	r16,r9,65535
100064c4:	6149883a 	add	r4,r12,r5
100064c8:	4411883a 	add	r8,r8,r16
100064cc:	3900a736 	bltu	r7,r4,1000676c <__divdf3+0x778>
100064d0:	3900c426 	beq	r7,r4,100067e4 <__divdf3+0x7f0>
100064d4:	3909c83a 	sub	r4,r7,r4
100064d8:	b221c83a 	sub	r16,r22,r8
100064dc:	b42d803a 	cmpltu	r22,r22,r16
100064e0:	25adc83a 	sub	r22,r4,r22
100064e4:	b5c0c626 	beq	r22,r23,10006800 <__divdf3+0x80c>
100064e8:	b009883a 	mov	r4,r22
100064ec:	a80b883a 	mov	r5,r21
100064f0:	00057200 	call	10005720 <__udivsi3>
100064f4:	1009883a 	mov	r4,r2
100064f8:	980b883a 	mov	r5,r19
100064fc:	d8800315 	stw	r2,12(sp)
10006500:	00057300 	call	10005730 <__mulsi3>
10006504:	a80b883a 	mov	r5,r21
10006508:	b009883a 	mov	r4,r22
1000650c:	d8800415 	stw	r2,16(sp)
10006510:	00057280 	call	10005728 <__umodsi3>
10006514:	1004943a 	slli	r2,r2,16
10006518:	800ed43a 	srli	r7,r16,16
1000651c:	da400417 	ldw	r9,16(sp)
10006520:	da000317 	ldw	r8,12(sp)
10006524:	11cab03a 	or	r5,r2,r7
10006528:	2a40062e 	bgeu	r5,r9,10006544 <__divdf3+0x550>
1000652c:	2dcb883a 	add	r5,r5,r23
10006530:	40bfffc4 	addi	r2,r8,-1
10006534:	2dc0b436 	bltu	r5,r23,10006808 <__divdf3+0x814>
10006538:	2a40b32e 	bgeu	r5,r9,10006808 <__divdf3+0x814>
1000653c:	423fff84 	addi	r8,r8,-2
10006540:	2dcb883a 	add	r5,r5,r23
10006544:	2a6dc83a 	sub	r22,r5,r9
10006548:	b009883a 	mov	r4,r22
1000654c:	a80b883a 	mov	r5,r21
10006550:	da000315 	stw	r8,12(sp)
10006554:	00057200 	call	10005720 <__udivsi3>
10006558:	980b883a 	mov	r5,r19
1000655c:	1009883a 	mov	r4,r2
10006560:	d8800415 	stw	r2,16(sp)
10006564:	00057300 	call	10005730 <__mulsi3>
10006568:	b009883a 	mov	r4,r22
1000656c:	a80b883a 	mov	r5,r21
10006570:	1027883a 	mov	r19,r2
10006574:	00057280 	call	10005728 <__umodsi3>
10006578:	1004943a 	slli	r2,r2,16
1000657c:	843fffcc 	andi	r16,r16,65535
10006580:	da000317 	ldw	r8,12(sp)
10006584:	140eb03a 	or	r7,r2,r16
10006588:	da400417 	ldw	r9,16(sp)
1000658c:	3cc0062e 	bgeu	r7,r19,100065a8 <__divdf3+0x5b4>
10006590:	3dcf883a 	add	r7,r7,r23
10006594:	48bfffc4 	addi	r2,r9,-1
10006598:	3dc09d36 	bltu	r7,r23,10006810 <__divdf3+0x81c>
1000659c:	3cc09c2e 	bgeu	r7,r19,10006810 <__divdf3+0x81c>
100065a0:	4a7fff84 	addi	r9,r9,-2
100065a4:	3dcf883a 	add	r7,r7,r23
100065a8:	4010943a 	slli	r8,r8,16
100065ac:	3cebc83a 	sub	r21,r7,r19
100065b0:	e00b883a 	mov	r5,fp
100065b4:	4a26b03a 	or	r19,r9,r8
100065b8:	99ffffcc 	andi	r7,r19,65535
100065bc:	9820d43a 	srli	r16,r19,16
100065c0:	3809883a 	mov	r4,r7
100065c4:	d9c00515 	stw	r7,20(sp)
100065c8:	00057300 	call	10005730 <__mulsi3>
100065cc:	8009883a 	mov	r4,r16
100065d0:	e00b883a 	mov	r5,fp
100065d4:	102d883a 	mov	r22,r2
100065d8:	00057300 	call	10005730 <__mulsi3>
100065dc:	d9400017 	ldw	r5,0(sp)
100065e0:	8009883a 	mov	r4,r16
100065e4:	1039883a 	mov	fp,r2
100065e8:	00057300 	call	10005730 <__mulsi3>
100065ec:	d9c00517 	ldw	r7,20(sp)
100065f0:	d9400017 	ldw	r5,0(sp)
100065f4:	1021883a 	mov	r16,r2
100065f8:	3809883a 	mov	r4,r7
100065fc:	00057300 	call	10005730 <__mulsi3>
10006600:	b008d43a 	srli	r4,r22,16
10006604:	e085883a 	add	r2,fp,r2
10006608:	1109883a 	add	r4,r2,r4
1000660c:	2700022e 	bgeu	r4,fp,10006618 <__divdf3+0x624>
10006610:	00800074 	movhi	r2,1
10006614:	80a1883a 	add	r16,r16,r2
10006618:	200ad43a 	srli	r5,r4,16
1000661c:	2008943a 	slli	r4,r4,16
10006620:	b5bfffcc 	andi	r22,r22,65535
10006624:	8145883a 	add	r2,r16,r5
10006628:	2589883a 	add	r4,r4,r22
1000662c:	a8802c36 	bltu	r21,r2,100066e0 <__divdf3+0x6ec>
10006630:	a880a426 	beq	r21,r2,100068c4 <__divdf3+0x8d0>
10006634:	9cc00054 	ori	r19,r19,1
10006638:	9200ffc4 	addi	r8,r18,1023
1000663c:	023f270e 	bge	zero,r8,100062dc <__alt_data_end+0xf80062dc>
10006640:	988001cc 	andi	r2,r19,7
10006644:	10000726 	beq	r2,zero,10006664 <__divdf3+0x670>
10006648:	990003cc 	andi	r4,r19,15
1000664c:	00800104 	movi	r2,4
10006650:	20800426 	beq	r4,r2,10006664 <__divdf3+0x670>
10006654:	9885883a 	add	r2,r19,r2
10006658:	14e7803a 	cmpltu	r19,r2,r19
1000665c:	8ce3883a 	add	r17,r17,r19
10006660:	1027883a 	mov	r19,r2
10006664:	8880402c 	andhi	r2,r17,256
10006668:	10000426 	beq	r2,zero,1000667c <__divdf3+0x688>
1000666c:	00bfc034 	movhi	r2,65280
10006670:	10bfffc4 	addi	r2,r2,-1
10006674:	92010004 	addi	r8,r18,1024
10006678:	88a2703a 	and	r17,r17,r2
1000667c:	0081ff84 	movi	r2,2046
10006680:	123eb616 	blt	r2,r8,1000615c <__alt_data_end+0xf800615c>
10006684:	9826d0fa 	srli	r19,r19,3
10006688:	8804977a 	slli	r2,r17,29
1000668c:	8820927a 	slli	r16,r17,9
10006690:	4201ffcc 	andi	r8,r8,2047
10006694:	14e6b03a 	or	r19,r2,r19
10006698:	800ad33a 	srli	r5,r16,12
1000669c:	a180004c 	andi	r6,r20,1
100066a0:	003eb206 	br	1000616c <__alt_data_end+0xf800616c>
100066a4:	008000c4 	movi	r2,3
100066a8:	4080ac26 	beq	r8,r2,1000695c <__divdf3+0x968>
100066ac:	00800044 	movi	r2,1
100066b0:	4080591e 	bne	r8,r2,10006818 <__divdf3+0x824>
100066b4:	e00d883a 	mov	r6,fp
100066b8:	0011883a 	mov	r8,zero
100066bc:	000b883a 	mov	r5,zero
100066c0:	0027883a 	mov	r19,zero
100066c4:	003ea906 	br	1000616c <__alt_data_end+0xf800616c>
100066c8:	00800434 	movhi	r2,16
100066cc:	89400234 	orhi	r5,r17,8
100066d0:	10bfffc4 	addi	r2,r2,-1
100066d4:	b00d883a 	mov	r6,r22
100066d8:	288a703a 	and	r5,r5,r2
100066dc:	003efd06 	br	100062d4 <__alt_data_end+0xf80062d4>
100066e0:	adcf883a 	add	r7,r21,r23
100066e4:	997fffc4 	addi	r5,r19,-1
100066e8:	3dc0412e 	bgeu	r7,r23,100067f0 <__divdf3+0x7fc>
100066ec:	2827883a 	mov	r19,r5
100066f0:	38bfd01e 	bne	r7,r2,10006634 <__alt_data_end+0xf8006634>
100066f4:	d8c00117 	ldw	r3,4(sp)
100066f8:	193fce1e 	bne	r3,r4,10006634 <__alt_data_end+0xf8006634>
100066fc:	003fce06 	br	10006638 <__alt_data_end+0xf8006638>
10006700:	d9800215 	stw	r6,8(sp)
10006704:	d9c00515 	stw	r7,20(sp)
10006708:	0007e4c0 	call	10007e4c <__clzsi2>
1000670c:	10c00804 	addi	r3,r2,32
10006710:	010009c4 	movi	r4,39
10006714:	d9800217 	ldw	r6,8(sp)
10006718:	d9c00517 	ldw	r7,20(sp)
1000671c:	20feb20e 	bge	r4,r3,100061e8 <__alt_data_end+0xf80061e8>
10006720:	117ffe04 	addi	r5,r2,-8
10006724:	a162983a 	sll	r17,r20,r5
10006728:	0027883a 	mov	r19,zero
1000672c:	003eb506 	br	10006204 <__alt_data_end+0xf8006204>
10006730:	3009883a 	mov	r4,r6
10006734:	d9800215 	stw	r6,8(sp)
10006738:	da000315 	stw	r8,12(sp)
1000673c:	da400415 	stw	r9,16(sp)
10006740:	0007e4c0 	call	10007e4c <__clzsi2>
10006744:	10c00804 	addi	r3,r2,32
10006748:	010009c4 	movi	r4,39
1000674c:	d9800217 	ldw	r6,8(sp)
10006750:	da000317 	ldw	r8,12(sp)
10006754:	da400417 	ldw	r9,16(sp)
10006758:	20fec10e 	bge	r4,r3,10006260 <__alt_data_end+0xf8006260>
1000675c:	10bffe04 	addi	r2,r2,-8
10006760:	a8a0983a 	sll	r16,r21,r2
10006764:	002b883a 	mov	r21,zero
10006768:	003ec406 	br	1000627c <__alt_data_end+0xf800627c>
1000676c:	d8c00117 	ldw	r3,4(sp)
10006770:	b0ed883a 	add	r22,r22,r3
10006774:	b0c5803a 	cmpltu	r2,r22,r3
10006778:	15c5883a 	add	r2,r2,r23
1000677c:	11cf883a 	add	r7,r2,r7
10006780:	88bfffc4 	addi	r2,r17,-1
10006784:	b9c00d2e 	bgeu	r23,r7,100067bc <__divdf3+0x7c8>
10006788:	39003f36 	bltu	r7,r4,10006888 <__divdf3+0x894>
1000678c:	21c06a26 	beq	r4,r7,10006938 <__divdf3+0x944>
10006790:	3909c83a 	sub	r4,r7,r4
10006794:	1023883a 	mov	r17,r2
10006798:	003f4f06 	br	100064d8 <__alt_data_end+0xf80064d8>
1000679c:	9d7ee536 	bltu	r19,r21,10006334 <__alt_data_end+0xf8006334>
100067a0:	982ed07a 	srli	r23,r19,1
100067a4:	880497fa 	slli	r2,r17,31
100067a8:	8810d07a 	srli	r8,r17,1
100067ac:	982c97fa 	slli	r22,r19,31
100067b0:	b884b03a 	or	r2,r23,r2
100067b4:	d8800015 	stw	r2,0(sp)
100067b8:	003ee206 	br	10006344 <__alt_data_end+0xf8006344>
100067bc:	3dfff41e 	bne	r7,r23,10006790 <__alt_data_end+0xf8006790>
100067c0:	d8c00117 	ldw	r3,4(sp)
100067c4:	b0fff02e 	bgeu	r22,r3,10006788 <__alt_data_end+0xf8006788>
100067c8:	b909c83a 	sub	r4,r23,r4
100067cc:	1023883a 	mov	r17,r2
100067d0:	003f4106 	br	100064d8 <__alt_data_end+0xf80064d8>
100067d4:	1021883a 	mov	r16,r2
100067d8:	003f1106 	br	10006420 <__alt_data_end+0xf8006420>
100067dc:	1023883a 	mov	r17,r2
100067e0:	003ef706 	br	100063c0 <__alt_data_end+0xf80063c0>
100067e4:	b23fe136 	bltu	r22,r8,1000676c <__alt_data_end+0xf800676c>
100067e8:	0009883a 	mov	r4,zero
100067ec:	003f3a06 	br	100064d8 <__alt_data_end+0xf80064d8>
100067f0:	38802c36 	bltu	r7,r2,100068a4 <__divdf3+0x8b0>
100067f4:	11c05326 	beq	r2,r7,10006944 <__divdf3+0x950>
100067f8:	2827883a 	mov	r19,r5
100067fc:	003f8d06 	br	10006634 <__alt_data_end+0xf8006634>
10006800:	04ffffc4 	movi	r19,-1
10006804:	003f8c06 	br	10006638 <__alt_data_end+0xf8006638>
10006808:	1011883a 	mov	r8,r2
1000680c:	003f4d06 	br	10006544 <__alt_data_end+0xf8006544>
10006810:	1013883a 	mov	r9,r2
10006814:	003f6406 	br	100065a8 <__alt_data_end+0xf80065a8>
10006818:	e029883a 	mov	r20,fp
1000681c:	003f8606 	br	10006638 <__alt_data_end+0xf8006638>
10006820:	008007c4 	movi	r2,31
10006824:	14002a16 	blt	r2,r16,100068d0 <__divdf3+0x8dc>
10006828:	91410784 	addi	r5,r18,1054
1000682c:	9c0cd83a 	srl	r6,r19,r16
10006830:	8948983a 	sll	r4,r17,r5
10006834:	9944983a 	sll	r2,r19,r5
10006838:	8c20d83a 	srl	r16,r17,r16
1000683c:	3108b03a 	or	r4,r6,r4
10006840:	1004c03a 	cmpne	r2,r2,zero
10006844:	2084b03a 	or	r2,r4,r2
10006848:	110001cc 	andi	r4,r2,7
1000684c:	20000726 	beq	r4,zero,1000686c <__divdf3+0x878>
10006850:	114003cc 	andi	r5,r2,15
10006854:	01000104 	movi	r4,4
10006858:	29000426 	beq	r5,r4,1000686c <__divdf3+0x878>
1000685c:	11000104 	addi	r4,r2,4
10006860:	2085803a 	cmpltu	r2,r4,r2
10006864:	80a1883a 	add	r16,r16,r2
10006868:	2005883a 	mov	r2,r4
1000686c:	8100202c 	andhi	r4,r16,128
10006870:	20002d26 	beq	r4,zero,10006928 <__divdf3+0x934>
10006874:	a180004c 	andi	r6,r20,1
10006878:	02000044 	movi	r8,1
1000687c:	000b883a 	mov	r5,zero
10006880:	0027883a 	mov	r19,zero
10006884:	003e3906 	br	1000616c <__alt_data_end+0xf800616c>
10006888:	d8c00117 	ldw	r3,4(sp)
1000688c:	8c7fff84 	addi	r17,r17,-2
10006890:	b0ed883a 	add	r22,r22,r3
10006894:	b0c5803a 	cmpltu	r2,r22,r3
10006898:	15c5883a 	add	r2,r2,r23
1000689c:	11cf883a 	add	r7,r2,r7
100068a0:	003f0c06 	br	100064d4 <__alt_data_end+0xf80064d4>
100068a4:	d8c00117 	ldw	r3,4(sp)
100068a8:	997fff84 	addi	r5,r19,-2
100068ac:	18d1883a 	add	r8,r3,r3
100068b0:	40c7803a 	cmpltu	r3,r8,r3
100068b4:	1dcd883a 	add	r6,r3,r23
100068b8:	398f883a 	add	r7,r7,r6
100068bc:	da000115 	stw	r8,4(sp)
100068c0:	003f8a06 	br	100066ec <__alt_data_end+0xf80066ec>
100068c4:	203f861e 	bne	r4,zero,100066e0 <__alt_data_end+0xf80066e0>
100068c8:	d8000115 	stw	zero,4(sp)
100068cc:	003f8906 	br	100066f4 <__alt_data_end+0xf80066f4>
100068d0:	00bef884 	movi	r2,-1054
100068d4:	1485c83a 	sub	r2,r2,r18
100068d8:	01000804 	movi	r4,32
100068dc:	8884d83a 	srl	r2,r17,r2
100068e0:	81001c26 	beq	r16,r4,10006954 <__divdf3+0x960>
100068e4:	91010f84 	addi	r4,r18,1086
100068e8:	8908983a 	sll	r4,r17,r4
100068ec:	24c8b03a 	or	r4,r4,r19
100068f0:	2008c03a 	cmpne	r4,r4,zero
100068f4:	2084b03a 	or	r2,r4,r2
100068f8:	140001cc 	andi	r16,r2,7
100068fc:	8000061e 	bne	r16,zero,10006918 <__divdf3+0x924>
10006900:	000b883a 	mov	r5,zero
10006904:	1004d0fa 	srli	r2,r2,3
10006908:	a180004c 	andi	r6,r20,1
1000690c:	0011883a 	mov	r8,zero
10006910:	1426b03a 	or	r19,r2,r16
10006914:	003e1506 	br	1000616c <__alt_data_end+0xf800616c>
10006918:	114003cc 	andi	r5,r2,15
1000691c:	01000104 	movi	r4,4
10006920:	0021883a 	mov	r16,zero
10006924:	293fcd1e 	bne	r5,r4,1000685c <__alt_data_end+0xf800685c>
10006928:	800a927a 	slli	r5,r16,9
1000692c:	8020977a 	slli	r16,r16,29
10006930:	280ad33a 	srli	r5,r5,12
10006934:	003ff306 	br	10006904 <__alt_data_end+0xf8006904>
10006938:	b23fd336 	bltu	r22,r8,10006888 <__alt_data_end+0xf8006888>
1000693c:	1023883a 	mov	r17,r2
10006940:	003fa906 	br	100067e8 <__alt_data_end+0xf80067e8>
10006944:	d8c00117 	ldw	r3,4(sp)
10006948:	193fd636 	bltu	r3,r4,100068a4 <__alt_data_end+0xf80068a4>
1000694c:	2827883a 	mov	r19,r5
10006950:	003f6806 	br	100066f4 <__alt_data_end+0xf80066f4>
10006954:	0009883a 	mov	r4,zero
10006958:	003fe406 	br	100068ec <__alt_data_end+0xf80068ec>
1000695c:	00800434 	movhi	r2,16
10006960:	89400234 	orhi	r5,r17,8
10006964:	10bfffc4 	addi	r2,r2,-1
10006968:	e00d883a 	mov	r6,fp
1000696c:	288a703a 	and	r5,r5,r2
10006970:	003e5806 	br	100062d4 <__alt_data_end+0xf80062d4>

10006974 <__eqdf2>:
10006974:	2804d53a 	srli	r2,r5,20
10006978:	3806d53a 	srli	r3,r7,20
1000697c:	02000434 	movhi	r8,16
10006980:	423fffc4 	addi	r8,r8,-1
10006984:	1081ffcc 	andi	r2,r2,2047
10006988:	0241ffc4 	movi	r9,2047
1000698c:	2a14703a 	and	r10,r5,r8
10006990:	18c1ffcc 	andi	r3,r3,2047
10006994:	3a10703a 	and	r8,r7,r8
10006998:	280ad7fa 	srli	r5,r5,31
1000699c:	380ed7fa 	srli	r7,r7,31
100069a0:	12400f26 	beq	r2,r9,100069e0 <__eqdf2+0x6c>
100069a4:	0241ffc4 	movi	r9,2047
100069a8:	1a400326 	beq	r3,r9,100069b8 <__eqdf2+0x44>
100069ac:	10c00526 	beq	r2,r3,100069c4 <__eqdf2+0x50>
100069b0:	00800044 	movi	r2,1
100069b4:	f800283a 	ret
100069b8:	4192b03a 	or	r9,r8,r6
100069bc:	483ffc1e 	bne	r9,zero,100069b0 <__alt_data_end+0xf80069b0>
100069c0:	10fffb1e 	bne	r2,r3,100069b0 <__alt_data_end+0xf80069b0>
100069c4:	523ffa1e 	bne	r10,r8,100069b0 <__alt_data_end+0xf80069b0>
100069c8:	21bff91e 	bne	r4,r6,100069b0 <__alt_data_end+0xf80069b0>
100069cc:	29c00826 	beq	r5,r7,100069f0 <__eqdf2+0x7c>
100069d0:	103ff71e 	bne	r2,zero,100069b0 <__alt_data_end+0xf80069b0>
100069d4:	5104b03a 	or	r2,r10,r4
100069d8:	1004c03a 	cmpne	r2,r2,zero
100069dc:	f800283a 	ret
100069e0:	5112b03a 	or	r9,r10,r4
100069e4:	483fef26 	beq	r9,zero,100069a4 <__alt_data_end+0xf80069a4>
100069e8:	00800044 	movi	r2,1
100069ec:	f800283a 	ret
100069f0:	0005883a 	mov	r2,zero
100069f4:	f800283a 	ret

100069f8 <__gedf2>:
100069f8:	2804d53a 	srli	r2,r5,20
100069fc:	3806d53a 	srli	r3,r7,20
10006a00:	02000434 	movhi	r8,16
10006a04:	423fffc4 	addi	r8,r8,-1
10006a08:	0241ffc4 	movi	r9,2047
10006a0c:	1081ffcc 	andi	r2,r2,2047
10006a10:	2a14703a 	and	r10,r5,r8
10006a14:	1a46703a 	and	r3,r3,r9
10006a18:	3a10703a 	and	r8,r7,r8
10006a1c:	280ad7fa 	srli	r5,r5,31
10006a20:	380ed7fa 	srli	r7,r7,31
10006a24:	12400b26 	beq	r2,r9,10006a54 <__gedf2+0x5c>
10006a28:	1a401626 	beq	r3,r9,10006a84 <__gedf2+0x8c>
10006a2c:	10000c1e 	bne	r2,zero,10006a60 <__gedf2+0x68>
10006a30:	5112b03a 	or	r9,r10,r4
10006a34:	4813003a 	cmpeq	r9,r9,zero
10006a38:	4817883a 	mov	r11,r9
10006a3c:	18000c1e 	bne	r3,zero,10006a70 <__gedf2+0x78>
10006a40:	4198b03a 	or	r12,r8,r6
10006a44:	60000a1e 	bne	r12,zero,10006a70 <__gedf2+0x78>
10006a48:	48001326 	beq	r9,zero,10006a98 <__gedf2+0xa0>
10006a4c:	0005883a 	mov	r2,zero
10006a50:	f800283a 	ret
10006a54:	5112b03a 	or	r9,r10,r4
10006a58:	4800191e 	bne	r9,zero,10006ac0 <__gedf2+0xc8>
10006a5c:	18800926 	beq	r3,r2,10006a84 <__gedf2+0x8c>
10006a60:	18000b1e 	bne	r3,zero,10006a90 <__gedf2+0x98>
10006a64:	4192b03a 	or	r9,r8,r6
10006a68:	0017883a 	mov	r11,zero
10006a6c:	48000a26 	beq	r9,zero,10006a98 <__gedf2+0xa0>
10006a70:	39c03fcc 	andi	r7,r7,255
10006a74:	58000726 	beq	r11,zero,10006a94 <__gedf2+0x9c>
10006a78:	3800081e 	bne	r7,zero,10006a9c <__gedf2+0xa4>
10006a7c:	00bfffc4 	movi	r2,-1
10006a80:	f800283a 	ret
10006a84:	4192b03a 	or	r9,r8,r6
10006a88:	48000d1e 	bne	r9,zero,10006ac0 <__gedf2+0xc8>
10006a8c:	103fe826 	beq	r2,zero,10006a30 <__alt_data_end+0xf8006a30>
10006a90:	39c03fcc 	andi	r7,r7,255
10006a94:	29c00326 	beq	r5,r7,10006aa4 <__gedf2+0xac>
10006a98:	283ff81e 	bne	r5,zero,10006a7c <__alt_data_end+0xf8006a7c>
10006a9c:	00800044 	movi	r2,1
10006aa0:	f800283a 	ret
10006aa4:	18bffc16 	blt	r3,r2,10006a98 <__alt_data_end+0xf8006a98>
10006aa8:	10c00316 	blt	r2,r3,10006ab8 <__gedf2+0xc0>
10006aac:	42bffa36 	bltu	r8,r10,10006a98 <__alt_data_end+0xf8006a98>
10006ab0:	52000526 	beq	r10,r8,10006ac8 <__gedf2+0xd0>
10006ab4:	523fe52e 	bgeu	r10,r8,10006a4c <__alt_data_end+0xf8006a4c>
10006ab8:	283ff026 	beq	r5,zero,10006a7c <__alt_data_end+0xf8006a7c>
10006abc:	003ff706 	br	10006a9c <__alt_data_end+0xf8006a9c>
10006ac0:	00bfff84 	movi	r2,-2
10006ac4:	f800283a 	ret
10006ac8:	313ff336 	bltu	r6,r4,10006a98 <__alt_data_end+0xf8006a98>
10006acc:	21bfdf2e 	bgeu	r4,r6,10006a4c <__alt_data_end+0xf8006a4c>
10006ad0:	283fea26 	beq	r5,zero,10006a7c <__alt_data_end+0xf8006a7c>
10006ad4:	003ff106 	br	10006a9c <__alt_data_end+0xf8006a9c>

10006ad8 <__ledf2>:
10006ad8:	2804d53a 	srli	r2,r5,20
10006adc:	3810d53a 	srli	r8,r7,20
10006ae0:	00c00434 	movhi	r3,16
10006ae4:	18ffffc4 	addi	r3,r3,-1
10006ae8:	0241ffc4 	movi	r9,2047
10006aec:	1081ffcc 	andi	r2,r2,2047
10006af0:	28d4703a 	and	r10,r5,r3
10006af4:	4250703a 	and	r8,r8,r9
10006af8:	38c6703a 	and	r3,r7,r3
10006afc:	280ad7fa 	srli	r5,r5,31
10006b00:	380ed7fa 	srli	r7,r7,31
10006b04:	12400b26 	beq	r2,r9,10006b34 <__ledf2+0x5c>
10006b08:	42401926 	beq	r8,r9,10006b70 <__ledf2+0x98>
10006b0c:	10000c1e 	bne	r2,zero,10006b40 <__ledf2+0x68>
10006b10:	5112b03a 	or	r9,r10,r4
10006b14:	4813003a 	cmpeq	r9,r9,zero
10006b18:	4817883a 	mov	r11,r9
10006b1c:	40000f26 	beq	r8,zero,10006b5c <__ledf2+0x84>
10006b20:	39c03fcc 	andi	r7,r7,255
10006b24:	58001826 	beq	r11,zero,10006b88 <__ledf2+0xb0>
10006b28:	38000a1e 	bne	r7,zero,10006b54 <__ledf2+0x7c>
10006b2c:	00bfffc4 	movi	r2,-1
10006b30:	f800283a 	ret
10006b34:	5112b03a 	or	r9,r10,r4
10006b38:	48000f1e 	bne	r9,zero,10006b78 <__ledf2+0xa0>
10006b3c:	40800c26 	beq	r8,r2,10006b70 <__ledf2+0x98>
10006b40:	4000101e 	bne	r8,zero,10006b84 <__ledf2+0xac>
10006b44:	1992b03a 	or	r9,r3,r6
10006b48:	0017883a 	mov	r11,zero
10006b4c:	483ff41e 	bne	r9,zero,10006b20 <__alt_data_end+0xf8006b20>
10006b50:	283ff61e 	bne	r5,zero,10006b2c <__alt_data_end+0xf8006b2c>
10006b54:	00800044 	movi	r2,1
10006b58:	f800283a 	ret
10006b5c:	1998b03a 	or	r12,r3,r6
10006b60:	603fef1e 	bne	r12,zero,10006b20 <__alt_data_end+0xf8006b20>
10006b64:	483ffa26 	beq	r9,zero,10006b50 <__alt_data_end+0xf8006b50>
10006b68:	0005883a 	mov	r2,zero
10006b6c:	f800283a 	ret
10006b70:	1992b03a 	or	r9,r3,r6
10006b74:	48000226 	beq	r9,zero,10006b80 <__ledf2+0xa8>
10006b78:	00800084 	movi	r2,2
10006b7c:	f800283a 	ret
10006b80:	103fe326 	beq	r2,zero,10006b10 <__alt_data_end+0xf8006b10>
10006b84:	39c03fcc 	andi	r7,r7,255
10006b88:	29fff11e 	bne	r5,r7,10006b50 <__alt_data_end+0xf8006b50>
10006b8c:	40bff016 	blt	r8,r2,10006b50 <__alt_data_end+0xf8006b50>
10006b90:	12000316 	blt	r2,r8,10006ba0 <__ledf2+0xc8>
10006b94:	1abfee36 	bltu	r3,r10,10006b50 <__alt_data_end+0xf8006b50>
10006b98:	50c00326 	beq	r10,r3,10006ba8 <__ledf2+0xd0>
10006b9c:	50fff22e 	bgeu	r10,r3,10006b68 <__alt_data_end+0xf8006b68>
10006ba0:	283fe226 	beq	r5,zero,10006b2c <__alt_data_end+0xf8006b2c>
10006ba4:	003feb06 	br	10006b54 <__alt_data_end+0xf8006b54>
10006ba8:	313fe936 	bltu	r6,r4,10006b50 <__alt_data_end+0xf8006b50>
10006bac:	21bfee2e 	bgeu	r4,r6,10006b68 <__alt_data_end+0xf8006b68>
10006bb0:	283fde26 	beq	r5,zero,10006b2c <__alt_data_end+0xf8006b2c>
10006bb4:	003fe706 	br	10006b54 <__alt_data_end+0xf8006b54>

10006bb8 <__muldf3>:
10006bb8:	deffee04 	addi	sp,sp,-72
10006bbc:	dd000c15 	stw	r20,48(sp)
10006bc0:	2828d53a 	srli	r20,r5,20
10006bc4:	dd400d15 	stw	r21,52(sp)
10006bc8:	282ad7fa 	srli	r21,r5,31
10006bcc:	dc000815 	stw	r16,32(sp)
10006bd0:	04000434 	movhi	r16,16
10006bd4:	ddc00f15 	stw	r23,60(sp)
10006bd8:	dcc00b15 	stw	r19,44(sp)
10006bdc:	dc800a15 	stw	r18,40(sp)
10006be0:	843fffc4 	addi	r16,r16,-1
10006be4:	dfc01115 	stw	ra,68(sp)
10006be8:	df001015 	stw	fp,64(sp)
10006bec:	dd800e15 	stw	r22,56(sp)
10006bf0:	dc400915 	stw	r17,36(sp)
10006bf4:	a501ffcc 	andi	r20,r20,2047
10006bf8:	2025883a 	mov	r18,r4
10006bfc:	202f883a 	mov	r23,r4
10006c00:	2c20703a 	and	r16,r5,r16
10006c04:	a827883a 	mov	r19,r21
10006c08:	aa403fcc 	andi	r9,r21,255
10006c0c:	a0005926 	beq	r20,zero,10006d74 <__muldf3+0x1bc>
10006c10:	0081ffc4 	movi	r2,2047
10006c14:	a0803426 	beq	r20,r2,10006ce8 <__muldf3+0x130>
10006c18:	84000434 	orhi	r16,r16,16
10006c1c:	2004d77a 	srli	r2,r4,29
10006c20:	802090fa 	slli	r16,r16,3
10006c24:	202e90fa 	slli	r23,r4,3
10006c28:	a53f0044 	addi	r20,r20,-1023
10006c2c:	80a0b03a 	or	r16,r16,r2
10006c30:	000b883a 	mov	r5,zero
10006c34:	0039883a 	mov	fp,zero
10006c38:	3806d53a 	srli	r3,r7,20
10006c3c:	382cd7fa 	srli	r22,r7,31
10006c40:	00800434 	movhi	r2,16
10006c44:	10bfffc4 	addi	r2,r2,-1
10006c48:	18c1ffcc 	andi	r3,r3,2047
10006c4c:	3025883a 	mov	r18,r6
10006c50:	38a2703a 	and	r17,r7,r2
10006c54:	b2803fcc 	andi	r10,r22,255
10006c58:	18006426 	beq	r3,zero,10006dec <__muldf3+0x234>
10006c5c:	0081ffc4 	movi	r2,2047
10006c60:	18805c26 	beq	r3,r2,10006dd4 <__muldf3+0x21c>
10006c64:	8c400434 	orhi	r17,r17,16
10006c68:	3004d77a 	srli	r2,r6,29
10006c6c:	882290fa 	slli	r17,r17,3
10006c70:	302490fa 	slli	r18,r6,3
10006c74:	18ff0044 	addi	r3,r3,-1023
10006c78:	88a2b03a 	or	r17,r17,r2
10006c7c:	000f883a 	mov	r7,zero
10006c80:	394ab03a 	or	r5,r7,r5
10006c84:	280a90ba 	slli	r5,r5,2
10006c88:	00840034 	movhi	r2,4096
10006c8c:	109b2a04 	addi	r2,r2,27816
10006c90:	288b883a 	add	r5,r5,r2
10006c94:	28800017 	ldw	r2,0(r5)
10006c98:	a0c7883a 	add	r3,r20,r3
10006c9c:	b54cf03a 	xor	r6,r22,r21
10006ca0:	1a000044 	addi	r8,r3,1
10006ca4:	1000683a 	jmp	r2
10006ca8:	10006eec 	andhi	zero,r2,443
10006cac:	10006ed8 	cmpnei	zero,r2,443
10006cb0:	10006ed8 	cmpnei	zero,r2,443
10006cb4:	10006ec4 	addi	zero,r2,443
10006cb8:	10006d04 	addi	zero,r2,436
10006cbc:	10006d04 	addi	zero,r2,436
10006cc0:	10006eac 	andhi	zero,r2,442
10006cc4:	10006ec4 	addi	zero,r2,443
10006cc8:	10006d04 	addi	zero,r2,436
10006ccc:	10006eac 	andhi	zero,r2,442
10006cd0:	10006d04 	addi	zero,r2,436
10006cd4:	10006ec4 	addi	zero,r2,443
10006cd8:	10006d08 	cmpgei	zero,r2,436
10006cdc:	10006d08 	cmpgei	zero,r2,436
10006ce0:	10006d08 	cmpgei	zero,r2,436
10006ce4:	10007228 	cmpgeui	zero,r2,456
10006ce8:	8104b03a 	or	r2,r16,r4
10006cec:	10006c1e 	bne	r2,zero,10006ea0 <__muldf3+0x2e8>
10006cf0:	01400204 	movi	r5,8
10006cf4:	0021883a 	mov	r16,zero
10006cf8:	002f883a 	mov	r23,zero
10006cfc:	07000084 	movi	fp,2
10006d00:	003fcd06 	br	10006c38 <__alt_data_end+0xf8006c38>
10006d04:	3013883a 	mov	r9,r6
10006d08:	00800084 	movi	r2,2
10006d0c:	e080501e 	bne	fp,r2,10006e50 <__muldf3+0x298>
10006d10:	4cc0004c 	andi	r19,r9,1
10006d14:	0101ffc4 	movi	r4,2047
10006d18:	0021883a 	mov	r16,zero
10006d1c:	002f883a 	mov	r23,zero
10006d20:	2008953a 	slli	r4,r4,20
10006d24:	98c03fcc 	andi	r3,r19,255
10006d28:	04400434 	movhi	r17,16
10006d2c:	8c7fffc4 	addi	r17,r17,-1
10006d30:	180697fa 	slli	r3,r3,31
10006d34:	8460703a 	and	r16,r16,r17
10006d38:	8120b03a 	or	r16,r16,r4
10006d3c:	80c6b03a 	or	r3,r16,r3
10006d40:	b805883a 	mov	r2,r23
10006d44:	dfc01117 	ldw	ra,68(sp)
10006d48:	df001017 	ldw	fp,64(sp)
10006d4c:	ddc00f17 	ldw	r23,60(sp)
10006d50:	dd800e17 	ldw	r22,56(sp)
10006d54:	dd400d17 	ldw	r21,52(sp)
10006d58:	dd000c17 	ldw	r20,48(sp)
10006d5c:	dcc00b17 	ldw	r19,44(sp)
10006d60:	dc800a17 	ldw	r18,40(sp)
10006d64:	dc400917 	ldw	r17,36(sp)
10006d68:	dc000817 	ldw	r16,32(sp)
10006d6c:	dec01204 	addi	sp,sp,72
10006d70:	f800283a 	ret
10006d74:	8104b03a 	or	r2,r16,r4
10006d78:	10004426 	beq	r2,zero,10006e8c <__muldf3+0x2d4>
10006d7c:	80014b26 	beq	r16,zero,100072ac <__muldf3+0x6f4>
10006d80:	8009883a 	mov	r4,r16
10006d84:	d9800715 	stw	r6,28(sp)
10006d88:	d9c00215 	stw	r7,8(sp)
10006d8c:	da400415 	stw	r9,16(sp)
10006d90:	0007e4c0 	call	10007e4c <__clzsi2>
10006d94:	d9800717 	ldw	r6,28(sp)
10006d98:	d9c00217 	ldw	r7,8(sp)
10006d9c:	da400417 	ldw	r9,16(sp)
10006da0:	1007883a 	mov	r3,r2
10006da4:	01000a04 	movi	r4,40
10006da8:	1dfffe04 	addi	r23,r3,-8
10006dac:	20c9c83a 	sub	r4,r4,r3
10006db0:	85e0983a 	sll	r16,r16,r23
10006db4:	9108d83a 	srl	r4,r18,r4
10006db8:	95ee983a 	sll	r23,r18,r23
10006dbc:	2420b03a 	or	r16,r4,r16
10006dc0:	053f0344 	movi	r20,-1011
10006dc4:	a0e9c83a 	sub	r20,r20,r3
10006dc8:	000b883a 	mov	r5,zero
10006dcc:	0039883a 	mov	fp,zero
10006dd0:	003f9906 	br	10006c38 <__alt_data_end+0xf8006c38>
10006dd4:	8984b03a 	or	r2,r17,r6
10006dd8:	10002a1e 	bne	r2,zero,10006e84 <__muldf3+0x2cc>
10006ddc:	0023883a 	mov	r17,zero
10006de0:	0025883a 	mov	r18,zero
10006de4:	01c00084 	movi	r7,2
10006de8:	003fa506 	br	10006c80 <__alt_data_end+0xf8006c80>
10006dec:	8984b03a 	or	r2,r17,r6
10006df0:	10002026 	beq	r2,zero,10006e74 <__muldf3+0x2bc>
10006df4:	88011c26 	beq	r17,zero,10007268 <__muldf3+0x6b0>
10006df8:	8809883a 	mov	r4,r17
10006dfc:	d9400215 	stw	r5,8(sp)
10006e00:	d9800715 	stw	r6,28(sp)
10006e04:	da400415 	stw	r9,16(sp)
10006e08:	da800315 	stw	r10,12(sp)
10006e0c:	0007e4c0 	call	10007e4c <__clzsi2>
10006e10:	d9400217 	ldw	r5,8(sp)
10006e14:	d9800717 	ldw	r6,28(sp)
10006e18:	da400417 	ldw	r9,16(sp)
10006e1c:	da800317 	ldw	r10,12(sp)
10006e20:	1007883a 	mov	r3,r2
10006e24:	01000a04 	movi	r4,40
10006e28:	1cbffe04 	addi	r18,r3,-8
10006e2c:	20c9c83a 	sub	r4,r4,r3
10006e30:	8ca2983a 	sll	r17,r17,r18
10006e34:	3108d83a 	srl	r4,r6,r4
10006e38:	34a4983a 	sll	r18,r6,r18
10006e3c:	2462b03a 	or	r17,r4,r17
10006e40:	00bf0344 	movi	r2,-1011
10006e44:	10c7c83a 	sub	r3,r2,r3
10006e48:	000f883a 	mov	r7,zero
10006e4c:	003f8c06 	br	10006c80 <__alt_data_end+0xf8006c80>
10006e50:	008000c4 	movi	r2,3
10006e54:	e0816d26 	beq	fp,r2,1000740c <__muldf3+0x854>
10006e58:	00800044 	movi	r2,1
10006e5c:	e081321e 	bne	fp,r2,10007328 <__muldf3+0x770>
10006e60:	48a6703a 	and	r19,r9,r2
10006e64:	0009883a 	mov	r4,zero
10006e68:	0021883a 	mov	r16,zero
10006e6c:	002f883a 	mov	r23,zero
10006e70:	003fab06 	br	10006d20 <__alt_data_end+0xf8006d20>
10006e74:	0023883a 	mov	r17,zero
10006e78:	0025883a 	mov	r18,zero
10006e7c:	01c00044 	movi	r7,1
10006e80:	003f7f06 	br	10006c80 <__alt_data_end+0xf8006c80>
10006e84:	01c000c4 	movi	r7,3
10006e88:	003f7d06 	br	10006c80 <__alt_data_end+0xf8006c80>
10006e8c:	01400104 	movi	r5,4
10006e90:	0021883a 	mov	r16,zero
10006e94:	002f883a 	mov	r23,zero
10006e98:	07000044 	movi	fp,1
10006e9c:	003f6606 	br	10006c38 <__alt_data_end+0xf8006c38>
10006ea0:	01400304 	movi	r5,12
10006ea4:	070000c4 	movi	fp,3
10006ea8:	003f6306 	br	10006c38 <__alt_data_end+0xf8006c38>
10006eac:	04000434 	movhi	r16,16
10006eb0:	0027883a 	mov	r19,zero
10006eb4:	843fffc4 	addi	r16,r16,-1
10006eb8:	05ffffc4 	movi	r23,-1
10006ebc:	0101ffc4 	movi	r4,2047
10006ec0:	003f9706 	br	10006d20 <__alt_data_end+0xf8006d20>
10006ec4:	8821883a 	mov	r16,r17
10006ec8:	902f883a 	mov	r23,r18
10006ecc:	5013883a 	mov	r9,r10
10006ed0:	3839883a 	mov	fp,r7
10006ed4:	003f8c06 	br	10006d08 <__alt_data_end+0xf8006d08>
10006ed8:	8821883a 	mov	r16,r17
10006edc:	902f883a 	mov	r23,r18
10006ee0:	3013883a 	mov	r9,r6
10006ee4:	3839883a 	mov	fp,r7
10006ee8:	003f8706 	br	10006d08 <__alt_data_end+0xf8006d08>
10006eec:	b82ad43a 	srli	r21,r23,16
10006ef0:	9038d43a 	srli	fp,r18,16
10006ef4:	bdffffcc 	andi	r23,r23,65535
10006ef8:	94bfffcc 	andi	r18,r18,65535
10006efc:	9009883a 	mov	r4,r18
10006f00:	b80b883a 	mov	r5,r23
10006f04:	d8c00515 	stw	r3,20(sp)
10006f08:	d9800715 	stw	r6,28(sp)
10006f0c:	da000615 	stw	r8,24(sp)
10006f10:	00057300 	call	10005730 <__mulsi3>
10006f14:	9009883a 	mov	r4,r18
10006f18:	a80b883a 	mov	r5,r21
10006f1c:	1029883a 	mov	r20,r2
10006f20:	00057300 	call	10005730 <__mulsi3>
10006f24:	e009883a 	mov	r4,fp
10006f28:	a80b883a 	mov	r5,r21
10006f2c:	102d883a 	mov	r22,r2
10006f30:	00057300 	call	10005730 <__mulsi3>
10006f34:	e009883a 	mov	r4,fp
10006f38:	b80b883a 	mov	r5,r23
10006f3c:	1027883a 	mov	r19,r2
10006f40:	00057300 	call	10005730 <__mulsi3>
10006f44:	a008d43a 	srli	r4,r20,16
10006f48:	b085883a 	add	r2,r22,r2
10006f4c:	d8c00517 	ldw	r3,20(sp)
10006f50:	110f883a 	add	r7,r2,r4
10006f54:	d9800717 	ldw	r6,28(sp)
10006f58:	da000617 	ldw	r8,24(sp)
10006f5c:	3d80022e 	bgeu	r7,r22,10006f68 <__muldf3+0x3b0>
10006f60:	00800074 	movhi	r2,1
10006f64:	98a7883a 	add	r19,r19,r2
10006f68:	3804943a 	slli	r2,r7,16
10006f6c:	380ed43a 	srli	r7,r7,16
10006f70:	882cd43a 	srli	r22,r17,16
10006f74:	a53fffcc 	andi	r20,r20,65535
10006f78:	8c7fffcc 	andi	r17,r17,65535
10006f7c:	1529883a 	add	r20,r2,r20
10006f80:	8809883a 	mov	r4,r17
10006f84:	b80b883a 	mov	r5,r23
10006f88:	d8c00515 	stw	r3,20(sp)
10006f8c:	d9800715 	stw	r6,28(sp)
10006f90:	da000615 	stw	r8,24(sp)
10006f94:	d9c00015 	stw	r7,0(sp)
10006f98:	dd000115 	stw	r20,4(sp)
10006f9c:	00057300 	call	10005730 <__mulsi3>
10006fa0:	a80b883a 	mov	r5,r21
10006fa4:	8809883a 	mov	r4,r17
10006fa8:	d8800415 	stw	r2,16(sp)
10006fac:	00057300 	call	10005730 <__mulsi3>
10006fb0:	a80b883a 	mov	r5,r21
10006fb4:	b009883a 	mov	r4,r22
10006fb8:	1029883a 	mov	r20,r2
10006fbc:	00057300 	call	10005730 <__mulsi3>
10006fc0:	b009883a 	mov	r4,r22
10006fc4:	b80b883a 	mov	r5,r23
10006fc8:	102b883a 	mov	r21,r2
10006fcc:	00057300 	call	10005730 <__mulsi3>
10006fd0:	da400417 	ldw	r9,16(sp)
10006fd4:	a085883a 	add	r2,r20,r2
10006fd8:	d8c00517 	ldw	r3,20(sp)
10006fdc:	4808d43a 	srli	r4,r9,16
10006fe0:	d9800717 	ldw	r6,28(sp)
10006fe4:	da000617 	ldw	r8,24(sp)
10006fe8:	1109883a 	add	r4,r2,r4
10006fec:	2500022e 	bgeu	r4,r20,10006ff8 <__muldf3+0x440>
10006ff0:	00800074 	movhi	r2,1
10006ff4:	a8ab883a 	add	r21,r21,r2
10006ff8:	200e943a 	slli	r7,r4,16
10006ffc:	2004d43a 	srli	r2,r4,16
10007000:	802ed43a 	srli	r23,r16,16
10007004:	843fffcc 	andi	r16,r16,65535
10007008:	4d3fffcc 	andi	r20,r9,65535
1000700c:	9009883a 	mov	r4,r18
10007010:	800b883a 	mov	r5,r16
10007014:	3d29883a 	add	r20,r7,r20
10007018:	d8c00515 	stw	r3,20(sp)
1000701c:	d9800715 	stw	r6,28(sp)
10007020:	da000615 	stw	r8,24(sp)
10007024:	a8ab883a 	add	r21,r21,r2
10007028:	00057300 	call	10005730 <__mulsi3>
1000702c:	9009883a 	mov	r4,r18
10007030:	b80b883a 	mov	r5,r23
10007034:	d8800315 	stw	r2,12(sp)
10007038:	00057300 	call	10005730 <__mulsi3>
1000703c:	e009883a 	mov	r4,fp
10007040:	b80b883a 	mov	r5,r23
10007044:	1025883a 	mov	r18,r2
10007048:	00057300 	call	10005730 <__mulsi3>
1000704c:	e009883a 	mov	r4,fp
10007050:	800b883a 	mov	r5,r16
10007054:	d8800215 	stw	r2,8(sp)
10007058:	00057300 	call	10005730 <__mulsi3>
1000705c:	da800317 	ldw	r10,12(sp)
10007060:	d9400017 	ldw	r5,0(sp)
10007064:	9085883a 	add	r2,r18,r2
10007068:	5008d43a 	srli	r4,r10,16
1000706c:	a153883a 	add	r9,r20,r5
10007070:	d8c00517 	ldw	r3,20(sp)
10007074:	1109883a 	add	r4,r2,r4
10007078:	d9800717 	ldw	r6,28(sp)
1000707c:	da000617 	ldw	r8,24(sp)
10007080:	dac00217 	ldw	r11,8(sp)
10007084:	2480022e 	bgeu	r4,r18,10007090 <__muldf3+0x4d8>
10007088:	00800074 	movhi	r2,1
1000708c:	5897883a 	add	r11,r11,r2
10007090:	200e943a 	slli	r7,r4,16
10007094:	2038d43a 	srli	fp,r4,16
10007098:	52bfffcc 	andi	r10,r10,65535
1000709c:	3a8f883a 	add	r7,r7,r10
100070a0:	8809883a 	mov	r4,r17
100070a4:	800b883a 	mov	r5,r16
100070a8:	d8c00515 	stw	r3,20(sp)
100070ac:	d9800715 	stw	r6,28(sp)
100070b0:	d9c00215 	stw	r7,8(sp)
100070b4:	da000615 	stw	r8,24(sp)
100070b8:	da400415 	stw	r9,16(sp)
100070bc:	5f39883a 	add	fp,r11,fp
100070c0:	00057300 	call	10005730 <__mulsi3>
100070c4:	8809883a 	mov	r4,r17
100070c8:	b80b883a 	mov	r5,r23
100070cc:	1025883a 	mov	r18,r2
100070d0:	00057300 	call	10005730 <__mulsi3>
100070d4:	b009883a 	mov	r4,r22
100070d8:	b80b883a 	mov	r5,r23
100070dc:	d8800315 	stw	r2,12(sp)
100070e0:	00057300 	call	10005730 <__mulsi3>
100070e4:	b009883a 	mov	r4,r22
100070e8:	800b883a 	mov	r5,r16
100070ec:	1023883a 	mov	r17,r2
100070f0:	00057300 	call	10005730 <__mulsi3>
100070f4:	da800317 	ldw	r10,12(sp)
100070f8:	9008d43a 	srli	r4,r18,16
100070fc:	d8c00517 	ldw	r3,20(sp)
10007100:	5085883a 	add	r2,r10,r2
10007104:	1109883a 	add	r4,r2,r4
10007108:	d9800717 	ldw	r6,28(sp)
1000710c:	d9c00217 	ldw	r7,8(sp)
10007110:	da000617 	ldw	r8,24(sp)
10007114:	da400417 	ldw	r9,16(sp)
10007118:	2280022e 	bgeu	r4,r10,10007124 <__muldf3+0x56c>
1000711c:	00800074 	movhi	r2,1
10007120:	88a3883a 	add	r17,r17,r2
10007124:	2004943a 	slli	r2,r4,16
10007128:	94bfffcc 	andi	r18,r18,65535
1000712c:	4ce7883a 	add	r19,r9,r19
10007130:	14a5883a 	add	r18,r2,r18
10007134:	9d29803a 	cmpltu	r20,r19,r20
10007138:	9565883a 	add	r18,r18,r21
1000713c:	9505883a 	add	r2,r18,r20
10007140:	99e7883a 	add	r19,r19,r7
10007144:	99cf803a 	cmpltu	r7,r19,r7
10007148:	e08b883a 	add	r5,fp,r2
1000714c:	2008d43a 	srli	r4,r4,16
10007150:	29ef883a 	add	r23,r5,r7
10007154:	1529803a 	cmpltu	r20,r2,r20
10007158:	956b803a 	cmpltu	r21,r18,r21
1000715c:	b9cf803a 	cmpltu	r7,r23,r7
10007160:	a564b03a 	or	r18,r20,r21
10007164:	2f39803a 	cmpltu	fp,r5,fp
10007168:	9125883a 	add	r18,r18,r4
1000716c:	3f38b03a 	or	fp,r7,fp
10007170:	9725883a 	add	r18,r18,fp
10007174:	9804927a 	slli	r2,r19,9
10007178:	9463883a 	add	r17,r18,r17
1000717c:	d9000117 	ldw	r4,4(sp)
10007180:	b820d5fa 	srli	r16,r23,23
10007184:	8822927a 	slli	r17,r17,9
10007188:	9826d5fa 	srli	r19,r19,23
1000718c:	1104b03a 	or	r2,r2,r4
10007190:	b82e927a 	slli	r23,r23,9
10007194:	1004c03a 	cmpne	r2,r2,zero
10007198:	8c20b03a 	or	r16,r17,r16
1000719c:	14e6b03a 	or	r19,r2,r19
100071a0:	8080402c 	andhi	r2,r16,256
100071a4:	9deeb03a 	or	r23,r19,r23
100071a8:	10000726 	beq	r2,zero,100071c8 <__muldf3+0x610>
100071ac:	b804d07a 	srli	r2,r23,1
100071b0:	800697fa 	slli	r3,r16,31
100071b4:	bdc0004c 	andi	r23,r23,1
100071b8:	8020d07a 	srli	r16,r16,1
100071bc:	b8aeb03a 	or	r23,r23,r2
100071c0:	b8eeb03a 	or	r23,r23,r3
100071c4:	4007883a 	mov	r3,r8
100071c8:	1900ffc4 	addi	r4,r3,1023
100071cc:	01004d0e 	bge	zero,r4,10007304 <__muldf3+0x74c>
100071d0:	b88001cc 	andi	r2,r23,7
100071d4:	10000726 	beq	r2,zero,100071f4 <__muldf3+0x63c>
100071d8:	b94003cc 	andi	r5,r23,15
100071dc:	00800104 	movi	r2,4
100071e0:	28800426 	beq	r5,r2,100071f4 <__muldf3+0x63c>
100071e4:	b885883a 	add	r2,r23,r2
100071e8:	15ef803a 	cmpltu	r23,r2,r23
100071ec:	85e1883a 	add	r16,r16,r23
100071f0:	102f883a 	mov	r23,r2
100071f4:	8080402c 	andhi	r2,r16,256
100071f8:	10000426 	beq	r2,zero,1000720c <__muldf3+0x654>
100071fc:	00bfc034 	movhi	r2,65280
10007200:	10bfffc4 	addi	r2,r2,-1
10007204:	19010004 	addi	r4,r3,1024
10007208:	80a0703a 	and	r16,r16,r2
1000720c:	0081ff84 	movi	r2,2046
10007210:	1100340e 	bge	r2,r4,100072e4 <__muldf3+0x72c>
10007214:	34c0004c 	andi	r19,r6,1
10007218:	0101ffc4 	movi	r4,2047
1000721c:	0021883a 	mov	r16,zero
10007220:	002f883a 	mov	r23,zero
10007224:	003ebe06 	br	10006d20 <__alt_data_end+0xf8006d20>
10007228:	8080022c 	andhi	r2,r16,8
1000722c:	10000926 	beq	r2,zero,10007254 <__muldf3+0x69c>
10007230:	8880022c 	andhi	r2,r17,8
10007234:	1000071e 	bne	r2,zero,10007254 <__muldf3+0x69c>
10007238:	00800434 	movhi	r2,16
1000723c:	8c000234 	orhi	r16,r17,8
10007240:	10bfffc4 	addi	r2,r2,-1
10007244:	b027883a 	mov	r19,r22
10007248:	80a0703a 	and	r16,r16,r2
1000724c:	902f883a 	mov	r23,r18
10007250:	003f1a06 	br	10006ebc <__alt_data_end+0xf8006ebc>
10007254:	00800434 	movhi	r2,16
10007258:	84000234 	orhi	r16,r16,8
1000725c:	10bfffc4 	addi	r2,r2,-1
10007260:	80a0703a 	and	r16,r16,r2
10007264:	003f1506 	br	10006ebc <__alt_data_end+0xf8006ebc>
10007268:	3009883a 	mov	r4,r6
1000726c:	d9400215 	stw	r5,8(sp)
10007270:	d9800715 	stw	r6,28(sp)
10007274:	da400415 	stw	r9,16(sp)
10007278:	da800315 	stw	r10,12(sp)
1000727c:	0007e4c0 	call	10007e4c <__clzsi2>
10007280:	10c00804 	addi	r3,r2,32
10007284:	010009c4 	movi	r4,39
10007288:	d9400217 	ldw	r5,8(sp)
1000728c:	d9800717 	ldw	r6,28(sp)
10007290:	da400417 	ldw	r9,16(sp)
10007294:	da800317 	ldw	r10,12(sp)
10007298:	20fee20e 	bge	r4,r3,10006e24 <__alt_data_end+0xf8006e24>
1000729c:	147ffe04 	addi	r17,r2,-8
100072a0:	9462983a 	sll	r17,r18,r17
100072a4:	0025883a 	mov	r18,zero
100072a8:	003ee506 	br	10006e40 <__alt_data_end+0xf8006e40>
100072ac:	d9800715 	stw	r6,28(sp)
100072b0:	d9c00215 	stw	r7,8(sp)
100072b4:	da400415 	stw	r9,16(sp)
100072b8:	0007e4c0 	call	10007e4c <__clzsi2>
100072bc:	10c00804 	addi	r3,r2,32
100072c0:	010009c4 	movi	r4,39
100072c4:	d9800717 	ldw	r6,28(sp)
100072c8:	d9c00217 	ldw	r7,8(sp)
100072cc:	da400417 	ldw	r9,16(sp)
100072d0:	20feb40e 	bge	r4,r3,10006da4 <__alt_data_end+0xf8006da4>
100072d4:	143ffe04 	addi	r16,r2,-8
100072d8:	9420983a 	sll	r16,r18,r16
100072dc:	002f883a 	mov	r23,zero
100072e0:	003eb706 	br	10006dc0 <__alt_data_end+0xf8006dc0>
100072e4:	8004977a 	slli	r2,r16,29
100072e8:	b82ed0fa 	srli	r23,r23,3
100072ec:	8020927a 	slli	r16,r16,9
100072f0:	2101ffcc 	andi	r4,r4,2047
100072f4:	15eeb03a 	or	r23,r2,r23
100072f8:	8020d33a 	srli	r16,r16,12
100072fc:	34c0004c 	andi	r19,r6,1
10007300:	003e8706 	br	10006d20 <__alt_data_end+0xf8006d20>
10007304:	00bf0084 	movi	r2,-1022
10007308:	10c5c83a 	sub	r2,r2,r3
1000730c:	01000e04 	movi	r4,56
10007310:	2080080e 	bge	r4,r2,10007334 <__muldf3+0x77c>
10007314:	34c0004c 	andi	r19,r6,1
10007318:	0009883a 	mov	r4,zero
1000731c:	0021883a 	mov	r16,zero
10007320:	002f883a 	mov	r23,zero
10007324:	003e7e06 	br	10006d20 <__alt_data_end+0xf8006d20>
10007328:	4007883a 	mov	r3,r8
1000732c:	480d883a 	mov	r6,r9
10007330:	003fa506 	br	100071c8 <__alt_data_end+0xf80071c8>
10007334:	010007c4 	movi	r4,31
10007338:	20801816 	blt	r4,r2,1000739c <__muldf3+0x7e4>
1000733c:	18c10784 	addi	r3,r3,1054
10007340:	80c8983a 	sll	r4,r16,r3
10007344:	b88ad83a 	srl	r5,r23,r2
10007348:	b8c6983a 	sll	r3,r23,r3
1000734c:	80a0d83a 	srl	r16,r16,r2
10007350:	2908b03a 	or	r4,r5,r4
10007354:	1804c03a 	cmpne	r2,r3,zero
10007358:	2088b03a 	or	r4,r4,r2
1000735c:	208001cc 	andi	r2,r4,7
10007360:	10000726 	beq	r2,zero,10007380 <__muldf3+0x7c8>
10007364:	20c003cc 	andi	r3,r4,15
10007368:	00800104 	movi	r2,4
1000736c:	18800426 	beq	r3,r2,10007380 <__muldf3+0x7c8>
10007370:	20c00104 	addi	r3,r4,4
10007374:	1905803a 	cmpltu	r2,r3,r4
10007378:	80a1883a 	add	r16,r16,r2
1000737c:	1809883a 	mov	r4,r3
10007380:	8080202c 	andhi	r2,r16,128
10007384:	10001b26 	beq	r2,zero,100073f4 <__muldf3+0x83c>
10007388:	34c0004c 	andi	r19,r6,1
1000738c:	01000044 	movi	r4,1
10007390:	0021883a 	mov	r16,zero
10007394:	002f883a 	mov	r23,zero
10007398:	003e6106 	br	10006d20 <__alt_data_end+0xf8006d20>
1000739c:	013ef884 	movi	r4,-1054
100073a0:	20c9c83a 	sub	r4,r4,r3
100073a4:	01400804 	movi	r5,32
100073a8:	8108d83a 	srl	r4,r16,r4
100073ac:	11401526 	beq	r2,r5,10007404 <__muldf3+0x84c>
100073b0:	18c10f84 	addi	r3,r3,1086
100073b4:	80e0983a 	sll	r16,r16,r3
100073b8:	85eeb03a 	or	r23,r16,r23
100073bc:	b804c03a 	cmpne	r2,r23,zero
100073c0:	1108b03a 	or	r4,r2,r4
100073c4:	20c001cc 	andi	r3,r4,7
100073c8:	1800061e 	bne	r3,zero,100073e4 <__muldf3+0x82c>
100073cc:	0021883a 	mov	r16,zero
100073d0:	202ed0fa 	srli	r23,r4,3
100073d4:	34c0004c 	andi	r19,r6,1
100073d8:	0009883a 	mov	r4,zero
100073dc:	b8eeb03a 	or	r23,r23,r3
100073e0:	003e4f06 	br	10006d20 <__alt_data_end+0xf8006d20>
100073e4:	20c003cc 	andi	r3,r4,15
100073e8:	00800104 	movi	r2,4
100073ec:	0021883a 	mov	r16,zero
100073f0:	18bfdf1e 	bne	r3,r2,10007370 <__alt_data_end+0xf8007370>
100073f4:	8004927a 	slli	r2,r16,9
100073f8:	8006977a 	slli	r3,r16,29
100073fc:	1020d33a 	srli	r16,r2,12
10007400:	003ff306 	br	100073d0 <__alt_data_end+0xf80073d0>
10007404:	0021883a 	mov	r16,zero
10007408:	003feb06 	br	100073b8 <__alt_data_end+0xf80073b8>
1000740c:	00800434 	movhi	r2,16
10007410:	84000234 	orhi	r16,r16,8
10007414:	10bfffc4 	addi	r2,r2,-1
10007418:	4cc0004c 	andi	r19,r9,1
1000741c:	80a0703a 	and	r16,r16,r2
10007420:	003ea606 	br	10006ebc <__alt_data_end+0xf8006ebc>

10007424 <__subdf3>:
10007424:	00c00434 	movhi	r3,16
10007428:	18ffffc4 	addi	r3,r3,-1
1000742c:	defffb04 	addi	sp,sp,-20
10007430:	28d2703a 	and	r9,r5,r3
10007434:	3814d53a 	srli	r10,r7,20
10007438:	38c6703a 	and	r3,r7,r3
1000743c:	3004d77a 	srli	r2,r6,29
10007440:	dc800215 	stw	r18,8(sp)
10007444:	dc000015 	stw	r16,0(sp)
10007448:	2824d7fa 	srli	r18,r5,31
1000744c:	2820d53a 	srli	r16,r5,20
10007450:	481290fa 	slli	r9,r9,3
10007454:	200ad77a 	srli	r5,r4,29
10007458:	180690fa 	slli	r3,r3,3
1000745c:	dc400115 	stw	r17,4(sp)
10007460:	dfc00415 	stw	ra,16(sp)
10007464:	202290fa 	slli	r17,r4,3
10007468:	dcc00315 	stw	r19,12(sp)
1000746c:	5281ffcc 	andi	r10,r10,2047
10007470:	0101ffc4 	movi	r4,2047
10007474:	9011883a 	mov	r8,r18
10007478:	8401ffcc 	andi	r16,r16,2047
1000747c:	94803fcc 	andi	r18,r18,255
10007480:	494ab03a 	or	r5,r9,r5
10007484:	380ed7fa 	srli	r7,r7,31
10007488:	1886b03a 	or	r3,r3,r2
1000748c:	300c90fa 	slli	r6,r6,3
10007490:	51009026 	beq	r10,r4,100076d4 <__subdf3+0x2b0>
10007494:	39c0005c 	xori	r7,r7,1
10007498:	8285c83a 	sub	r2,r16,r10
1000749c:	91c06f26 	beq	r18,r7,1000765c <__subdf3+0x238>
100074a0:	0080b10e 	bge	zero,r2,10007768 <__subdf3+0x344>
100074a4:	50002a1e 	bne	r10,zero,10007550 <__subdf3+0x12c>
100074a8:	1988b03a 	or	r4,r3,r6
100074ac:	2000941e 	bne	r4,zero,10007700 <__subdf3+0x2dc>
100074b0:	888001cc 	andi	r2,r17,7
100074b4:	10005b26 	beq	r2,zero,10007624 <__subdf3+0x200>
100074b8:	88c003cc 	andi	r3,r17,15
100074bc:	00800104 	movi	r2,4
100074c0:	18805826 	beq	r3,r2,10007624 <__subdf3+0x200>
100074c4:	88c00104 	addi	r3,r17,4
100074c8:	1c63803a 	cmpltu	r17,r3,r17
100074cc:	2c4b883a 	add	r5,r5,r17
100074d0:	2880202c 	andhi	r2,r5,128
100074d4:	9200004c 	andi	r8,r18,1
100074d8:	1823883a 	mov	r17,r3
100074dc:	10005426 	beq	r2,zero,10007630 <__subdf3+0x20c>
100074e0:	84000044 	addi	r16,r16,1
100074e4:	0081ffc4 	movi	r2,2047
100074e8:	8080bf26 	beq	r16,r2,100077e8 <__subdf3+0x3c4>
100074ec:	013fe034 	movhi	r4,65408
100074f0:	213fffc4 	addi	r4,r4,-1
100074f4:	290a703a 	and	r5,r5,r4
100074f8:	2804977a 	slli	r2,r5,29
100074fc:	280a927a 	slli	r5,r5,9
10007500:	8822d0fa 	srli	r17,r17,3
10007504:	8401ffcc 	andi	r16,r16,2047
10007508:	2808d33a 	srli	r4,r5,12
1000750c:	1444b03a 	or	r2,r2,r17
10007510:	8401ffcc 	andi	r16,r16,2047
10007514:	800a953a 	slli	r5,r16,20
10007518:	40c03fcc 	andi	r3,r8,255
1000751c:	04000434 	movhi	r16,16
10007520:	180697fa 	slli	r3,r3,31
10007524:	843fffc4 	addi	r16,r16,-1
10007528:	2420703a 	and	r16,r4,r16
1000752c:	8160b03a 	or	r16,r16,r5
10007530:	80c6b03a 	or	r3,r16,r3
10007534:	dfc00417 	ldw	ra,16(sp)
10007538:	dcc00317 	ldw	r19,12(sp)
1000753c:	dc800217 	ldw	r18,8(sp)
10007540:	dc400117 	ldw	r17,4(sp)
10007544:	dc000017 	ldw	r16,0(sp)
10007548:	dec00504 	addi	sp,sp,20
1000754c:	f800283a 	ret
10007550:	0101ffc4 	movi	r4,2047
10007554:	813fd626 	beq	r16,r4,100074b0 <__alt_data_end+0xf80074b0>
10007558:	18c02034 	orhi	r3,r3,128
1000755c:	01000e04 	movi	r4,56
10007560:	2080a416 	blt	r4,r2,100077f4 <__subdf3+0x3d0>
10007564:	010007c4 	movi	r4,31
10007568:	2080c716 	blt	r4,r2,10007888 <__subdf3+0x464>
1000756c:	01000804 	movi	r4,32
10007570:	2089c83a 	sub	r4,r4,r2
10007574:	1910983a 	sll	r8,r3,r4
10007578:	308ed83a 	srl	r7,r6,r2
1000757c:	3108983a 	sll	r4,r6,r4
10007580:	1884d83a 	srl	r2,r3,r2
10007584:	41ccb03a 	or	r6,r8,r7
10007588:	2008c03a 	cmpne	r4,r4,zero
1000758c:	310cb03a 	or	r6,r6,r4
10007590:	898dc83a 	sub	r6,r17,r6
10007594:	89a3803a 	cmpltu	r17,r17,r6
10007598:	288bc83a 	sub	r5,r5,r2
1000759c:	2c4bc83a 	sub	r5,r5,r17
100075a0:	3023883a 	mov	r17,r6
100075a4:	2880202c 	andhi	r2,r5,128
100075a8:	10006b26 	beq	r2,zero,10007758 <__subdf3+0x334>
100075ac:	04c02034 	movhi	r19,128
100075b0:	9cffffc4 	addi	r19,r19,-1
100075b4:	2ce6703a 	and	r19,r5,r19
100075b8:	98007c26 	beq	r19,zero,100077ac <__subdf3+0x388>
100075bc:	9809883a 	mov	r4,r19
100075c0:	0007e4c0 	call	10007e4c <__clzsi2>
100075c4:	10fffe04 	addi	r3,r2,-8
100075c8:	010007c4 	movi	r4,31
100075cc:	20c07d16 	blt	r4,r3,100077c4 <__subdf3+0x3a0>
100075d0:	01400a04 	movi	r5,40
100075d4:	2885c83a 	sub	r2,r5,r2
100075d8:	888ad83a 	srl	r5,r17,r2
100075dc:	98e6983a 	sll	r19,r19,r3
100075e0:	88e2983a 	sll	r17,r17,r3
100075e4:	2ce6b03a 	or	r19,r5,r19
100075e8:	1c007a16 	blt	r3,r16,100077d4 <__subdf3+0x3b0>
100075ec:	1c21c83a 	sub	r16,r3,r16
100075f0:	81400044 	addi	r5,r16,1
100075f4:	00c007c4 	movi	r3,31
100075f8:	19409616 	blt	r3,r5,10007854 <__subdf3+0x430>
100075fc:	1c21c83a 	sub	r16,r3,r16
10007600:	8c08983a 	sll	r4,r17,r16
10007604:	8946d83a 	srl	r3,r17,r5
10007608:	9c20983a 	sll	r16,r19,r16
1000760c:	2008c03a 	cmpne	r4,r4,zero
10007610:	994ad83a 	srl	r5,r19,r5
10007614:	1c06b03a 	or	r3,r3,r16
10007618:	1922b03a 	or	r17,r3,r4
1000761c:	0021883a 	mov	r16,zero
10007620:	003fa306 	br	100074b0 <__alt_data_end+0xf80074b0>
10007624:	2880202c 	andhi	r2,r5,128
10007628:	9200004c 	andi	r8,r18,1
1000762c:	103fac1e 	bne	r2,zero,100074e0 <__alt_data_end+0xf80074e0>
10007630:	2804977a 	slli	r2,r5,29
10007634:	8822d0fa 	srli	r17,r17,3
10007638:	00c1ffc4 	movi	r3,2047
1000763c:	280ad0fa 	srli	r5,r5,3
10007640:	1444b03a 	or	r2,r2,r17
10007644:	80c02726 	beq	r16,r3,100076e4 <__subdf3+0x2c0>
10007648:	01000434 	movhi	r4,16
1000764c:	213fffc4 	addi	r4,r4,-1
10007650:	80e0703a 	and	r16,r16,r3
10007654:	2908703a 	and	r4,r5,r4
10007658:	003fad06 	br	10007510 <__alt_data_end+0xf8007510>
1000765c:	0080690e 	bge	zero,r2,10007804 <__subdf3+0x3e0>
10007660:	50002f26 	beq	r10,zero,10007720 <__subdf3+0x2fc>
10007664:	0101ffc4 	movi	r4,2047
10007668:	813f9126 	beq	r16,r4,100074b0 <__alt_data_end+0xf80074b0>
1000766c:	18c02034 	orhi	r3,r3,128
10007670:	01000e04 	movi	r4,56
10007674:	2080b00e 	bge	r4,r2,10007938 <__subdf3+0x514>
10007678:	198cb03a 	or	r6,r3,r6
1000767c:	300ec03a 	cmpne	r7,r6,zero
10007680:	0005883a 	mov	r2,zero
10007684:	3c4f883a 	add	r7,r7,r17
10007688:	3c63803a 	cmpltu	r17,r7,r17
1000768c:	114b883a 	add	r5,r2,r5
10007690:	2c4b883a 	add	r5,r5,r17
10007694:	3823883a 	mov	r17,r7
10007698:	2880202c 	andhi	r2,r5,128
1000769c:	10002e26 	beq	r2,zero,10007758 <__subdf3+0x334>
100076a0:	84000044 	addi	r16,r16,1
100076a4:	0081ffc4 	movi	r2,2047
100076a8:	8080de26 	beq	r16,r2,10007a24 <__subdf3+0x600>
100076ac:	00bfe034 	movhi	r2,65408
100076b0:	10bfffc4 	addi	r2,r2,-1
100076b4:	288a703a 	and	r5,r5,r2
100076b8:	880cd07a 	srli	r6,r17,1
100076bc:	280897fa 	slli	r4,r5,31
100076c0:	88c0004c 	andi	r3,r17,1
100076c4:	30e2b03a 	or	r17,r6,r3
100076c8:	280ad07a 	srli	r5,r5,1
100076cc:	8922b03a 	or	r17,r17,r4
100076d0:	003f7706 	br	100074b0 <__alt_data_end+0xf80074b0>
100076d4:	1984b03a 	or	r2,r3,r6
100076d8:	103f6e26 	beq	r2,zero,10007494 <__alt_data_end+0xf8007494>
100076dc:	39c03fcc 	andi	r7,r7,255
100076e0:	003f6d06 	br	10007498 <__alt_data_end+0xf8007498>
100076e4:	1146b03a 	or	r3,r2,r5
100076e8:	18003f26 	beq	r3,zero,100077e8 <__subdf3+0x3c4>
100076ec:	00c00434 	movhi	r3,16
100076f0:	29000234 	orhi	r4,r5,8
100076f4:	18ffffc4 	addi	r3,r3,-1
100076f8:	20c8703a 	and	r4,r4,r3
100076fc:	003f8406 	br	10007510 <__alt_data_end+0xf8007510>
10007700:	10bfffc4 	addi	r2,r2,-1
10007704:	1000501e 	bne	r2,zero,10007848 <__subdf3+0x424>
10007708:	898fc83a 	sub	r7,r17,r6
1000770c:	89e3803a 	cmpltu	r17,r17,r7
10007710:	28cbc83a 	sub	r5,r5,r3
10007714:	2c4bc83a 	sub	r5,r5,r17
10007718:	3823883a 	mov	r17,r7
1000771c:	003fa106 	br	100075a4 <__alt_data_end+0xf80075a4>
10007720:	1988b03a 	or	r4,r3,r6
10007724:	203f6226 	beq	r4,zero,100074b0 <__alt_data_end+0xf80074b0>
10007728:	10bfffc4 	addi	r2,r2,-1
1000772c:	10009b1e 	bne	r2,zero,1000799c <__subdf3+0x578>
10007730:	344d883a 	add	r6,r6,r17
10007734:	3463803a 	cmpltu	r17,r6,r17
10007738:	194b883a 	add	r5,r3,r5
1000773c:	2c4b883a 	add	r5,r5,r17
10007740:	3023883a 	mov	r17,r6
10007744:	003fd406 	br	10007698 <__alt_data_end+0xf8007698>
10007748:	1106b03a 	or	r3,r2,r4
1000774c:	1800b426 	beq	r3,zero,10007a20 <__subdf3+0x5fc>
10007750:	100b883a 	mov	r5,r2
10007754:	2023883a 	mov	r17,r4
10007758:	888001cc 	andi	r2,r17,7
1000775c:	103f561e 	bne	r2,zero,100074b8 <__alt_data_end+0xf80074b8>
10007760:	9200004c 	andi	r8,r18,1
10007764:	003fb206 	br	10007630 <__alt_data_end+0xf8007630>
10007768:	1000531e 	bne	r2,zero,100078b8 <__subdf3+0x494>
1000776c:	80800044 	addi	r2,r16,1
10007770:	1081ffcc 	andi	r2,r2,2047
10007774:	01000044 	movi	r4,1
10007778:	2080a00e 	bge	r4,r2,100079fc <__subdf3+0x5d8>
1000777c:	8985c83a 	sub	r2,r17,r6
10007780:	8889803a 	cmpltu	r4,r17,r2
10007784:	28e7c83a 	sub	r19,r5,r3
10007788:	9927c83a 	sub	r19,r19,r4
1000778c:	9900202c 	andhi	r4,r19,128
10007790:	20006226 	beq	r4,zero,1000791c <__subdf3+0x4f8>
10007794:	3463c83a 	sub	r17,r6,r17
10007798:	194bc83a 	sub	r5,r3,r5
1000779c:	344d803a 	cmpltu	r6,r6,r17
100077a0:	29a7c83a 	sub	r19,r5,r6
100077a4:	3825883a 	mov	r18,r7
100077a8:	983f841e 	bne	r19,zero,100075bc <__alt_data_end+0xf80075bc>
100077ac:	8809883a 	mov	r4,r17
100077b0:	0007e4c0 	call	10007e4c <__clzsi2>
100077b4:	10800804 	addi	r2,r2,32
100077b8:	10fffe04 	addi	r3,r2,-8
100077bc:	010007c4 	movi	r4,31
100077c0:	20ff830e 	bge	r4,r3,100075d0 <__alt_data_end+0xf80075d0>
100077c4:	14fff604 	addi	r19,r2,-40
100077c8:	8ce6983a 	sll	r19,r17,r19
100077cc:	0023883a 	mov	r17,zero
100077d0:	1c3f860e 	bge	r3,r16,100075ec <__alt_data_end+0xf80075ec>
100077d4:	017fe034 	movhi	r5,65408
100077d8:	297fffc4 	addi	r5,r5,-1
100077dc:	80e1c83a 	sub	r16,r16,r3
100077e0:	994a703a 	and	r5,r19,r5
100077e4:	003f3206 	br	100074b0 <__alt_data_end+0xf80074b0>
100077e8:	0009883a 	mov	r4,zero
100077ec:	0005883a 	mov	r2,zero
100077f0:	003f4706 	br	10007510 <__alt_data_end+0xf8007510>
100077f4:	198cb03a 	or	r6,r3,r6
100077f8:	300cc03a 	cmpne	r6,r6,zero
100077fc:	0005883a 	mov	r2,zero
10007800:	003f6306 	br	10007590 <__alt_data_end+0xf8007590>
10007804:	10009d1e 	bne	r2,zero,10007a7c <__subdf3+0x658>
10007808:	81c00044 	addi	r7,r16,1
1000780c:	3881ffcc 	andi	r2,r7,2047
10007810:	02400044 	movi	r9,1
10007814:	4880680e 	bge	r9,r2,100079b8 <__subdf3+0x594>
10007818:	0081ffc4 	movi	r2,2047
1000781c:	3880ae26 	beq	r7,r2,10007ad8 <__subdf3+0x6b4>
10007820:	344d883a 	add	r6,r6,r17
10007824:	3463803a 	cmpltu	r17,r6,r17
10007828:	194b883a 	add	r5,r3,r5
1000782c:	2c4b883a 	add	r5,r5,r17
10007830:	282297fa 	slli	r17,r5,31
10007834:	300cd07a 	srli	r6,r6,1
10007838:	280ad07a 	srli	r5,r5,1
1000783c:	3821883a 	mov	r16,r7
10007840:	89a2b03a 	or	r17,r17,r6
10007844:	003f1a06 	br	100074b0 <__alt_data_end+0xf80074b0>
10007848:	0101ffc4 	movi	r4,2047
1000784c:	813f431e 	bne	r16,r4,1000755c <__alt_data_end+0xf800755c>
10007850:	003f1706 	br	100074b0 <__alt_data_end+0xf80074b0>
10007854:	80bff844 	addi	r2,r16,-31
10007858:	00c00804 	movi	r3,32
1000785c:	9884d83a 	srl	r2,r19,r2
10007860:	28c05126 	beq	r5,r3,100079a8 <__subdf3+0x584>
10007864:	00c00fc4 	movi	r3,63
10007868:	1c21c83a 	sub	r16,r3,r16
1000786c:	9c26983a 	sll	r19,r19,r16
10007870:	9c62b03a 	or	r17,r19,r17
10007874:	8822c03a 	cmpne	r17,r17,zero
10007878:	88a2b03a 	or	r17,r17,r2
1000787c:	000b883a 	mov	r5,zero
10007880:	0021883a 	mov	r16,zero
10007884:	003fb406 	br	10007758 <__alt_data_end+0xf8007758>
10007888:	113ff804 	addi	r4,r2,-32
1000788c:	01c00804 	movi	r7,32
10007890:	1908d83a 	srl	r4,r3,r4
10007894:	11c04626 	beq	r2,r7,100079b0 <__subdf3+0x58c>
10007898:	01c01004 	movi	r7,64
1000789c:	3885c83a 	sub	r2,r7,r2
100078a0:	1884983a 	sll	r2,r3,r2
100078a4:	118cb03a 	or	r6,r2,r6
100078a8:	300cc03a 	cmpne	r6,r6,zero
100078ac:	310cb03a 	or	r6,r6,r4
100078b0:	0005883a 	mov	r2,zero
100078b4:	003f3606 	br	10007590 <__alt_data_end+0xf8007590>
100078b8:	80002b26 	beq	r16,zero,10007968 <__subdf3+0x544>
100078bc:	0101ffc4 	movi	r4,2047
100078c0:	51006926 	beq	r10,r4,10007a68 <__subdf3+0x644>
100078c4:	0085c83a 	sub	r2,zero,r2
100078c8:	29402034 	orhi	r5,r5,128
100078cc:	01000e04 	movi	r4,56
100078d0:	20807d16 	blt	r4,r2,10007ac8 <__subdf3+0x6a4>
100078d4:	010007c4 	movi	r4,31
100078d8:	2080d916 	blt	r4,r2,10007c40 <__subdf3+0x81c>
100078dc:	01000804 	movi	r4,32
100078e0:	2089c83a 	sub	r4,r4,r2
100078e4:	2912983a 	sll	r9,r5,r4
100078e8:	8890d83a 	srl	r8,r17,r2
100078ec:	8908983a 	sll	r4,r17,r4
100078f0:	2884d83a 	srl	r2,r5,r2
100078f4:	4a22b03a 	or	r17,r9,r8
100078f8:	2008c03a 	cmpne	r4,r4,zero
100078fc:	8922b03a 	or	r17,r17,r4
10007900:	3463c83a 	sub	r17,r6,r17
10007904:	1885c83a 	sub	r2,r3,r2
10007908:	344d803a 	cmpltu	r6,r6,r17
1000790c:	118bc83a 	sub	r5,r2,r6
10007910:	5021883a 	mov	r16,r10
10007914:	3825883a 	mov	r18,r7
10007918:	003f2206 	br	100075a4 <__alt_data_end+0xf80075a4>
1000791c:	9886b03a 	or	r3,r19,r2
10007920:	18001c1e 	bne	r3,zero,10007994 <__subdf3+0x570>
10007924:	0011883a 	mov	r8,zero
10007928:	000b883a 	mov	r5,zero
1000792c:	0023883a 	mov	r17,zero
10007930:	0021883a 	mov	r16,zero
10007934:	003f3e06 	br	10007630 <__alt_data_end+0xf8007630>
10007938:	010007c4 	movi	r4,31
1000793c:	20803c16 	blt	r4,r2,10007a30 <__subdf3+0x60c>
10007940:	01000804 	movi	r4,32
10007944:	2089c83a 	sub	r4,r4,r2
10007948:	1912983a 	sll	r9,r3,r4
1000794c:	308ed83a 	srl	r7,r6,r2
10007950:	3108983a 	sll	r4,r6,r4
10007954:	1884d83a 	srl	r2,r3,r2
10007958:	49ceb03a 	or	r7,r9,r7
1000795c:	2008c03a 	cmpne	r4,r4,zero
10007960:	390eb03a 	or	r7,r7,r4
10007964:	003f4706 	br	10007684 <__alt_data_end+0xf8007684>
10007968:	2c48b03a 	or	r4,r5,r17
1000796c:	20003e26 	beq	r4,zero,10007a68 <__subdf3+0x644>
10007970:	0084303a 	nor	r2,zero,r2
10007974:	10003a1e 	bne	r2,zero,10007a60 <__subdf3+0x63c>
10007978:	3463c83a 	sub	r17,r6,r17
1000797c:	194bc83a 	sub	r5,r3,r5
10007980:	344d803a 	cmpltu	r6,r6,r17
10007984:	298bc83a 	sub	r5,r5,r6
10007988:	5021883a 	mov	r16,r10
1000798c:	3825883a 	mov	r18,r7
10007990:	003f0406 	br	100075a4 <__alt_data_end+0xf80075a4>
10007994:	1023883a 	mov	r17,r2
10007998:	003f0706 	br	100075b8 <__alt_data_end+0xf80075b8>
1000799c:	0101ffc4 	movi	r4,2047
100079a0:	813f331e 	bne	r16,r4,10007670 <__alt_data_end+0xf8007670>
100079a4:	003ec206 	br	100074b0 <__alt_data_end+0xf80074b0>
100079a8:	0027883a 	mov	r19,zero
100079ac:	003fb006 	br	10007870 <__alt_data_end+0xf8007870>
100079b0:	0005883a 	mov	r2,zero
100079b4:	003fbb06 	br	100078a4 <__alt_data_end+0xf80078a4>
100079b8:	2c44b03a 	or	r2,r5,r17
100079bc:	80008b1e 	bne	r16,zero,10007bec <__subdf3+0x7c8>
100079c0:	1000b526 	beq	r2,zero,10007c98 <__subdf3+0x874>
100079c4:	1984b03a 	or	r2,r3,r6
100079c8:	103eb926 	beq	r2,zero,100074b0 <__alt_data_end+0xf80074b0>
100079cc:	3449883a 	add	r4,r6,r17
100079d0:	2463803a 	cmpltu	r17,r4,r17
100079d4:	194b883a 	add	r5,r3,r5
100079d8:	2c4b883a 	add	r5,r5,r17
100079dc:	2880202c 	andhi	r2,r5,128
100079e0:	2023883a 	mov	r17,r4
100079e4:	103f5c26 	beq	r2,zero,10007758 <__alt_data_end+0xf8007758>
100079e8:	00bfe034 	movhi	r2,65408
100079ec:	10bfffc4 	addi	r2,r2,-1
100079f0:	4821883a 	mov	r16,r9
100079f4:	288a703a 	and	r5,r5,r2
100079f8:	003ead06 	br	100074b0 <__alt_data_end+0xf80074b0>
100079fc:	2c44b03a 	or	r2,r5,r17
10007a00:	8000291e 	bne	r16,zero,10007aa8 <__subdf3+0x684>
10007a04:	10004f1e 	bne	r2,zero,10007b44 <__subdf3+0x720>
10007a08:	1984b03a 	or	r2,r3,r6
10007a0c:	10000426 	beq	r2,zero,10007a20 <__subdf3+0x5fc>
10007a10:	180b883a 	mov	r5,r3
10007a14:	3023883a 	mov	r17,r6
10007a18:	3825883a 	mov	r18,r7
10007a1c:	003ea406 	br	100074b0 <__alt_data_end+0xf80074b0>
10007a20:	0011883a 	mov	r8,zero
10007a24:	000b883a 	mov	r5,zero
10007a28:	0023883a 	mov	r17,zero
10007a2c:	003f0006 	br	10007630 <__alt_data_end+0xf8007630>
10007a30:	11fff804 	addi	r7,r2,-32
10007a34:	19c8d83a 	srl	r4,r3,r7
10007a38:	01c00804 	movi	r7,32
10007a3c:	11c07e26 	beq	r2,r7,10007c38 <__subdf3+0x814>
10007a40:	01c01004 	movi	r7,64
10007a44:	3885c83a 	sub	r2,r7,r2
10007a48:	1884983a 	sll	r2,r3,r2
10007a4c:	118cb03a 	or	r6,r2,r6
10007a50:	300ec03a 	cmpne	r7,r6,zero
10007a54:	390eb03a 	or	r7,r7,r4
10007a58:	0005883a 	mov	r2,zero
10007a5c:	003f0906 	br	10007684 <__alt_data_end+0xf8007684>
10007a60:	0101ffc4 	movi	r4,2047
10007a64:	513f991e 	bne	r10,r4,100078cc <__alt_data_end+0xf80078cc>
10007a68:	180b883a 	mov	r5,r3
10007a6c:	3023883a 	mov	r17,r6
10007a70:	5021883a 	mov	r16,r10
10007a74:	3825883a 	mov	r18,r7
10007a78:	003e8d06 	br	100074b0 <__alt_data_end+0xf80074b0>
10007a7c:	80001a1e 	bne	r16,zero,10007ae8 <__subdf3+0x6c4>
10007a80:	2c48b03a 	or	r4,r5,r17
10007a84:	20005526 	beq	r4,zero,10007bdc <__subdf3+0x7b8>
10007a88:	0084303a 	nor	r2,zero,r2
10007a8c:	1000511e 	bne	r2,zero,10007bd4 <__subdf3+0x7b0>
10007a90:	89a3883a 	add	r17,r17,r6
10007a94:	194b883a 	add	r5,r3,r5
10007a98:	898d803a 	cmpltu	r6,r17,r6
10007a9c:	298b883a 	add	r5,r5,r6
10007aa0:	5021883a 	mov	r16,r10
10007aa4:	003efc06 	br	10007698 <__alt_data_end+0xf8007698>
10007aa8:	1000341e 	bne	r2,zero,10007b7c <__subdf3+0x758>
10007aac:	1984b03a 	or	r2,r3,r6
10007ab0:	10006f26 	beq	r2,zero,10007c70 <__subdf3+0x84c>
10007ab4:	180b883a 	mov	r5,r3
10007ab8:	3023883a 	mov	r17,r6
10007abc:	3825883a 	mov	r18,r7
10007ac0:	0401ffc4 	movi	r16,2047
10007ac4:	003e7a06 	br	100074b0 <__alt_data_end+0xf80074b0>
10007ac8:	2c62b03a 	or	r17,r5,r17
10007acc:	8822c03a 	cmpne	r17,r17,zero
10007ad0:	0005883a 	mov	r2,zero
10007ad4:	003f8a06 	br	10007900 <__alt_data_end+0xf8007900>
10007ad8:	3821883a 	mov	r16,r7
10007adc:	000b883a 	mov	r5,zero
10007ae0:	0023883a 	mov	r17,zero
10007ae4:	003ed206 	br	10007630 <__alt_data_end+0xf8007630>
10007ae8:	0101ffc4 	movi	r4,2047
10007aec:	51003b26 	beq	r10,r4,10007bdc <__subdf3+0x7b8>
10007af0:	0085c83a 	sub	r2,zero,r2
10007af4:	29402034 	orhi	r5,r5,128
10007af8:	01000e04 	movi	r4,56
10007afc:	20806216 	blt	r4,r2,10007c88 <__subdf3+0x864>
10007b00:	010007c4 	movi	r4,31
10007b04:	20806b16 	blt	r4,r2,10007cb4 <__subdf3+0x890>
10007b08:	01000804 	movi	r4,32
10007b0c:	2089c83a 	sub	r4,r4,r2
10007b10:	2912983a 	sll	r9,r5,r4
10007b14:	888ed83a 	srl	r7,r17,r2
10007b18:	8908983a 	sll	r4,r17,r4
10007b1c:	2884d83a 	srl	r2,r5,r2
10007b20:	49e2b03a 	or	r17,r9,r7
10007b24:	2008c03a 	cmpne	r4,r4,zero
10007b28:	8922b03a 	or	r17,r17,r4
10007b2c:	89a3883a 	add	r17,r17,r6
10007b30:	10c5883a 	add	r2,r2,r3
10007b34:	898d803a 	cmpltu	r6,r17,r6
10007b38:	118b883a 	add	r5,r2,r6
10007b3c:	5021883a 	mov	r16,r10
10007b40:	003ed506 	br	10007698 <__alt_data_end+0xf8007698>
10007b44:	1984b03a 	or	r2,r3,r6
10007b48:	103e5926 	beq	r2,zero,100074b0 <__alt_data_end+0xf80074b0>
10007b4c:	8989c83a 	sub	r4,r17,r6
10007b50:	8911803a 	cmpltu	r8,r17,r4
10007b54:	28c5c83a 	sub	r2,r5,r3
10007b58:	1205c83a 	sub	r2,r2,r8
10007b5c:	1200202c 	andhi	r8,r2,128
10007b60:	403ef926 	beq	r8,zero,10007748 <__alt_data_end+0xf8007748>
10007b64:	3463c83a 	sub	r17,r6,r17
10007b68:	194bc83a 	sub	r5,r3,r5
10007b6c:	344d803a 	cmpltu	r6,r6,r17
10007b70:	298bc83a 	sub	r5,r5,r6
10007b74:	3825883a 	mov	r18,r7
10007b78:	003e4d06 	br	100074b0 <__alt_data_end+0xf80074b0>
10007b7c:	1984b03a 	or	r2,r3,r6
10007b80:	10002b26 	beq	r2,zero,10007c30 <__subdf3+0x80c>
10007b84:	2808d0fa 	srli	r4,r5,3
10007b88:	8822d0fa 	srli	r17,r17,3
10007b8c:	280a977a 	slli	r5,r5,29
10007b90:	2080022c 	andhi	r2,r4,8
10007b94:	2c62b03a 	or	r17,r5,r17
10007b98:	10000826 	beq	r2,zero,10007bbc <__subdf3+0x798>
10007b9c:	1810d0fa 	srli	r8,r3,3
10007ba0:	4080022c 	andhi	r2,r8,8
10007ba4:	1000051e 	bne	r2,zero,10007bbc <__subdf3+0x798>
10007ba8:	300cd0fa 	srli	r6,r6,3
10007bac:	1804977a 	slli	r2,r3,29
10007bb0:	4009883a 	mov	r4,r8
10007bb4:	3825883a 	mov	r18,r7
10007bb8:	11a2b03a 	or	r17,r2,r6
10007bbc:	880ad77a 	srli	r5,r17,29
10007bc0:	200890fa 	slli	r4,r4,3
10007bc4:	882290fa 	slli	r17,r17,3
10007bc8:	0401ffc4 	movi	r16,2047
10007bcc:	290ab03a 	or	r5,r5,r4
10007bd0:	003e3706 	br	100074b0 <__alt_data_end+0xf80074b0>
10007bd4:	0101ffc4 	movi	r4,2047
10007bd8:	513fc71e 	bne	r10,r4,10007af8 <__alt_data_end+0xf8007af8>
10007bdc:	180b883a 	mov	r5,r3
10007be0:	3023883a 	mov	r17,r6
10007be4:	5021883a 	mov	r16,r10
10007be8:	003e3106 	br	100074b0 <__alt_data_end+0xf80074b0>
10007bec:	10002d26 	beq	r2,zero,10007ca4 <__subdf3+0x880>
10007bf0:	1984b03a 	or	r2,r3,r6
10007bf4:	10000e26 	beq	r2,zero,10007c30 <__subdf3+0x80c>
10007bf8:	2808d0fa 	srli	r4,r5,3
10007bfc:	8822d0fa 	srli	r17,r17,3
10007c00:	280a977a 	slli	r5,r5,29
10007c04:	2080022c 	andhi	r2,r4,8
10007c08:	2c62b03a 	or	r17,r5,r17
10007c0c:	103feb26 	beq	r2,zero,10007bbc <__alt_data_end+0xf8007bbc>
10007c10:	180ed0fa 	srli	r7,r3,3
10007c14:	3880022c 	andhi	r2,r7,8
10007c18:	103fe81e 	bne	r2,zero,10007bbc <__alt_data_end+0xf8007bbc>
10007c1c:	300cd0fa 	srli	r6,r6,3
10007c20:	1804977a 	slli	r2,r3,29
10007c24:	3809883a 	mov	r4,r7
10007c28:	11a2b03a 	or	r17,r2,r6
10007c2c:	003fe306 	br	10007bbc <__alt_data_end+0xf8007bbc>
10007c30:	0401ffc4 	movi	r16,2047
10007c34:	003e1e06 	br	100074b0 <__alt_data_end+0xf80074b0>
10007c38:	0005883a 	mov	r2,zero
10007c3c:	003f8306 	br	10007a4c <__alt_data_end+0xf8007a4c>
10007c40:	113ff804 	addi	r4,r2,-32
10007c44:	02000804 	movi	r8,32
10007c48:	2908d83a 	srl	r4,r5,r4
10007c4c:	12002526 	beq	r2,r8,10007ce4 <__subdf3+0x8c0>
10007c50:	02001004 	movi	r8,64
10007c54:	4085c83a 	sub	r2,r8,r2
10007c58:	288a983a 	sll	r5,r5,r2
10007c5c:	2c62b03a 	or	r17,r5,r17
10007c60:	8822c03a 	cmpne	r17,r17,zero
10007c64:	8922b03a 	or	r17,r17,r4
10007c68:	0005883a 	mov	r2,zero
10007c6c:	003f2406 	br	10007900 <__alt_data_end+0xf8007900>
10007c70:	01402034 	movhi	r5,128
10007c74:	0011883a 	mov	r8,zero
10007c78:	297fffc4 	addi	r5,r5,-1
10007c7c:	047ffe04 	movi	r17,-8
10007c80:	0401ffc4 	movi	r16,2047
10007c84:	003e6a06 	br	10007630 <__alt_data_end+0xf8007630>
10007c88:	2c62b03a 	or	r17,r5,r17
10007c8c:	8822c03a 	cmpne	r17,r17,zero
10007c90:	0005883a 	mov	r2,zero
10007c94:	003fa506 	br	10007b2c <__alt_data_end+0xf8007b2c>
10007c98:	180b883a 	mov	r5,r3
10007c9c:	3023883a 	mov	r17,r6
10007ca0:	003e0306 	br	100074b0 <__alt_data_end+0xf80074b0>
10007ca4:	180b883a 	mov	r5,r3
10007ca8:	3023883a 	mov	r17,r6
10007cac:	0401ffc4 	movi	r16,2047
10007cb0:	003dff06 	br	100074b0 <__alt_data_end+0xf80074b0>
10007cb4:	113ff804 	addi	r4,r2,-32
10007cb8:	01c00804 	movi	r7,32
10007cbc:	2908d83a 	srl	r4,r5,r4
10007cc0:	11c00a26 	beq	r2,r7,10007cec <__subdf3+0x8c8>
10007cc4:	01c01004 	movi	r7,64
10007cc8:	3885c83a 	sub	r2,r7,r2
10007ccc:	288a983a 	sll	r5,r5,r2
10007cd0:	2c62b03a 	or	r17,r5,r17
10007cd4:	8822c03a 	cmpne	r17,r17,zero
10007cd8:	8922b03a 	or	r17,r17,r4
10007cdc:	0005883a 	mov	r2,zero
10007ce0:	003f9206 	br	10007b2c <__alt_data_end+0xf8007b2c>
10007ce4:	000b883a 	mov	r5,zero
10007ce8:	003fdc06 	br	10007c5c <__alt_data_end+0xf8007c5c>
10007cec:	000b883a 	mov	r5,zero
10007cf0:	003ff706 	br	10007cd0 <__alt_data_end+0xf8007cd0>

10007cf4 <__fixdfsi>:
10007cf4:	2806d53a 	srli	r3,r5,20
10007cf8:	00800434 	movhi	r2,16
10007cfc:	10bfffc4 	addi	r2,r2,-1
10007d00:	18c1ffcc 	andi	r3,r3,2047
10007d04:	0180ff84 	movi	r6,1022
10007d08:	2884703a 	and	r2,r5,r2
10007d0c:	280ad7fa 	srli	r5,r5,31
10007d10:	30c0130e 	bge	r6,r3,10007d60 <__fixdfsi+0x6c>
10007d14:	01810744 	movi	r6,1053
10007d18:	30c00d16 	blt	r6,r3,10007d50 <__fixdfsi+0x5c>
10007d1c:	01810cc4 	movi	r6,1075
10007d20:	30cdc83a 	sub	r6,r6,r3
10007d24:	01c007c4 	movi	r7,31
10007d28:	10800434 	orhi	r2,r2,16
10007d2c:	39800e0e 	bge	r7,r6,10007d68 <__fixdfsi+0x74>
10007d30:	010104c4 	movi	r4,1043
10007d34:	20c7c83a 	sub	r3,r4,r3
10007d38:	10c6d83a 	srl	r3,r2,r3
10007d3c:	29403fcc 	andi	r5,r5,255
10007d40:	0145c83a 	sub	r2,zero,r5
10007d44:	1884f03a 	xor	r2,r3,r2
10007d48:	1145883a 	add	r2,r2,r5
10007d4c:	f800283a 	ret
10007d50:	00a00034 	movhi	r2,32768
10007d54:	10bfffc4 	addi	r2,r2,-1
10007d58:	2885883a 	add	r2,r5,r2
10007d5c:	f800283a 	ret
10007d60:	0005883a 	mov	r2,zero
10007d64:	f800283a 	ret
10007d68:	18fefb44 	addi	r3,r3,-1043
10007d6c:	2188d83a 	srl	r4,r4,r6
10007d70:	10c6983a 	sll	r3,r2,r3
10007d74:	20c6b03a 	or	r3,r4,r3
10007d78:	003ff006 	br	10007d3c <__alt_data_end+0xf8007d3c>

10007d7c <__floatsidf>:
10007d7c:	defffd04 	addi	sp,sp,-12
10007d80:	dc400115 	stw	r17,4(sp)
10007d84:	dfc00215 	stw	ra,8(sp)
10007d88:	dc000015 	stw	r16,0(sp)
10007d8c:	2023883a 	mov	r17,r4
10007d90:	20001426 	beq	r4,zero,10007de4 <__floatsidf+0x68>
10007d94:	2020d7fa 	srli	r16,r4,31
10007d98:	80000126 	beq	r16,zero,10007da0 <__floatsidf+0x24>
10007d9c:	0123c83a 	sub	r17,zero,r4
10007da0:	8809883a 	mov	r4,r17
10007da4:	0007e4c0 	call	10007e4c <__clzsi2>
10007da8:	01410784 	movi	r5,1054
10007dac:	00c00284 	movi	r3,10
10007db0:	288bc83a 	sub	r5,r5,r2
10007db4:	18801c16 	blt	r3,r2,10007e28 <__floatsidf+0xac>
10007db8:	00c002c4 	movi	r3,11
10007dbc:	1887c83a 	sub	r3,r3,r2
10007dc0:	88c8d83a 	srl	r4,r17,r3
10007dc4:	00c00434 	movhi	r3,16
10007dc8:	18ffffc4 	addi	r3,r3,-1
10007dcc:	10800544 	addi	r2,r2,21
10007dd0:	20c8703a 	and	r4,r4,r3
10007dd4:	8884983a 	sll	r2,r17,r2
10007dd8:	28c1ffcc 	andi	r3,r5,2047
10007ddc:	800d883a 	mov	r6,r16
10007de0:	00000406 	br	10007df4 <__floatsidf+0x78>
10007de4:	000d883a 	mov	r6,zero
10007de8:	0007883a 	mov	r3,zero
10007dec:	0009883a 	mov	r4,zero
10007df0:	0005883a 	mov	r2,zero
10007df4:	180a953a 	slli	r5,r3,20
10007df8:	31803fcc 	andi	r6,r6,255
10007dfc:	00c00434 	movhi	r3,16
10007e00:	300c97fa 	slli	r6,r6,31
10007e04:	18ffffc4 	addi	r3,r3,-1
10007e08:	20c6703a 	and	r3,r4,r3
10007e0c:	1946b03a 	or	r3,r3,r5
10007e10:	1986b03a 	or	r3,r3,r6
10007e14:	dfc00217 	ldw	ra,8(sp)
10007e18:	dc400117 	ldw	r17,4(sp)
10007e1c:	dc000017 	ldw	r16,0(sp)
10007e20:	dec00304 	addi	sp,sp,12
10007e24:	f800283a 	ret
10007e28:	10fffd44 	addi	r3,r2,-11
10007e2c:	88c8983a 	sll	r4,r17,r3
10007e30:	00800434 	movhi	r2,16
10007e34:	10bfffc4 	addi	r2,r2,-1
10007e38:	2088703a 	and	r4,r4,r2
10007e3c:	28c1ffcc 	andi	r3,r5,2047
10007e40:	800d883a 	mov	r6,r16
10007e44:	0005883a 	mov	r2,zero
10007e48:	003fea06 	br	10007df4 <__alt_data_end+0xf8007df4>

10007e4c <__clzsi2>:
10007e4c:	00bfffd4 	movui	r2,65535
10007e50:	11000b36 	bltu	r2,r4,10007e80 <__clzsi2+0x34>
10007e54:	00803fc4 	movi	r2,255
10007e58:	1100122e 	bgeu	r2,r4,10007ea4 <__clzsi2+0x58>
10007e5c:	00c00204 	movi	r3,8
10007e60:	01400604 	movi	r5,24
10007e64:	20c8d83a 	srl	r4,r4,r3
10007e68:	00840074 	movhi	r2,4097
10007e6c:	10949904 	addi	r2,r2,21092
10007e70:	1109883a 	add	r4,r2,r4
10007e74:	20800003 	ldbu	r2,0(r4)
10007e78:	2885c83a 	sub	r2,r5,r2
10007e7c:	f800283a 	ret
10007e80:	00804034 	movhi	r2,256
10007e84:	10bfffc4 	addi	r2,r2,-1
10007e88:	11000336 	bltu	r2,r4,10007e98 <__clzsi2+0x4c>
10007e8c:	00c00404 	movi	r3,16
10007e90:	180b883a 	mov	r5,r3
10007e94:	003ff306 	br	10007e64 <__alt_data_end+0xf8007e64>
10007e98:	00c00604 	movi	r3,24
10007e9c:	01400204 	movi	r5,8
10007ea0:	003ff006 	br	10007e64 <__alt_data_end+0xf8007e64>
10007ea4:	0007883a 	mov	r3,zero
10007ea8:	01400804 	movi	r5,32
10007eac:	003fed06 	br	10007e64 <__alt_data_end+0xf8007e64>

10007eb0 <__errno>:
10007eb0:	00840074 	movhi	r2,4097
10007eb4:	109c0604 	addi	r2,r2,28696
10007eb8:	10800017 	ldw	r2,0(r2)
10007ebc:	f800283a 	ret

10007ec0 <_printf_r>:
10007ec0:	defffd04 	addi	sp,sp,-12
10007ec4:	dfc00015 	stw	ra,0(sp)
10007ec8:	d9800115 	stw	r6,4(sp)
10007ecc:	d9c00215 	stw	r7,8(sp)
10007ed0:	280d883a 	mov	r6,r5
10007ed4:	21400217 	ldw	r5,8(r4)
10007ed8:	d9c00104 	addi	r7,sp,4
10007edc:	000808c0 	call	1000808c <___vfprintf_internal_r>
10007ee0:	dfc00017 	ldw	ra,0(sp)
10007ee4:	dec00304 	addi	sp,sp,12
10007ee8:	f800283a 	ret

10007eec <printf>:
10007eec:	defffc04 	addi	sp,sp,-16
10007ef0:	dfc00015 	stw	ra,0(sp)
10007ef4:	d9400115 	stw	r5,4(sp)
10007ef8:	d9800215 	stw	r6,8(sp)
10007efc:	d9c00315 	stw	r7,12(sp)
10007f00:	00840074 	movhi	r2,4097
10007f04:	109c0604 	addi	r2,r2,28696
10007f08:	10800017 	ldw	r2,0(r2)
10007f0c:	200b883a 	mov	r5,r4
10007f10:	d9800104 	addi	r6,sp,4
10007f14:	11000217 	ldw	r4,8(r2)
10007f18:	000a1880 	call	1000a188 <__vfprintf_internal>
10007f1c:	dfc00017 	ldw	ra,0(sp)
10007f20:	dec00404 	addi	sp,sp,16
10007f24:	f800283a 	ret

10007f28 <_puts_r>:
10007f28:	defff604 	addi	sp,sp,-40
10007f2c:	dc000715 	stw	r16,28(sp)
10007f30:	2021883a 	mov	r16,r4
10007f34:	2809883a 	mov	r4,r5
10007f38:	dc400815 	stw	r17,32(sp)
10007f3c:	dfc00915 	stw	ra,36(sp)
10007f40:	2823883a 	mov	r17,r5
10007f44:	0007ff40 	call	10007ff4 <strlen>
10007f48:	00c40074 	movhi	r3,4097
10007f4c:	18dc0604 	addi	r3,r3,28696
10007f50:	18c00017 	ldw	r3,0(r3)
10007f54:	11000044 	addi	r4,r2,1
10007f58:	d8800115 	stw	r2,4(sp)
10007f5c:	18c00217 	ldw	r3,8(r3)
10007f60:	01440074 	movhi	r5,4097
10007f64:	2954da04 	addi	r5,r5,21352
10007f68:	1880030b 	ldhu	r2,12(r3)
10007f6c:	d9400215 	stw	r5,8(sp)
10007f70:	d9000615 	stw	r4,24(sp)
10007f74:	01400044 	movi	r5,1
10007f78:	01000084 	movi	r4,2
10007f7c:	d9000515 	stw	r4,20(sp)
10007f80:	dc400015 	stw	r17,0(sp)
10007f84:	d9400315 	stw	r5,12(sp)
10007f88:	dec00415 	stw	sp,16(sp)
10007f8c:	1108000c 	andi	r4,r2,8192
10007f90:	2000061e 	bne	r4,zero,10007fac <_puts_r+0x84>
10007f94:	19401917 	ldw	r5,100(r3)
10007f98:	0137ffc4 	movi	r4,-8193
10007f9c:	10880014 	ori	r2,r2,8192
10007fa0:	2908703a 	and	r4,r5,r4
10007fa4:	1880030d 	sth	r2,12(r3)
10007fa8:	19001915 	stw	r4,100(r3)
10007fac:	81400217 	ldw	r5,8(r16)
10007fb0:	8009883a 	mov	r4,r16
10007fb4:	d9800404 	addi	r6,sp,16
10007fb8:	000c64c0 	call	1000c64c <__sfvwrite_r>
10007fbc:	1000061e 	bne	r2,zero,10007fd8 <_puts_r+0xb0>
10007fc0:	00800284 	movi	r2,10
10007fc4:	dfc00917 	ldw	ra,36(sp)
10007fc8:	dc400817 	ldw	r17,32(sp)
10007fcc:	dc000717 	ldw	r16,28(sp)
10007fd0:	dec00a04 	addi	sp,sp,40
10007fd4:	f800283a 	ret
10007fd8:	00bfffc4 	movi	r2,-1
10007fdc:	003ff906 	br	10007fc4 <__alt_data_end+0xf8007fc4>

10007fe0 <puts>:
10007fe0:	00840074 	movhi	r2,4097
10007fe4:	109c0604 	addi	r2,r2,28696
10007fe8:	200b883a 	mov	r5,r4
10007fec:	11000017 	ldw	r4,0(r2)
10007ff0:	0007f281 	jmpi	10007f28 <_puts_r>

10007ff4 <strlen>:
10007ff4:	208000cc 	andi	r2,r4,3
10007ff8:	10002026 	beq	r2,zero,1000807c <strlen+0x88>
10007ffc:	20800007 	ldb	r2,0(r4)
10008000:	10002026 	beq	r2,zero,10008084 <strlen+0x90>
10008004:	2005883a 	mov	r2,r4
10008008:	00000206 	br	10008014 <strlen+0x20>
1000800c:	10c00007 	ldb	r3,0(r2)
10008010:	18001826 	beq	r3,zero,10008074 <strlen+0x80>
10008014:	10800044 	addi	r2,r2,1
10008018:	10c000cc 	andi	r3,r2,3
1000801c:	183ffb1e 	bne	r3,zero,1000800c <__alt_data_end+0xf800800c>
10008020:	10c00017 	ldw	r3,0(r2)
10008024:	01ffbff4 	movhi	r7,65279
10008028:	39ffbfc4 	addi	r7,r7,-257
1000802c:	00ca303a 	nor	r5,zero,r3
10008030:	01a02074 	movhi	r6,32897
10008034:	19c7883a 	add	r3,r3,r7
10008038:	31a02004 	addi	r6,r6,-32640
1000803c:	1946703a 	and	r3,r3,r5
10008040:	1986703a 	and	r3,r3,r6
10008044:	1800091e 	bne	r3,zero,1000806c <strlen+0x78>
10008048:	10800104 	addi	r2,r2,4
1000804c:	10c00017 	ldw	r3,0(r2)
10008050:	19cb883a 	add	r5,r3,r7
10008054:	00c6303a 	nor	r3,zero,r3
10008058:	28c6703a 	and	r3,r5,r3
1000805c:	1986703a 	and	r3,r3,r6
10008060:	183ff926 	beq	r3,zero,10008048 <__alt_data_end+0xf8008048>
10008064:	00000106 	br	1000806c <strlen+0x78>
10008068:	10800044 	addi	r2,r2,1
1000806c:	10c00007 	ldb	r3,0(r2)
10008070:	183ffd1e 	bne	r3,zero,10008068 <__alt_data_end+0xf8008068>
10008074:	1105c83a 	sub	r2,r2,r4
10008078:	f800283a 	ret
1000807c:	2005883a 	mov	r2,r4
10008080:	003fe706 	br	10008020 <__alt_data_end+0xf8008020>
10008084:	0005883a 	mov	r2,zero
10008088:	f800283a 	ret

1000808c <___vfprintf_internal_r>:
1000808c:	defeb604 	addi	sp,sp,-1320
10008090:	dfc14915 	stw	ra,1316(sp)
10008094:	ddc14715 	stw	r23,1308(sp)
10008098:	dd814615 	stw	r22,1304(sp)
1000809c:	202f883a 	mov	r23,r4
100080a0:	282d883a 	mov	r22,r5
100080a4:	d9812a15 	stw	r6,1192(sp)
100080a8:	d9c12d15 	stw	r7,1204(sp)
100080ac:	df014815 	stw	fp,1312(sp)
100080b0:	dd414515 	stw	r21,1300(sp)
100080b4:	dd014415 	stw	r20,1296(sp)
100080b8:	dcc14315 	stw	r19,1292(sp)
100080bc:	dc814215 	stw	r18,1288(sp)
100080c0:	dc414115 	stw	r17,1284(sp)
100080c4:	dc014015 	stw	r16,1280(sp)
100080c8:	000cd0c0 	call	1000cd0c <_localeconv_r>
100080cc:	10800017 	ldw	r2,0(r2)
100080d0:	1009883a 	mov	r4,r2
100080d4:	d8813515 	stw	r2,1236(sp)
100080d8:	0007ff40 	call	10007ff4 <strlen>
100080dc:	d8813815 	stw	r2,1248(sp)
100080e0:	b8000226 	beq	r23,zero,100080ec <___vfprintf_internal_r+0x60>
100080e4:	b8800e17 	ldw	r2,56(r23)
100080e8:	10010526 	beq	r2,zero,10008500 <___vfprintf_internal_r+0x474>
100080ec:	b0c0030b 	ldhu	r3,12(r22)
100080f0:	1908000c 	andi	r4,r3,8192
100080f4:	1805883a 	mov	r2,r3
100080f8:	2000071e 	bne	r4,zero,10008118 <___vfprintf_internal_r+0x8c>
100080fc:	b1001917 	ldw	r4,100(r22)
10008100:	18880014 	ori	r2,r3,8192
10008104:	00f7ffc4 	movi	r3,-8193
10008108:	20c8703a 	and	r4,r4,r3
1000810c:	b080030d 	sth	r2,12(r22)
10008110:	1007883a 	mov	r3,r2
10008114:	b1001915 	stw	r4,100(r22)
10008118:	1100020c 	andi	r4,r2,8
1000811c:	2000a826 	beq	r4,zero,100083c0 <___vfprintf_internal_r+0x334>
10008120:	b1000417 	ldw	r4,16(r22)
10008124:	2000a626 	beq	r4,zero,100083c0 <___vfprintf_internal_r+0x334>
10008128:	1080068c 	andi	r2,r2,26
1000812c:	01000284 	movi	r4,10
10008130:	1100ac26 	beq	r2,r4,100083e4 <___vfprintf_internal_r+0x358>
10008134:	d8c10e04 	addi	r3,sp,1080
10008138:	d9010dc4 	addi	r4,sp,1079
1000813c:	d9400404 	addi	r5,sp,16
10008140:	05040074 	movhi	r20,4097
10008144:	1905c83a 	sub	r2,r3,r4
10008148:	a514eb84 	addi	r20,r20,21422
1000814c:	d8c12815 	stw	r3,1184(sp)
10008150:	d9012915 	stw	r4,1188(sp)
10008154:	d9411e15 	stw	r5,1144(sp)
10008158:	d8012015 	stw	zero,1152(sp)
1000815c:	d8011f15 	stw	zero,1148(sp)
10008160:	d8013315 	stw	zero,1228(sp)
10008164:	d8013715 	stw	zero,1244(sp)
10008168:	d8013915 	stw	zero,1252(sp)
1000816c:	d8013b15 	stw	zero,1260(sp)
10008170:	d8013a15 	stw	zero,1256(sp)
10008174:	d8012f15 	stw	zero,1212(sp)
10008178:	2811883a 	mov	r8,r5
1000817c:	d8813c15 	stw	r2,1264(sp)
10008180:	d8c12a17 	ldw	r3,1192(sp)
10008184:	18800007 	ldb	r2,0(r3)
10008188:	10021326 	beq	r2,zero,100089d8 <___vfprintf_internal_r+0x94c>
1000818c:	00c00944 	movi	r3,37
10008190:	dc012a17 	ldw	r16,1192(sp)
10008194:	10c0021e 	bne	r2,r3,100081a0 <___vfprintf_internal_r+0x114>
10008198:	00001606 	br	100081f4 <___vfprintf_internal_r+0x168>
1000819c:	10c08526 	beq	r2,r3,100083b4 <___vfprintf_internal_r+0x328>
100081a0:	84000044 	addi	r16,r16,1
100081a4:	80800007 	ldb	r2,0(r16)
100081a8:	103ffc1e 	bne	r2,zero,1000819c <__alt_data_end+0xf800819c>
100081ac:	d9012a17 	ldw	r4,1192(sp)
100081b0:	8123c83a 	sub	r17,r16,r4
100081b4:	88000f26 	beq	r17,zero,100081f4 <___vfprintf_internal_r+0x168>
100081b8:	d8812a17 	ldw	r2,1192(sp)
100081bc:	d8c12017 	ldw	r3,1152(sp)
100081c0:	44400115 	stw	r17,4(r8)
100081c4:	40800015 	stw	r2,0(r8)
100081c8:	d8811f17 	ldw	r2,1148(sp)
100081cc:	1c47883a 	add	r3,r3,r17
100081d0:	d8c12015 	stw	r3,1152(sp)
100081d4:	10800044 	addi	r2,r2,1
100081d8:	d8811f15 	stw	r2,1148(sp)
100081dc:	00c001c4 	movi	r3,7
100081e0:	1880b516 	blt	r3,r2,100084b8 <___vfprintf_internal_r+0x42c>
100081e4:	42000204 	addi	r8,r8,8
100081e8:	d8c12f17 	ldw	r3,1212(sp)
100081ec:	1c47883a 	add	r3,r3,r17
100081f0:	d8c12f15 	stw	r3,1212(sp)
100081f4:	80800007 	ldb	r2,0(r16)
100081f8:	1000b626 	beq	r2,zero,100084d4 <___vfprintf_internal_r+0x448>
100081fc:	80800044 	addi	r2,r16,1
10008200:	84000047 	ldb	r16,1(r16)
10008204:	0027883a 	mov	r19,zero
10008208:	0039883a 	mov	fp,zero
1000820c:	dcc12b05 	stb	r19,1196(sp)
10008210:	d8012785 	stb	zero,1182(sp)
10008214:	027fffc4 	movi	r9,-1
10008218:	d8012e15 	stw	zero,1208(sp)
1000821c:	04401604 	movi	r17,88
10008220:	04800244 	movi	r18,9
10008224:	da012a15 	stw	r8,1192(sp)
10008228:	e027883a 	mov	r19,fp
1000822c:	17000044 	addi	fp,r2,1
10008230:	80bff804 	addi	r2,r16,-32
10008234:	88831236 	bltu	r17,r2,10008e80 <___vfprintf_internal_r+0xdf4>
10008238:	100490ba 	slli	r2,r2,2
1000823c:	01040074 	movhi	r4,4097
10008240:	21209404 	addi	r4,r4,-32176
10008244:	1105883a 	add	r2,r2,r4
10008248:	10800017 	ldw	r2,0(r2)
1000824c:	1000683a 	jmp	r2
10008250:	10008d9c 	xori	zero,r2,566
10008254:	10008e80 	call	110008e8 <_gp+0xfe18d8>
10008258:	10008e80 	call	110008e8 <_gp+0xfe18d8>
1000825c:	10008db8 	rdprs	zero,r2,566
10008260:	10008e80 	call	110008e8 <_gp+0xfe18d8>
10008264:	10008e80 	call	110008e8 <_gp+0xfe18d8>
10008268:	10008e80 	call	110008e8 <_gp+0xfe18d8>
1000826c:	10008e80 	call	110008e8 <_gp+0xfe18d8>
10008270:	10008e80 	call	110008e8 <_gp+0xfe18d8>
10008274:	10008e80 	call	110008e8 <_gp+0xfe18d8>
10008278:	10008dc8 	cmpgei	zero,r2,567
1000827c:	10008df0 	cmpltui	zero,r2,567
10008280:	10008e80 	call	110008e8 <_gp+0xfe18d8>
10008284:	1000850c 	andi	zero,r2,532
10008288:	1000851c 	xori	zero,r2,532
1000828c:	10008e80 	call	110008e8 <_gp+0xfe18d8>
10008290:	1000856c 	andhi	zero,r2,533
10008294:	1000857c 	xorhi	zero,r2,533
10008298:	1000857c 	xorhi	zero,r2,533
1000829c:	1000857c 	xorhi	zero,r2,533
100082a0:	1000857c 	xorhi	zero,r2,533
100082a4:	1000857c 	xorhi	zero,r2,533
100082a8:	1000857c 	xorhi	zero,r2,533
100082ac:	1000857c 	xorhi	zero,r2,533
100082b0:	1000857c 	xorhi	zero,r2,533
100082b4:	1000857c 	xorhi	zero,r2,533
100082b8:	10008e80 	call	110008e8 <_gp+0xfe18d8>
100082bc:	10008e80 	call	110008e8 <_gp+0xfe18d8>
100082c0:	10008e80 	call	110008e8 <_gp+0xfe18d8>
100082c4:	10008e80 	call	110008e8 <_gp+0xfe18d8>
100082c8:	10008e80 	call	110008e8 <_gp+0xfe18d8>
100082cc:	10008e80 	call	110008e8 <_gp+0xfe18d8>
100082d0:	10008e80 	call	110008e8 <_gp+0xfe18d8>
100082d4:	10008e80 	call	110008e8 <_gp+0xfe18d8>
100082d8:	10008e80 	call	110008e8 <_gp+0xfe18d8>
100082dc:	10008e80 	call	110008e8 <_gp+0xfe18d8>
100082e0:	100085c0 	call	1100085c <_gp+0xfe184c>
100082e4:	100089e0 	cmpeqi	zero,r2,551
100082e8:	10008e80 	call	110008e8 <_gp+0xfe18d8>
100082ec:	100089e0 	cmpeqi	zero,r2,551
100082f0:	10008e80 	call	110008e8 <_gp+0xfe18d8>
100082f4:	10008e80 	call	110008e8 <_gp+0xfe18d8>
100082f8:	10008e80 	call	110008e8 <_gp+0xfe18d8>
100082fc:	10008e80 	call	110008e8 <_gp+0xfe18d8>
10008300:	10008a88 	cmpgei	zero,r2,554
10008304:	10008e80 	call	110008e8 <_gp+0xfe18d8>
10008308:	10008e80 	call	110008e8 <_gp+0xfe18d8>
1000830c:	10008a98 	cmpnei	zero,r2,554
10008310:	10008e80 	call	110008e8 <_gp+0xfe18d8>
10008314:	10008e80 	call	110008e8 <_gp+0xfe18d8>
10008318:	10008e80 	call	110008e8 <_gp+0xfe18d8>
1000831c:	10008e80 	call	110008e8 <_gp+0xfe18d8>
10008320:	10008e80 	call	110008e8 <_gp+0xfe18d8>
10008324:	10008adc 	xori	zero,r2,555
10008328:	10008e80 	call	110008e8 <_gp+0xfe18d8>
1000832c:	10008e80 	call	110008e8 <_gp+0xfe18d8>
10008330:	10008b14 	ori	zero,r2,556
10008334:	10008e80 	call	110008e8 <_gp+0xfe18d8>
10008338:	10008e80 	call	110008e8 <_gp+0xfe18d8>
1000833c:	10008e80 	call	110008e8 <_gp+0xfe18d8>
10008340:	10008e80 	call	110008e8 <_gp+0xfe18d8>
10008344:	10008e80 	call	110008e8 <_gp+0xfe18d8>
10008348:	10008e80 	call	110008e8 <_gp+0xfe18d8>
1000834c:	10008e80 	call	110008e8 <_gp+0xfe18d8>
10008350:	10008e80 	call	110008e8 <_gp+0xfe18d8>
10008354:	10008e80 	call	110008e8 <_gp+0xfe18d8>
10008358:	10008e80 	call	110008e8 <_gp+0xfe18d8>
1000835c:	10008d50 	cmplti	zero,r2,565
10008360:	10008cfc 	xorhi	zero,r2,563
10008364:	100089e0 	cmpeqi	zero,r2,551
10008368:	100089e0 	cmpeqi	zero,r2,551
1000836c:	100089e0 	cmpeqi	zero,r2,551
10008370:	10008d40 	call	110008d4 <_gp+0xfe18c4>
10008374:	10008cfc 	xorhi	zero,r2,563
10008378:	10008e80 	call	110008e8 <_gp+0xfe18d8>
1000837c:	10008e80 	call	110008e8 <_gp+0xfe18d8>
10008380:	10008c18 	cmpnei	zero,r2,560
10008384:	10008e80 	call	110008e8 <_gp+0xfe18d8>
10008388:	10008c30 	cmpltui	zero,r2,560
1000838c:	10008c70 	cmpltui	zero,r2,561
10008390:	10008cb0 	cmpltui	zero,r2,562
10008394:	10008b7c 	xorhi	zero,r2,557
10008398:	10008e80 	call	110008e8 <_gp+0xfe18d8>
1000839c:	10008e04 	addi	zero,r2,568
100083a0:	10008e80 	call	110008e8 <_gp+0xfe18d8>
100083a4:	10008b8c 	andi	zero,r2,558
100083a8:	10008e80 	call	110008e8 <_gp+0xfe18d8>
100083ac:	10008e80 	call	110008e8 <_gp+0xfe18d8>
100083b0:	10008bcc 	andi	zero,r2,559
100083b4:	d9412a17 	ldw	r5,1192(sp)
100083b8:	8163c83a 	sub	r17,r16,r5
100083bc:	003f7d06 	br	100081b4 <__alt_data_end+0xf80081b4>
100083c0:	b809883a 	mov	r4,r23
100083c4:	b00b883a 	mov	r5,r22
100083c8:	000a1ac0 	call	1000a1ac <__swsetup_r>
100083cc:	10002d1e 	bne	r2,zero,10008484 <___vfprintf_internal_r+0x3f8>
100083d0:	b0c0030b 	ldhu	r3,12(r22)
100083d4:	01000284 	movi	r4,10
100083d8:	1805883a 	mov	r2,r3
100083dc:	1080068c 	andi	r2,r2,26
100083e0:	113f541e 	bne	r2,r4,10008134 <__alt_data_end+0xf8008134>
100083e4:	b080038b 	ldhu	r2,14(r22)
100083e8:	113fffcc 	andi	r4,r2,65535
100083ec:	2120001c 	xori	r4,r4,32768
100083f0:	21200004 	addi	r4,r4,-32768
100083f4:	203f4f16 	blt	r4,zero,10008134 <__alt_data_end+0xf8008134>
100083f8:	b2c01917 	ldw	r11,100(r22)
100083fc:	b2800717 	ldw	r10,28(r22)
10008400:	b2400917 	ldw	r9,36(r22)
10008404:	d9812a17 	ldw	r6,1192(sp)
10008408:	d9c12d17 	ldw	r7,1204(sp)
1000840c:	02010004 	movi	r8,1024
10008410:	18ffff4c 	andi	r3,r3,65533
10008414:	d881078d 	sth	r2,1054(sp)
10008418:	b809883a 	mov	r4,r23
1000841c:	d8800404 	addi	r2,sp,16
10008420:	d9410404 	addi	r5,sp,1040
10008424:	d8c1070d 	sth	r3,1052(sp)
10008428:	dac11d15 	stw	r11,1140(sp)
1000842c:	da810b15 	stw	r10,1068(sp)
10008430:	da410d15 	stw	r9,1076(sp)
10008434:	d8810415 	stw	r2,1040(sp)
10008438:	d8810815 	stw	r2,1056(sp)
1000843c:	da010615 	stw	r8,1048(sp)
10008440:	da010915 	stw	r8,1060(sp)
10008444:	d8010a15 	stw	zero,1064(sp)
10008448:	000808c0 	call	1000808c <___vfprintf_internal_r>
1000844c:	1021883a 	mov	r16,r2
10008450:	10000416 	blt	r2,zero,10008464 <___vfprintf_internal_r+0x3d8>
10008454:	b809883a 	mov	r4,r23
10008458:	d9410404 	addi	r5,sp,1040
1000845c:	000bc2c0 	call	1000bc2c <_fflush_r>
10008460:	1007301e 	bne	r2,zero,1000a124 <___vfprintf_internal_r+0x2098>
10008464:	d881070b 	ldhu	r2,1052(sp)
10008468:	1080100c 	andi	r2,r2,64
1000846c:	10000326 	beq	r2,zero,1000847c <___vfprintf_internal_r+0x3f0>
10008470:	b080030b 	ldhu	r2,12(r22)
10008474:	10801014 	ori	r2,r2,64
10008478:	b080030d 	sth	r2,12(r22)
1000847c:	8005883a 	mov	r2,r16
10008480:	00000106 	br	10008488 <___vfprintf_internal_r+0x3fc>
10008484:	00bfffc4 	movi	r2,-1
10008488:	dfc14917 	ldw	ra,1316(sp)
1000848c:	df014817 	ldw	fp,1312(sp)
10008490:	ddc14717 	ldw	r23,1308(sp)
10008494:	dd814617 	ldw	r22,1304(sp)
10008498:	dd414517 	ldw	r21,1300(sp)
1000849c:	dd014417 	ldw	r20,1296(sp)
100084a0:	dcc14317 	ldw	r19,1292(sp)
100084a4:	dc814217 	ldw	r18,1288(sp)
100084a8:	dc414117 	ldw	r17,1284(sp)
100084ac:	dc014017 	ldw	r16,1280(sp)
100084b0:	dec14a04 	addi	sp,sp,1320
100084b4:	f800283a 	ret
100084b8:	b809883a 	mov	r4,r23
100084bc:	b00b883a 	mov	r5,r22
100084c0:	d9811e04 	addi	r6,sp,1144
100084c4:	000f4580 	call	1000f458 <__sprint_r>
100084c8:	1000081e 	bne	r2,zero,100084ec <___vfprintf_internal_r+0x460>
100084cc:	da000404 	addi	r8,sp,16
100084d0:	003f4506 	br	100081e8 <__alt_data_end+0xf80081e8>
100084d4:	d8812017 	ldw	r2,1152(sp)
100084d8:	10000426 	beq	r2,zero,100084ec <___vfprintf_internal_r+0x460>
100084dc:	b809883a 	mov	r4,r23
100084e0:	b00b883a 	mov	r5,r22
100084e4:	d9811e04 	addi	r6,sp,1144
100084e8:	000f4580 	call	1000f458 <__sprint_r>
100084ec:	b080030b 	ldhu	r2,12(r22)
100084f0:	1080100c 	andi	r2,r2,64
100084f4:	103fe31e 	bne	r2,zero,10008484 <__alt_data_end+0xf8008484>
100084f8:	d8812f17 	ldw	r2,1212(sp)
100084fc:	003fe206 	br	10008488 <__alt_data_end+0xf8008488>
10008500:	b809883a 	mov	r4,r23
10008504:	000c1e80 	call	1000c1e8 <__sinit>
10008508:	003ef806 	br	100080ec <__alt_data_end+0xf80080ec>
1000850c:	e005883a 	mov	r2,fp
10008510:	9cc00114 	ori	r19,r19,4
10008514:	e4000007 	ldb	r16,0(fp)
10008518:	003f4406 	br	1000822c <__alt_data_end+0xf800822c>
1000851c:	e4000007 	ldb	r16,0(fp)
10008520:	01000a84 	movi	r4,42
10008524:	e0800044 	addi	r2,fp,1
10008528:	8106f626 	beq	r16,r4,1000a104 <___vfprintf_internal_r+0x2078>
1000852c:	857ff404 	addi	r21,r16,-48
10008530:	1039883a 	mov	fp,r2
10008534:	0013883a 	mov	r9,zero
10008538:	957f3d36 	bltu	r18,r21,10008230 <__alt_data_end+0xf8008230>
1000853c:	0009883a 	mov	r4,zero
10008540:	01400284 	movi	r5,10
10008544:	00057300 	call	10005730 <__mulsi3>
10008548:	e4000007 	ldb	r16,0(fp)
1000854c:	a889883a 	add	r4,r21,r2
10008550:	e7000044 	addi	fp,fp,1
10008554:	857ff404 	addi	r21,r16,-48
10008558:	957ff92e 	bgeu	r18,r21,10008540 <__alt_data_end+0xf8008540>
1000855c:	2013883a 	mov	r9,r4
10008560:	203f330e 	bge	r4,zero,10008230 <__alt_data_end+0xf8008230>
10008564:	027fffc4 	movi	r9,-1
10008568:	003f3106 	br	10008230 <__alt_data_end+0xf8008230>
1000856c:	9cc02014 	ori	r19,r19,128
10008570:	e005883a 	mov	r2,fp
10008574:	e4000007 	ldb	r16,0(fp)
10008578:	003f2c06 	br	1000822c <__alt_data_end+0xf800822c>
1000857c:	857ff404 	addi	r21,r16,-48
10008580:	d8012e15 	stw	zero,1208(sp)
10008584:	e021883a 	mov	r16,fp
10008588:	0009883a 	mov	r4,zero
1000858c:	da412c15 	stw	r9,1200(sp)
10008590:	01400284 	movi	r5,10
10008594:	00057300 	call	10005730 <__mulsi3>
10008598:	81400007 	ldb	r5,0(r16)
1000859c:	1549883a 	add	r4,r2,r21
100085a0:	e7000044 	addi	fp,fp,1
100085a4:	2d7ff404 	addi	r21,r5,-48
100085a8:	e021883a 	mov	r16,fp
100085ac:	957ff82e 	bgeu	r18,r21,10008590 <__alt_data_end+0xf8008590>
100085b0:	2821883a 	mov	r16,r5
100085b4:	d9012e15 	stw	r4,1208(sp)
100085b8:	da412c17 	ldw	r9,1200(sp)
100085bc:	003f1c06 	br	10008230 <__alt_data_end+0xf8008230>
100085c0:	da012a17 	ldw	r8,1192(sp)
100085c4:	df012a15 	stw	fp,1192(sp)
100085c8:	9839883a 	mov	fp,r19
100085cc:	dcc12b03 	ldbu	r19,1196(sp)
100085d0:	e7000414 	ori	fp,fp,16
100085d4:	e080080c 	andi	r2,fp,32
100085d8:	dcc12785 	stb	r19,1182(sp)
100085dc:	d8c12d17 	ldw	r3,1204(sp)
100085e0:	1001ce26 	beq	r2,zero,10008d1c <___vfprintf_internal_r+0xc90>
100085e4:	d9012d17 	ldw	r4,1204(sp)
100085e8:	18800117 	ldw	r2,4(r3)
100085ec:	1c800017 	ldw	r18,0(r3)
100085f0:	21000204 	addi	r4,r4,8
100085f4:	d9012d15 	stw	r4,1204(sp)
100085f8:	102b883a 	mov	r21,r2
100085fc:	10044916 	blt	r2,zero,10009724 <___vfprintf_internal_r+0x1698>
10008600:	dcc12783 	ldbu	r19,1182(sp)
10008604:	da413215 	stw	r9,1224(sp)
10008608:	00800044 	movi	r2,1
1000860c:	9546b03a 	or	r3,r18,r21
10008610:	48000216 	blt	r9,zero,1000861c <___vfprintf_internal_r+0x590>
10008614:	013fdfc4 	movi	r4,-129
10008618:	e138703a 	and	fp,fp,r4
1000861c:	1802251e 	bne	r3,zero,10008eb4 <___vfprintf_internal_r+0xe28>
10008620:	48031726 	beq	r9,zero,10009280 <___vfprintf_internal_r+0x11f4>
10008624:	10803fcc 	andi	r2,r2,255
10008628:	00c00044 	movi	r3,1
1000862c:	10c24526 	beq	r2,r3,10008f44 <___vfprintf_internal_r+0xeb8>
10008630:	00c00084 	movi	r3,2
10008634:	10c33426 	beq	r2,r3,10009308 <___vfprintf_internal_r+0x127c>
10008638:	d8c10e04 	addi	r3,sp,1080
1000863c:	9008d0fa 	srli	r4,r18,3
10008640:	a80a977a 	slli	r5,r21,29
10008644:	a82ad0fa 	srli	r21,r21,3
10008648:	948001cc 	andi	r18,r18,7
1000864c:	90800c04 	addi	r2,r18,48
10008650:	18ffffc4 	addi	r3,r3,-1
10008654:	2924b03a 	or	r18,r5,r4
10008658:	18800005 	stb	r2,0(r3)
1000865c:	9548b03a 	or	r4,r18,r21
10008660:	203ff61e 	bne	r4,zero,1000863c <__alt_data_end+0xf800863c>
10008664:	e100004c 	andi	r4,fp,1
10008668:	d8c13115 	stw	r3,1220(sp)
1000866c:	20039a1e 	bne	r4,zero,100094d8 <___vfprintf_internal_r+0x144c>
10008670:	d8812817 	ldw	r2,1184(sp)
10008674:	10e3c83a 	sub	r17,r2,r3
10008678:	8805883a 	mov	r2,r17
1000867c:	8a40010e 	bge	r17,r9,10008684 <___vfprintf_internal_r+0x5f8>
10008680:	4805883a 	mov	r2,r9
10008684:	d8812b15 	stw	r2,1196(sp)
10008688:	d8013415 	stw	zero,1232(sp)
1000868c:	98803fcc 	andi	r2,r19,255
10008690:	1080201c 	xori	r2,r2,128
10008694:	10bfe004 	addi	r2,r2,-128
10008698:	10000326 	beq	r2,zero,100086a8 <___vfprintf_internal_r+0x61c>
1000869c:	d8c12b17 	ldw	r3,1196(sp)
100086a0:	18c00044 	addi	r3,r3,1
100086a4:	d8c12b15 	stw	r3,1196(sp)
100086a8:	e0c0008c 	andi	r3,fp,2
100086ac:	d8c12c15 	stw	r3,1200(sp)
100086b0:	18000326 	beq	r3,zero,100086c0 <___vfprintf_internal_r+0x634>
100086b4:	d8c12b17 	ldw	r3,1196(sp)
100086b8:	18c00084 	addi	r3,r3,2
100086bc:	d8c12b15 	stw	r3,1196(sp)
100086c0:	e0c0210c 	andi	r3,fp,132
100086c4:	d8c13015 	stw	r3,1216(sp)
100086c8:	1801f81e 	bne	r3,zero,10008eac <___vfprintf_internal_r+0xe20>
100086cc:	d9012e17 	ldw	r4,1208(sp)
100086d0:	d8c12b17 	ldw	r3,1196(sp)
100086d4:	20ebc83a 	sub	r21,r4,r3
100086d8:	0541f40e 	bge	zero,r21,10008eac <___vfprintf_internal_r+0xe20>
100086dc:	02400404 	movi	r9,16
100086e0:	d8c12017 	ldw	r3,1152(sp)
100086e4:	d8811f17 	ldw	r2,1148(sp)
100086e8:	4d45750e 	bge	r9,r21,10009cc0 <___vfprintf_internal_r+0x1c34>
100086ec:	01440074 	movhi	r5,4097
100086f0:	2954ef84 	addi	r5,r5,21438
100086f4:	d9413615 	stw	r5,1240(sp)
100086f8:	4827883a 	mov	r19,r9
100086fc:	048001c4 	movi	r18,7
10008700:	00000306 	br	10008710 <___vfprintf_internal_r+0x684>
10008704:	ad7ffc04 	addi	r21,r21,-16
10008708:	42000204 	addi	r8,r8,8
1000870c:	9d40130e 	bge	r19,r21,1000875c <___vfprintf_internal_r+0x6d0>
10008710:	01040074 	movhi	r4,4097
10008714:	18c00404 	addi	r3,r3,16
10008718:	10800044 	addi	r2,r2,1
1000871c:	2114ef84 	addi	r4,r4,21438
10008720:	41000015 	stw	r4,0(r8)
10008724:	44c00115 	stw	r19,4(r8)
10008728:	d8c12015 	stw	r3,1152(sp)
1000872c:	d8811f15 	stw	r2,1148(sp)
10008730:	90bff40e 	bge	r18,r2,10008704 <__alt_data_end+0xf8008704>
10008734:	b809883a 	mov	r4,r23
10008738:	b00b883a 	mov	r5,r22
1000873c:	d9811e04 	addi	r6,sp,1144
10008740:	000f4580 	call	1000f458 <__sprint_r>
10008744:	103f691e 	bne	r2,zero,100084ec <__alt_data_end+0xf80084ec>
10008748:	ad7ffc04 	addi	r21,r21,-16
1000874c:	d8c12017 	ldw	r3,1152(sp)
10008750:	d8811f17 	ldw	r2,1148(sp)
10008754:	da000404 	addi	r8,sp,16
10008758:	9d7fed16 	blt	r19,r21,10008710 <__alt_data_end+0xf8008710>
1000875c:	d9413617 	ldw	r5,1240(sp)
10008760:	a8c7883a 	add	r3,r21,r3
10008764:	10800044 	addi	r2,r2,1
10008768:	41400015 	stw	r5,0(r8)
1000876c:	45400115 	stw	r21,4(r8)
10008770:	d8c12015 	stw	r3,1152(sp)
10008774:	d8811f15 	stw	r2,1148(sp)
10008778:	010001c4 	movi	r4,7
1000877c:	20832b16 	blt	r4,r2,1000942c <___vfprintf_internal_r+0x13a0>
10008780:	d8812787 	ldb	r2,1182(sp)
10008784:	42000204 	addi	r8,r8,8
10008788:	10000c26 	beq	r2,zero,100087bc <___vfprintf_internal_r+0x730>
1000878c:	d8811f17 	ldw	r2,1148(sp)
10008790:	d9012784 	addi	r4,sp,1182
10008794:	18c00044 	addi	r3,r3,1
10008798:	10800044 	addi	r2,r2,1
1000879c:	41000015 	stw	r4,0(r8)
100087a0:	01000044 	movi	r4,1
100087a4:	41000115 	stw	r4,4(r8)
100087a8:	d8c12015 	stw	r3,1152(sp)
100087ac:	d8811f15 	stw	r2,1148(sp)
100087b0:	010001c4 	movi	r4,7
100087b4:	2082c416 	blt	r4,r2,100092c8 <___vfprintf_internal_r+0x123c>
100087b8:	42000204 	addi	r8,r8,8
100087bc:	d8812c17 	ldw	r2,1200(sp)
100087c0:	10000c26 	beq	r2,zero,100087f4 <___vfprintf_internal_r+0x768>
100087c4:	d8811f17 	ldw	r2,1148(sp)
100087c8:	d9012704 	addi	r4,sp,1180
100087cc:	18c00084 	addi	r3,r3,2
100087d0:	10800044 	addi	r2,r2,1
100087d4:	41000015 	stw	r4,0(r8)
100087d8:	01000084 	movi	r4,2
100087dc:	41000115 	stw	r4,4(r8)
100087e0:	d8c12015 	stw	r3,1152(sp)
100087e4:	d8811f15 	stw	r2,1148(sp)
100087e8:	010001c4 	movi	r4,7
100087ec:	2082be16 	blt	r4,r2,100092e8 <___vfprintf_internal_r+0x125c>
100087f0:	42000204 	addi	r8,r8,8
100087f4:	d9013017 	ldw	r4,1216(sp)
100087f8:	00802004 	movi	r2,128
100087fc:	20822026 	beq	r4,r2,10009080 <___vfprintf_internal_r+0xff4>
10008800:	d9413217 	ldw	r5,1224(sp)
10008804:	2c67c83a 	sub	r19,r5,r17
10008808:	04c0260e 	bge	zero,r19,100088a4 <___vfprintf_internal_r+0x818>
1000880c:	05400404 	movi	r21,16
10008810:	d8811f17 	ldw	r2,1148(sp)
10008814:	acc4720e 	bge	r21,r19,100099e0 <___vfprintf_internal_r+0x1954>
10008818:	01440074 	movhi	r5,4097
1000881c:	2954eb84 	addi	r5,r5,21422
10008820:	d9412c15 	stw	r5,1200(sp)
10008824:	048001c4 	movi	r18,7
10008828:	00000306 	br	10008838 <___vfprintf_internal_r+0x7ac>
1000882c:	9cfffc04 	addi	r19,r19,-16
10008830:	42000204 	addi	r8,r8,8
10008834:	acc0110e 	bge	r21,r19,1000887c <___vfprintf_internal_r+0x7f0>
10008838:	18c00404 	addi	r3,r3,16
1000883c:	10800044 	addi	r2,r2,1
10008840:	45000015 	stw	r20,0(r8)
10008844:	45400115 	stw	r21,4(r8)
10008848:	d8c12015 	stw	r3,1152(sp)
1000884c:	d8811f15 	stw	r2,1148(sp)
10008850:	90bff60e 	bge	r18,r2,1000882c <__alt_data_end+0xf800882c>
10008854:	b809883a 	mov	r4,r23
10008858:	b00b883a 	mov	r5,r22
1000885c:	d9811e04 	addi	r6,sp,1144
10008860:	000f4580 	call	1000f458 <__sprint_r>
10008864:	103f211e 	bne	r2,zero,100084ec <__alt_data_end+0xf80084ec>
10008868:	9cfffc04 	addi	r19,r19,-16
1000886c:	d8c12017 	ldw	r3,1152(sp)
10008870:	d8811f17 	ldw	r2,1148(sp)
10008874:	da000404 	addi	r8,sp,16
10008878:	acffef16 	blt	r21,r19,10008838 <__alt_data_end+0xf8008838>
1000887c:	d9012c17 	ldw	r4,1200(sp)
10008880:	1cc7883a 	add	r3,r3,r19
10008884:	10800044 	addi	r2,r2,1
10008888:	41000015 	stw	r4,0(r8)
1000888c:	44c00115 	stw	r19,4(r8)
10008890:	d8c12015 	stw	r3,1152(sp)
10008894:	d8811f15 	stw	r2,1148(sp)
10008898:	010001c4 	movi	r4,7
1000889c:	20828216 	blt	r4,r2,100092a8 <___vfprintf_internal_r+0x121c>
100088a0:	42000204 	addi	r8,r8,8
100088a4:	e080400c 	andi	r2,fp,256
100088a8:	1001ac1e 	bne	r2,zero,10008f5c <___vfprintf_internal_r+0xed0>
100088ac:	d8811f17 	ldw	r2,1148(sp)
100088b0:	d9413117 	ldw	r5,1220(sp)
100088b4:	1c47883a 	add	r3,r3,r17
100088b8:	10800044 	addi	r2,r2,1
100088bc:	41400015 	stw	r5,0(r8)
100088c0:	44400115 	stw	r17,4(r8)
100088c4:	d8c12015 	stw	r3,1152(sp)
100088c8:	d8811f15 	stw	r2,1148(sp)
100088cc:	010001c4 	movi	r4,7
100088d0:	20825d16 	blt	r4,r2,10009248 <___vfprintf_internal_r+0x11bc>
100088d4:	42000204 	addi	r8,r8,8
100088d8:	e080010c 	andi	r2,fp,4
100088dc:	10003126 	beq	r2,zero,100089a4 <___vfprintf_internal_r+0x918>
100088e0:	d8812e17 	ldw	r2,1208(sp)
100088e4:	d9012b17 	ldw	r4,1196(sp)
100088e8:	1121c83a 	sub	r16,r2,r4
100088ec:	04002d0e 	bge	zero,r16,100089a4 <___vfprintf_internal_r+0x918>
100088f0:	04400404 	movi	r17,16
100088f4:	d8811f17 	ldw	r2,1148(sp)
100088f8:	8c05340e 	bge	r17,r16,10009dcc <___vfprintf_internal_r+0x1d40>
100088fc:	01040074 	movhi	r4,4097
10008900:	2114ef84 	addi	r4,r4,21438
10008904:	d9013615 	stw	r4,1240(sp)
10008908:	048001c4 	movi	r18,7
1000890c:	00000306 	br	1000891c <___vfprintf_internal_r+0x890>
10008910:	843ffc04 	addi	r16,r16,-16
10008914:	42000204 	addi	r8,r8,8
10008918:	8c00130e 	bge	r17,r16,10008968 <___vfprintf_internal_r+0x8dc>
1000891c:	01440074 	movhi	r5,4097
10008920:	18c00404 	addi	r3,r3,16
10008924:	10800044 	addi	r2,r2,1
10008928:	2954ef84 	addi	r5,r5,21438
1000892c:	41400015 	stw	r5,0(r8)
10008930:	44400115 	stw	r17,4(r8)
10008934:	d8c12015 	stw	r3,1152(sp)
10008938:	d8811f15 	stw	r2,1148(sp)
1000893c:	90bff40e 	bge	r18,r2,10008910 <__alt_data_end+0xf8008910>
10008940:	b809883a 	mov	r4,r23
10008944:	b00b883a 	mov	r5,r22
10008948:	d9811e04 	addi	r6,sp,1144
1000894c:	000f4580 	call	1000f458 <__sprint_r>
10008950:	103ee61e 	bne	r2,zero,100084ec <__alt_data_end+0xf80084ec>
10008954:	843ffc04 	addi	r16,r16,-16
10008958:	d8c12017 	ldw	r3,1152(sp)
1000895c:	d8811f17 	ldw	r2,1148(sp)
10008960:	da000404 	addi	r8,sp,16
10008964:	8c3fed16 	blt	r17,r16,1000891c <__alt_data_end+0xf800891c>
10008968:	d9013617 	ldw	r4,1240(sp)
1000896c:	1c07883a 	add	r3,r3,r16
10008970:	10800044 	addi	r2,r2,1
10008974:	41000015 	stw	r4,0(r8)
10008978:	44000115 	stw	r16,4(r8)
1000897c:	d8c12015 	stw	r3,1152(sp)
10008980:	d8811f15 	stw	r2,1148(sp)
10008984:	010001c4 	movi	r4,7
10008988:	2080060e 	bge	r4,r2,100089a4 <___vfprintf_internal_r+0x918>
1000898c:	b809883a 	mov	r4,r23
10008990:	b00b883a 	mov	r5,r22
10008994:	d9811e04 	addi	r6,sp,1144
10008998:	000f4580 	call	1000f458 <__sprint_r>
1000899c:	103ed31e 	bne	r2,zero,100084ec <__alt_data_end+0xf80084ec>
100089a0:	d8c12017 	ldw	r3,1152(sp)
100089a4:	df012b17 	ldw	fp,1196(sp)
100089a8:	d9412e17 	ldw	r5,1208(sp)
100089ac:	e140010e 	bge	fp,r5,100089b4 <___vfprintf_internal_r+0x928>
100089b0:	2839883a 	mov	fp,r5
100089b4:	d8812f17 	ldw	r2,1212(sp)
100089b8:	1705883a 	add	r2,r2,fp
100089bc:	d8812f15 	stw	r2,1212(sp)
100089c0:	1802291e 	bne	r3,zero,10009268 <___vfprintf_internal_r+0x11dc>
100089c4:	d8c12a17 	ldw	r3,1192(sp)
100089c8:	d8011f15 	stw	zero,1148(sp)
100089cc:	da000404 	addi	r8,sp,16
100089d0:	18800007 	ldb	r2,0(r3)
100089d4:	103ded1e 	bne	r2,zero,1000818c <__alt_data_end+0xf800818c>
100089d8:	dc012a17 	ldw	r16,1192(sp)
100089dc:	003e0506 	br	100081f4 <__alt_data_end+0xf80081f4>
100089e0:	d9012d17 	ldw	r4,1204(sp)
100089e4:	d9412d17 	ldw	r5,1204(sp)
100089e8:	da012a17 	ldw	r8,1192(sp)
100089ec:	21000017 	ldw	r4,0(r4)
100089f0:	29400117 	ldw	r5,4(r5)
100089f4:	df012a15 	stw	fp,1192(sp)
100089f8:	9839883a 	mov	fp,r19
100089fc:	dcc12b03 	ldbu	r19,1196(sp)
10008a00:	d9013715 	stw	r4,1244(sp)
10008a04:	d9413915 	stw	r5,1252(sp)
10008a08:	da013f15 	stw	r8,1276(sp)
10008a0c:	da413e15 	stw	r9,1272(sp)
10008a10:	dcc12785 	stb	r19,1182(sp)
10008a14:	00053a00 	call	100053a0 <__fpclassifyd>
10008a18:	d8c12d17 	ldw	r3,1204(sp)
10008a1c:	04400044 	movi	r17,1
10008a20:	da013f17 	ldw	r8,1276(sp)
10008a24:	1c800204 	addi	r18,r3,8
10008a28:	da413e17 	ldw	r9,1272(sp)
10008a2c:	d9013717 	ldw	r4,1244(sp)
10008a30:	d9413917 	ldw	r5,1252(sp)
10008a34:	1443451e 	bne	r2,r17,1000974c <___vfprintf_internal_r+0x16c0>
10008a38:	000d883a 	mov	r6,zero
10008a3c:	000f883a 	mov	r7,zero
10008a40:	0006ad80 	call	10006ad8 <__ledf2>
10008a44:	da013f17 	ldw	r8,1276(sp)
10008a48:	1004fe16 	blt	r2,zero,10009e44 <___vfprintf_internal_r+0x1db8>
10008a4c:	dcc12783 	ldbu	r19,1182(sp)
10008a50:	008011c4 	movi	r2,71
10008a54:	14045d0e 	bge	r2,r16,10009bcc <___vfprintf_internal_r+0x1b40>
10008a58:	01440074 	movhi	r5,4097
10008a5c:	2954dc04 	addi	r5,r5,21360
10008a60:	d9413115 	stw	r5,1220(sp)
10008a64:	00c000c4 	movi	r3,3
10008a68:	00bfdfc4 	movi	r2,-129
10008a6c:	d8c12b15 	stw	r3,1196(sp)
10008a70:	e0b8703a 	and	fp,fp,r2
10008a74:	dc812d15 	stw	r18,1204(sp)
10008a78:	1823883a 	mov	r17,r3
10008a7c:	d8013215 	stw	zero,1224(sp)
10008a80:	d8013415 	stw	zero,1232(sp)
10008a84:	003f0106 	br	1000868c <__alt_data_end+0xf800868c>
10008a88:	9cc00214 	ori	r19,r19,8
10008a8c:	e005883a 	mov	r2,fp
10008a90:	e4000007 	ldb	r16,0(fp)
10008a94:	003de506 	br	1000822c <__alt_data_end+0xf800822c>
10008a98:	da012a17 	ldw	r8,1192(sp)
10008a9c:	df012a15 	stw	fp,1192(sp)
10008aa0:	9f000414 	ori	fp,r19,16
10008aa4:	e0c0080c 	andi	r3,fp,32
10008aa8:	d8812d17 	ldw	r2,1204(sp)
10008aac:	18007626 	beq	r3,zero,10008c88 <___vfprintf_internal_r+0xbfc>
10008ab0:	d9412d17 	ldw	r5,1204(sp)
10008ab4:	14800017 	ldw	r18,0(r2)
10008ab8:	15400117 	ldw	r21,4(r2)
10008abc:	29400204 	addi	r5,r5,8
10008ac0:	d9412d15 	stw	r5,1204(sp)
10008ac4:	0005883a 	mov	r2,zero
10008ac8:	9546b03a 	or	r3,r18,r21
10008acc:	d8012785 	stb	zero,1182(sp)
10008ad0:	da413215 	stw	r9,1224(sp)
10008ad4:	0027883a 	mov	r19,zero
10008ad8:	003ecd06 	br	10008610 <__alt_data_end+0xf8008610>
10008adc:	da012a17 	ldw	r8,1192(sp)
10008ae0:	df012a15 	stw	fp,1192(sp)
10008ae4:	9f000414 	ori	fp,r19,16
10008ae8:	e0c0080c 	andi	r3,fp,32
10008aec:	d8812d17 	ldw	r2,1204(sp)
10008af0:	18002c26 	beq	r3,zero,10008ba4 <___vfprintf_internal_r+0xb18>
10008af4:	d9012d17 	ldw	r4,1204(sp)
10008af8:	14800017 	ldw	r18,0(r2)
10008afc:	15400117 	ldw	r21,4(r2)
10008b00:	21000204 	addi	r4,r4,8
10008b04:	d9012d15 	stw	r4,1204(sp)
10008b08:	00800044 	movi	r2,1
10008b0c:	9546b03a 	or	r3,r18,r21
10008b10:	003fee06 	br	10008acc <__alt_data_end+0xf8008acc>
10008b14:	da012a17 	ldw	r8,1192(sp)
10008b18:	df012a15 	stw	fp,1192(sp)
10008b1c:	9839883a 	mov	fp,r19
10008b20:	dcc12b03 	ldbu	r19,1196(sp)
10008b24:	01440074 	movhi	r5,4097
10008b28:	2954df04 	addi	r5,r5,21372
10008b2c:	dcc12785 	stb	r19,1182(sp)
10008b30:	d9413b15 	stw	r5,1260(sp)
10008b34:	e0c0080c 	andi	r3,fp,32
10008b38:	d8812d17 	ldw	r2,1204(sp)
10008b3c:	18002e26 	beq	r3,zero,10008bf8 <___vfprintf_internal_r+0xb6c>
10008b40:	d9412d17 	ldw	r5,1204(sp)
10008b44:	14800017 	ldw	r18,0(r2)
10008b48:	15400117 	ldw	r21,4(r2)
10008b4c:	29400204 	addi	r5,r5,8
10008b50:	d9412d15 	stw	r5,1204(sp)
10008b54:	e080004c 	andi	r2,fp,1
10008b58:	10025c26 	beq	r2,zero,100094cc <___vfprintf_internal_r+0x1440>
10008b5c:	9546b03a 	or	r3,r18,r21
10008b60:	18038f26 	beq	r3,zero,100099a0 <___vfprintf_internal_r+0x1914>
10008b64:	00800c04 	movi	r2,48
10008b68:	d8812705 	stb	r2,1180(sp)
10008b6c:	dc012745 	stb	r16,1181(sp)
10008b70:	e7000094 	ori	fp,fp,2
10008b74:	00800084 	movi	r2,2
10008b78:	003fd406 	br	10008acc <__alt_data_end+0xf8008acc>
10008b7c:	9cc00814 	ori	r19,r19,32
10008b80:	e005883a 	mov	r2,fp
10008b84:	e4000007 	ldb	r16,0(fp)
10008b88:	003da806 	br	1000822c <__alt_data_end+0xf800822c>
10008b8c:	da012a17 	ldw	r8,1192(sp)
10008b90:	df012a15 	stw	fp,1192(sp)
10008b94:	9839883a 	mov	fp,r19
10008b98:	e0c0080c 	andi	r3,fp,32
10008b9c:	d8812d17 	ldw	r2,1204(sp)
10008ba0:	183fd41e 	bne	r3,zero,10008af4 <__alt_data_end+0xf8008af4>
10008ba4:	e0c0040c 	andi	r3,fp,16
10008ba8:	18035f26 	beq	r3,zero,10009928 <___vfprintf_internal_r+0x189c>
10008bac:	d9412d17 	ldw	r5,1204(sp)
10008bb0:	14800017 	ldw	r18,0(r2)
10008bb4:	002b883a 	mov	r21,zero
10008bb8:	29400104 	addi	r5,r5,4
10008bbc:	d9412d15 	stw	r5,1204(sp)
10008bc0:	00800044 	movi	r2,1
10008bc4:	9007883a 	mov	r3,r18
10008bc8:	003fc006 	br	10008acc <__alt_data_end+0xf8008acc>
10008bcc:	da012a17 	ldw	r8,1192(sp)
10008bd0:	df012a15 	stw	fp,1192(sp)
10008bd4:	9839883a 	mov	fp,r19
10008bd8:	dcc12b03 	ldbu	r19,1196(sp)
10008bdc:	01040074 	movhi	r4,4097
10008be0:	2114e404 	addi	r4,r4,21392
10008be4:	d9013b15 	stw	r4,1260(sp)
10008be8:	dcc12785 	stb	r19,1182(sp)
10008bec:	e0c0080c 	andi	r3,fp,32
10008bf0:	d8812d17 	ldw	r2,1204(sp)
10008bf4:	183fd21e 	bne	r3,zero,10008b40 <__alt_data_end+0xf8008b40>
10008bf8:	e0c0040c 	andi	r3,fp,16
10008bfc:	18035426 	beq	r3,zero,10009950 <___vfprintf_internal_r+0x18c4>
10008c00:	d8c12d17 	ldw	r3,1204(sp)
10008c04:	14800017 	ldw	r18,0(r2)
10008c08:	002b883a 	mov	r21,zero
10008c0c:	18c00104 	addi	r3,r3,4
10008c10:	d8c12d15 	stw	r3,1204(sp)
10008c14:	003fcf06 	br	10008b54 <__alt_data_end+0xf8008b54>
10008c18:	e4000007 	ldb	r16,0(fp)
10008c1c:	00801b04 	movi	r2,108
10008c20:	8083f726 	beq	r16,r2,10009c00 <___vfprintf_internal_r+0x1b74>
10008c24:	9cc00414 	ori	r19,r19,16
10008c28:	e005883a 	mov	r2,fp
10008c2c:	003d7f06 	br	1000822c <__alt_data_end+0xf800822c>
10008c30:	da012a17 	ldw	r8,1192(sp)
10008c34:	df012a15 	stw	fp,1192(sp)
10008c38:	9839883a 	mov	fp,r19
10008c3c:	dcc12b03 	ldbu	r19,1196(sp)
10008c40:	e080080c 	andi	r2,fp,32
10008c44:	dcc12785 	stb	r19,1182(sp)
10008c48:	10032226 	beq	r2,zero,100098d4 <___vfprintf_internal_r+0x1848>
10008c4c:	d9412d17 	ldw	r5,1204(sp)
10008c50:	d9012f17 	ldw	r4,1212(sp)
10008c54:	28800017 	ldw	r2,0(r5)
10008c58:	2007d7fa 	srai	r3,r4,31
10008c5c:	29400104 	addi	r5,r5,4
10008c60:	d9412d15 	stw	r5,1204(sp)
10008c64:	11000015 	stw	r4,0(r2)
10008c68:	10c00115 	stw	r3,4(r2)
10008c6c:	003d4406 	br	10008180 <__alt_data_end+0xf8008180>
10008c70:	da012a17 	ldw	r8,1192(sp)
10008c74:	df012a15 	stw	fp,1192(sp)
10008c78:	9839883a 	mov	fp,r19
10008c7c:	e0c0080c 	andi	r3,fp,32
10008c80:	d8812d17 	ldw	r2,1204(sp)
10008c84:	183f8a1e 	bne	r3,zero,10008ab0 <__alt_data_end+0xf8008ab0>
10008c88:	e0c0040c 	andi	r3,fp,16
10008c8c:	18031c26 	beq	r3,zero,10009900 <___vfprintf_internal_r+0x1874>
10008c90:	14800017 	ldw	r18,0(r2)
10008c94:	d8812d17 	ldw	r2,1204(sp)
10008c98:	002b883a 	mov	r21,zero
10008c9c:	9007883a 	mov	r3,r18
10008ca0:	10800104 	addi	r2,r2,4
10008ca4:	d8812d15 	stw	r2,1204(sp)
10008ca8:	0005883a 	mov	r2,zero
10008cac:	003f8706 	br	10008acc <__alt_data_end+0xf8008acc>
10008cb0:	d9412d17 	ldw	r5,1204(sp)
10008cb4:	00800c04 	movi	r2,48
10008cb8:	d8812705 	stb	r2,1180(sp)
10008cbc:	2c800017 	ldw	r18,0(r5)
10008cc0:	00801e04 	movi	r2,120
10008cc4:	d8812745 	stb	r2,1181(sp)
10008cc8:	00840074 	movhi	r2,4097
10008ccc:	1094e404 	addi	r2,r2,21392
10008cd0:	29400104 	addi	r5,r5,4
10008cd4:	da012a17 	ldw	r8,1192(sp)
10008cd8:	d8813b15 	stw	r2,1260(sp)
10008cdc:	df012a15 	stw	fp,1192(sp)
10008ce0:	002b883a 	mov	r21,zero
10008ce4:	9f000094 	ori	fp,r19,2
10008ce8:	d9412d15 	stw	r5,1204(sp)
10008cec:	00800084 	movi	r2,2
10008cf0:	04001e04 	movi	r16,120
10008cf4:	9007883a 	mov	r3,r18
10008cf8:	003f7406 	br	10008acc <__alt_data_end+0xf8008acc>
10008cfc:	da012a17 	ldw	r8,1192(sp)
10008d00:	df012a15 	stw	fp,1192(sp)
10008d04:	9839883a 	mov	fp,r19
10008d08:	dcc12b03 	ldbu	r19,1196(sp)
10008d0c:	e080080c 	andi	r2,fp,32
10008d10:	d8c12d17 	ldw	r3,1204(sp)
10008d14:	dcc12785 	stb	r19,1182(sp)
10008d18:	103e321e 	bne	r2,zero,100085e4 <__alt_data_end+0xf80085e4>
10008d1c:	e080040c 	andi	r2,fp,16
10008d20:	10031326 	beq	r2,zero,10009970 <___vfprintf_internal_r+0x18e4>
10008d24:	1c800017 	ldw	r18,0(r3)
10008d28:	d9412d17 	ldw	r5,1204(sp)
10008d2c:	902bd7fa 	srai	r21,r18,31
10008d30:	29400104 	addi	r5,r5,4
10008d34:	d9412d15 	stw	r5,1204(sp)
10008d38:	a805883a 	mov	r2,r21
10008d3c:	003e2f06 	br	100085fc <__alt_data_end+0xf80085fc>
10008d40:	9cc01014 	ori	r19,r19,64
10008d44:	e005883a 	mov	r2,fp
10008d48:	e4000007 	ldb	r16,0(fp)
10008d4c:	003d3706 	br	1000822c <__alt_data_end+0xf800822c>
10008d50:	d8c12d17 	ldw	r3,1204(sp)
10008d54:	d9012d17 	ldw	r4,1204(sp)
10008d58:	da012a17 	ldw	r8,1192(sp)
10008d5c:	18800017 	ldw	r2,0(r3)
10008d60:	21000104 	addi	r4,r4,4
10008d64:	00c00044 	movi	r3,1
10008d68:	df012a15 	stw	fp,1192(sp)
10008d6c:	d8c12b15 	stw	r3,1196(sp)
10008d70:	9839883a 	mov	fp,r19
10008d74:	d8012785 	stb	zero,1182(sp)
10008d78:	d8810405 	stb	r2,1040(sp)
10008d7c:	d9012d15 	stw	r4,1204(sp)
10008d80:	1823883a 	mov	r17,r3
10008d84:	d8c10404 	addi	r3,sp,1040
10008d88:	d8013215 	stw	zero,1224(sp)
10008d8c:	d8013415 	stw	zero,1232(sp)
10008d90:	d8c13115 	stw	r3,1220(sp)
10008d94:	0005883a 	mov	r2,zero
10008d98:	003e4306 	br	100086a8 <__alt_data_end+0xf80086a8>
10008d9c:	d8812b07 	ldb	r2,1196(sp)
10008da0:	1002fc1e 	bne	r2,zero,10009994 <___vfprintf_internal_r+0x1908>
10008da4:	00c00804 	movi	r3,32
10008da8:	d8c12b05 	stb	r3,1196(sp)
10008dac:	e005883a 	mov	r2,fp
10008db0:	e4000007 	ldb	r16,0(fp)
10008db4:	003d1d06 	br	1000822c <__alt_data_end+0xf800822c>
10008db8:	9cc00054 	ori	r19,r19,1
10008dbc:	e005883a 	mov	r2,fp
10008dc0:	e4000007 	ldb	r16,0(fp)
10008dc4:	003d1906 	br	1000822c <__alt_data_end+0xf800822c>
10008dc8:	d9012d17 	ldw	r4,1204(sp)
10008dcc:	d9412d17 	ldw	r5,1204(sp)
10008dd0:	21000017 	ldw	r4,0(r4)
10008dd4:	28c00104 	addi	r3,r5,4
10008dd8:	d9012e15 	stw	r4,1208(sp)
10008ddc:	20038c16 	blt	r4,zero,10009c10 <___vfprintf_internal_r+0x1b84>
10008de0:	d8c12d15 	stw	r3,1204(sp)
10008de4:	e005883a 	mov	r2,fp
10008de8:	e4000007 	ldb	r16,0(fp)
10008dec:	003d0f06 	br	1000822c <__alt_data_end+0xf800822c>
10008df0:	00c00ac4 	movi	r3,43
10008df4:	d8c12b05 	stb	r3,1196(sp)
10008df8:	e005883a 	mov	r2,fp
10008dfc:	e4000007 	ldb	r16,0(fp)
10008e00:	003d0a06 	br	1000822c <__alt_data_end+0xf800822c>
10008e04:	d8c12d17 	ldw	r3,1204(sp)
10008e08:	d9012d17 	ldw	r4,1204(sp)
10008e0c:	da012a17 	ldw	r8,1192(sp)
10008e10:	18c00017 	ldw	r3,0(r3)
10008e14:	df012a15 	stw	fp,1192(sp)
10008e18:	d8012785 	stb	zero,1182(sp)
10008e1c:	d8c13115 	stw	r3,1220(sp)
10008e20:	9839883a 	mov	fp,r19
10008e24:	24800104 	addi	r18,r4,4
10008e28:	1803f726 	beq	r3,zero,10009e08 <___vfprintf_internal_r+0x1d7c>
10008e2c:	d9013117 	ldw	r4,1220(sp)
10008e30:	48038916 	blt	r9,zero,10009c58 <___vfprintf_internal_r+0x1bcc>
10008e34:	480d883a 	mov	r6,r9
10008e38:	000b883a 	mov	r5,zero
10008e3c:	da013f15 	stw	r8,1276(sp)
10008e40:	da413e15 	stw	r9,1272(sp)
10008e44:	000d6a00 	call	1000d6a0 <memchr>
10008e48:	da013f17 	ldw	r8,1276(sp)
10008e4c:	da413e17 	ldw	r9,1272(sp)
10008e50:	10045926 	beq	r2,zero,10009fb8 <___vfprintf_internal_r+0x1f2c>
10008e54:	d8c13117 	ldw	r3,1220(sp)
10008e58:	10e3c83a 	sub	r17,r2,r3
10008e5c:	4c433516 	blt	r9,r17,10009b34 <___vfprintf_internal_r+0x1aa8>
10008e60:	8805883a 	mov	r2,r17
10008e64:	88038116 	blt	r17,zero,10009c6c <___vfprintf_internal_r+0x1be0>
10008e68:	dcc12783 	ldbu	r19,1182(sp)
10008e6c:	d8812b15 	stw	r2,1196(sp)
10008e70:	dc812d15 	stw	r18,1204(sp)
10008e74:	d8013215 	stw	zero,1224(sp)
10008e78:	d8013415 	stw	zero,1232(sp)
10008e7c:	003e0306 	br	1000868c <__alt_data_end+0xf800868c>
10008e80:	da012a17 	ldw	r8,1192(sp)
10008e84:	df012a15 	stw	fp,1192(sp)
10008e88:	9839883a 	mov	fp,r19
10008e8c:	dcc12b03 	ldbu	r19,1196(sp)
10008e90:	dcc12785 	stb	r19,1182(sp)
10008e94:	803d8f26 	beq	r16,zero,100084d4 <__alt_data_end+0xf80084d4>
10008e98:	00c00044 	movi	r3,1
10008e9c:	d8c12b15 	stw	r3,1196(sp)
10008ea0:	dc010405 	stb	r16,1040(sp)
10008ea4:	d8012785 	stb	zero,1182(sp)
10008ea8:	003fb506 	br	10008d80 <__alt_data_end+0xf8008d80>
10008eac:	d8c12017 	ldw	r3,1152(sp)
10008eb0:	003e3506 	br	10008788 <__alt_data_end+0xf8008788>
10008eb4:	10803fcc 	andi	r2,r2,255
10008eb8:	00c00044 	movi	r3,1
10008ebc:	10fddc1e 	bne	r2,r3,10008630 <__alt_data_end+0xf8008630>
10008ec0:	a800021e 	bne	r21,zero,10008ecc <___vfprintf_internal_r+0xe40>
10008ec4:	00800244 	movi	r2,9
10008ec8:	14801e2e 	bgeu	r2,r18,10008f44 <___vfprintf_internal_r+0xeb8>
10008ecc:	dc012b15 	stw	r16,1196(sp)
10008ed0:	dc410e04 	addi	r17,sp,1080
10008ed4:	9021883a 	mov	r16,r18
10008ed8:	da012c15 	stw	r8,1200(sp)
10008edc:	a825883a 	mov	r18,r21
10008ee0:	482b883a 	mov	r21,r9
10008ee4:	8009883a 	mov	r4,r16
10008ee8:	900b883a 	mov	r5,r18
10008eec:	01800284 	movi	r6,10
10008ef0:	000f883a 	mov	r7,zero
10008ef4:	00118440 	call	10011844 <__umoddi3>
10008ef8:	10800c04 	addi	r2,r2,48
10008efc:	8c7fffc4 	addi	r17,r17,-1
10008f00:	8009883a 	mov	r4,r16
10008f04:	900b883a 	mov	r5,r18
10008f08:	01800284 	movi	r6,10
10008f0c:	000f883a 	mov	r7,zero
10008f10:	88800005 	stb	r2,0(r17)
10008f14:	00112040 	call	10011204 <__udivdi3>
10008f18:	1021883a 	mov	r16,r2
10008f1c:	10c4b03a 	or	r2,r2,r3
10008f20:	1825883a 	mov	r18,r3
10008f24:	103fef1e 	bne	r2,zero,10008ee4 <__alt_data_end+0xf8008ee4>
10008f28:	d9012817 	ldw	r4,1184(sp)
10008f2c:	dc413115 	stw	r17,1220(sp)
10008f30:	dc012b17 	ldw	r16,1196(sp)
10008f34:	da012c17 	ldw	r8,1200(sp)
10008f38:	a813883a 	mov	r9,r21
10008f3c:	2463c83a 	sub	r17,r4,r17
10008f40:	003dcd06 	br	10008678 <__alt_data_end+0xf8008678>
10008f44:	94800c04 	addi	r18,r18,48
10008f48:	d8c10dc4 	addi	r3,sp,1079
10008f4c:	dc810dc5 	stb	r18,1079(sp)
10008f50:	dc413c17 	ldw	r17,1264(sp)
10008f54:	d8c13115 	stw	r3,1220(sp)
10008f58:	003dc706 	br	10008678 <__alt_data_end+0xf8008678>
10008f5c:	00801944 	movi	r2,101
10008f60:	1400720e 	bge	r2,r16,1000912c <___vfprintf_internal_r+0x10a0>
10008f64:	d9013717 	ldw	r4,1244(sp)
10008f68:	d9413917 	ldw	r5,1252(sp)
10008f6c:	000d883a 	mov	r6,zero
10008f70:	000f883a 	mov	r7,zero
10008f74:	d8c13d15 	stw	r3,1268(sp)
10008f78:	da013f15 	stw	r8,1276(sp)
10008f7c:	00069740 	call	10006974 <__eqdf2>
10008f80:	d8c13d17 	ldw	r3,1268(sp)
10008f84:	da013f17 	ldw	r8,1276(sp)
10008f88:	1000f41e 	bne	r2,zero,1000935c <___vfprintf_internal_r+0x12d0>
10008f8c:	d8811f17 	ldw	r2,1148(sp)
10008f90:	01040074 	movhi	r4,4097
10008f94:	2114eb04 	addi	r4,r4,21420
10008f98:	18c00044 	addi	r3,r3,1
10008f9c:	10800044 	addi	r2,r2,1
10008fa0:	41000015 	stw	r4,0(r8)
10008fa4:	01000044 	movi	r4,1
10008fa8:	41000115 	stw	r4,4(r8)
10008fac:	d8c12015 	stw	r3,1152(sp)
10008fb0:	d8811f15 	stw	r2,1148(sp)
10008fb4:	010001c4 	movi	r4,7
10008fb8:	20828d16 	blt	r4,r2,100099f0 <___vfprintf_internal_r+0x1964>
10008fbc:	42000204 	addi	r8,r8,8
10008fc0:	d8812617 	ldw	r2,1176(sp)
10008fc4:	d9413317 	ldw	r5,1228(sp)
10008fc8:	11400216 	blt	r2,r5,10008fd4 <___vfprintf_internal_r+0xf48>
10008fcc:	e080004c 	andi	r2,fp,1
10008fd0:	103e4126 	beq	r2,zero,100088d8 <__alt_data_end+0xf80088d8>
10008fd4:	d8813817 	ldw	r2,1248(sp)
10008fd8:	d9013517 	ldw	r4,1236(sp)
10008fdc:	d9413817 	ldw	r5,1248(sp)
10008fe0:	1887883a 	add	r3,r3,r2
10008fe4:	d8811f17 	ldw	r2,1148(sp)
10008fe8:	41000015 	stw	r4,0(r8)
10008fec:	41400115 	stw	r5,4(r8)
10008ff0:	10800044 	addi	r2,r2,1
10008ff4:	d8c12015 	stw	r3,1152(sp)
10008ff8:	d8811f15 	stw	r2,1148(sp)
10008ffc:	010001c4 	movi	r4,7
10009000:	20830916 	blt	r4,r2,10009c28 <___vfprintf_internal_r+0x1b9c>
10009004:	42000204 	addi	r8,r8,8
10009008:	d8813317 	ldw	r2,1228(sp)
1000900c:	143fffc4 	addi	r16,r2,-1
10009010:	043e310e 	bge	zero,r16,100088d8 <__alt_data_end+0xf80088d8>
10009014:	04400404 	movi	r17,16
10009018:	d8811f17 	ldw	r2,1148(sp)
1000901c:	8c007e0e 	bge	r17,r16,10009218 <___vfprintf_internal_r+0x118c>
10009020:	01440074 	movhi	r5,4097
10009024:	2954eb84 	addi	r5,r5,21422
10009028:	d9412c15 	stw	r5,1200(sp)
1000902c:	04c001c4 	movi	r19,7
10009030:	00000306 	br	10009040 <___vfprintf_internal_r+0xfb4>
10009034:	42000204 	addi	r8,r8,8
10009038:	843ffc04 	addi	r16,r16,-16
1000903c:	8c00790e 	bge	r17,r16,10009224 <___vfprintf_internal_r+0x1198>
10009040:	18c00404 	addi	r3,r3,16
10009044:	10800044 	addi	r2,r2,1
10009048:	45000015 	stw	r20,0(r8)
1000904c:	44400115 	stw	r17,4(r8)
10009050:	d8c12015 	stw	r3,1152(sp)
10009054:	d8811f15 	stw	r2,1148(sp)
10009058:	98bff60e 	bge	r19,r2,10009034 <__alt_data_end+0xf8009034>
1000905c:	b809883a 	mov	r4,r23
10009060:	b00b883a 	mov	r5,r22
10009064:	d9811e04 	addi	r6,sp,1144
10009068:	000f4580 	call	1000f458 <__sprint_r>
1000906c:	103d1f1e 	bne	r2,zero,100084ec <__alt_data_end+0xf80084ec>
10009070:	d8c12017 	ldw	r3,1152(sp)
10009074:	d8811f17 	ldw	r2,1148(sp)
10009078:	da000404 	addi	r8,sp,16
1000907c:	003fee06 	br	10009038 <__alt_data_end+0xf8009038>
10009080:	d9412e17 	ldw	r5,1208(sp)
10009084:	d8812b17 	ldw	r2,1196(sp)
10009088:	28a7c83a 	sub	r19,r5,r2
1000908c:	04fddc0e 	bge	zero,r19,10008800 <__alt_data_end+0xf8008800>
10009090:	05400404 	movi	r21,16
10009094:	d8811f17 	ldw	r2,1148(sp)
10009098:	acc3870e 	bge	r21,r19,10009eb8 <___vfprintf_internal_r+0x1e2c>
1000909c:	01440074 	movhi	r5,4097
100090a0:	2954eb84 	addi	r5,r5,21422
100090a4:	d9412c15 	stw	r5,1200(sp)
100090a8:	048001c4 	movi	r18,7
100090ac:	00000306 	br	100090bc <___vfprintf_internal_r+0x1030>
100090b0:	9cfffc04 	addi	r19,r19,-16
100090b4:	42000204 	addi	r8,r8,8
100090b8:	acc0110e 	bge	r21,r19,10009100 <___vfprintf_internal_r+0x1074>
100090bc:	18c00404 	addi	r3,r3,16
100090c0:	10800044 	addi	r2,r2,1
100090c4:	45000015 	stw	r20,0(r8)
100090c8:	45400115 	stw	r21,4(r8)
100090cc:	d8c12015 	stw	r3,1152(sp)
100090d0:	d8811f15 	stw	r2,1148(sp)
100090d4:	90bff60e 	bge	r18,r2,100090b0 <__alt_data_end+0xf80090b0>
100090d8:	b809883a 	mov	r4,r23
100090dc:	b00b883a 	mov	r5,r22
100090e0:	d9811e04 	addi	r6,sp,1144
100090e4:	000f4580 	call	1000f458 <__sprint_r>
100090e8:	103d001e 	bne	r2,zero,100084ec <__alt_data_end+0xf80084ec>
100090ec:	9cfffc04 	addi	r19,r19,-16
100090f0:	d8c12017 	ldw	r3,1152(sp)
100090f4:	d8811f17 	ldw	r2,1148(sp)
100090f8:	da000404 	addi	r8,sp,16
100090fc:	acffef16 	blt	r21,r19,100090bc <__alt_data_end+0xf80090bc>
10009100:	d9012c17 	ldw	r4,1200(sp)
10009104:	1cc7883a 	add	r3,r3,r19
10009108:	10800044 	addi	r2,r2,1
1000910c:	41000015 	stw	r4,0(r8)
10009110:	44c00115 	stw	r19,4(r8)
10009114:	d8c12015 	stw	r3,1152(sp)
10009118:	d8811f15 	stw	r2,1148(sp)
1000911c:	010001c4 	movi	r4,7
10009120:	20817816 	blt	r4,r2,10009704 <___vfprintf_internal_r+0x1678>
10009124:	42000204 	addi	r8,r8,8
10009128:	003db506 	br	10008800 <__alt_data_end+0xf8008800>
1000912c:	d9413317 	ldw	r5,1228(sp)
10009130:	00800044 	movi	r2,1
10009134:	18c00044 	addi	r3,r3,1
10009138:	11413e0e 	bge	r2,r5,10009634 <___vfprintf_internal_r+0x15a8>
1000913c:	dc011f17 	ldw	r16,1148(sp)
10009140:	d8813117 	ldw	r2,1220(sp)
10009144:	d8c12015 	stw	r3,1152(sp)
10009148:	84000044 	addi	r16,r16,1
1000914c:	40800015 	stw	r2,0(r8)
10009150:	00800044 	movi	r2,1
10009154:	40800115 	stw	r2,4(r8)
10009158:	dc011f15 	stw	r16,1148(sp)
1000915c:	008001c4 	movi	r2,7
10009160:	14015616 	blt	r2,r16,100096bc <___vfprintf_internal_r+0x1630>
10009164:	42000204 	addi	r8,r8,8
10009168:	d9013817 	ldw	r4,1248(sp)
1000916c:	d9413517 	ldw	r5,1236(sp)
10009170:	84000044 	addi	r16,r16,1
10009174:	1907883a 	add	r3,r3,r4
10009178:	41400015 	stw	r5,0(r8)
1000917c:	41000115 	stw	r4,4(r8)
10009180:	d8c12015 	stw	r3,1152(sp)
10009184:	dc011f15 	stw	r16,1148(sp)
10009188:	008001c4 	movi	r2,7
1000918c:	14015416 	blt	r2,r16,100096e0 <___vfprintf_internal_r+0x1654>
10009190:	44400204 	addi	r17,r8,8
10009194:	d9013717 	ldw	r4,1244(sp)
10009198:	d9413917 	ldw	r5,1252(sp)
1000919c:	000d883a 	mov	r6,zero
100091a0:	000f883a 	mov	r7,zero
100091a4:	d8c13d15 	stw	r3,1268(sp)
100091a8:	00069740 	call	10006974 <__eqdf2>
100091ac:	d8c13d17 	ldw	r3,1268(sp)
100091b0:	1000a726 	beq	r2,zero,10009450 <___vfprintf_internal_r+0x13c4>
100091b4:	d9013317 	ldw	r4,1228(sp)
100091b8:	d9413117 	ldw	r5,1220(sp)
100091bc:	84000044 	addi	r16,r16,1
100091c0:	20bfffc4 	addi	r2,r4,-1
100091c4:	1887883a 	add	r3,r3,r2
100091c8:	29000044 	addi	r4,r5,1
100091cc:	88800115 	stw	r2,4(r17)
100091d0:	89000015 	stw	r4,0(r17)
100091d4:	d8c12015 	stw	r3,1152(sp)
100091d8:	dc011f15 	stw	r16,1148(sp)
100091dc:	008001c4 	movi	r2,7
100091e0:	14012d16 	blt	r2,r16,10009698 <___vfprintf_internal_r+0x160c>
100091e4:	8c400204 	addi	r17,r17,8
100091e8:	d9413a17 	ldw	r5,1256(sp)
100091ec:	dcc122c4 	addi	r19,sp,1163
100091f0:	84000044 	addi	r16,r16,1
100091f4:	28c7883a 	add	r3,r5,r3
100091f8:	8cc00015 	stw	r19,0(r17)
100091fc:	89400115 	stw	r5,4(r17)
10009200:	d8c12015 	stw	r3,1152(sp)
10009204:	dc011f15 	stw	r16,1148(sp)
10009208:	008001c4 	movi	r2,7
1000920c:	14000e16 	blt	r2,r16,10009248 <___vfprintf_internal_r+0x11bc>
10009210:	8a000204 	addi	r8,r17,8
10009214:	003db006 	br	100088d8 <__alt_data_end+0xf80088d8>
10009218:	01040074 	movhi	r4,4097
1000921c:	2114eb84 	addi	r4,r4,21422
10009220:	d9012c15 	stw	r4,1200(sp)
10009224:	d9012c17 	ldw	r4,1200(sp)
10009228:	1c07883a 	add	r3,r3,r16
1000922c:	44000115 	stw	r16,4(r8)
10009230:	41000015 	stw	r4,0(r8)
10009234:	10800044 	addi	r2,r2,1
10009238:	d8c12015 	stw	r3,1152(sp)
1000923c:	d8811f15 	stw	r2,1148(sp)
10009240:	010001c4 	movi	r4,7
10009244:	20bda30e 	bge	r4,r2,100088d4 <__alt_data_end+0xf80088d4>
10009248:	b809883a 	mov	r4,r23
1000924c:	b00b883a 	mov	r5,r22
10009250:	d9811e04 	addi	r6,sp,1144
10009254:	000f4580 	call	1000f458 <__sprint_r>
10009258:	103ca41e 	bne	r2,zero,100084ec <__alt_data_end+0xf80084ec>
1000925c:	d8c12017 	ldw	r3,1152(sp)
10009260:	da000404 	addi	r8,sp,16
10009264:	003d9c06 	br	100088d8 <__alt_data_end+0xf80088d8>
10009268:	b809883a 	mov	r4,r23
1000926c:	b00b883a 	mov	r5,r22
10009270:	d9811e04 	addi	r6,sp,1144
10009274:	000f4580 	call	1000f458 <__sprint_r>
10009278:	103dd226 	beq	r2,zero,100089c4 <__alt_data_end+0xf80089c4>
1000927c:	003c9b06 	br	100084ec <__alt_data_end+0xf80084ec>
10009280:	10803fcc 	andi	r2,r2,255
10009284:	1000311e 	bne	r2,zero,1000934c <___vfprintf_internal_r+0x12c0>
10009288:	e080004c 	andi	r2,fp,1
1000928c:	10002f26 	beq	r2,zero,1000934c <___vfprintf_internal_r+0x12c0>
10009290:	00800c04 	movi	r2,48
10009294:	d8c10dc4 	addi	r3,sp,1079
10009298:	d8810dc5 	stb	r2,1079(sp)
1000929c:	dc413c17 	ldw	r17,1264(sp)
100092a0:	d8c13115 	stw	r3,1220(sp)
100092a4:	003cf406 	br	10008678 <__alt_data_end+0xf8008678>
100092a8:	b809883a 	mov	r4,r23
100092ac:	b00b883a 	mov	r5,r22
100092b0:	d9811e04 	addi	r6,sp,1144
100092b4:	000f4580 	call	1000f458 <__sprint_r>
100092b8:	103c8c1e 	bne	r2,zero,100084ec <__alt_data_end+0xf80084ec>
100092bc:	d8c12017 	ldw	r3,1152(sp)
100092c0:	da000404 	addi	r8,sp,16
100092c4:	003d7706 	br	100088a4 <__alt_data_end+0xf80088a4>
100092c8:	b809883a 	mov	r4,r23
100092cc:	b00b883a 	mov	r5,r22
100092d0:	d9811e04 	addi	r6,sp,1144
100092d4:	000f4580 	call	1000f458 <__sprint_r>
100092d8:	103c841e 	bne	r2,zero,100084ec <__alt_data_end+0xf80084ec>
100092dc:	d8c12017 	ldw	r3,1152(sp)
100092e0:	da000404 	addi	r8,sp,16
100092e4:	003d3506 	br	100087bc <__alt_data_end+0xf80087bc>
100092e8:	b809883a 	mov	r4,r23
100092ec:	b00b883a 	mov	r5,r22
100092f0:	d9811e04 	addi	r6,sp,1144
100092f4:	000f4580 	call	1000f458 <__sprint_r>
100092f8:	103c7c1e 	bne	r2,zero,100084ec <__alt_data_end+0xf80084ec>
100092fc:	d8c12017 	ldw	r3,1152(sp)
10009300:	da000404 	addi	r8,sp,16
10009304:	003d3b06 	br	100087f4 <__alt_data_end+0xf80087f4>
10009308:	d9413b17 	ldw	r5,1260(sp)
1000930c:	d8c10e04 	addi	r3,sp,1080
10009310:	908003cc 	andi	r2,r18,15
10009314:	a808973a 	slli	r4,r21,28
10009318:	2885883a 	add	r2,r5,r2
1000931c:	9024d13a 	srli	r18,r18,4
10009320:	10800003 	ldbu	r2,0(r2)
10009324:	a82ad13a 	srli	r21,r21,4
10009328:	18ffffc4 	addi	r3,r3,-1
1000932c:	24a4b03a 	or	r18,r4,r18
10009330:	18800005 	stb	r2,0(r3)
10009334:	9544b03a 	or	r2,r18,r21
10009338:	103ff51e 	bne	r2,zero,10009310 <__alt_data_end+0xf8009310>
1000933c:	d9412817 	ldw	r5,1184(sp)
10009340:	d8c13115 	stw	r3,1220(sp)
10009344:	28e3c83a 	sub	r17,r5,r3
10009348:	003ccb06 	br	10008678 <__alt_data_end+0xf8008678>
1000934c:	d8c10e04 	addi	r3,sp,1080
10009350:	0023883a 	mov	r17,zero
10009354:	d8c13115 	stw	r3,1220(sp)
10009358:	003cc706 	br	10008678 <__alt_data_end+0xf8008678>
1000935c:	dc012617 	ldw	r16,1176(sp)
10009360:	0401ab0e 	bge	zero,r16,10009a10 <___vfprintf_internal_r+0x1984>
10009364:	d8813317 	ldw	r2,1228(sp)
10009368:	d9413117 	ldw	r5,1220(sp)
1000936c:	d9013417 	ldw	r4,1232(sp)
10009370:	1023883a 	mov	r17,r2
10009374:	28a1883a 	add	r16,r5,r2
10009378:	2080010e 	bge	r4,r2,10009380 <___vfprintf_internal_r+0x12f4>
1000937c:	2023883a 	mov	r17,r4
10009380:	04400b0e 	bge	zero,r17,100093b0 <___vfprintf_internal_r+0x1324>
10009384:	d8811f17 	ldw	r2,1148(sp)
10009388:	d9413117 	ldw	r5,1220(sp)
1000938c:	1c47883a 	add	r3,r3,r17
10009390:	10800044 	addi	r2,r2,1
10009394:	41400015 	stw	r5,0(r8)
10009398:	44400115 	stw	r17,4(r8)
1000939c:	d8c12015 	stw	r3,1152(sp)
100093a0:	d8811f15 	stw	r2,1148(sp)
100093a4:	010001c4 	movi	r4,7
100093a8:	20826716 	blt	r4,r2,10009d48 <___vfprintf_internal_r+0x1cbc>
100093ac:	42000204 	addi	r8,r8,8
100093b0:	88026316 	blt	r17,zero,10009d40 <___vfprintf_internal_r+0x1cb4>
100093b4:	d8813417 	ldw	r2,1232(sp)
100093b8:	1463c83a 	sub	r17,r2,r17
100093bc:	0440590e 	bge	zero,r17,10009524 <___vfprintf_internal_r+0x1498>
100093c0:	04c00404 	movi	r19,16
100093c4:	d8811f17 	ldw	r2,1148(sp)
100093c8:	9c41770e 	bge	r19,r17,100099a8 <___vfprintf_internal_r+0x191c>
100093cc:	01440074 	movhi	r5,4097
100093d0:	2954eb84 	addi	r5,r5,21422
100093d4:	d9412c15 	stw	r5,1200(sp)
100093d8:	054001c4 	movi	r21,7
100093dc:	00000306 	br	100093ec <___vfprintf_internal_r+0x1360>
100093e0:	42000204 	addi	r8,r8,8
100093e4:	8c7ffc04 	addi	r17,r17,-16
100093e8:	9c41720e 	bge	r19,r17,100099b4 <___vfprintf_internal_r+0x1928>
100093ec:	18c00404 	addi	r3,r3,16
100093f0:	10800044 	addi	r2,r2,1
100093f4:	45000015 	stw	r20,0(r8)
100093f8:	44c00115 	stw	r19,4(r8)
100093fc:	d8c12015 	stw	r3,1152(sp)
10009400:	d8811f15 	stw	r2,1148(sp)
10009404:	a8bff60e 	bge	r21,r2,100093e0 <__alt_data_end+0xf80093e0>
10009408:	b809883a 	mov	r4,r23
1000940c:	b00b883a 	mov	r5,r22
10009410:	d9811e04 	addi	r6,sp,1144
10009414:	000f4580 	call	1000f458 <__sprint_r>
10009418:	103c341e 	bne	r2,zero,100084ec <__alt_data_end+0xf80084ec>
1000941c:	d8c12017 	ldw	r3,1152(sp)
10009420:	d8811f17 	ldw	r2,1148(sp)
10009424:	da000404 	addi	r8,sp,16
10009428:	003fee06 	br	100093e4 <__alt_data_end+0xf80093e4>
1000942c:	b809883a 	mov	r4,r23
10009430:	b00b883a 	mov	r5,r22
10009434:	d9811e04 	addi	r6,sp,1144
10009438:	000f4580 	call	1000f458 <__sprint_r>
1000943c:	103c2b1e 	bne	r2,zero,100084ec <__alt_data_end+0xf80084ec>
10009440:	d8c12017 	ldw	r3,1152(sp)
10009444:	d8812787 	ldb	r2,1182(sp)
10009448:	da000404 	addi	r8,sp,16
1000944c:	003cce06 	br	10008788 <__alt_data_end+0xf8008788>
10009450:	d8813317 	ldw	r2,1228(sp)
10009454:	14ffffc4 	addi	r19,r2,-1
10009458:	04ff630e 	bge	zero,r19,100091e8 <__alt_data_end+0xf80091e8>
1000945c:	05400404 	movi	r21,16
10009460:	acc0810e 	bge	r21,r19,10009668 <___vfprintf_internal_r+0x15dc>
10009464:	01440074 	movhi	r5,4097
10009468:	2954eb84 	addi	r5,r5,21422
1000946c:	d9412c15 	stw	r5,1200(sp)
10009470:	01c001c4 	movi	r7,7
10009474:	00000306 	br	10009484 <___vfprintf_internal_r+0x13f8>
10009478:	8c400204 	addi	r17,r17,8
1000947c:	9cfffc04 	addi	r19,r19,-16
10009480:	acc07c0e 	bge	r21,r19,10009674 <___vfprintf_internal_r+0x15e8>
10009484:	18c00404 	addi	r3,r3,16
10009488:	84000044 	addi	r16,r16,1
1000948c:	8d000015 	stw	r20,0(r17)
10009490:	8d400115 	stw	r21,4(r17)
10009494:	d8c12015 	stw	r3,1152(sp)
10009498:	dc011f15 	stw	r16,1148(sp)
1000949c:	3c3ff60e 	bge	r7,r16,10009478 <__alt_data_end+0xf8009478>
100094a0:	b809883a 	mov	r4,r23
100094a4:	b00b883a 	mov	r5,r22
100094a8:	d9811e04 	addi	r6,sp,1144
100094ac:	d9c13d15 	stw	r7,1268(sp)
100094b0:	000f4580 	call	1000f458 <__sprint_r>
100094b4:	d9c13d17 	ldw	r7,1268(sp)
100094b8:	103c0c1e 	bne	r2,zero,100084ec <__alt_data_end+0xf80084ec>
100094bc:	d8c12017 	ldw	r3,1152(sp)
100094c0:	dc011f17 	ldw	r16,1148(sp)
100094c4:	dc400404 	addi	r17,sp,16
100094c8:	003fec06 	br	1000947c <__alt_data_end+0xf800947c>
100094cc:	00800084 	movi	r2,2
100094d0:	9546b03a 	or	r3,r18,r21
100094d4:	003d7d06 	br	10008acc <__alt_data_end+0xf8008acc>
100094d8:	10803fcc 	andi	r2,r2,255
100094dc:	1080201c 	xori	r2,r2,128
100094e0:	10bfe004 	addi	r2,r2,-128
100094e4:	01000c04 	movi	r4,48
100094e8:	1101d726 	beq	r2,r4,10009c48 <___vfprintf_internal_r+0x1bbc>
100094ec:	d9413117 	ldw	r5,1220(sp)
100094f0:	d8812817 	ldw	r2,1184(sp)
100094f4:	193fffc5 	stb	r4,-1(r3)
100094f8:	297fffc4 	addi	r5,r5,-1
100094fc:	d9413115 	stw	r5,1220(sp)
10009500:	1163c83a 	sub	r17,r2,r5
10009504:	003c5c06 	br	10008678 <__alt_data_end+0xf8008678>
10009508:	b809883a 	mov	r4,r23
1000950c:	b00b883a 	mov	r5,r22
10009510:	d9811e04 	addi	r6,sp,1144
10009514:	000f4580 	call	1000f458 <__sprint_r>
10009518:	103bf41e 	bne	r2,zero,100084ec <__alt_data_end+0xf80084ec>
1000951c:	d8c12017 	ldw	r3,1152(sp)
10009520:	da000404 	addi	r8,sp,16
10009524:	d9413117 	ldw	r5,1220(sp)
10009528:	d9013417 	ldw	r4,1232(sp)
1000952c:	d8812617 	ldw	r2,1176(sp)
10009530:	2923883a 	add	r17,r5,r4
10009534:	d9413317 	ldw	r5,1228(sp)
10009538:	11400216 	blt	r2,r5,10009544 <___vfprintf_internal_r+0x14b8>
1000953c:	e100004c 	andi	r4,fp,1
10009540:	20000d26 	beq	r4,zero,10009578 <___vfprintf_internal_r+0x14ec>
10009544:	d9013817 	ldw	r4,1248(sp)
10009548:	d9413517 	ldw	r5,1236(sp)
1000954c:	1907883a 	add	r3,r3,r4
10009550:	d9011f17 	ldw	r4,1148(sp)
10009554:	41400015 	stw	r5,0(r8)
10009558:	d9413817 	ldw	r5,1248(sp)
1000955c:	21000044 	addi	r4,r4,1
10009560:	d8c12015 	stw	r3,1152(sp)
10009564:	41400115 	stw	r5,4(r8)
10009568:	d9011f15 	stw	r4,1148(sp)
1000956c:	014001c4 	movi	r5,7
10009570:	2901fd16 	blt	r5,r4,10009d68 <___vfprintf_internal_r+0x1cdc>
10009574:	42000204 	addi	r8,r8,8
10009578:	d9013317 	ldw	r4,1228(sp)
1000957c:	2085c83a 	sub	r2,r4,r2
10009580:	8449c83a 	sub	r4,r16,r17
10009584:	1021883a 	mov	r16,r2
10009588:	2080010e 	bge	r4,r2,10009590 <___vfprintf_internal_r+0x1504>
1000958c:	2021883a 	mov	r16,r4
10009590:	04000a0e 	bge	zero,r16,100095bc <___vfprintf_internal_r+0x1530>
10009594:	d9011f17 	ldw	r4,1148(sp)
10009598:	1c07883a 	add	r3,r3,r16
1000959c:	44400015 	stw	r17,0(r8)
100095a0:	21000044 	addi	r4,r4,1
100095a4:	44000115 	stw	r16,4(r8)
100095a8:	d8c12015 	stw	r3,1152(sp)
100095ac:	d9011f15 	stw	r4,1148(sp)
100095b0:	014001c4 	movi	r5,7
100095b4:	29020916 	blt	r5,r4,10009ddc <___vfprintf_internal_r+0x1d50>
100095b8:	42000204 	addi	r8,r8,8
100095bc:	80020116 	blt	r16,zero,10009dc4 <___vfprintf_internal_r+0x1d38>
100095c0:	1421c83a 	sub	r16,r2,r16
100095c4:	043cc40e 	bge	zero,r16,100088d8 <__alt_data_end+0xf80088d8>
100095c8:	04400404 	movi	r17,16
100095cc:	d8811f17 	ldw	r2,1148(sp)
100095d0:	8c3f110e 	bge	r17,r16,10009218 <__alt_data_end+0xf8009218>
100095d4:	01440074 	movhi	r5,4097
100095d8:	2954eb84 	addi	r5,r5,21422
100095dc:	d9412c15 	stw	r5,1200(sp)
100095e0:	04c001c4 	movi	r19,7
100095e4:	00000306 	br	100095f4 <___vfprintf_internal_r+0x1568>
100095e8:	42000204 	addi	r8,r8,8
100095ec:	843ffc04 	addi	r16,r16,-16
100095f0:	8c3f0c0e 	bge	r17,r16,10009224 <__alt_data_end+0xf8009224>
100095f4:	18c00404 	addi	r3,r3,16
100095f8:	10800044 	addi	r2,r2,1
100095fc:	45000015 	stw	r20,0(r8)
10009600:	44400115 	stw	r17,4(r8)
10009604:	d8c12015 	stw	r3,1152(sp)
10009608:	d8811f15 	stw	r2,1148(sp)
1000960c:	98bff60e 	bge	r19,r2,100095e8 <__alt_data_end+0xf80095e8>
10009610:	b809883a 	mov	r4,r23
10009614:	b00b883a 	mov	r5,r22
10009618:	d9811e04 	addi	r6,sp,1144
1000961c:	000f4580 	call	1000f458 <__sprint_r>
10009620:	103bb21e 	bne	r2,zero,100084ec <__alt_data_end+0xf80084ec>
10009624:	d8c12017 	ldw	r3,1152(sp)
10009628:	d8811f17 	ldw	r2,1148(sp)
1000962c:	da000404 	addi	r8,sp,16
10009630:	003fee06 	br	100095ec <__alt_data_end+0xf80095ec>
10009634:	e088703a 	and	r4,fp,r2
10009638:	203ec01e 	bne	r4,zero,1000913c <__alt_data_end+0xf800913c>
1000963c:	dc011f17 	ldw	r16,1148(sp)
10009640:	d9013117 	ldw	r4,1220(sp)
10009644:	40800115 	stw	r2,4(r8)
10009648:	84000044 	addi	r16,r16,1
1000964c:	41000015 	stw	r4,0(r8)
10009650:	d8c12015 	stw	r3,1152(sp)
10009654:	dc011f15 	stw	r16,1148(sp)
10009658:	008001c4 	movi	r2,7
1000965c:	14000e16 	blt	r2,r16,10009698 <___vfprintf_internal_r+0x160c>
10009660:	44400204 	addi	r17,r8,8
10009664:	003ee006 	br	100091e8 <__alt_data_end+0xf80091e8>
10009668:	01040074 	movhi	r4,4097
1000966c:	2114eb84 	addi	r4,r4,21422
10009670:	d9012c15 	stw	r4,1200(sp)
10009674:	d8812c17 	ldw	r2,1200(sp)
10009678:	1cc7883a 	add	r3,r3,r19
1000967c:	84000044 	addi	r16,r16,1
10009680:	88800015 	stw	r2,0(r17)
10009684:	8cc00115 	stw	r19,4(r17)
10009688:	d8c12015 	stw	r3,1152(sp)
1000968c:	dc011f15 	stw	r16,1148(sp)
10009690:	008001c4 	movi	r2,7
10009694:	143ed30e 	bge	r2,r16,100091e4 <__alt_data_end+0xf80091e4>
10009698:	b809883a 	mov	r4,r23
1000969c:	b00b883a 	mov	r5,r22
100096a0:	d9811e04 	addi	r6,sp,1144
100096a4:	000f4580 	call	1000f458 <__sprint_r>
100096a8:	103b901e 	bne	r2,zero,100084ec <__alt_data_end+0xf80084ec>
100096ac:	d8c12017 	ldw	r3,1152(sp)
100096b0:	dc011f17 	ldw	r16,1148(sp)
100096b4:	dc400404 	addi	r17,sp,16
100096b8:	003ecb06 	br	100091e8 <__alt_data_end+0xf80091e8>
100096bc:	b809883a 	mov	r4,r23
100096c0:	b00b883a 	mov	r5,r22
100096c4:	d9811e04 	addi	r6,sp,1144
100096c8:	000f4580 	call	1000f458 <__sprint_r>
100096cc:	103b871e 	bne	r2,zero,100084ec <__alt_data_end+0xf80084ec>
100096d0:	d8c12017 	ldw	r3,1152(sp)
100096d4:	dc011f17 	ldw	r16,1148(sp)
100096d8:	da000404 	addi	r8,sp,16
100096dc:	003ea206 	br	10009168 <__alt_data_end+0xf8009168>
100096e0:	b809883a 	mov	r4,r23
100096e4:	b00b883a 	mov	r5,r22
100096e8:	d9811e04 	addi	r6,sp,1144
100096ec:	000f4580 	call	1000f458 <__sprint_r>
100096f0:	103b7e1e 	bne	r2,zero,100084ec <__alt_data_end+0xf80084ec>
100096f4:	d8c12017 	ldw	r3,1152(sp)
100096f8:	dc011f17 	ldw	r16,1148(sp)
100096fc:	dc400404 	addi	r17,sp,16
10009700:	003ea406 	br	10009194 <__alt_data_end+0xf8009194>
10009704:	b809883a 	mov	r4,r23
10009708:	b00b883a 	mov	r5,r22
1000970c:	d9811e04 	addi	r6,sp,1144
10009710:	000f4580 	call	1000f458 <__sprint_r>
10009714:	103b751e 	bne	r2,zero,100084ec <__alt_data_end+0xf80084ec>
10009718:	d8c12017 	ldw	r3,1152(sp)
1000971c:	da000404 	addi	r8,sp,16
10009720:	003c3706 	br	10008800 <__alt_data_end+0xf8008800>
10009724:	04a5c83a 	sub	r18,zero,r18
10009728:	9004c03a 	cmpne	r2,r18,zero
1000972c:	056bc83a 	sub	r21,zero,r21
10009730:	a8abc83a 	sub	r21,r21,r2
10009734:	04c00b44 	movi	r19,45
10009738:	dcc12785 	stb	r19,1182(sp)
1000973c:	da413215 	stw	r9,1224(sp)
10009740:	00800044 	movi	r2,1
10009744:	9546b03a 	or	r3,r18,r21
10009748:	003bb106 	br	10008610 <__alt_data_end+0xf8008610>
1000974c:	da013f15 	stw	r8,1276(sp)
10009750:	da413e15 	stw	r9,1272(sp)
10009754:	00053a00 	call	100053a0 <__fpclassifyd>
10009758:	da013f17 	ldw	r8,1276(sp)
1000975c:	da413e17 	ldw	r9,1272(sp)
10009760:	1000e526 	beq	r2,zero,10009af8 <___vfprintf_internal_r+0x1a6c>
10009764:	04fff7c4 	movi	r19,-33
10009768:	00bfffc4 	movi	r2,-1
1000976c:	84e6703a 	and	r19,r16,r19
10009770:	48822926 	beq	r9,r2,1000a018 <___vfprintf_internal_r+0x1f8c>
10009774:	008011c4 	movi	r2,71
10009778:	98821626 	beq	r19,r2,10009fd4 <___vfprintf_internal_r+0x1f48>
1000977c:	d9013917 	ldw	r4,1252(sp)
10009780:	e0c04014 	ori	r3,fp,256
10009784:	d8c12d15 	stw	r3,1204(sp)
10009788:	20021f16 	blt	r4,zero,1000a008 <___vfprintf_internal_r+0x1f7c>
1000978c:	dc413917 	ldw	r17,1252(sp)
10009790:	d8012b05 	stb	zero,1196(sp)
10009794:	00801984 	movi	r2,102
10009798:	80814d26 	beq	r16,r2,10009cd0 <___vfprintf_internal_r+0x1c44>
1000979c:	00801184 	movi	r2,70
100097a0:	80814b26 	beq	r16,r2,10009cd0 <___vfprintf_internal_r+0x1c44>
100097a4:	00801144 	movi	r2,69
100097a8:	98821d26 	beq	r19,r2,1000a020 <___vfprintf_internal_r+0x1f94>
100097ac:	482b883a 	mov	r21,r9
100097b0:	d8812604 	addi	r2,sp,1176
100097b4:	d8800115 	stw	r2,4(sp)
100097b8:	d9413717 	ldw	r5,1244(sp)
100097bc:	d8812504 	addi	r2,sp,1172
100097c0:	d8800215 	stw	r2,8(sp)
100097c4:	d8812104 	addi	r2,sp,1156
100097c8:	dd400015 	stw	r21,0(sp)
100097cc:	d8800315 	stw	r2,12(sp)
100097d0:	b809883a 	mov	r4,r23
100097d4:	880d883a 	mov	r6,r17
100097d8:	01c00084 	movi	r7,2
100097dc:	da013f15 	stw	r8,1276(sp)
100097e0:	da413e15 	stw	r9,1272(sp)
100097e4:	000a5040 	call	1000a504 <_dtoa_r>
100097e8:	d8813115 	stw	r2,1220(sp)
100097ec:	008019c4 	movi	r2,103
100097f0:	da013f17 	ldw	r8,1276(sp)
100097f4:	da413e17 	ldw	r9,1272(sp)
100097f8:	80800226 	beq	r16,r2,10009804 <___vfprintf_internal_r+0x1778>
100097fc:	008011c4 	movi	r2,71
10009800:	8081451e 	bne	r16,r2,10009d18 <___vfprintf_internal_r+0x1c8c>
10009804:	e080004c 	andi	r2,fp,1
10009808:	10021e26 	beq	r2,zero,1000a084 <___vfprintf_internal_r+0x1ff8>
1000980c:	d8c13117 	ldw	r3,1220(sp)
10009810:	1d55883a 	add	r10,r3,r21
10009814:	d9013717 	ldw	r4,1244(sp)
10009818:	880b883a 	mov	r5,r17
1000981c:	000d883a 	mov	r6,zero
10009820:	000f883a 	mov	r7,zero
10009824:	da013f15 	stw	r8,1276(sp)
10009828:	da413e15 	stw	r9,1272(sp)
1000982c:	da813d15 	stw	r10,1268(sp)
10009830:	00069740 	call	10006974 <__eqdf2>
10009834:	da013f17 	ldw	r8,1276(sp)
10009838:	da413e17 	ldw	r9,1272(sp)
1000983c:	da813d17 	ldw	r10,1268(sp)
10009840:	1001a126 	beq	r2,zero,10009ec8 <___vfprintf_internal_r+0x1e3c>
10009844:	d8812117 	ldw	r2,1156(sp)
10009848:	1280062e 	bgeu	r2,r10,10009864 <___vfprintf_internal_r+0x17d8>
1000984c:	01000c04 	movi	r4,48
10009850:	10c00044 	addi	r3,r2,1
10009854:	d8c12115 	stw	r3,1156(sp)
10009858:	11000005 	stb	r4,0(r2)
1000985c:	d8812117 	ldw	r2,1156(sp)
10009860:	12bffb36 	bltu	r2,r10,10009850 <__alt_data_end+0xf8009850>
10009864:	d8c13117 	ldw	r3,1220(sp)
10009868:	10c5c83a 	sub	r2,r2,r3
1000986c:	d8813315 	stw	r2,1228(sp)
10009870:	008011c4 	movi	r2,71
10009874:	98818926 	beq	r19,r2,10009e9c <___vfprintf_internal_r+0x1e10>
10009878:	00801944 	movi	r2,101
1000987c:	14023c0e 	bge	r2,r16,1000a170 <___vfprintf_internal_r+0x20e4>
10009880:	d8c12617 	ldw	r3,1176(sp)
10009884:	00801984 	movi	r2,102
10009888:	d8c13415 	stw	r3,1232(sp)
1000988c:	8081ef26 	beq	r16,r2,1000a04c <___vfprintf_internal_r+0x1fc0>
10009890:	d8c13417 	ldw	r3,1232(sp)
10009894:	d9013317 	ldw	r4,1228(sp)
10009898:	1901e316 	blt	r3,r4,1000a028 <___vfprintf_internal_r+0x1f9c>
1000989c:	e080004c 	andi	r2,fp,1
100098a0:	1001f426 	beq	r2,zero,1000a074 <___vfprintf_internal_r+0x1fe8>
100098a4:	d8c13417 	ldw	r3,1232(sp)
100098a8:	1c400044 	addi	r17,r3,1
100098ac:	8839883a 	mov	fp,r17
100098b0:	8801e416 	blt	r17,zero,1000a044 <___vfprintf_internal_r+0x1fb8>
100098b4:	dd412b07 	ldb	r21,1196(sp)
100098b8:	a801701e 	bne	r21,zero,10009e7c <___vfprintf_internal_r+0x1df0>
100098bc:	df012b15 	stw	fp,1196(sp)
100098c0:	dcc12783 	ldbu	r19,1182(sp)
100098c4:	df012d17 	ldw	fp,1204(sp)
100098c8:	d8013215 	stw	zero,1224(sp)
100098cc:	dc812d15 	stw	r18,1204(sp)
100098d0:	003b6e06 	br	1000868c <__alt_data_end+0xf800868c>
100098d4:	e080040c 	andi	r2,fp,16
100098d8:	1000b51e 	bne	r2,zero,10009bb0 <___vfprintf_internal_r+0x1b24>
100098dc:	e080100c 	andi	r2,fp,64
100098e0:	10015b26 	beq	r2,zero,10009e50 <___vfprintf_internal_r+0x1dc4>
100098e4:	d9012d17 	ldw	r4,1204(sp)
100098e8:	d9412f17 	ldw	r5,1212(sp)
100098ec:	20800017 	ldw	r2,0(r4)
100098f0:	21000104 	addi	r4,r4,4
100098f4:	d9012d15 	stw	r4,1204(sp)
100098f8:	1140000d 	sth	r5,0(r2)
100098fc:	003a2006 	br	10008180 <__alt_data_end+0xf8008180>
10009900:	e0c0100c 	andi	r3,fp,64
10009904:	1800a226 	beq	r3,zero,10009b90 <___vfprintf_internal_r+0x1b04>
10009908:	d8c12d17 	ldw	r3,1204(sp)
1000990c:	1480000b 	ldhu	r18,0(r2)
10009910:	002b883a 	mov	r21,zero
10009914:	18c00104 	addi	r3,r3,4
10009918:	d8c12d15 	stw	r3,1204(sp)
1000991c:	0005883a 	mov	r2,zero
10009920:	9007883a 	mov	r3,r18
10009924:	003c6906 	br	10008acc <__alt_data_end+0xf8008acc>
10009928:	e0c0100c 	andi	r3,fp,64
1000992c:	18009026 	beq	r3,zero,10009b70 <___vfprintf_internal_r+0x1ae4>
10009930:	1480000b 	ldhu	r18,0(r2)
10009934:	d8812d17 	ldw	r2,1204(sp)
10009938:	002b883a 	mov	r21,zero
1000993c:	9007883a 	mov	r3,r18
10009940:	10800104 	addi	r2,r2,4
10009944:	d8812d15 	stw	r2,1204(sp)
10009948:	00800044 	movi	r2,1
1000994c:	003c5f06 	br	10008acc <__alt_data_end+0xf8008acc>
10009950:	e0c0100c 	andi	r3,fp,64
10009954:	18008026 	beq	r3,zero,10009b58 <___vfprintf_internal_r+0x1acc>
10009958:	d9012d17 	ldw	r4,1204(sp)
1000995c:	1480000b 	ldhu	r18,0(r2)
10009960:	002b883a 	mov	r21,zero
10009964:	21000104 	addi	r4,r4,4
10009968:	d9012d15 	stw	r4,1204(sp)
1000996c:	003c7906 	br	10008b54 <__alt_data_end+0xf8008b54>
10009970:	e080100c 	andi	r2,fp,64
10009974:	10007126 	beq	r2,zero,10009b3c <___vfprintf_internal_r+0x1ab0>
10009978:	1c80000f 	ldh	r18,0(r3)
1000997c:	d8812d17 	ldw	r2,1204(sp)
10009980:	902bd7fa 	srai	r21,r18,31
10009984:	10800104 	addi	r2,r2,4
10009988:	d8812d15 	stw	r2,1204(sp)
1000998c:	a805883a 	mov	r2,r21
10009990:	003b1a06 	br	100085fc <__alt_data_end+0xf80085fc>
10009994:	e4000007 	ldb	r16,0(fp)
10009998:	e005883a 	mov	r2,fp
1000999c:	003a2306 	br	1000822c <__alt_data_end+0xf800822c>
100099a0:	00800084 	movi	r2,2
100099a4:	003c4906 	br	10008acc <__alt_data_end+0xf8008acc>
100099a8:	01040074 	movhi	r4,4097
100099ac:	2114eb84 	addi	r4,r4,21422
100099b0:	d9012c15 	stw	r4,1200(sp)
100099b4:	d9012c17 	ldw	r4,1200(sp)
100099b8:	1c47883a 	add	r3,r3,r17
100099bc:	10800044 	addi	r2,r2,1
100099c0:	41000015 	stw	r4,0(r8)
100099c4:	44400115 	stw	r17,4(r8)
100099c8:	d8c12015 	stw	r3,1152(sp)
100099cc:	d8811f15 	stw	r2,1148(sp)
100099d0:	010001c4 	movi	r4,7
100099d4:	20becc16 	blt	r4,r2,10009508 <__alt_data_end+0xf8009508>
100099d8:	42000204 	addi	r8,r8,8
100099dc:	003ed106 	br	10009524 <__alt_data_end+0xf8009524>
100099e0:	01040074 	movhi	r4,4097
100099e4:	2114eb84 	addi	r4,r4,21422
100099e8:	d9012c15 	stw	r4,1200(sp)
100099ec:	003ba306 	br	1000887c <__alt_data_end+0xf800887c>
100099f0:	b809883a 	mov	r4,r23
100099f4:	b00b883a 	mov	r5,r22
100099f8:	d9811e04 	addi	r6,sp,1144
100099fc:	000f4580 	call	1000f458 <__sprint_r>
10009a00:	103aba1e 	bne	r2,zero,100084ec <__alt_data_end+0xf80084ec>
10009a04:	d8c12017 	ldw	r3,1152(sp)
10009a08:	da000404 	addi	r8,sp,16
10009a0c:	003d6c06 	br	10008fc0 <__alt_data_end+0xf8008fc0>
10009a10:	d8811f17 	ldw	r2,1148(sp)
10009a14:	01440074 	movhi	r5,4097
10009a18:	01000044 	movi	r4,1
10009a1c:	18c00044 	addi	r3,r3,1
10009a20:	10800044 	addi	r2,r2,1
10009a24:	2954eb04 	addi	r5,r5,21420
10009a28:	41000115 	stw	r4,4(r8)
10009a2c:	41400015 	stw	r5,0(r8)
10009a30:	d8c12015 	stw	r3,1152(sp)
10009a34:	d8811f15 	stw	r2,1148(sp)
10009a38:	010001c4 	movi	r4,7
10009a3c:	20806716 	blt	r4,r2,10009bdc <___vfprintf_internal_r+0x1b50>
10009a40:	42000204 	addi	r8,r8,8
10009a44:	8000041e 	bne	r16,zero,10009a58 <___vfprintf_internal_r+0x19cc>
10009a48:	d8813317 	ldw	r2,1228(sp)
10009a4c:	1000021e 	bne	r2,zero,10009a58 <___vfprintf_internal_r+0x19cc>
10009a50:	e080004c 	andi	r2,fp,1
10009a54:	103ba026 	beq	r2,zero,100088d8 <__alt_data_end+0xf80088d8>
10009a58:	d9013817 	ldw	r4,1248(sp)
10009a5c:	d8811f17 	ldw	r2,1148(sp)
10009a60:	d9413517 	ldw	r5,1236(sp)
10009a64:	1907883a 	add	r3,r3,r4
10009a68:	10800044 	addi	r2,r2,1
10009a6c:	41000115 	stw	r4,4(r8)
10009a70:	41400015 	stw	r5,0(r8)
10009a74:	d8c12015 	stw	r3,1152(sp)
10009a78:	d8811f15 	stw	r2,1148(sp)
10009a7c:	010001c4 	movi	r4,7
10009a80:	20815716 	blt	r4,r2,10009fe0 <___vfprintf_internal_r+0x1f54>
10009a84:	42000204 	addi	r8,r8,8
10009a88:	0421c83a 	sub	r16,zero,r16
10009a8c:	0400810e 	bge	zero,r16,10009c94 <___vfprintf_internal_r+0x1c08>
10009a90:	04400404 	movi	r17,16
10009a94:	8c00bd0e 	bge	r17,r16,10009d8c <___vfprintf_internal_r+0x1d00>
10009a98:	01440074 	movhi	r5,4097
10009a9c:	2954eb84 	addi	r5,r5,21422
10009aa0:	d9412c15 	stw	r5,1200(sp)
10009aa4:	04c001c4 	movi	r19,7
10009aa8:	00000306 	br	10009ab8 <___vfprintf_internal_r+0x1a2c>
10009aac:	42000204 	addi	r8,r8,8
10009ab0:	843ffc04 	addi	r16,r16,-16
10009ab4:	8c00b80e 	bge	r17,r16,10009d98 <___vfprintf_internal_r+0x1d0c>
10009ab8:	18c00404 	addi	r3,r3,16
10009abc:	10800044 	addi	r2,r2,1
10009ac0:	45000015 	stw	r20,0(r8)
10009ac4:	44400115 	stw	r17,4(r8)
10009ac8:	d8c12015 	stw	r3,1152(sp)
10009acc:	d8811f15 	stw	r2,1148(sp)
10009ad0:	98bff60e 	bge	r19,r2,10009aac <__alt_data_end+0xf8009aac>
10009ad4:	b809883a 	mov	r4,r23
10009ad8:	b00b883a 	mov	r5,r22
10009adc:	d9811e04 	addi	r6,sp,1144
10009ae0:	000f4580 	call	1000f458 <__sprint_r>
10009ae4:	103a811e 	bne	r2,zero,100084ec <__alt_data_end+0xf80084ec>
10009ae8:	d8c12017 	ldw	r3,1152(sp)
10009aec:	d8811f17 	ldw	r2,1148(sp)
10009af0:	da000404 	addi	r8,sp,16
10009af4:	003fee06 	br	10009ab0 <__alt_data_end+0xf8009ab0>
10009af8:	008011c4 	movi	r2,71
10009afc:	1400db16 	blt	r2,r16,10009e6c <___vfprintf_internal_r+0x1de0>
10009b00:	01040074 	movhi	r4,4097
10009b04:	2114dd04 	addi	r4,r4,21364
10009b08:	d9013115 	stw	r4,1220(sp)
10009b0c:	00c000c4 	movi	r3,3
10009b10:	00bfdfc4 	movi	r2,-129
10009b14:	d8c12b15 	stw	r3,1196(sp)
10009b18:	e0b8703a 	and	fp,fp,r2
10009b1c:	dcc12783 	ldbu	r19,1182(sp)
10009b20:	dc812d15 	stw	r18,1204(sp)
10009b24:	1823883a 	mov	r17,r3
10009b28:	d8013215 	stw	zero,1224(sp)
10009b2c:	d8013415 	stw	zero,1232(sp)
10009b30:	003ad606 	br	1000868c <__alt_data_end+0xf800868c>
10009b34:	4823883a 	mov	r17,r9
10009b38:	003cc906 	br	10008e60 <__alt_data_end+0xf8008e60>
10009b3c:	1c800017 	ldw	r18,0(r3)
10009b40:	d8c12d17 	ldw	r3,1204(sp)
10009b44:	902bd7fa 	srai	r21,r18,31
10009b48:	18c00104 	addi	r3,r3,4
10009b4c:	d8c12d15 	stw	r3,1204(sp)
10009b50:	a805883a 	mov	r2,r21
10009b54:	003aa906 	br	100085fc <__alt_data_end+0xf80085fc>
10009b58:	d9412d17 	ldw	r5,1204(sp)
10009b5c:	14800017 	ldw	r18,0(r2)
10009b60:	002b883a 	mov	r21,zero
10009b64:	29400104 	addi	r5,r5,4
10009b68:	d9412d15 	stw	r5,1204(sp)
10009b6c:	003bf906 	br	10008b54 <__alt_data_end+0xf8008b54>
10009b70:	d8c12d17 	ldw	r3,1204(sp)
10009b74:	14800017 	ldw	r18,0(r2)
10009b78:	002b883a 	mov	r21,zero
10009b7c:	18c00104 	addi	r3,r3,4
10009b80:	d8c12d15 	stw	r3,1204(sp)
10009b84:	00800044 	movi	r2,1
10009b88:	9007883a 	mov	r3,r18
10009b8c:	003bcf06 	br	10008acc <__alt_data_end+0xf8008acc>
10009b90:	d9012d17 	ldw	r4,1204(sp)
10009b94:	14800017 	ldw	r18,0(r2)
10009b98:	002b883a 	mov	r21,zero
10009b9c:	21000104 	addi	r4,r4,4
10009ba0:	d9012d15 	stw	r4,1204(sp)
10009ba4:	0005883a 	mov	r2,zero
10009ba8:	9007883a 	mov	r3,r18
10009bac:	003bc706 	br	10008acc <__alt_data_end+0xf8008acc>
10009bb0:	d9412d17 	ldw	r5,1204(sp)
10009bb4:	d8c12f17 	ldw	r3,1212(sp)
10009bb8:	28800017 	ldw	r2,0(r5)
10009bbc:	29400104 	addi	r5,r5,4
10009bc0:	d9412d15 	stw	r5,1204(sp)
10009bc4:	10c00015 	stw	r3,0(r2)
10009bc8:	00396d06 	br	10008180 <__alt_data_end+0xf8008180>
10009bcc:	01040074 	movhi	r4,4097
10009bd0:	2114db04 	addi	r4,r4,21356
10009bd4:	d9013115 	stw	r4,1220(sp)
10009bd8:	003ba206 	br	10008a64 <__alt_data_end+0xf8008a64>
10009bdc:	b809883a 	mov	r4,r23
10009be0:	b00b883a 	mov	r5,r22
10009be4:	d9811e04 	addi	r6,sp,1144
10009be8:	000f4580 	call	1000f458 <__sprint_r>
10009bec:	103a3f1e 	bne	r2,zero,100084ec <__alt_data_end+0xf80084ec>
10009bf0:	dc012617 	ldw	r16,1176(sp)
10009bf4:	d8c12017 	ldw	r3,1152(sp)
10009bf8:	da000404 	addi	r8,sp,16
10009bfc:	003f9106 	br	10009a44 <__alt_data_end+0xf8009a44>
10009c00:	e0800044 	addi	r2,fp,1
10009c04:	9cc00814 	ori	r19,r19,32
10009c08:	e4000047 	ldb	r16,1(fp)
10009c0c:	00398706 	br	1000822c <__alt_data_end+0xf800822c>
10009c10:	d8812e17 	ldw	r2,1208(sp)
10009c14:	d8c12d15 	stw	r3,1204(sp)
10009c18:	0085c83a 	sub	r2,zero,r2
10009c1c:	d8812e15 	stw	r2,1208(sp)
10009c20:	e005883a 	mov	r2,fp
10009c24:	003a3a06 	br	10008510 <__alt_data_end+0xf8008510>
10009c28:	b809883a 	mov	r4,r23
10009c2c:	b00b883a 	mov	r5,r22
10009c30:	d9811e04 	addi	r6,sp,1144
10009c34:	000f4580 	call	1000f458 <__sprint_r>
10009c38:	103a2c1e 	bne	r2,zero,100084ec <__alt_data_end+0xf80084ec>
10009c3c:	d8c12017 	ldw	r3,1152(sp)
10009c40:	da000404 	addi	r8,sp,16
10009c44:	003cf006 	br	10009008 <__alt_data_end+0xf8009008>
10009c48:	d8c12817 	ldw	r3,1184(sp)
10009c4c:	d9013117 	ldw	r4,1220(sp)
10009c50:	1923c83a 	sub	r17,r3,r4
10009c54:	003a8806 	br	10008678 <__alt_data_end+0xf8008678>
10009c58:	da013f15 	stw	r8,1276(sp)
10009c5c:	0007ff40 	call	10007ff4 <strlen>
10009c60:	1023883a 	mov	r17,r2
10009c64:	da013f17 	ldw	r8,1276(sp)
10009c68:	883c7f0e 	bge	r17,zero,10008e68 <__alt_data_end+0xf8008e68>
10009c6c:	0005883a 	mov	r2,zero
10009c70:	003c7d06 	br	10008e68 <__alt_data_end+0xf8008e68>
10009c74:	b809883a 	mov	r4,r23
10009c78:	b00b883a 	mov	r5,r22
10009c7c:	d9811e04 	addi	r6,sp,1144
10009c80:	000f4580 	call	1000f458 <__sprint_r>
10009c84:	103a191e 	bne	r2,zero,100084ec <__alt_data_end+0xf80084ec>
10009c88:	d8c12017 	ldw	r3,1152(sp)
10009c8c:	d8811f17 	ldw	r2,1148(sp)
10009c90:	da000404 	addi	r8,sp,16
10009c94:	d9413317 	ldw	r5,1228(sp)
10009c98:	d9013117 	ldw	r4,1220(sp)
10009c9c:	10800044 	addi	r2,r2,1
10009ca0:	28c7883a 	add	r3,r5,r3
10009ca4:	41000015 	stw	r4,0(r8)
10009ca8:	41400115 	stw	r5,4(r8)
10009cac:	d8c12015 	stw	r3,1152(sp)
10009cb0:	d8811f15 	stw	r2,1148(sp)
10009cb4:	010001c4 	movi	r4,7
10009cb8:	20bb060e 	bge	r4,r2,100088d4 <__alt_data_end+0xf80088d4>
10009cbc:	003d6206 	br	10009248 <__alt_data_end+0xf8009248>
10009cc0:	01040074 	movhi	r4,4097
10009cc4:	2114ef84 	addi	r4,r4,21438
10009cc8:	d9013615 	stw	r4,1240(sp)
10009ccc:	003aa306 	br	1000875c <__alt_data_end+0xf800875c>
10009cd0:	d8812604 	addi	r2,sp,1176
10009cd4:	d8800115 	stw	r2,4(sp)
10009cd8:	d9413717 	ldw	r5,1244(sp)
10009cdc:	d8812504 	addi	r2,sp,1172
10009ce0:	d8800215 	stw	r2,8(sp)
10009ce4:	d8812104 	addi	r2,sp,1156
10009ce8:	da400015 	stw	r9,0(sp)
10009cec:	d8800315 	stw	r2,12(sp)
10009cf0:	b809883a 	mov	r4,r23
10009cf4:	880d883a 	mov	r6,r17
10009cf8:	01c000c4 	movi	r7,3
10009cfc:	da013f15 	stw	r8,1276(sp)
10009d00:	da413e15 	stw	r9,1272(sp)
10009d04:	000a5040 	call	1000a504 <_dtoa_r>
10009d08:	da413e17 	ldw	r9,1272(sp)
10009d0c:	da013f17 	ldw	r8,1276(sp)
10009d10:	d8813115 	stw	r2,1220(sp)
10009d14:	482b883a 	mov	r21,r9
10009d18:	d8c13117 	ldw	r3,1220(sp)
10009d1c:	00801184 	movi	r2,70
10009d20:	1d55883a 	add	r10,r3,r21
10009d24:	98bebb1e 	bne	r19,r2,10009814 <__alt_data_end+0xf8009814>
10009d28:	19000007 	ldb	r4,0(r3)
10009d2c:	00800c04 	movi	r2,48
10009d30:	2080dd26 	beq	r4,r2,1000a0a8 <___vfprintf_internal_r+0x201c>
10009d34:	d8c12617 	ldw	r3,1176(sp)
10009d38:	50d5883a 	add	r10,r10,r3
10009d3c:	003eb506 	br	10009814 <__alt_data_end+0xf8009814>
10009d40:	0023883a 	mov	r17,zero
10009d44:	003d9b06 	br	100093b4 <__alt_data_end+0xf80093b4>
10009d48:	b809883a 	mov	r4,r23
10009d4c:	b00b883a 	mov	r5,r22
10009d50:	d9811e04 	addi	r6,sp,1144
10009d54:	000f4580 	call	1000f458 <__sprint_r>
10009d58:	1039e41e 	bne	r2,zero,100084ec <__alt_data_end+0xf80084ec>
10009d5c:	d8c12017 	ldw	r3,1152(sp)
10009d60:	da000404 	addi	r8,sp,16
10009d64:	003d9206 	br	100093b0 <__alt_data_end+0xf80093b0>
10009d68:	b809883a 	mov	r4,r23
10009d6c:	b00b883a 	mov	r5,r22
10009d70:	d9811e04 	addi	r6,sp,1144
10009d74:	000f4580 	call	1000f458 <__sprint_r>
10009d78:	1039dc1e 	bne	r2,zero,100084ec <__alt_data_end+0xf80084ec>
10009d7c:	d8812617 	ldw	r2,1176(sp)
10009d80:	d8c12017 	ldw	r3,1152(sp)
10009d84:	da000404 	addi	r8,sp,16
10009d88:	003dfb06 	br	10009578 <__alt_data_end+0xf8009578>
10009d8c:	01040074 	movhi	r4,4097
10009d90:	2114eb84 	addi	r4,r4,21422
10009d94:	d9012c15 	stw	r4,1200(sp)
10009d98:	d9012c17 	ldw	r4,1200(sp)
10009d9c:	1c07883a 	add	r3,r3,r16
10009da0:	10800044 	addi	r2,r2,1
10009da4:	41000015 	stw	r4,0(r8)
10009da8:	44000115 	stw	r16,4(r8)
10009dac:	d8c12015 	stw	r3,1152(sp)
10009db0:	d8811f15 	stw	r2,1148(sp)
10009db4:	010001c4 	movi	r4,7
10009db8:	20bfae16 	blt	r4,r2,10009c74 <__alt_data_end+0xf8009c74>
10009dbc:	42000204 	addi	r8,r8,8
10009dc0:	003fb406 	br	10009c94 <__alt_data_end+0xf8009c94>
10009dc4:	0021883a 	mov	r16,zero
10009dc8:	003dfd06 	br	100095c0 <__alt_data_end+0xf80095c0>
10009dcc:	01440074 	movhi	r5,4097
10009dd0:	2954ef84 	addi	r5,r5,21438
10009dd4:	d9413615 	stw	r5,1240(sp)
10009dd8:	003ae306 	br	10008968 <__alt_data_end+0xf8008968>
10009ddc:	b809883a 	mov	r4,r23
10009de0:	b00b883a 	mov	r5,r22
10009de4:	d9811e04 	addi	r6,sp,1144
10009de8:	000f4580 	call	1000f458 <__sprint_r>
10009dec:	1039bf1e 	bne	r2,zero,100084ec <__alt_data_end+0xf80084ec>
10009df0:	d8812617 	ldw	r2,1176(sp)
10009df4:	d9413317 	ldw	r5,1228(sp)
10009df8:	d8c12017 	ldw	r3,1152(sp)
10009dfc:	da000404 	addi	r8,sp,16
10009e00:	2885c83a 	sub	r2,r5,r2
10009e04:	003ded06 	br	100095bc <__alt_data_end+0xf80095bc>
10009e08:	00800184 	movi	r2,6
10009e0c:	1240012e 	bgeu	r2,r9,10009e14 <___vfprintf_internal_r+0x1d88>
10009e10:	1013883a 	mov	r9,r2
10009e14:	4823883a 	mov	r17,r9
10009e18:	4805883a 	mov	r2,r9
10009e1c:	4800b216 	blt	r9,zero,1000a0e8 <___vfprintf_internal_r+0x205c>
10009e20:	01440074 	movhi	r5,4097
10009e24:	2954e904 	addi	r5,r5,21412
10009e28:	d8812b15 	stw	r2,1196(sp)
10009e2c:	dc812d15 	stw	r18,1204(sp)
10009e30:	d8013215 	stw	zero,1224(sp)
10009e34:	d8013415 	stw	zero,1232(sp)
10009e38:	d9413115 	stw	r5,1220(sp)
10009e3c:	0005883a 	mov	r2,zero
10009e40:	003a1906 	br	100086a8 <__alt_data_end+0xf80086a8>
10009e44:	04c00b44 	movi	r19,45
10009e48:	dcc12785 	stb	r19,1182(sp)
10009e4c:	003b0006 	br	10008a50 <__alt_data_end+0xf8008a50>
10009e50:	d8c12d17 	ldw	r3,1204(sp)
10009e54:	d9012f17 	ldw	r4,1212(sp)
10009e58:	18800017 	ldw	r2,0(r3)
10009e5c:	18c00104 	addi	r3,r3,4
10009e60:	d8c12d15 	stw	r3,1204(sp)
10009e64:	11000015 	stw	r4,0(r2)
10009e68:	0038c506 	br	10008180 <__alt_data_end+0xf8008180>
10009e6c:	01440074 	movhi	r5,4097
10009e70:	2954de04 	addi	r5,r5,21368
10009e74:	d9413115 	stw	r5,1220(sp)
10009e78:	003f2406 	br	10009b0c <__alt_data_end+0xf8009b0c>
10009e7c:	00800b44 	movi	r2,45
10009e80:	d8812785 	stb	r2,1182(sp)
10009e84:	df012b15 	stw	fp,1196(sp)
10009e88:	d8013215 	stw	zero,1224(sp)
10009e8c:	df012d17 	ldw	fp,1204(sp)
10009e90:	00800b44 	movi	r2,45
10009e94:	dc812d15 	stw	r18,1204(sp)
10009e98:	003a0006 	br	1000869c <__alt_data_end+0xf800869c>
10009e9c:	d8c12617 	ldw	r3,1176(sp)
10009ea0:	00bfff44 	movi	r2,-3
10009ea4:	18800a16 	blt	r3,r2,10009ed0 <___vfprintf_internal_r+0x1e44>
10009ea8:	48c00916 	blt	r9,r3,10009ed0 <___vfprintf_internal_r+0x1e44>
10009eac:	d8c13415 	stw	r3,1232(sp)
10009eb0:	040019c4 	movi	r16,103
10009eb4:	003e7606 	br	10009890 <__alt_data_end+0xf8009890>
10009eb8:	01040074 	movhi	r4,4097
10009ebc:	2114eb84 	addi	r4,r4,21422
10009ec0:	d9012c15 	stw	r4,1200(sp)
10009ec4:	003c8e06 	br	10009100 <__alt_data_end+0xf8009100>
10009ec8:	5005883a 	mov	r2,r10
10009ecc:	003e6506 	br	10009864 <__alt_data_end+0xf8009864>
10009ed0:	843fff84 	addi	r16,r16,-2
10009ed4:	1d7fffc4 	addi	r21,r3,-1
10009ed8:	dd412615 	stw	r21,1176(sp)
10009edc:	dc0122c5 	stb	r16,1163(sp)
10009ee0:	a8009216 	blt	r21,zero,1000a12c <___vfprintf_internal_r+0x20a0>
10009ee4:	00800ac4 	movi	r2,43
10009ee8:	d8812305 	stb	r2,1164(sp)
10009eec:	00800244 	movi	r2,9
10009ef0:	1540660e 	bge	r2,r21,1000a08c <___vfprintf_internal_r+0x2000>
10009ef4:	dcc122c4 	addi	r19,sp,1163
10009ef8:	dc012c15 	stw	r16,1200(sp)
10009efc:	4023883a 	mov	r17,r8
10009f00:	9821883a 	mov	r16,r19
10009f04:	a809883a 	mov	r4,r21
10009f08:	01400284 	movi	r5,10
10009f0c:	00056c40 	call	100056c4 <__modsi3>
10009f10:	10800c04 	addi	r2,r2,48
10009f14:	843fffc4 	addi	r16,r16,-1
10009f18:	a809883a 	mov	r4,r21
10009f1c:	01400284 	movi	r5,10
10009f20:	80800005 	stb	r2,0(r16)
10009f24:	00056700 	call	10005670 <__divsi3>
10009f28:	01000244 	movi	r4,9
10009f2c:	102b883a 	mov	r21,r2
10009f30:	20bff416 	blt	r4,r2,10009f04 <__alt_data_end+0xf8009f04>
10009f34:	8811883a 	mov	r8,r17
10009f38:	10800c04 	addi	r2,r2,48
10009f3c:	8023883a 	mov	r17,r16
10009f40:	897fffc4 	addi	r5,r17,-1
10009f44:	88bfffc5 	stb	r2,-1(r17)
10009f48:	dc012c17 	ldw	r16,1200(sp)
10009f4c:	2cc08a2e 	bgeu	r5,r19,1000a178 <___vfprintf_internal_r+0x20ec>
10009f50:	d9812384 	addi	r6,sp,1166
10009f54:	344dc83a 	sub	r6,r6,r17
10009f58:	d9012344 	addi	r4,sp,1165
10009f5c:	998d883a 	add	r6,r19,r6
10009f60:	00000106 	br	10009f68 <___vfprintf_internal_r+0x1edc>
10009f64:	28800003 	ldbu	r2,0(r5)
10009f68:	20800005 	stb	r2,0(r4)
10009f6c:	21000044 	addi	r4,r4,1
10009f70:	29400044 	addi	r5,r5,1
10009f74:	21bffb1e 	bne	r4,r6,10009f64 <__alt_data_end+0xf8009f64>
10009f78:	d8812304 	addi	r2,sp,1164
10009f7c:	1445c83a 	sub	r2,r2,r17
10009f80:	d9412344 	addi	r5,sp,1165
10009f84:	2885883a 	add	r2,r5,r2
10009f88:	14e7c83a 	sub	r19,r2,r19
10009f8c:	d8813317 	ldw	r2,1228(sp)
10009f90:	d8c13317 	ldw	r3,1228(sp)
10009f94:	dcc13a15 	stw	r19,1256(sp)
10009f98:	14e3883a 	add	r17,r2,r19
10009f9c:	00800044 	movi	r2,1
10009fa0:	10c0550e 	bge	r2,r3,1000a0f8 <___vfprintf_internal_r+0x206c>
10009fa4:	8c400044 	addi	r17,r17,1
10009fa8:	8839883a 	mov	fp,r17
10009fac:	88005016 	blt	r17,zero,1000a0f0 <___vfprintf_internal_r+0x2064>
10009fb0:	d8013415 	stw	zero,1232(sp)
10009fb4:	003e3f06 	br	100098b4 <__alt_data_end+0xf80098b4>
10009fb8:	da412b15 	stw	r9,1196(sp)
10009fbc:	dcc12783 	ldbu	r19,1182(sp)
10009fc0:	4823883a 	mov	r17,r9
10009fc4:	dc812d15 	stw	r18,1204(sp)
10009fc8:	d8013215 	stw	zero,1224(sp)
10009fcc:	d8013415 	stw	zero,1232(sp)
10009fd0:	0039ae06 	br	1000868c <__alt_data_end+0xf800868c>
10009fd4:	483de91e 	bne	r9,zero,1000977c <__alt_data_end+0xf800977c>
10009fd8:	8813883a 	mov	r9,r17
10009fdc:	003de706 	br	1000977c <__alt_data_end+0xf800977c>
10009fe0:	b809883a 	mov	r4,r23
10009fe4:	b00b883a 	mov	r5,r22
10009fe8:	d9811e04 	addi	r6,sp,1144
10009fec:	000f4580 	call	1000f458 <__sprint_r>
10009ff0:	10393e1e 	bne	r2,zero,100084ec <__alt_data_end+0xf80084ec>
10009ff4:	dc012617 	ldw	r16,1176(sp)
10009ff8:	d8c12017 	ldw	r3,1152(sp)
10009ffc:	d8811f17 	ldw	r2,1148(sp)
1000a000:	da000404 	addi	r8,sp,16
1000a004:	003ea006 	br	10009a88 <__alt_data_end+0xf8009a88>
1000a008:	00c00b44 	movi	r3,45
1000a00c:	2460003c 	xorhi	r17,r4,32768
1000a010:	d8c12b05 	stb	r3,1196(sp)
1000a014:	003ddf06 	br	10009794 <__alt_data_end+0xf8009794>
1000a018:	02400184 	movi	r9,6
1000a01c:	003dd706 	br	1000977c <__alt_data_end+0xf800977c>
1000a020:	4d400044 	addi	r21,r9,1
1000a024:	003de206 	br	100097b0 <__alt_data_end+0xf80097b0>
1000a028:	d8c13417 	ldw	r3,1232(sp)
1000a02c:	00c0490e 	bge	zero,r3,1000a154 <___vfprintf_internal_r+0x20c8>
1000a030:	04400044 	movi	r17,1
1000a034:	d9013317 	ldw	r4,1228(sp)
1000a038:	8923883a 	add	r17,r17,r4
1000a03c:	8839883a 	mov	fp,r17
1000a040:	883e1c0e 	bge	r17,zero,100098b4 <__alt_data_end+0xf80098b4>
1000a044:	0039883a 	mov	fp,zero
1000a048:	003e1a06 	br	100098b4 <__alt_data_end+0xf80098b4>
1000a04c:	00c03b0e 	bge	zero,r3,1000a13c <___vfprintf_internal_r+0x20b0>
1000a050:	4800021e 	bne	r9,zero,1000a05c <___vfprintf_internal_r+0x1fd0>
1000a054:	e080004c 	andi	r2,fp,1
1000a058:	10000626 	beq	r2,zero,1000a074 <___vfprintf_internal_r+0x1fe8>
1000a05c:	d8c13417 	ldw	r3,1232(sp)
1000a060:	4a400044 	addi	r9,r9,1
1000a064:	1a63883a 	add	r17,r3,r9
1000a068:	8839883a 	mov	fp,r17
1000a06c:	883e110e 	bge	r17,zero,100098b4 <__alt_data_end+0xf80098b4>
1000a070:	003ff406 	br	1000a044 <__alt_data_end+0xf800a044>
1000a074:	1839883a 	mov	fp,r3
1000a078:	18004116 	blt	r3,zero,1000a180 <___vfprintf_internal_r+0x20f4>
1000a07c:	dc413417 	ldw	r17,1232(sp)
1000a080:	003e0c06 	br	100098b4 <__alt_data_end+0xf80098b4>
1000a084:	d8812117 	ldw	r2,1156(sp)
1000a088:	003df606 	br	10009864 <__alt_data_end+0xf8009864>
1000a08c:	00800c04 	movi	r2,48
1000a090:	a8c00c04 	addi	r3,r21,48
1000a094:	d8812345 	stb	r2,1165(sp)
1000a098:	d8c12385 	stb	r3,1166(sp)
1000a09c:	d88123c4 	addi	r2,sp,1167
1000a0a0:	dcc122c4 	addi	r19,sp,1163
1000a0a4:	003fb806 	br	10009f88 <__alt_data_end+0xf8009f88>
1000a0a8:	d9013717 	ldw	r4,1244(sp)
1000a0ac:	880b883a 	mov	r5,r17
1000a0b0:	000d883a 	mov	r6,zero
1000a0b4:	000f883a 	mov	r7,zero
1000a0b8:	da013f15 	stw	r8,1276(sp)
1000a0bc:	da413e15 	stw	r9,1272(sp)
1000a0c0:	da813d15 	stw	r10,1268(sp)
1000a0c4:	00069740 	call	10006974 <__eqdf2>
1000a0c8:	da013f17 	ldw	r8,1276(sp)
1000a0cc:	da413e17 	ldw	r9,1272(sp)
1000a0d0:	da813d17 	ldw	r10,1268(sp)
1000a0d4:	103f1726 	beq	r2,zero,10009d34 <__alt_data_end+0xf8009d34>
1000a0d8:	00800044 	movi	r2,1
1000a0dc:	1547c83a 	sub	r3,r2,r21
1000a0e0:	d8c12615 	stw	r3,1176(sp)
1000a0e4:	003f1406 	br	10009d38 <__alt_data_end+0xf8009d38>
1000a0e8:	0005883a 	mov	r2,zero
1000a0ec:	003f4c06 	br	10009e20 <__alt_data_end+0xf8009e20>
1000a0f0:	0039883a 	mov	fp,zero
1000a0f4:	003fae06 	br	10009fb0 <__alt_data_end+0xf8009fb0>
1000a0f8:	e084703a 	and	r2,fp,r2
1000a0fc:	103faa26 	beq	r2,zero,10009fa8 <__alt_data_end+0xf8009fa8>
1000a100:	003fa806 	br	10009fa4 <__alt_data_end+0xf8009fa4>
1000a104:	d9412d17 	ldw	r5,1204(sp)
1000a108:	2a400017 	ldw	r9,0(r5)
1000a10c:	28c00104 	addi	r3,r5,4
1000a110:	d8c12d15 	stw	r3,1204(sp)
1000a114:	483ebc0e 	bge	r9,zero,10009c08 <__alt_data_end+0xf8009c08>
1000a118:	027fffc4 	movi	r9,-1
1000a11c:	e4000047 	ldb	r16,1(fp)
1000a120:	00384206 	br	1000822c <__alt_data_end+0xf800822c>
1000a124:	043fffc4 	movi	r16,-1
1000a128:	0038ce06 	br	10008464 <__alt_data_end+0xf8008464>
1000a12c:	00800b44 	movi	r2,45
1000a130:	056bc83a 	sub	r21,zero,r21
1000a134:	d8812305 	stb	r2,1164(sp)
1000a138:	003f6c06 	br	10009eec <__alt_data_end+0xf8009eec>
1000a13c:	4800081e 	bne	r9,zero,1000a160 <___vfprintf_internal_r+0x20d4>
1000a140:	e080004c 	andi	r2,fp,1
1000a144:	1000061e 	bne	r2,zero,1000a160 <___vfprintf_internal_r+0x20d4>
1000a148:	07000044 	movi	fp,1
1000a14c:	e023883a 	mov	r17,fp
1000a150:	003dd806 	br	100098b4 <__alt_data_end+0xf80098b4>
1000a154:	04400084 	movi	r17,2
1000a158:	88e3c83a 	sub	r17,r17,r3
1000a15c:	003fb506 	br	1000a034 <__alt_data_end+0xf800a034>
1000a160:	4c400084 	addi	r17,r9,2
1000a164:	8839883a 	mov	fp,r17
1000a168:	883dd20e 	bge	r17,zero,100098b4 <__alt_data_end+0xf80098b4>
1000a16c:	003fb506 	br	1000a044 <__alt_data_end+0xf800a044>
1000a170:	d8c12617 	ldw	r3,1176(sp)
1000a174:	003f5706 	br	10009ed4 <__alt_data_end+0xf8009ed4>
1000a178:	d8812344 	addi	r2,sp,1165
1000a17c:	003f8206 	br	10009f88 <__alt_data_end+0xf8009f88>
1000a180:	0039883a 	mov	fp,zero
1000a184:	003fbd06 	br	1000a07c <__alt_data_end+0xf800a07c>

1000a188 <__vfprintf_internal>:
1000a188:	2007883a 	mov	r3,r4
1000a18c:	01040074 	movhi	r4,4097
1000a190:	211c0604 	addi	r4,r4,28696
1000a194:	21000017 	ldw	r4,0(r4)
1000a198:	2805883a 	mov	r2,r5
1000a19c:	300f883a 	mov	r7,r6
1000a1a0:	180b883a 	mov	r5,r3
1000a1a4:	100d883a 	mov	r6,r2
1000a1a8:	000808c1 	jmpi	1000808c <___vfprintf_internal_r>

1000a1ac <__swsetup_r>:
1000a1ac:	00840074 	movhi	r2,4097
1000a1b0:	defffd04 	addi	sp,sp,-12
1000a1b4:	109c0604 	addi	r2,r2,28696
1000a1b8:	dc400115 	stw	r17,4(sp)
1000a1bc:	2023883a 	mov	r17,r4
1000a1c0:	11000017 	ldw	r4,0(r2)
1000a1c4:	dc000015 	stw	r16,0(sp)
1000a1c8:	dfc00215 	stw	ra,8(sp)
1000a1cc:	2821883a 	mov	r16,r5
1000a1d0:	20000226 	beq	r4,zero,1000a1dc <__swsetup_r+0x30>
1000a1d4:	20c00e17 	ldw	r3,56(r4)
1000a1d8:	18002e26 	beq	r3,zero,1000a294 <__swsetup_r+0xe8>
1000a1dc:	8080030b 	ldhu	r2,12(r16)
1000a1e0:	10c0020c 	andi	r3,r2,8
1000a1e4:	100d883a 	mov	r6,r2
1000a1e8:	18000f26 	beq	r3,zero,1000a228 <__swsetup_r+0x7c>
1000a1ec:	80c00417 	ldw	r3,16(r16)
1000a1f0:	18001526 	beq	r3,zero,1000a248 <__swsetup_r+0x9c>
1000a1f4:	1100004c 	andi	r4,r2,1
1000a1f8:	20001c1e 	bne	r4,zero,1000a26c <__swsetup_r+0xc0>
1000a1fc:	1080008c 	andi	r2,r2,2
1000a200:	1000261e 	bne	r2,zero,1000a29c <__swsetup_r+0xf0>
1000a204:	80800517 	ldw	r2,20(r16)
1000a208:	80800215 	stw	r2,8(r16)
1000a20c:	18001c26 	beq	r3,zero,1000a280 <__swsetup_r+0xd4>
1000a210:	0005883a 	mov	r2,zero
1000a214:	dfc00217 	ldw	ra,8(sp)
1000a218:	dc400117 	ldw	r17,4(sp)
1000a21c:	dc000017 	ldw	r16,0(sp)
1000a220:	dec00304 	addi	sp,sp,12
1000a224:	f800283a 	ret
1000a228:	3080040c 	andi	r2,r6,16
1000a22c:	10001726 	beq	r2,zero,1000a28c <__swsetup_r+0xe0>
1000a230:	3080010c 	andi	r2,r6,4
1000a234:	10001b1e 	bne	r2,zero,1000a2a4 <__swsetup_r+0xf8>
1000a238:	80c00417 	ldw	r3,16(r16)
1000a23c:	30800214 	ori	r2,r6,8
1000a240:	8080030d 	sth	r2,12(r16)
1000a244:	183feb1e 	bne	r3,zero,1000a1f4 <__alt_data_end+0xf800a1f4>
1000a248:	1140a00c 	andi	r5,r2,640
1000a24c:	01008004 	movi	r4,512
1000a250:	293fe826 	beq	r5,r4,1000a1f4 <__alt_data_end+0xf800a1f4>
1000a254:	8809883a 	mov	r4,r17
1000a258:	800b883a 	mov	r5,r16
1000a25c:	000cd400 	call	1000cd40 <__smakebuf_r>
1000a260:	8080030b 	ldhu	r2,12(r16)
1000a264:	80c00417 	ldw	r3,16(r16)
1000a268:	003fe206 	br	1000a1f4 <__alt_data_end+0xf800a1f4>
1000a26c:	80800517 	ldw	r2,20(r16)
1000a270:	80000215 	stw	zero,8(r16)
1000a274:	0085c83a 	sub	r2,zero,r2
1000a278:	80800615 	stw	r2,24(r16)
1000a27c:	183fe41e 	bne	r3,zero,1000a210 <__alt_data_end+0xf800a210>
1000a280:	8080030b 	ldhu	r2,12(r16)
1000a284:	1080200c 	andi	r2,r2,128
1000a288:	103fe226 	beq	r2,zero,1000a214 <__alt_data_end+0xf800a214>
1000a28c:	00bfffc4 	movi	r2,-1
1000a290:	003fe006 	br	1000a214 <__alt_data_end+0xf800a214>
1000a294:	000c1e80 	call	1000c1e8 <__sinit>
1000a298:	003fd006 	br	1000a1dc <__alt_data_end+0xf800a1dc>
1000a29c:	0005883a 	mov	r2,zero
1000a2a0:	003fd906 	br	1000a208 <__alt_data_end+0xf800a208>
1000a2a4:	81400c17 	ldw	r5,48(r16)
1000a2a8:	28000626 	beq	r5,zero,1000a2c4 <__swsetup_r+0x118>
1000a2ac:	80801004 	addi	r2,r16,64
1000a2b0:	28800326 	beq	r5,r2,1000a2c0 <__swsetup_r+0x114>
1000a2b4:	8809883a 	mov	r4,r17
1000a2b8:	000c35c0 	call	1000c35c <_free_r>
1000a2bc:	8180030b 	ldhu	r6,12(r16)
1000a2c0:	80000c15 	stw	zero,48(r16)
1000a2c4:	80c00417 	ldw	r3,16(r16)
1000a2c8:	00bff6c4 	movi	r2,-37
1000a2cc:	118c703a 	and	r6,r2,r6
1000a2d0:	80000115 	stw	zero,4(r16)
1000a2d4:	80c00015 	stw	r3,0(r16)
1000a2d8:	003fd806 	br	1000a23c <__alt_data_end+0xf800a23c>

1000a2dc <quorem>:
1000a2dc:	defff204 	addi	sp,sp,-56
1000a2e0:	ddc00b15 	stw	r23,44(sp)
1000a2e4:	20800417 	ldw	r2,16(r4)
1000a2e8:	2dc00417 	ldw	r23,16(r5)
1000a2ec:	dfc00d15 	stw	ra,52(sp)
1000a2f0:	df000c15 	stw	fp,48(sp)
1000a2f4:	dd800a15 	stw	r22,40(sp)
1000a2f8:	dd400915 	stw	r21,36(sp)
1000a2fc:	dd000815 	stw	r20,32(sp)
1000a300:	dcc00715 	stw	r19,28(sp)
1000a304:	dc800615 	stw	r18,24(sp)
1000a308:	dc400515 	stw	r17,20(sp)
1000a30c:	dc000415 	stw	r16,16(sp)
1000a310:	15c07a16 	blt	r2,r23,1000a4fc <quorem+0x220>
1000a314:	bdffffc4 	addi	r23,r23,-1
1000a318:	bde9883a 	add	r20,r23,r23
1000a31c:	28c00504 	addi	r3,r5,20
1000a320:	a529883a 	add	r20,r20,r20
1000a324:	1d39883a 	add	fp,r3,r20
1000a328:	24c00504 	addi	r19,r4,20
1000a32c:	d9400215 	stw	r5,8(sp)
1000a330:	9d29883a 	add	r20,r19,r20
1000a334:	e1400017 	ldw	r5,0(fp)
1000a338:	d9000015 	stw	r4,0(sp)
1000a33c:	a1000017 	ldw	r4,0(r20)
1000a340:	29400044 	addi	r5,r5,1
1000a344:	d8c00115 	stw	r3,4(sp)
1000a348:	dd000315 	stw	r20,12(sp)
1000a34c:	00057200 	call	10005720 <__udivsi3>
1000a350:	1025883a 	mov	r18,r2
1000a354:	10003026 	beq	r2,zero,1000a418 <quorem+0x13c>
1000a358:	dc400117 	ldw	r17,4(sp)
1000a35c:	9829883a 	mov	r20,r19
1000a360:	002d883a 	mov	r22,zero
1000a364:	0021883a 	mov	r16,zero
1000a368:	8d400017 	ldw	r21,0(r17)
1000a36c:	900b883a 	mov	r5,r18
1000a370:	8c400104 	addi	r17,r17,4
1000a374:	a93fffcc 	andi	r4,r21,65535
1000a378:	00057300 	call	10005730 <__mulsi3>
1000a37c:	a808d43a 	srli	r4,r21,16
1000a380:	900b883a 	mov	r5,r18
1000a384:	b0ad883a 	add	r22,r22,r2
1000a388:	00057300 	call	10005730 <__mulsi3>
1000a38c:	a1000017 	ldw	r4,0(r20)
1000a390:	b00cd43a 	srli	r6,r22,16
1000a394:	b0ffffcc 	andi	r3,r22,65535
1000a398:	217fffcc 	andi	r5,r4,65535
1000a39c:	2c21883a 	add	r16,r5,r16
1000a3a0:	80c7c83a 	sub	r3,r16,r3
1000a3a4:	2008d43a 	srli	r4,r4,16
1000a3a8:	3085883a 	add	r2,r6,r2
1000a3ac:	1821d43a 	srai	r16,r3,16
1000a3b0:	117fffcc 	andi	r5,r2,65535
1000a3b4:	2149c83a 	sub	r4,r4,r5
1000a3b8:	2421883a 	add	r16,r4,r16
1000a3bc:	8008943a 	slli	r4,r16,16
1000a3c0:	18ffffcc 	andi	r3,r3,65535
1000a3c4:	102cd43a 	srli	r22,r2,16
1000a3c8:	20c8b03a 	or	r4,r4,r3
1000a3cc:	a1000015 	stw	r4,0(r20)
1000a3d0:	8021d43a 	srai	r16,r16,16
1000a3d4:	a5000104 	addi	r20,r20,4
1000a3d8:	e47fe32e 	bgeu	fp,r17,1000a368 <__alt_data_end+0xf800a368>
1000a3dc:	d8c00317 	ldw	r3,12(sp)
1000a3e0:	18800017 	ldw	r2,0(r3)
1000a3e4:	10000c1e 	bne	r2,zero,1000a418 <quorem+0x13c>
1000a3e8:	18bfff04 	addi	r2,r3,-4
1000a3ec:	9880082e 	bgeu	r19,r2,1000a410 <quorem+0x134>
1000a3f0:	18ffff17 	ldw	r3,-4(r3)
1000a3f4:	18000326 	beq	r3,zero,1000a404 <quorem+0x128>
1000a3f8:	00000506 	br	1000a410 <quorem+0x134>
1000a3fc:	10c00017 	ldw	r3,0(r2)
1000a400:	1800031e 	bne	r3,zero,1000a410 <quorem+0x134>
1000a404:	10bfff04 	addi	r2,r2,-4
1000a408:	bdffffc4 	addi	r23,r23,-1
1000a40c:	98bffb36 	bltu	r19,r2,1000a3fc <__alt_data_end+0xf800a3fc>
1000a410:	d8c00017 	ldw	r3,0(sp)
1000a414:	1dc00415 	stw	r23,16(r3)
1000a418:	d9000017 	ldw	r4,0(sp)
1000a41c:	d9400217 	ldw	r5,8(sp)
1000a420:	000e4bc0 	call	1000e4bc <__mcmp>
1000a424:	10002816 	blt	r2,zero,1000a4c8 <quorem+0x1ec>
1000a428:	dc400117 	ldw	r17,4(sp)
1000a42c:	94800044 	addi	r18,r18,1
1000a430:	980d883a 	mov	r6,r19
1000a434:	0007883a 	mov	r3,zero
1000a438:	31000017 	ldw	r4,0(r6)
1000a43c:	89400017 	ldw	r5,0(r17)
1000a440:	31800104 	addi	r6,r6,4
1000a444:	20bfffcc 	andi	r2,r4,65535
1000a448:	10c7883a 	add	r3,r2,r3
1000a44c:	28bfffcc 	andi	r2,r5,65535
1000a450:	1885c83a 	sub	r2,r3,r2
1000a454:	280ad43a 	srli	r5,r5,16
1000a458:	2008d43a 	srli	r4,r4,16
1000a45c:	1007d43a 	srai	r3,r2,16
1000a460:	10bfffcc 	andi	r2,r2,65535
1000a464:	2149c83a 	sub	r4,r4,r5
1000a468:	20c9883a 	add	r4,r4,r3
1000a46c:	200a943a 	slli	r5,r4,16
1000a470:	8c400104 	addi	r17,r17,4
1000a474:	2007d43a 	srai	r3,r4,16
1000a478:	2884b03a 	or	r2,r5,r2
1000a47c:	30bfff15 	stw	r2,-4(r6)
1000a480:	e47fed2e 	bgeu	fp,r17,1000a438 <__alt_data_end+0xf800a438>
1000a484:	bdc5883a 	add	r2,r23,r23
1000a488:	1085883a 	add	r2,r2,r2
1000a48c:	9887883a 	add	r3,r19,r2
1000a490:	18800017 	ldw	r2,0(r3)
1000a494:	10000c1e 	bne	r2,zero,1000a4c8 <quorem+0x1ec>
1000a498:	18bfff04 	addi	r2,r3,-4
1000a49c:	9880082e 	bgeu	r19,r2,1000a4c0 <quorem+0x1e4>
1000a4a0:	18ffff17 	ldw	r3,-4(r3)
1000a4a4:	18000326 	beq	r3,zero,1000a4b4 <quorem+0x1d8>
1000a4a8:	00000506 	br	1000a4c0 <quorem+0x1e4>
1000a4ac:	10c00017 	ldw	r3,0(r2)
1000a4b0:	1800031e 	bne	r3,zero,1000a4c0 <quorem+0x1e4>
1000a4b4:	10bfff04 	addi	r2,r2,-4
1000a4b8:	bdffffc4 	addi	r23,r23,-1
1000a4bc:	98bffb36 	bltu	r19,r2,1000a4ac <__alt_data_end+0xf800a4ac>
1000a4c0:	d8c00017 	ldw	r3,0(sp)
1000a4c4:	1dc00415 	stw	r23,16(r3)
1000a4c8:	9005883a 	mov	r2,r18
1000a4cc:	dfc00d17 	ldw	ra,52(sp)
1000a4d0:	df000c17 	ldw	fp,48(sp)
1000a4d4:	ddc00b17 	ldw	r23,44(sp)
1000a4d8:	dd800a17 	ldw	r22,40(sp)
1000a4dc:	dd400917 	ldw	r21,36(sp)
1000a4e0:	dd000817 	ldw	r20,32(sp)
1000a4e4:	dcc00717 	ldw	r19,28(sp)
1000a4e8:	dc800617 	ldw	r18,24(sp)
1000a4ec:	dc400517 	ldw	r17,20(sp)
1000a4f0:	dc000417 	ldw	r16,16(sp)
1000a4f4:	dec00e04 	addi	sp,sp,56
1000a4f8:	f800283a 	ret
1000a4fc:	0005883a 	mov	r2,zero
1000a500:	003ff206 	br	1000a4cc <__alt_data_end+0xf800a4cc>

1000a504 <_dtoa_r>:
1000a504:	20801017 	ldw	r2,64(r4)
1000a508:	deffde04 	addi	sp,sp,-136
1000a50c:	dd401d15 	stw	r21,116(sp)
1000a510:	dcc01b15 	stw	r19,108(sp)
1000a514:	dc801a15 	stw	r18,104(sp)
1000a518:	dc401915 	stw	r17,100(sp)
1000a51c:	dc001815 	stw	r16,96(sp)
1000a520:	dfc02115 	stw	ra,132(sp)
1000a524:	df002015 	stw	fp,128(sp)
1000a528:	ddc01f15 	stw	r23,124(sp)
1000a52c:	dd801e15 	stw	r22,120(sp)
1000a530:	dd001c15 	stw	r20,112(sp)
1000a534:	d9c00315 	stw	r7,12(sp)
1000a538:	2021883a 	mov	r16,r4
1000a53c:	302b883a 	mov	r21,r6
1000a540:	2825883a 	mov	r18,r5
1000a544:	dc402417 	ldw	r17,144(sp)
1000a548:	3027883a 	mov	r19,r6
1000a54c:	10000826 	beq	r2,zero,1000a570 <_dtoa_r+0x6c>
1000a550:	21801117 	ldw	r6,68(r4)
1000a554:	00c00044 	movi	r3,1
1000a558:	100b883a 	mov	r5,r2
1000a55c:	1986983a 	sll	r3,r3,r6
1000a560:	11800115 	stw	r6,4(r2)
1000a564:	10c00215 	stw	r3,8(r2)
1000a568:	000dbe80 	call	1000dbe8 <_Bfree>
1000a56c:	80001015 	stw	zero,64(r16)
1000a570:	a8002d16 	blt	r21,zero,1000a628 <_dtoa_r+0x124>
1000a574:	88000015 	stw	zero,0(r17)
1000a578:	a8dffc2c 	andhi	r3,r21,32752
1000a57c:	009ffc34 	movhi	r2,32752
1000a580:	18801b26 	beq	r3,r2,1000a5f0 <_dtoa_r+0xec>
1000a584:	9009883a 	mov	r4,r18
1000a588:	980b883a 	mov	r5,r19
1000a58c:	000d883a 	mov	r6,zero
1000a590:	000f883a 	mov	r7,zero
1000a594:	00069740 	call	10006974 <__eqdf2>
1000a598:	10002a1e 	bne	r2,zero,1000a644 <_dtoa_r+0x140>
1000a59c:	d8c02317 	ldw	r3,140(sp)
1000a5a0:	d9002517 	ldw	r4,148(sp)
1000a5a4:	00800044 	movi	r2,1
1000a5a8:	18800015 	stw	r2,0(r3)
1000a5ac:	2001a226 	beq	r4,zero,1000ac38 <_dtoa_r+0x734>
1000a5b0:	00840074 	movhi	r2,4097
1000a5b4:	1094eb44 	addi	r2,r2,21421
1000a5b8:	20800015 	stw	r2,0(r4)
1000a5bc:	10bfffc4 	addi	r2,r2,-1
1000a5c0:	dfc02117 	ldw	ra,132(sp)
1000a5c4:	df002017 	ldw	fp,128(sp)
1000a5c8:	ddc01f17 	ldw	r23,124(sp)
1000a5cc:	dd801e17 	ldw	r22,120(sp)
1000a5d0:	dd401d17 	ldw	r21,116(sp)
1000a5d4:	dd001c17 	ldw	r20,112(sp)
1000a5d8:	dcc01b17 	ldw	r19,108(sp)
1000a5dc:	dc801a17 	ldw	r18,104(sp)
1000a5e0:	dc401917 	ldw	r17,100(sp)
1000a5e4:	dc001817 	ldw	r16,96(sp)
1000a5e8:	dec02204 	addi	sp,sp,136
1000a5ec:	f800283a 	ret
1000a5f0:	d8c02317 	ldw	r3,140(sp)
1000a5f4:	0089c3c4 	movi	r2,9999
1000a5f8:	18800015 	stw	r2,0(r3)
1000a5fc:	90017c26 	beq	r18,zero,1000abf0 <_dtoa_r+0x6ec>
1000a600:	00840074 	movhi	r2,4097
1000a604:	1094f704 	addi	r2,r2,21468
1000a608:	d9002517 	ldw	r4,148(sp)
1000a60c:	203fec26 	beq	r4,zero,1000a5c0 <__alt_data_end+0xf800a5c0>
1000a610:	10c000c7 	ldb	r3,3(r2)
1000a614:	18017d1e 	bne	r3,zero,1000ac0c <_dtoa_r+0x708>
1000a618:	10c000c4 	addi	r3,r2,3
1000a61c:	d9802517 	ldw	r6,148(sp)
1000a620:	30c00015 	stw	r3,0(r6)
1000a624:	003fe606 	br	1000a5c0 <__alt_data_end+0xf800a5c0>
1000a628:	04e00034 	movhi	r19,32768
1000a62c:	9cffffc4 	addi	r19,r19,-1
1000a630:	00800044 	movi	r2,1
1000a634:	ace6703a 	and	r19,r21,r19
1000a638:	88800015 	stw	r2,0(r17)
1000a63c:	982b883a 	mov	r21,r19
1000a640:	003fcd06 	br	1000a578 <__alt_data_end+0xf800a578>
1000a644:	d8800204 	addi	r2,sp,8
1000a648:	a822d53a 	srli	r17,r21,20
1000a64c:	d8800015 	stw	r2,0(sp)
1000a650:	8009883a 	mov	r4,r16
1000a654:	900b883a 	mov	r5,r18
1000a658:	980d883a 	mov	r6,r19
1000a65c:	d9c00104 	addi	r7,sp,4
1000a660:	000e8300 	call	1000e830 <__d2b>
1000a664:	1039883a 	mov	fp,r2
1000a668:	88016a1e 	bne	r17,zero,1000ac14 <_dtoa_r+0x710>
1000a66c:	dd000217 	ldw	r20,8(sp)
1000a670:	dc400117 	ldw	r17,4(sp)
1000a674:	00befbc4 	movi	r2,-1041
1000a678:	a463883a 	add	r17,r20,r17
1000a67c:	8882ea16 	blt	r17,r2,1000b228 <_dtoa_r+0xd24>
1000a680:	00bf0384 	movi	r2,-1010
1000a684:	1445c83a 	sub	r2,r2,r17
1000a688:	89010484 	addi	r4,r17,1042
1000a68c:	a8aa983a 	sll	r21,r21,r2
1000a690:	9108d83a 	srl	r4,r18,r4
1000a694:	a908b03a 	or	r4,r21,r4
1000a698:	0011e600 	call	10011e60 <__floatunsidf>
1000a69c:	017f8434 	movhi	r5,65040
1000a6a0:	01800044 	movi	r6,1
1000a6a4:	1009883a 	mov	r4,r2
1000a6a8:	194b883a 	add	r5,r3,r5
1000a6ac:	8c7fffc4 	addi	r17,r17,-1
1000a6b0:	d9800f15 	stw	r6,60(sp)
1000a6b4:	000d883a 	mov	r6,zero
1000a6b8:	01cffe34 	movhi	r7,16376
1000a6bc:	00074240 	call	10007424 <__subdf3>
1000a6c0:	0198dbf4 	movhi	r6,25455
1000a6c4:	01cff4f4 	movhi	r7,16339
1000a6c8:	1009883a 	mov	r4,r2
1000a6cc:	180b883a 	mov	r5,r3
1000a6d0:	3190d844 	addi	r6,r6,17249
1000a6d4:	39e1e9c4 	addi	r7,r7,-30809
1000a6d8:	0006bb80 	call	10006bb8 <__muldf3>
1000a6dc:	01a2d874 	movhi	r6,35681
1000a6e0:	01cff1f4 	movhi	r7,16327
1000a6e4:	180b883a 	mov	r5,r3
1000a6e8:	31b22cc4 	addi	r6,r6,-14157
1000a6ec:	39e28a04 	addi	r7,r7,-30168
1000a6f0:	1009883a 	mov	r4,r2
1000a6f4:	00057580 	call	10005758 <__adddf3>
1000a6f8:	8809883a 	mov	r4,r17
1000a6fc:	102d883a 	mov	r22,r2
1000a700:	182b883a 	mov	r21,r3
1000a704:	0007d7c0 	call	10007d7c <__floatsidf>
1000a708:	019427f4 	movhi	r6,20639
1000a70c:	01cff4f4 	movhi	r7,16339
1000a710:	1009883a 	mov	r4,r2
1000a714:	180b883a 	mov	r5,r3
1000a718:	319e7ec4 	addi	r6,r6,31227
1000a71c:	39d104c4 	addi	r7,r7,17427
1000a720:	0006bb80 	call	10006bb8 <__muldf3>
1000a724:	b009883a 	mov	r4,r22
1000a728:	a80b883a 	mov	r5,r21
1000a72c:	100d883a 	mov	r6,r2
1000a730:	180f883a 	mov	r7,r3
1000a734:	00057580 	call	10005758 <__adddf3>
1000a738:	1009883a 	mov	r4,r2
1000a73c:	180b883a 	mov	r5,r3
1000a740:	102d883a 	mov	r22,r2
1000a744:	182b883a 	mov	r21,r3
1000a748:	0007cf40 	call	10007cf4 <__fixdfsi>
1000a74c:	b009883a 	mov	r4,r22
1000a750:	a80b883a 	mov	r5,r21
1000a754:	000d883a 	mov	r6,zero
1000a758:	000f883a 	mov	r7,zero
1000a75c:	d8800515 	stw	r2,20(sp)
1000a760:	0006ad80 	call	10006ad8 <__ledf2>
1000a764:	10023116 	blt	r2,zero,1000b02c <_dtoa_r+0xb28>
1000a768:	d8c00517 	ldw	r3,20(sp)
1000a76c:	00800584 	movi	r2,22
1000a770:	10c21f36 	bltu	r2,r3,1000aff0 <_dtoa_r+0xaec>
1000a774:	180490fa 	slli	r2,r3,3
1000a778:	00c40074 	movhi	r3,4097
1000a77c:	18d51204 	addi	r3,r3,21576
1000a780:	1885883a 	add	r2,r3,r2
1000a784:	11000017 	ldw	r4,0(r2)
1000a788:	11400117 	ldw	r5,4(r2)
1000a78c:	900d883a 	mov	r6,r18
1000a790:	980f883a 	mov	r7,r19
1000a794:	00069f80 	call	100069f8 <__gedf2>
1000a798:	0082a70e 	bge	zero,r2,1000b238 <_dtoa_r+0xd34>
1000a79c:	d9000517 	ldw	r4,20(sp)
1000a7a0:	d8000c15 	stw	zero,48(sp)
1000a7a4:	213fffc4 	addi	r4,r4,-1
1000a7a8:	d9000515 	stw	r4,20(sp)
1000a7ac:	a463c83a 	sub	r17,r20,r17
1000a7b0:	8dbfffc4 	addi	r22,r17,-1
1000a7b4:	b0021916 	blt	r22,zero,1000b01c <_dtoa_r+0xb18>
1000a7b8:	d8000815 	stw	zero,32(sp)
1000a7bc:	d8800517 	ldw	r2,20(sp)
1000a7c0:	10020e16 	blt	r2,zero,1000affc <_dtoa_r+0xaf8>
1000a7c4:	b0ad883a 	add	r22,r22,r2
1000a7c8:	d8800a15 	stw	r2,40(sp)
1000a7cc:	d8000915 	stw	zero,36(sp)
1000a7d0:	d8c00317 	ldw	r3,12(sp)
1000a7d4:	00800244 	movi	r2,9
1000a7d8:	10c11a36 	bltu	r2,r3,1000ac44 <_dtoa_r+0x740>
1000a7dc:	00800144 	movi	r2,5
1000a7e0:	10c4fc0e 	bge	r2,r3,1000bbd4 <_dtoa_r+0x16d0>
1000a7e4:	18ffff04 	addi	r3,r3,-4
1000a7e8:	d8c00315 	stw	r3,12(sp)
1000a7ec:	0029883a 	mov	r20,zero
1000a7f0:	d9800317 	ldw	r6,12(sp)
1000a7f4:	008000c4 	movi	r2,3
1000a7f8:	3083bd26 	beq	r6,r2,1000b6f0 <_dtoa_r+0x11ec>
1000a7fc:	1183670e 	bge	r2,r6,1000b59c <_dtoa_r+0x1098>
1000a800:	d8c00317 	ldw	r3,12(sp)
1000a804:	00800104 	movi	r2,4
1000a808:	1882e726 	beq	r3,r2,1000b3a8 <_dtoa_r+0xea4>
1000a80c:	00800144 	movi	r2,5
1000a810:	1884f21e 	bne	r3,r2,1000bbdc <_dtoa_r+0x16d8>
1000a814:	00800044 	movi	r2,1
1000a818:	d8800b15 	stw	r2,44(sp)
1000a81c:	d8c02217 	ldw	r3,136(sp)
1000a820:	d9000517 	ldw	r4,20(sp)
1000a824:	1907883a 	add	r3,r3,r4
1000a828:	19800044 	addi	r6,r3,1
1000a82c:	d8c00d15 	stw	r3,52(sp)
1000a830:	d9800615 	stw	r6,24(sp)
1000a834:	0183c30e 	bge	zero,r6,1000b744 <_dtoa_r+0x1240>
1000a838:	d9800617 	ldw	r6,24(sp)
1000a83c:	3023883a 	mov	r17,r6
1000a840:	80001115 	stw	zero,68(r16)
1000a844:	008005c4 	movi	r2,23
1000a848:	1184f62e 	bgeu	r2,r6,1000bc24 <_dtoa_r+0x1720>
1000a84c:	00c00044 	movi	r3,1
1000a850:	00800104 	movi	r2,4
1000a854:	1085883a 	add	r2,r2,r2
1000a858:	11000504 	addi	r4,r2,20
1000a85c:	180b883a 	mov	r5,r3
1000a860:	18c00044 	addi	r3,r3,1
1000a864:	313ffb2e 	bgeu	r6,r4,1000a854 <__alt_data_end+0xf800a854>
1000a868:	81401115 	stw	r5,68(r16)
1000a86c:	8009883a 	mov	r4,r16
1000a870:	000db400 	call	1000db40 <_Balloc>
1000a874:	d8800715 	stw	r2,28(sp)
1000a878:	80801015 	stw	r2,64(r16)
1000a87c:	00800384 	movi	r2,14
1000a880:	1440fd36 	bltu	r2,r17,1000ac78 <_dtoa_r+0x774>
1000a884:	a000fc26 	beq	r20,zero,1000ac78 <_dtoa_r+0x774>
1000a888:	d8800517 	ldw	r2,20(sp)
1000a88c:	0083b90e 	bge	zero,r2,1000b774 <_dtoa_r+0x1270>
1000a890:	d8c00517 	ldw	r3,20(sp)
1000a894:	108003cc 	andi	r2,r2,15
1000a898:	100490fa 	slli	r2,r2,3
1000a89c:	182fd13a 	srai	r23,r3,4
1000a8a0:	00c40074 	movhi	r3,4097
1000a8a4:	18d51204 	addi	r3,r3,21576
1000a8a8:	1885883a 	add	r2,r3,r2
1000a8ac:	b8c0040c 	andi	r3,r23,16
1000a8b0:	12c00017 	ldw	r11,0(r2)
1000a8b4:	12800117 	ldw	r10,4(r2)
1000a8b8:	18039726 	beq	r3,zero,1000b718 <_dtoa_r+0x1214>
1000a8bc:	00840074 	movhi	r2,4097
1000a8c0:	10950804 	addi	r2,r2,21536
1000a8c4:	11800817 	ldw	r6,32(r2)
1000a8c8:	11c00917 	ldw	r7,36(r2)
1000a8cc:	9009883a 	mov	r4,r18
1000a8d0:	980b883a 	mov	r5,r19
1000a8d4:	da801615 	stw	r10,88(sp)
1000a8d8:	dac01515 	stw	r11,84(sp)
1000a8dc:	0005ff40 	call	10005ff4 <__divdf3>
1000a8e0:	da801617 	ldw	r10,88(sp)
1000a8e4:	dac01517 	ldw	r11,84(sp)
1000a8e8:	bdc003cc 	andi	r23,r23,15
1000a8ec:	044000c4 	movi	r17,3
1000a8f0:	d8800e15 	stw	r2,56(sp)
1000a8f4:	182b883a 	mov	r21,r3
1000a8f8:	b8001126 	beq	r23,zero,1000a940 <_dtoa_r+0x43c>
1000a8fc:	05040074 	movhi	r20,4097
1000a900:	a5150804 	addi	r20,r20,21536
1000a904:	5805883a 	mov	r2,r11
1000a908:	5007883a 	mov	r3,r10
1000a90c:	b980004c 	andi	r6,r23,1
1000a910:	1009883a 	mov	r4,r2
1000a914:	b82fd07a 	srai	r23,r23,1
1000a918:	180b883a 	mov	r5,r3
1000a91c:	30000426 	beq	r6,zero,1000a930 <_dtoa_r+0x42c>
1000a920:	a1800017 	ldw	r6,0(r20)
1000a924:	a1c00117 	ldw	r7,4(r20)
1000a928:	8c400044 	addi	r17,r17,1
1000a92c:	0006bb80 	call	10006bb8 <__muldf3>
1000a930:	a5000204 	addi	r20,r20,8
1000a934:	b83ff51e 	bne	r23,zero,1000a90c <__alt_data_end+0xf800a90c>
1000a938:	1017883a 	mov	r11,r2
1000a93c:	1815883a 	mov	r10,r3
1000a940:	d9000e17 	ldw	r4,56(sp)
1000a944:	a80b883a 	mov	r5,r21
1000a948:	580d883a 	mov	r6,r11
1000a94c:	500f883a 	mov	r7,r10
1000a950:	0005ff40 	call	10005ff4 <__divdf3>
1000a954:	1029883a 	mov	r20,r2
1000a958:	182b883a 	mov	r21,r3
1000a95c:	d9800c17 	ldw	r6,48(sp)
1000a960:	30000626 	beq	r6,zero,1000a97c <_dtoa_r+0x478>
1000a964:	a009883a 	mov	r4,r20
1000a968:	a80b883a 	mov	r5,r21
1000a96c:	000d883a 	mov	r6,zero
1000a970:	01cffc34 	movhi	r7,16368
1000a974:	0006ad80 	call	10006ad8 <__ledf2>
1000a978:	10043216 	blt	r2,zero,1000ba44 <_dtoa_r+0x1540>
1000a97c:	8809883a 	mov	r4,r17
1000a980:	0007d7c0 	call	10007d7c <__floatsidf>
1000a984:	1009883a 	mov	r4,r2
1000a988:	180b883a 	mov	r5,r3
1000a98c:	a00d883a 	mov	r6,r20
1000a990:	a80f883a 	mov	r7,r21
1000a994:	0006bb80 	call	10006bb8 <__muldf3>
1000a998:	000d883a 	mov	r6,zero
1000a99c:	1009883a 	mov	r4,r2
1000a9a0:	180b883a 	mov	r5,r3
1000a9a4:	01d00734 	movhi	r7,16412
1000a9a8:	00057580 	call	10005758 <__adddf3>
1000a9ac:	1023883a 	mov	r17,r2
1000a9b0:	d9800617 	ldw	r6,24(sp)
1000a9b4:	00bf3034 	movhi	r2,64704
1000a9b8:	1885883a 	add	r2,r3,r2
1000a9bc:	d8800e15 	stw	r2,56(sp)
1000a9c0:	30032e26 	beq	r6,zero,1000b67c <_dtoa_r+0x1178>
1000a9c4:	d8c00517 	ldw	r3,20(sp)
1000a9c8:	da800617 	ldw	r10,24(sp)
1000a9cc:	d8c01215 	stw	r3,72(sp)
1000a9d0:	d9000b17 	ldw	r4,44(sp)
1000a9d4:	2003b026 	beq	r4,zero,1000b898 <_dtoa_r+0x1394>
1000a9d8:	50bfffc4 	addi	r2,r10,-1
1000a9dc:	100490fa 	slli	r2,r2,3
1000a9e0:	00c40074 	movhi	r3,4097
1000a9e4:	18d51204 	addi	r3,r3,21576
1000a9e8:	1885883a 	add	r2,r3,r2
1000a9ec:	11800017 	ldw	r6,0(r2)
1000a9f0:	11c00117 	ldw	r7,4(r2)
1000a9f4:	d8800717 	ldw	r2,28(sp)
1000a9f8:	0009883a 	mov	r4,zero
1000a9fc:	014ff834 	movhi	r5,16352
1000aa00:	da801615 	stw	r10,88(sp)
1000aa04:	15c00044 	addi	r23,r2,1
1000aa08:	0005ff40 	call	10005ff4 <__divdf3>
1000aa0c:	d9c00e17 	ldw	r7,56(sp)
1000aa10:	880d883a 	mov	r6,r17
1000aa14:	1009883a 	mov	r4,r2
1000aa18:	180b883a 	mov	r5,r3
1000aa1c:	00074240 	call	10007424 <__subdf3>
1000aa20:	a80b883a 	mov	r5,r21
1000aa24:	a009883a 	mov	r4,r20
1000aa28:	d8c01015 	stw	r3,64(sp)
1000aa2c:	d8800e15 	stw	r2,56(sp)
1000aa30:	0007cf40 	call	10007cf4 <__fixdfsi>
1000aa34:	1009883a 	mov	r4,r2
1000aa38:	d8801715 	stw	r2,92(sp)
1000aa3c:	0007d7c0 	call	10007d7c <__floatsidf>
1000aa40:	a009883a 	mov	r4,r20
1000aa44:	a80b883a 	mov	r5,r21
1000aa48:	100d883a 	mov	r6,r2
1000aa4c:	180f883a 	mov	r7,r3
1000aa50:	00074240 	call	10007424 <__subdf3>
1000aa54:	da001717 	ldw	r8,92(sp)
1000aa58:	1829883a 	mov	r20,r3
1000aa5c:	d8c00717 	ldw	r3,28(sp)
1000aa60:	d9000e17 	ldw	r4,56(sp)
1000aa64:	d9401017 	ldw	r5,64(sp)
1000aa68:	42000c04 	addi	r8,r8,48
1000aa6c:	1023883a 	mov	r17,r2
1000aa70:	1a000005 	stb	r8,0(r3)
1000aa74:	880d883a 	mov	r6,r17
1000aa78:	a00f883a 	mov	r7,r20
1000aa7c:	402b883a 	mov	r21,r8
1000aa80:	00069f80 	call	100069f8 <__gedf2>
1000aa84:	00844516 	blt	zero,r2,1000bb9c <_dtoa_r+0x1698>
1000aa88:	0009883a 	mov	r4,zero
1000aa8c:	014ffc34 	movhi	r5,16368
1000aa90:	880d883a 	mov	r6,r17
1000aa94:	a00f883a 	mov	r7,r20
1000aa98:	00074240 	call	10007424 <__subdf3>
1000aa9c:	d9000e17 	ldw	r4,56(sp)
1000aaa0:	d9401017 	ldw	r5,64(sp)
1000aaa4:	100d883a 	mov	r6,r2
1000aaa8:	180f883a 	mov	r7,r3
1000aaac:	00069f80 	call	100069f8 <__gedf2>
1000aab0:	da801617 	ldw	r10,88(sp)
1000aab4:	00843616 	blt	zero,r2,1000bb90 <_dtoa_r+0x168c>
1000aab8:	00800044 	movi	r2,1
1000aabc:	12806e0e 	bge	r2,r10,1000ac78 <_dtoa_r+0x774>
1000aac0:	d9000717 	ldw	r4,28(sp)
1000aac4:	dd801315 	stw	r22,76(sp)
1000aac8:	dc001115 	stw	r16,68(sp)
1000aacc:	2295883a 	add	r10,r4,r10
1000aad0:	dcc01415 	stw	r19,80(sp)
1000aad4:	502d883a 	mov	r22,r10
1000aad8:	dcc01017 	ldw	r19,64(sp)
1000aadc:	b821883a 	mov	r16,r23
1000aae0:	dc801015 	stw	r18,64(sp)
1000aae4:	dc800e17 	ldw	r18,56(sp)
1000aae8:	00000906 	br	1000ab10 <_dtoa_r+0x60c>
1000aaec:	00074240 	call	10007424 <__subdf3>
1000aaf0:	1009883a 	mov	r4,r2
1000aaf4:	180b883a 	mov	r5,r3
1000aaf8:	900d883a 	mov	r6,r18
1000aafc:	980f883a 	mov	r7,r19
1000ab00:	0006ad80 	call	10006ad8 <__ledf2>
1000ab04:	10040e16 	blt	r2,zero,1000bb40 <_dtoa_r+0x163c>
1000ab08:	b821883a 	mov	r16,r23
1000ab0c:	bd841026 	beq	r23,r22,1000bb50 <_dtoa_r+0x164c>
1000ab10:	9009883a 	mov	r4,r18
1000ab14:	980b883a 	mov	r5,r19
1000ab18:	000d883a 	mov	r6,zero
1000ab1c:	01d00934 	movhi	r7,16420
1000ab20:	0006bb80 	call	10006bb8 <__muldf3>
1000ab24:	000d883a 	mov	r6,zero
1000ab28:	01d00934 	movhi	r7,16420
1000ab2c:	8809883a 	mov	r4,r17
1000ab30:	a00b883a 	mov	r5,r20
1000ab34:	1025883a 	mov	r18,r2
1000ab38:	1827883a 	mov	r19,r3
1000ab3c:	0006bb80 	call	10006bb8 <__muldf3>
1000ab40:	180b883a 	mov	r5,r3
1000ab44:	1009883a 	mov	r4,r2
1000ab48:	1823883a 	mov	r17,r3
1000ab4c:	1029883a 	mov	r20,r2
1000ab50:	0007cf40 	call	10007cf4 <__fixdfsi>
1000ab54:	1009883a 	mov	r4,r2
1000ab58:	102b883a 	mov	r21,r2
1000ab5c:	0007d7c0 	call	10007d7c <__floatsidf>
1000ab60:	a009883a 	mov	r4,r20
1000ab64:	880b883a 	mov	r5,r17
1000ab68:	100d883a 	mov	r6,r2
1000ab6c:	180f883a 	mov	r7,r3
1000ab70:	00074240 	call	10007424 <__subdf3>
1000ab74:	ad400c04 	addi	r21,r21,48
1000ab78:	1009883a 	mov	r4,r2
1000ab7c:	180b883a 	mov	r5,r3
1000ab80:	900d883a 	mov	r6,r18
1000ab84:	980f883a 	mov	r7,r19
1000ab88:	85400005 	stb	r21,0(r16)
1000ab8c:	1023883a 	mov	r17,r2
1000ab90:	1829883a 	mov	r20,r3
1000ab94:	0006ad80 	call	10006ad8 <__ledf2>
1000ab98:	bdc00044 	addi	r23,r23,1
1000ab9c:	0009883a 	mov	r4,zero
1000aba0:	014ffc34 	movhi	r5,16368
1000aba4:	880d883a 	mov	r6,r17
1000aba8:	a00f883a 	mov	r7,r20
1000abac:	103fcf0e 	bge	r2,zero,1000aaec <__alt_data_end+0xf800aaec>
1000abb0:	d9801217 	ldw	r6,72(sp)
1000abb4:	dc001117 	ldw	r16,68(sp)
1000abb8:	d9800515 	stw	r6,20(sp)
1000abbc:	8009883a 	mov	r4,r16
1000abc0:	e00b883a 	mov	r5,fp
1000abc4:	000dbe80 	call	1000dbe8 <_Bfree>
1000abc8:	d8c00517 	ldw	r3,20(sp)
1000abcc:	d9002317 	ldw	r4,140(sp)
1000abd0:	d9802517 	ldw	r6,148(sp)
1000abd4:	b8000005 	stb	zero,0(r23)
1000abd8:	18800044 	addi	r2,r3,1
1000abdc:	20800015 	stw	r2,0(r4)
1000abe0:	30027226 	beq	r6,zero,1000b5ac <_dtoa_r+0x10a8>
1000abe4:	35c00015 	stw	r23,0(r6)
1000abe8:	d8800717 	ldw	r2,28(sp)
1000abec:	003e7406 	br	1000a5c0 <__alt_data_end+0xf800a5c0>
1000abf0:	00800434 	movhi	r2,16
1000abf4:	10bfffc4 	addi	r2,r2,-1
1000abf8:	a8aa703a 	and	r21,r21,r2
1000abfc:	a83e801e 	bne	r21,zero,1000a600 <__alt_data_end+0xf800a600>
1000ac00:	00840074 	movhi	r2,4097
1000ac04:	1094f404 	addi	r2,r2,21456
1000ac08:	003e7f06 	br	1000a608 <__alt_data_end+0xf800a608>
1000ac0c:	10c00204 	addi	r3,r2,8
1000ac10:	003e8206 	br	1000a61c <__alt_data_end+0xf800a61c>
1000ac14:	01400434 	movhi	r5,16
1000ac18:	297fffc4 	addi	r5,r5,-1
1000ac1c:	994a703a 	and	r5,r19,r5
1000ac20:	9009883a 	mov	r4,r18
1000ac24:	8c7f0044 	addi	r17,r17,-1023
1000ac28:	294ffc34 	orhi	r5,r5,16368
1000ac2c:	dd000217 	ldw	r20,8(sp)
1000ac30:	d8000f15 	stw	zero,60(sp)
1000ac34:	003e9f06 	br	1000a6b4 <__alt_data_end+0xf800a6b4>
1000ac38:	00840074 	movhi	r2,4097
1000ac3c:	1094eb04 	addi	r2,r2,21420
1000ac40:	003e5f06 	br	1000a5c0 <__alt_data_end+0xf800a5c0>
1000ac44:	80001115 	stw	zero,68(r16)
1000ac48:	8009883a 	mov	r4,r16
1000ac4c:	000b883a 	mov	r5,zero
1000ac50:	000db400 	call	1000db40 <_Balloc>
1000ac54:	01bfffc4 	movi	r6,-1
1000ac58:	d8800715 	stw	r2,28(sp)
1000ac5c:	80801015 	stw	r2,64(r16)
1000ac60:	00800044 	movi	r2,1
1000ac64:	d9800615 	stw	r6,24(sp)
1000ac68:	d8800b15 	stw	r2,44(sp)
1000ac6c:	d8002215 	stw	zero,136(sp)
1000ac70:	d9800d15 	stw	r6,52(sp)
1000ac74:	d8000315 	stw	zero,12(sp)
1000ac78:	d8800117 	ldw	r2,4(sp)
1000ac7c:	10008e16 	blt	r2,zero,1000aeb8 <_dtoa_r+0x9b4>
1000ac80:	d9000517 	ldw	r4,20(sp)
1000ac84:	00c00384 	movi	r3,14
1000ac88:	19008b16 	blt	r3,r4,1000aeb8 <_dtoa_r+0x9b4>
1000ac8c:	200490fa 	slli	r2,r4,3
1000ac90:	00c40074 	movhi	r3,4097
1000ac94:	d9802217 	ldw	r6,136(sp)
1000ac98:	18d51204 	addi	r3,r3,21576
1000ac9c:	1885883a 	add	r2,r3,r2
1000aca0:	14400017 	ldw	r17,0(r2)
1000aca4:	15000117 	ldw	r20,4(r2)
1000aca8:	3001c716 	blt	r6,zero,1000b3c8 <_dtoa_r+0xec4>
1000acac:	880d883a 	mov	r6,r17
1000acb0:	a00f883a 	mov	r7,r20
1000acb4:	9009883a 	mov	r4,r18
1000acb8:	980b883a 	mov	r5,r19
1000acbc:	0005ff40 	call	10005ff4 <__divdf3>
1000acc0:	180b883a 	mov	r5,r3
1000acc4:	1009883a 	mov	r4,r2
1000acc8:	0007cf40 	call	10007cf4 <__fixdfsi>
1000accc:	1009883a 	mov	r4,r2
1000acd0:	102d883a 	mov	r22,r2
1000acd4:	0007d7c0 	call	10007d7c <__floatsidf>
1000acd8:	1009883a 	mov	r4,r2
1000acdc:	180b883a 	mov	r5,r3
1000ace0:	880d883a 	mov	r6,r17
1000ace4:	a00f883a 	mov	r7,r20
1000ace8:	0006bb80 	call	10006bb8 <__muldf3>
1000acec:	9009883a 	mov	r4,r18
1000acf0:	980b883a 	mov	r5,r19
1000acf4:	100d883a 	mov	r6,r2
1000acf8:	180f883a 	mov	r7,r3
1000acfc:	00074240 	call	10007424 <__subdf3>
1000ad00:	d9000717 	ldw	r4,28(sp)
1000ad04:	d9800617 	ldw	r6,24(sp)
1000ad08:	180b883a 	mov	r5,r3
1000ad0c:	b0c00c04 	addi	r3,r22,48
1000ad10:	20c00005 	stb	r3,0(r4)
1000ad14:	25c00044 	addi	r23,r4,1
1000ad18:	01000044 	movi	r4,1
1000ad1c:	1011883a 	mov	r8,r2
1000ad20:	2807883a 	mov	r3,r5
1000ad24:	31003d26 	beq	r6,r4,1000ae1c <_dtoa_r+0x918>
1000ad28:	000d883a 	mov	r6,zero
1000ad2c:	01d00934 	movhi	r7,16420
1000ad30:	1009883a 	mov	r4,r2
1000ad34:	0006bb80 	call	10006bb8 <__muldf3>
1000ad38:	1009883a 	mov	r4,r2
1000ad3c:	180b883a 	mov	r5,r3
1000ad40:	000d883a 	mov	r6,zero
1000ad44:	000f883a 	mov	r7,zero
1000ad48:	1027883a 	mov	r19,r2
1000ad4c:	182b883a 	mov	r21,r3
1000ad50:	00069740 	call	10006974 <__eqdf2>
1000ad54:	103f9926 	beq	r2,zero,1000abbc <__alt_data_end+0xf800abbc>
1000ad58:	d8c00617 	ldw	r3,24(sp)
1000ad5c:	d9000717 	ldw	r4,28(sp)
1000ad60:	b825883a 	mov	r18,r23
1000ad64:	18bfffc4 	addi	r2,r3,-1
1000ad68:	20ad883a 	add	r22,r4,r2
1000ad6c:	dc000315 	stw	r16,12(sp)
1000ad70:	00000a06 	br	1000ad9c <_dtoa_r+0x898>
1000ad74:	0006bb80 	call	10006bb8 <__muldf3>
1000ad78:	1009883a 	mov	r4,r2
1000ad7c:	180b883a 	mov	r5,r3
1000ad80:	000d883a 	mov	r6,zero
1000ad84:	000f883a 	mov	r7,zero
1000ad88:	1027883a 	mov	r19,r2
1000ad8c:	182b883a 	mov	r21,r3
1000ad90:	b825883a 	mov	r18,r23
1000ad94:	00069740 	call	10006974 <__eqdf2>
1000ad98:	10022626 	beq	r2,zero,1000b634 <_dtoa_r+0x1130>
1000ad9c:	880d883a 	mov	r6,r17
1000ada0:	a00f883a 	mov	r7,r20
1000ada4:	9809883a 	mov	r4,r19
1000ada8:	a80b883a 	mov	r5,r21
1000adac:	0005ff40 	call	10005ff4 <__divdf3>
1000adb0:	180b883a 	mov	r5,r3
1000adb4:	1009883a 	mov	r4,r2
1000adb8:	0007cf40 	call	10007cf4 <__fixdfsi>
1000adbc:	1009883a 	mov	r4,r2
1000adc0:	1021883a 	mov	r16,r2
1000adc4:	0007d7c0 	call	10007d7c <__floatsidf>
1000adc8:	1009883a 	mov	r4,r2
1000adcc:	180b883a 	mov	r5,r3
1000add0:	880d883a 	mov	r6,r17
1000add4:	a00f883a 	mov	r7,r20
1000add8:	0006bb80 	call	10006bb8 <__muldf3>
1000addc:	9809883a 	mov	r4,r19
1000ade0:	a80b883a 	mov	r5,r21
1000ade4:	100d883a 	mov	r6,r2
1000ade8:	180f883a 	mov	r7,r3
1000adec:	00074240 	call	10007424 <__subdf3>
1000adf0:	82000c04 	addi	r8,r16,48
1000adf4:	92000005 	stb	r8,0(r18)
1000adf8:	1009883a 	mov	r4,r2
1000adfc:	180b883a 	mov	r5,r3
1000ae00:	000d883a 	mov	r6,zero
1000ae04:	01d00934 	movhi	r7,16420
1000ae08:	1011883a 	mov	r8,r2
1000ae0c:	bdc00044 	addi	r23,r23,1
1000ae10:	95bfd81e 	bne	r18,r22,1000ad74 <__alt_data_end+0xf800ad74>
1000ae14:	802d883a 	mov	r22,r16
1000ae18:	dc000317 	ldw	r16,12(sp)
1000ae1c:	4009883a 	mov	r4,r8
1000ae20:	180b883a 	mov	r5,r3
1000ae24:	400d883a 	mov	r6,r8
1000ae28:	180f883a 	mov	r7,r3
1000ae2c:	00057580 	call	10005758 <__adddf3>
1000ae30:	8809883a 	mov	r4,r17
1000ae34:	a00b883a 	mov	r5,r20
1000ae38:	100d883a 	mov	r6,r2
1000ae3c:	180f883a 	mov	r7,r3
1000ae40:	1027883a 	mov	r19,r2
1000ae44:	1825883a 	mov	r18,r3
1000ae48:	0006ad80 	call	10006ad8 <__ledf2>
1000ae4c:	10000816 	blt	r2,zero,1000ae70 <_dtoa_r+0x96c>
1000ae50:	8809883a 	mov	r4,r17
1000ae54:	a00b883a 	mov	r5,r20
1000ae58:	980d883a 	mov	r6,r19
1000ae5c:	900f883a 	mov	r7,r18
1000ae60:	00069740 	call	10006974 <__eqdf2>
1000ae64:	103f551e 	bne	r2,zero,1000abbc <__alt_data_end+0xf800abbc>
1000ae68:	b580004c 	andi	r22,r22,1
1000ae6c:	b03f5326 	beq	r22,zero,1000abbc <__alt_data_end+0xf800abbc>
1000ae70:	bd7fffc3 	ldbu	r21,-1(r23)
1000ae74:	b8bfffc4 	addi	r2,r23,-1
1000ae78:	1007883a 	mov	r3,r2
1000ae7c:	01400e44 	movi	r5,57
1000ae80:	d9800717 	ldw	r6,28(sp)
1000ae84:	00000506 	br	1000ae9c <_dtoa_r+0x998>
1000ae88:	18ffffc4 	addi	r3,r3,-1
1000ae8c:	30825e26 	beq	r6,r2,1000b808 <_dtoa_r+0x1304>
1000ae90:	1d400003 	ldbu	r21,0(r3)
1000ae94:	102f883a 	mov	r23,r2
1000ae98:	10bfffc4 	addi	r2,r2,-1
1000ae9c:	a9003fcc 	andi	r4,r21,255
1000aea0:	2100201c 	xori	r4,r4,128
1000aea4:	213fe004 	addi	r4,r4,-128
1000aea8:	217ff726 	beq	r4,r5,1000ae88 <__alt_data_end+0xf800ae88>
1000aeac:	aa000044 	addi	r8,r21,1
1000aeb0:	12000005 	stb	r8,0(r2)
1000aeb4:	003f4106 	br	1000abbc <__alt_data_end+0xf800abbc>
1000aeb8:	d8c00b17 	ldw	r3,44(sp)
1000aebc:	18006726 	beq	r3,zero,1000b05c <_dtoa_r+0xb58>
1000aec0:	d9000317 	ldw	r4,12(sp)
1000aec4:	00c00044 	movi	r3,1
1000aec8:	19016a0e 	bge	r3,r4,1000b474 <_dtoa_r+0xf70>
1000aecc:	d8800617 	ldw	r2,24(sp)
1000aed0:	d8c00917 	ldw	r3,36(sp)
1000aed4:	157fffc4 	addi	r21,r2,-1
1000aed8:	1d420716 	blt	r3,r21,1000b6f8 <_dtoa_r+0x11f4>
1000aedc:	1d6bc83a 	sub	r21,r3,r21
1000aee0:	d8800617 	ldw	r2,24(sp)
1000aee4:	1002c716 	blt	r2,zero,1000ba04 <_dtoa_r+0x1500>
1000aee8:	dd000817 	ldw	r20,32(sp)
1000aeec:	d8800617 	ldw	r2,24(sp)
1000aef0:	d9800817 	ldw	r6,32(sp)
1000aef4:	8009883a 	mov	r4,r16
1000aef8:	01400044 	movi	r5,1
1000aefc:	308d883a 	add	r6,r6,r2
1000af00:	d9800815 	stw	r6,32(sp)
1000af04:	b0ad883a 	add	r22,r22,r2
1000af08:	000df680 	call	1000df68 <__i2b>
1000af0c:	1023883a 	mov	r17,r2
1000af10:	a0000826 	beq	r20,zero,1000af34 <_dtoa_r+0xa30>
1000af14:	0580070e 	bge	zero,r22,1000af34 <_dtoa_r+0xa30>
1000af18:	b005883a 	mov	r2,r22
1000af1c:	a5812016 	blt	r20,r22,1000b3a0 <_dtoa_r+0xe9c>
1000af20:	d8c00817 	ldw	r3,32(sp)
1000af24:	a0a9c83a 	sub	r20,r20,r2
1000af28:	b0adc83a 	sub	r22,r22,r2
1000af2c:	1887c83a 	sub	r3,r3,r2
1000af30:	d8c00815 	stw	r3,32(sp)
1000af34:	d9000917 	ldw	r4,36(sp)
1000af38:	0100140e 	bge	zero,r4,1000af8c <_dtoa_r+0xa88>
1000af3c:	d9800b17 	ldw	r6,44(sp)
1000af40:	3001e526 	beq	r6,zero,1000b6d8 <_dtoa_r+0x11d4>
1000af44:	05400e0e 	bge	zero,r21,1000af80 <_dtoa_r+0xa7c>
1000af48:	880b883a 	mov	r5,r17
1000af4c:	8009883a 	mov	r4,r16
1000af50:	a80d883a 	mov	r6,r21
1000af54:	000e2340 	call	1000e234 <__pow5mult>
1000af58:	e00d883a 	mov	r6,fp
1000af5c:	8009883a 	mov	r4,r16
1000af60:	100b883a 	mov	r5,r2
1000af64:	1023883a 	mov	r17,r2
1000af68:	000dfa40 	call	1000dfa4 <__multiply>
1000af6c:	102f883a 	mov	r23,r2
1000af70:	e00b883a 	mov	r5,fp
1000af74:	8009883a 	mov	r4,r16
1000af78:	000dbe80 	call	1000dbe8 <_Bfree>
1000af7c:	b839883a 	mov	fp,r23
1000af80:	d8800917 	ldw	r2,36(sp)
1000af84:	154dc83a 	sub	r6,r2,r21
1000af88:	3001281e 	bne	r6,zero,1000b42c <_dtoa_r+0xf28>
1000af8c:	05c00044 	movi	r23,1
1000af90:	8009883a 	mov	r4,r16
1000af94:	b80b883a 	mov	r5,r23
1000af98:	000df680 	call	1000df68 <__i2b>
1000af9c:	d8c00a17 	ldw	r3,40(sp)
1000afa0:	102b883a 	mov	r21,r2
1000afa4:	00c0310e 	bge	zero,r3,1000b06c <_dtoa_r+0xb68>
1000afa8:	8009883a 	mov	r4,r16
1000afac:	100b883a 	mov	r5,r2
1000afb0:	180d883a 	mov	r6,r3
1000afb4:	000e2340 	call	1000e234 <__pow5mult>
1000afb8:	d9000317 	ldw	r4,12(sp)
1000afbc:	102b883a 	mov	r21,r2
1000afc0:	b9011f0e 	bge	r23,r4,1000b440 <_dtoa_r+0xf3c>
1000afc4:	0027883a 	mov	r19,zero
1000afc8:	a8800417 	ldw	r2,16(r21)
1000afcc:	10800104 	addi	r2,r2,4
1000afd0:	1085883a 	add	r2,r2,r2
1000afd4:	1085883a 	add	r2,r2,r2
1000afd8:	a885883a 	add	r2,r21,r2
1000afdc:	11000017 	ldw	r4,0(r2)
1000afe0:	000de500 	call	1000de50 <__hi0bits>
1000afe4:	00c00804 	movi	r3,32
1000afe8:	1885c83a 	sub	r2,r3,r2
1000afec:	00002506 	br	1000b084 <_dtoa_r+0xb80>
1000aff0:	01800044 	movi	r6,1
1000aff4:	d9800c15 	stw	r6,48(sp)
1000aff8:	003dec06 	br	1000a7ac <__alt_data_end+0xf800a7ac>
1000affc:	d8c00817 	ldw	r3,32(sp)
1000b000:	d9000517 	ldw	r4,20(sp)
1000b004:	d8000a15 	stw	zero,40(sp)
1000b008:	1907c83a 	sub	r3,r3,r4
1000b00c:	010dc83a 	sub	r6,zero,r4
1000b010:	d8c00815 	stw	r3,32(sp)
1000b014:	d9800915 	stw	r6,36(sp)
1000b018:	003ded06 	br	1000a7d0 <__alt_data_end+0xf800a7d0>
1000b01c:	05adc83a 	sub	r22,zero,r22
1000b020:	dd800815 	stw	r22,32(sp)
1000b024:	002d883a 	mov	r22,zero
1000b028:	003de406 	br	1000a7bc <__alt_data_end+0xf800a7bc>
1000b02c:	d9000517 	ldw	r4,20(sp)
1000b030:	0007d7c0 	call	10007d7c <__floatsidf>
1000b034:	1009883a 	mov	r4,r2
1000b038:	180b883a 	mov	r5,r3
1000b03c:	b00d883a 	mov	r6,r22
1000b040:	a80f883a 	mov	r7,r21
1000b044:	00069740 	call	10006974 <__eqdf2>
1000b048:	103dc726 	beq	r2,zero,1000a768 <__alt_data_end+0xf800a768>
1000b04c:	d8800517 	ldw	r2,20(sp)
1000b050:	10bfffc4 	addi	r2,r2,-1
1000b054:	d8800515 	stw	r2,20(sp)
1000b058:	003dc306 	br	1000a768 <__alt_data_end+0xf800a768>
1000b05c:	dd400917 	ldw	r21,36(sp)
1000b060:	dd000817 	ldw	r20,32(sp)
1000b064:	0023883a 	mov	r17,zero
1000b068:	003fa906 	br	1000af10 <__alt_data_end+0xf800af10>
1000b06c:	d9800317 	ldw	r6,12(sp)
1000b070:	b981670e 	bge	r23,r6,1000b610 <_dtoa_r+0x110c>
1000b074:	0027883a 	mov	r19,zero
1000b078:	d8c00a17 	ldw	r3,40(sp)
1000b07c:	183fd21e 	bne	r3,zero,1000afc8 <__alt_data_end+0xf800afc8>
1000b080:	00800044 	movi	r2,1
1000b084:	1585883a 	add	r2,r2,r22
1000b088:	108007cc 	andi	r2,r2,31
1000b08c:	10005f26 	beq	r2,zero,1000b20c <_dtoa_r+0xd08>
1000b090:	00c00804 	movi	r3,32
1000b094:	1887c83a 	sub	r3,r3,r2
1000b098:	01000104 	movi	r4,4
1000b09c:	20c2dd0e 	bge	r4,r3,1000bc14 <_dtoa_r+0x1710>
1000b0a0:	d9000817 	ldw	r4,32(sp)
1000b0a4:	00c00704 	movi	r3,28
1000b0a8:	1885c83a 	sub	r2,r3,r2
1000b0ac:	2089883a 	add	r4,r4,r2
1000b0b0:	d9000815 	stw	r4,32(sp)
1000b0b4:	a0a9883a 	add	r20,r20,r2
1000b0b8:	b0ad883a 	add	r22,r22,r2
1000b0bc:	d8800817 	ldw	r2,32(sp)
1000b0c0:	0080050e 	bge	zero,r2,1000b0d8 <_dtoa_r+0xbd4>
1000b0c4:	e00b883a 	mov	r5,fp
1000b0c8:	8009883a 	mov	r4,r16
1000b0cc:	100d883a 	mov	r6,r2
1000b0d0:	000e3740 	call	1000e374 <__lshift>
1000b0d4:	1039883a 	mov	fp,r2
1000b0d8:	0580050e 	bge	zero,r22,1000b0f0 <_dtoa_r+0xbec>
1000b0dc:	a80b883a 	mov	r5,r21
1000b0e0:	8009883a 	mov	r4,r16
1000b0e4:	b00d883a 	mov	r6,r22
1000b0e8:	000e3740 	call	1000e374 <__lshift>
1000b0ec:	102b883a 	mov	r21,r2
1000b0f0:	d8c00c17 	ldw	r3,48(sp)
1000b0f4:	1801161e 	bne	r3,zero,1000b550 <_dtoa_r+0x104c>
1000b0f8:	d8c00617 	ldw	r3,24(sp)
1000b0fc:	00c12d0e 	bge	zero,r3,1000b5b4 <_dtoa_r+0x10b0>
1000b100:	d8c00b17 	ldw	r3,44(sp)
1000b104:	1800571e 	bne	r3,zero,1000b264 <_dtoa_r+0xd60>
1000b108:	dc800717 	ldw	r18,28(sp)
1000b10c:	dcc00617 	ldw	r19,24(sp)
1000b110:	9029883a 	mov	r20,r18
1000b114:	00000206 	br	1000b120 <_dtoa_r+0xc1c>
1000b118:	000dc100 	call	1000dc10 <__multadd>
1000b11c:	1039883a 	mov	fp,r2
1000b120:	e009883a 	mov	r4,fp
1000b124:	a80b883a 	mov	r5,r21
1000b128:	000a2dc0 	call	1000a2dc <quorem>
1000b12c:	10800c04 	addi	r2,r2,48
1000b130:	90800005 	stb	r2,0(r18)
1000b134:	94800044 	addi	r18,r18,1
1000b138:	9507c83a 	sub	r3,r18,r20
1000b13c:	8009883a 	mov	r4,r16
1000b140:	e00b883a 	mov	r5,fp
1000b144:	01800284 	movi	r6,10
1000b148:	000f883a 	mov	r7,zero
1000b14c:	1cfff216 	blt	r3,r19,1000b118 <__alt_data_end+0xf800b118>
1000b150:	1011883a 	mov	r8,r2
1000b154:	d8800617 	ldw	r2,24(sp)
1000b158:	00822e0e 	bge	zero,r2,1000ba14 <_dtoa_r+0x1510>
1000b15c:	d9000717 	ldw	r4,28(sp)
1000b160:	0025883a 	mov	r18,zero
1000b164:	20af883a 	add	r23,r4,r2
1000b168:	e00b883a 	mov	r5,fp
1000b16c:	01800044 	movi	r6,1
1000b170:	8009883a 	mov	r4,r16
1000b174:	da001715 	stw	r8,92(sp)
1000b178:	000e3740 	call	1000e374 <__lshift>
1000b17c:	1009883a 	mov	r4,r2
1000b180:	a80b883a 	mov	r5,r21
1000b184:	1039883a 	mov	fp,r2
1000b188:	000e4bc0 	call	1000e4bc <__mcmp>
1000b18c:	da001717 	ldw	r8,92(sp)
1000b190:	00816e0e 	bge	zero,r2,1000b74c <_dtoa_r+0x1248>
1000b194:	b93fffc3 	ldbu	r4,-1(r23)
1000b198:	b8bfffc4 	addi	r2,r23,-1
1000b19c:	1007883a 	mov	r3,r2
1000b1a0:	01800e44 	movi	r6,57
1000b1a4:	d9c00717 	ldw	r7,28(sp)
1000b1a8:	00000506 	br	1000b1c0 <_dtoa_r+0xcbc>
1000b1ac:	18ffffc4 	addi	r3,r3,-1
1000b1b0:	38811926 	beq	r7,r2,1000b618 <_dtoa_r+0x1114>
1000b1b4:	19000003 	ldbu	r4,0(r3)
1000b1b8:	102f883a 	mov	r23,r2
1000b1bc:	10bfffc4 	addi	r2,r2,-1
1000b1c0:	21403fcc 	andi	r5,r4,255
1000b1c4:	2940201c 	xori	r5,r5,128
1000b1c8:	297fe004 	addi	r5,r5,-128
1000b1cc:	29bff726 	beq	r5,r6,1000b1ac <__alt_data_end+0xf800b1ac>
1000b1d0:	21000044 	addi	r4,r4,1
1000b1d4:	11000005 	stb	r4,0(r2)
1000b1d8:	8009883a 	mov	r4,r16
1000b1dc:	a80b883a 	mov	r5,r21
1000b1e0:	000dbe80 	call	1000dbe8 <_Bfree>
1000b1e4:	883e7526 	beq	r17,zero,1000abbc <__alt_data_end+0xf800abbc>
1000b1e8:	90000426 	beq	r18,zero,1000b1fc <_dtoa_r+0xcf8>
1000b1ec:	94400326 	beq	r18,r17,1000b1fc <_dtoa_r+0xcf8>
1000b1f0:	8009883a 	mov	r4,r16
1000b1f4:	900b883a 	mov	r5,r18
1000b1f8:	000dbe80 	call	1000dbe8 <_Bfree>
1000b1fc:	8009883a 	mov	r4,r16
1000b200:	880b883a 	mov	r5,r17
1000b204:	000dbe80 	call	1000dbe8 <_Bfree>
1000b208:	003e6c06 	br	1000abbc <__alt_data_end+0xf800abbc>
1000b20c:	00800704 	movi	r2,28
1000b210:	d9800817 	ldw	r6,32(sp)
1000b214:	a0a9883a 	add	r20,r20,r2
1000b218:	b0ad883a 	add	r22,r22,r2
1000b21c:	308d883a 	add	r6,r6,r2
1000b220:	d9800815 	stw	r6,32(sp)
1000b224:	003fa506 	br	1000b0bc <__alt_data_end+0xf800b0bc>
1000b228:	013efb84 	movi	r4,-1042
1000b22c:	246bc83a 	sub	r21,r4,r17
1000b230:	9548983a 	sll	r4,r18,r21
1000b234:	003d1806 	br	1000a698 <__alt_data_end+0xf800a698>
1000b238:	d8000c15 	stw	zero,48(sp)
1000b23c:	003d5b06 	br	1000a7ac <__alt_data_end+0xf800a7ac>
1000b240:	880b883a 	mov	r5,r17
1000b244:	8009883a 	mov	r4,r16
1000b248:	01800284 	movi	r6,10
1000b24c:	000f883a 	mov	r7,zero
1000b250:	000dc100 	call	1000dc10 <__multadd>
1000b254:	1023883a 	mov	r17,r2
1000b258:	d8800d17 	ldw	r2,52(sp)
1000b25c:	0082550e 	bge	zero,r2,1000bbb4 <_dtoa_r+0x16b0>
1000b260:	d8800615 	stw	r2,24(sp)
1000b264:	0500050e 	bge	zero,r20,1000b27c <_dtoa_r+0xd78>
1000b268:	880b883a 	mov	r5,r17
1000b26c:	8009883a 	mov	r4,r16
1000b270:	a00d883a 	mov	r6,r20
1000b274:	000e3740 	call	1000e374 <__lshift>
1000b278:	1023883a 	mov	r17,r2
1000b27c:	98016a1e 	bne	r19,zero,1000b828 <_dtoa_r+0x1324>
1000b280:	8829883a 	mov	r20,r17
1000b284:	d9000617 	ldw	r4,24(sp)
1000b288:	dcc00717 	ldw	r19,28(sp)
1000b28c:	9480004c 	andi	r18,r18,1
1000b290:	20bfffc4 	addi	r2,r4,-1
1000b294:	9885883a 	add	r2,r19,r2
1000b298:	d8800415 	stw	r2,16(sp)
1000b29c:	dc800615 	stw	r18,24(sp)
1000b2a0:	e009883a 	mov	r4,fp
1000b2a4:	a80b883a 	mov	r5,r21
1000b2a8:	000a2dc0 	call	1000a2dc <quorem>
1000b2ac:	e009883a 	mov	r4,fp
1000b2b0:	880b883a 	mov	r5,r17
1000b2b4:	102f883a 	mov	r23,r2
1000b2b8:	000e4bc0 	call	1000e4bc <__mcmp>
1000b2bc:	8009883a 	mov	r4,r16
1000b2c0:	a80b883a 	mov	r5,r21
1000b2c4:	a00d883a 	mov	r6,r20
1000b2c8:	102d883a 	mov	r22,r2
1000b2cc:	000e51c0 	call	1000e51c <__mdiff>
1000b2d0:	1007883a 	mov	r3,r2
1000b2d4:	10800317 	ldw	r2,12(r2)
1000b2d8:	bc800c04 	addi	r18,r23,48
1000b2dc:	1000971e 	bne	r2,zero,1000b53c <_dtoa_r+0x1038>
1000b2e0:	180b883a 	mov	r5,r3
1000b2e4:	e009883a 	mov	r4,fp
1000b2e8:	d8c01515 	stw	r3,84(sp)
1000b2ec:	000e4bc0 	call	1000e4bc <__mcmp>
1000b2f0:	d8c01517 	ldw	r3,84(sp)
1000b2f4:	8009883a 	mov	r4,r16
1000b2f8:	d8801515 	stw	r2,84(sp)
1000b2fc:	180b883a 	mov	r5,r3
1000b300:	000dbe80 	call	1000dbe8 <_Bfree>
1000b304:	d8801517 	ldw	r2,84(sp)
1000b308:	1000041e 	bne	r2,zero,1000b31c <_dtoa_r+0xe18>
1000b30c:	d9800317 	ldw	r6,12(sp)
1000b310:	3000021e 	bne	r6,zero,1000b31c <_dtoa_r+0xe18>
1000b314:	d8c00617 	ldw	r3,24(sp)
1000b318:	18007626 	beq	r3,zero,1000b4f4 <_dtoa_r+0xff0>
1000b31c:	b0005b16 	blt	r22,zero,1000b48c <_dtoa_r+0xf88>
1000b320:	b000041e 	bne	r22,zero,1000b334 <_dtoa_r+0xe30>
1000b324:	d9000317 	ldw	r4,12(sp)
1000b328:	2000021e 	bne	r4,zero,1000b334 <_dtoa_r+0xe30>
1000b32c:	d8c00617 	ldw	r3,24(sp)
1000b330:	18005626 	beq	r3,zero,1000b48c <_dtoa_r+0xf88>
1000b334:	00814d16 	blt	zero,r2,1000b86c <_dtoa_r+0x1368>
1000b338:	d8c00417 	ldw	r3,16(sp)
1000b33c:	9d800044 	addi	r22,r19,1
1000b340:	9c800005 	stb	r18,0(r19)
1000b344:	b02f883a 	mov	r23,r22
1000b348:	98c14c26 	beq	r19,r3,1000b87c <_dtoa_r+0x1378>
1000b34c:	e00b883a 	mov	r5,fp
1000b350:	8009883a 	mov	r4,r16
1000b354:	01800284 	movi	r6,10
1000b358:	000f883a 	mov	r7,zero
1000b35c:	000dc100 	call	1000dc10 <__multadd>
1000b360:	1039883a 	mov	fp,r2
1000b364:	8d006d26 	beq	r17,r20,1000b51c <_dtoa_r+0x1018>
1000b368:	880b883a 	mov	r5,r17
1000b36c:	01800284 	movi	r6,10
1000b370:	000f883a 	mov	r7,zero
1000b374:	8009883a 	mov	r4,r16
1000b378:	000dc100 	call	1000dc10 <__multadd>
1000b37c:	a00b883a 	mov	r5,r20
1000b380:	8009883a 	mov	r4,r16
1000b384:	01800284 	movi	r6,10
1000b388:	000f883a 	mov	r7,zero
1000b38c:	1023883a 	mov	r17,r2
1000b390:	000dc100 	call	1000dc10 <__multadd>
1000b394:	1029883a 	mov	r20,r2
1000b398:	b027883a 	mov	r19,r22
1000b39c:	003fc006 	br	1000b2a0 <__alt_data_end+0xf800b2a0>
1000b3a0:	a005883a 	mov	r2,r20
1000b3a4:	003ede06 	br	1000af20 <__alt_data_end+0xf800af20>
1000b3a8:	01000044 	movi	r4,1
1000b3ac:	d9000b15 	stw	r4,44(sp)
1000b3b0:	d9802217 	ldw	r6,136(sp)
1000b3b4:	0180dc0e 	bge	zero,r6,1000b728 <_dtoa_r+0x1224>
1000b3b8:	3023883a 	mov	r17,r6
1000b3bc:	d9800d15 	stw	r6,52(sp)
1000b3c0:	d9800615 	stw	r6,24(sp)
1000b3c4:	003d1e06 	br	1000a840 <__alt_data_end+0xf800a840>
1000b3c8:	d8800617 	ldw	r2,24(sp)
1000b3cc:	00be3716 	blt	zero,r2,1000acac <__alt_data_end+0xf800acac>
1000b3d0:	1000be1e 	bne	r2,zero,1000b6cc <_dtoa_r+0x11c8>
1000b3d4:	8809883a 	mov	r4,r17
1000b3d8:	a00b883a 	mov	r5,r20
1000b3dc:	000d883a 	mov	r6,zero
1000b3e0:	01d00534 	movhi	r7,16404
1000b3e4:	0006bb80 	call	10006bb8 <__muldf3>
1000b3e8:	1009883a 	mov	r4,r2
1000b3ec:	180b883a 	mov	r5,r3
1000b3f0:	900d883a 	mov	r6,r18
1000b3f4:	980f883a 	mov	r7,r19
1000b3f8:	00069f80 	call	100069f8 <__gedf2>
1000b3fc:	002b883a 	mov	r21,zero
1000b400:	0023883a 	mov	r17,zero
1000b404:	10007a16 	blt	r2,zero,1000b5f0 <_dtoa_r+0x10ec>
1000b408:	d9002217 	ldw	r4,136(sp)
1000b40c:	ddc00717 	ldw	r23,28(sp)
1000b410:	0108303a 	nor	r4,zero,r4
1000b414:	d9000515 	stw	r4,20(sp)
1000b418:	8009883a 	mov	r4,r16
1000b41c:	a80b883a 	mov	r5,r21
1000b420:	000dbe80 	call	1000dbe8 <_Bfree>
1000b424:	883f751e 	bne	r17,zero,1000b1fc <__alt_data_end+0xf800b1fc>
1000b428:	003de406 	br	1000abbc <__alt_data_end+0xf800abbc>
1000b42c:	e00b883a 	mov	r5,fp
1000b430:	8009883a 	mov	r4,r16
1000b434:	000e2340 	call	1000e234 <__pow5mult>
1000b438:	1039883a 	mov	fp,r2
1000b43c:	003ed306 	br	1000af8c <__alt_data_end+0xf800af8c>
1000b440:	903ee01e 	bne	r18,zero,1000afc4 <__alt_data_end+0xf800afc4>
1000b444:	00800434 	movhi	r2,16
1000b448:	10bfffc4 	addi	r2,r2,-1
1000b44c:	9884703a 	and	r2,r19,r2
1000b450:	103f081e 	bne	r2,zero,1000b074 <__alt_data_end+0xf800b074>
1000b454:	9cdffc2c 	andhi	r19,r19,32752
1000b458:	983f0626 	beq	r19,zero,1000b074 <__alt_data_end+0xf800b074>
1000b45c:	d8800817 	ldw	r2,32(sp)
1000b460:	b5800044 	addi	r22,r22,1
1000b464:	04c00044 	movi	r19,1
1000b468:	10800044 	addi	r2,r2,1
1000b46c:	d8800815 	stw	r2,32(sp)
1000b470:	003f0106 	br	1000b078 <__alt_data_end+0xf800b078>
1000b474:	d9800f17 	ldw	r6,60(sp)
1000b478:	30016826 	beq	r6,zero,1000ba1c <_dtoa_r+0x1518>
1000b47c:	10810cc4 	addi	r2,r2,1075
1000b480:	dd400917 	ldw	r21,36(sp)
1000b484:	dd000817 	ldw	r20,32(sp)
1000b488:	003e9906 	br	1000aef0 <__alt_data_end+0xf800aef0>
1000b48c:	9011883a 	mov	r8,r18
1000b490:	4007883a 	mov	r3,r8
1000b494:	e02d883a 	mov	r22,fp
1000b498:	0080100e 	bge	zero,r2,1000b4dc <_dtoa_r+0xfd8>
1000b49c:	01800044 	movi	r6,1
1000b4a0:	8009883a 	mov	r4,r16
1000b4a4:	e00b883a 	mov	r5,fp
1000b4a8:	da001515 	stw	r8,84(sp)
1000b4ac:	da001715 	stw	r8,92(sp)
1000b4b0:	000e3740 	call	1000e374 <__lshift>
1000b4b4:	1009883a 	mov	r4,r2
1000b4b8:	a80b883a 	mov	r5,r21
1000b4bc:	102d883a 	mov	r22,r2
1000b4c0:	000e4bc0 	call	1000e4bc <__mcmp>
1000b4c4:	d8c01517 	ldw	r3,84(sp)
1000b4c8:	da001717 	ldw	r8,92(sp)
1000b4cc:	0081a50e 	bge	zero,r2,1000bb64 <_dtoa_r+0x1660>
1000b4d0:	00800e44 	movi	r2,57
1000b4d4:	40817b26 	beq	r8,r2,1000bac4 <_dtoa_r+0x15c0>
1000b4d8:	40c00044 	addi	r3,r8,1
1000b4dc:	8825883a 	mov	r18,r17
1000b4e0:	9dc00044 	addi	r23,r19,1
1000b4e4:	98c00005 	stb	r3,0(r19)
1000b4e8:	a023883a 	mov	r17,r20
1000b4ec:	b039883a 	mov	fp,r22
1000b4f0:	003f3906 	br	1000b1d8 <__alt_data_end+0xf800b1d8>
1000b4f4:	00800e44 	movi	r2,57
1000b4f8:	9011883a 	mov	r8,r18
1000b4fc:	90817226 	beq	r18,r2,1000bac8 <_dtoa_r+0x15c4>
1000b500:	0580010e 	bge	zero,r22,1000b508 <_dtoa_r+0x1004>
1000b504:	ba000c44 	addi	r8,r23,49
1000b508:	8825883a 	mov	r18,r17
1000b50c:	9dc00044 	addi	r23,r19,1
1000b510:	9a000005 	stb	r8,0(r19)
1000b514:	a023883a 	mov	r17,r20
1000b518:	003f2f06 	br	1000b1d8 <__alt_data_end+0xf800b1d8>
1000b51c:	880b883a 	mov	r5,r17
1000b520:	8009883a 	mov	r4,r16
1000b524:	01800284 	movi	r6,10
1000b528:	000f883a 	mov	r7,zero
1000b52c:	000dc100 	call	1000dc10 <__multadd>
1000b530:	1023883a 	mov	r17,r2
1000b534:	1029883a 	mov	r20,r2
1000b538:	003f9706 	br	1000b398 <__alt_data_end+0xf800b398>
1000b53c:	8009883a 	mov	r4,r16
1000b540:	180b883a 	mov	r5,r3
1000b544:	000dbe80 	call	1000dbe8 <_Bfree>
1000b548:	00800044 	movi	r2,1
1000b54c:	003f7306 	br	1000b31c <__alt_data_end+0xf800b31c>
1000b550:	e009883a 	mov	r4,fp
1000b554:	a80b883a 	mov	r5,r21
1000b558:	000e4bc0 	call	1000e4bc <__mcmp>
1000b55c:	103ee60e 	bge	r2,zero,1000b0f8 <__alt_data_end+0xf800b0f8>
1000b560:	8009883a 	mov	r4,r16
1000b564:	e00b883a 	mov	r5,fp
1000b568:	01800284 	movi	r6,10
1000b56c:	000f883a 	mov	r7,zero
1000b570:	000dc100 	call	1000dc10 <__multadd>
1000b574:	d9000517 	ldw	r4,20(sp)
1000b578:	d9800b17 	ldw	r6,44(sp)
1000b57c:	1039883a 	mov	fp,r2
1000b580:	213fffc4 	addi	r4,r4,-1
1000b584:	d9000515 	stw	r4,20(sp)
1000b588:	303f2d1e 	bne	r6,zero,1000b240 <__alt_data_end+0xf800b240>
1000b58c:	d9000d17 	ldw	r4,52(sp)
1000b590:	0101780e 	bge	zero,r4,1000bb74 <_dtoa_r+0x1670>
1000b594:	d9000615 	stw	r4,24(sp)
1000b598:	003edb06 	br	1000b108 <__alt_data_end+0xf800b108>
1000b59c:	00800084 	movi	r2,2
1000b5a0:	30818e1e 	bne	r6,r2,1000bbdc <_dtoa_r+0x16d8>
1000b5a4:	d8000b15 	stw	zero,44(sp)
1000b5a8:	003f8106 	br	1000b3b0 <__alt_data_end+0xf800b3b0>
1000b5ac:	d8800717 	ldw	r2,28(sp)
1000b5b0:	003c0306 	br	1000a5c0 <__alt_data_end+0xf800a5c0>
1000b5b4:	d9000317 	ldw	r4,12(sp)
1000b5b8:	00800084 	movi	r2,2
1000b5bc:	113ed00e 	bge	r2,r4,1000b100 <__alt_data_end+0xf800b100>
1000b5c0:	d8c00617 	ldw	r3,24(sp)
1000b5c4:	183f901e 	bne	r3,zero,1000b408 <__alt_data_end+0xf800b408>
1000b5c8:	a80b883a 	mov	r5,r21
1000b5cc:	8009883a 	mov	r4,r16
1000b5d0:	01800144 	movi	r6,5
1000b5d4:	000f883a 	mov	r7,zero
1000b5d8:	000dc100 	call	1000dc10 <__multadd>
1000b5dc:	e009883a 	mov	r4,fp
1000b5e0:	100b883a 	mov	r5,r2
1000b5e4:	102b883a 	mov	r21,r2
1000b5e8:	000e4bc0 	call	1000e4bc <__mcmp>
1000b5ec:	00bf860e 	bge	zero,r2,1000b408 <__alt_data_end+0xf800b408>
1000b5f0:	d9800717 	ldw	r6,28(sp)
1000b5f4:	00800c44 	movi	r2,49
1000b5f8:	30800005 	stb	r2,0(r6)
1000b5fc:	d8800517 	ldw	r2,20(sp)
1000b600:	35c00044 	addi	r23,r6,1
1000b604:	10800044 	addi	r2,r2,1
1000b608:	d8800515 	stw	r2,20(sp)
1000b60c:	003f8206 	br	1000b418 <__alt_data_end+0xf800b418>
1000b610:	903e981e 	bne	r18,zero,1000b074 <__alt_data_end+0xf800b074>
1000b614:	003f8b06 	br	1000b444 <__alt_data_end+0xf800b444>
1000b618:	d9800517 	ldw	r6,20(sp)
1000b61c:	d8c00717 	ldw	r3,28(sp)
1000b620:	00800c44 	movi	r2,49
1000b624:	31800044 	addi	r6,r6,1
1000b628:	d9800515 	stw	r6,20(sp)
1000b62c:	18800005 	stb	r2,0(r3)
1000b630:	003ee906 	br	1000b1d8 <__alt_data_end+0xf800b1d8>
1000b634:	dc000317 	ldw	r16,12(sp)
1000b638:	003d6006 	br	1000abbc <__alt_data_end+0xf800abbc>
1000b63c:	8809883a 	mov	r4,r17
1000b640:	0007d7c0 	call	10007d7c <__floatsidf>
1000b644:	a009883a 	mov	r4,r20
1000b648:	a80b883a 	mov	r5,r21
1000b64c:	100d883a 	mov	r6,r2
1000b650:	180f883a 	mov	r7,r3
1000b654:	0006bb80 	call	10006bb8 <__muldf3>
1000b658:	1009883a 	mov	r4,r2
1000b65c:	180b883a 	mov	r5,r3
1000b660:	000d883a 	mov	r6,zero
1000b664:	01d00734 	movhi	r7,16412
1000b668:	00057580 	call	10005758 <__adddf3>
1000b66c:	1023883a 	mov	r17,r2
1000b670:	00bf3034 	movhi	r2,64704
1000b674:	1885883a 	add	r2,r3,r2
1000b678:	d8800e15 	stw	r2,56(sp)
1000b67c:	a009883a 	mov	r4,r20
1000b680:	a80b883a 	mov	r5,r21
1000b684:	000d883a 	mov	r6,zero
1000b688:	01d00534 	movhi	r7,16404
1000b68c:	00074240 	call	10007424 <__subdf3>
1000b690:	d9c00e17 	ldw	r7,56(sp)
1000b694:	1009883a 	mov	r4,r2
1000b698:	180b883a 	mov	r5,r3
1000b69c:	880d883a 	mov	r6,r17
1000b6a0:	102b883a 	mov	r21,r2
1000b6a4:	1829883a 	mov	r20,r3
1000b6a8:	00069f80 	call	100069f8 <__gedf2>
1000b6ac:	00807716 	blt	zero,r2,1000b88c <_dtoa_r+0x1388>
1000b6b0:	d8800e17 	ldw	r2,56(sp)
1000b6b4:	a809883a 	mov	r4,r21
1000b6b8:	a00b883a 	mov	r5,r20
1000b6bc:	11e0003c 	xorhi	r7,r2,32768
1000b6c0:	880d883a 	mov	r6,r17
1000b6c4:	0006ad80 	call	10006ad8 <__ledf2>
1000b6c8:	103d6b0e 	bge	r2,zero,1000ac78 <__alt_data_end+0xf800ac78>
1000b6cc:	002b883a 	mov	r21,zero
1000b6d0:	0023883a 	mov	r17,zero
1000b6d4:	003f4c06 	br	1000b408 <__alt_data_end+0xf800b408>
1000b6d8:	d9800917 	ldw	r6,36(sp)
1000b6dc:	e00b883a 	mov	r5,fp
1000b6e0:	8009883a 	mov	r4,r16
1000b6e4:	000e2340 	call	1000e234 <__pow5mult>
1000b6e8:	1039883a 	mov	fp,r2
1000b6ec:	003e2706 	br	1000af8c <__alt_data_end+0xf800af8c>
1000b6f0:	d8000b15 	stw	zero,44(sp)
1000b6f4:	003c4906 	br	1000a81c <__alt_data_end+0xf800a81c>
1000b6f8:	d9000917 	ldw	r4,36(sp)
1000b6fc:	d9800a17 	ldw	r6,40(sp)
1000b700:	dd400915 	stw	r21,36(sp)
1000b704:	a905c83a 	sub	r2,r21,r4
1000b708:	308d883a 	add	r6,r6,r2
1000b70c:	d9800a15 	stw	r6,40(sp)
1000b710:	002b883a 	mov	r21,zero
1000b714:	003df206 	br	1000aee0 <__alt_data_end+0xf800aee0>
1000b718:	dc800e15 	stw	r18,56(sp)
1000b71c:	982b883a 	mov	r21,r19
1000b720:	04400084 	movi	r17,2
1000b724:	003c7406 	br	1000a8f8 <__alt_data_end+0xf800a8f8>
1000b728:	04400044 	movi	r17,1
1000b72c:	dc400d15 	stw	r17,52(sp)
1000b730:	dc400615 	stw	r17,24(sp)
1000b734:	dc402215 	stw	r17,136(sp)
1000b738:	80001115 	stw	zero,68(r16)
1000b73c:	000b883a 	mov	r5,zero
1000b740:	003c4a06 	br	1000a86c <__alt_data_end+0xf800a86c>
1000b744:	3023883a 	mov	r17,r6
1000b748:	003ffb06 	br	1000b738 <__alt_data_end+0xf800b738>
1000b74c:	1000021e 	bne	r2,zero,1000b758 <_dtoa_r+0x1254>
1000b750:	4200004c 	andi	r8,r8,1
1000b754:	403e8f1e 	bne	r8,zero,1000b194 <__alt_data_end+0xf800b194>
1000b758:	01000c04 	movi	r4,48
1000b75c:	00000106 	br	1000b764 <_dtoa_r+0x1260>
1000b760:	102f883a 	mov	r23,r2
1000b764:	b8bfffc4 	addi	r2,r23,-1
1000b768:	10c00007 	ldb	r3,0(r2)
1000b76c:	193ffc26 	beq	r3,r4,1000b760 <__alt_data_end+0xf800b760>
1000b770:	003e9906 	br	1000b1d8 <__alt_data_end+0xf800b1d8>
1000b774:	d9000517 	ldw	r4,20(sp)
1000b778:	012fc83a 	sub	r23,zero,r4
1000b77c:	b800ad26 	beq	r23,zero,1000ba34 <_dtoa_r+0x1530>
1000b780:	b88003cc 	andi	r2,r23,15
1000b784:	100490fa 	slli	r2,r2,3
1000b788:	00c40074 	movhi	r3,4097
1000b78c:	18d51204 	addi	r3,r3,21576
1000b790:	1885883a 	add	r2,r3,r2
1000b794:	11800017 	ldw	r6,0(r2)
1000b798:	11c00117 	ldw	r7,4(r2)
1000b79c:	b82fd13a 	srai	r23,r23,4
1000b7a0:	9009883a 	mov	r4,r18
1000b7a4:	980b883a 	mov	r5,r19
1000b7a8:	0006bb80 	call	10006bb8 <__muldf3>
1000b7ac:	1029883a 	mov	r20,r2
1000b7b0:	182b883a 	mov	r21,r3
1000b7b4:	b800f426 	beq	r23,zero,1000bb88 <_dtoa_r+0x1684>
1000b7b8:	02040074 	movhi	r8,4097
1000b7bc:	42150804 	addi	r8,r8,21536
1000b7c0:	8029883a 	mov	r20,r16
1000b7c4:	04400084 	movi	r17,2
1000b7c8:	4021883a 	mov	r16,r8
1000b7cc:	b980004c 	andi	r6,r23,1
1000b7d0:	1009883a 	mov	r4,r2
1000b7d4:	b82fd07a 	srai	r23,r23,1
1000b7d8:	180b883a 	mov	r5,r3
1000b7dc:	30000426 	beq	r6,zero,1000b7f0 <_dtoa_r+0x12ec>
1000b7e0:	81800017 	ldw	r6,0(r16)
1000b7e4:	81c00117 	ldw	r7,4(r16)
1000b7e8:	8c400044 	addi	r17,r17,1
1000b7ec:	0006bb80 	call	10006bb8 <__muldf3>
1000b7f0:	84000204 	addi	r16,r16,8
1000b7f4:	b83ff51e 	bne	r23,zero,1000b7cc <__alt_data_end+0xf800b7cc>
1000b7f8:	a021883a 	mov	r16,r20
1000b7fc:	182b883a 	mov	r21,r3
1000b800:	1029883a 	mov	r20,r2
1000b804:	003c5506 	br	1000a95c <__alt_data_end+0xf800a95c>
1000b808:	d9800517 	ldw	r6,20(sp)
1000b80c:	d9000717 	ldw	r4,28(sp)
1000b810:	00c00c04 	movi	r3,48
1000b814:	31800044 	addi	r6,r6,1
1000b818:	d9800515 	stw	r6,20(sp)
1000b81c:	20c00005 	stb	r3,0(r4)
1000b820:	02000c44 	movi	r8,49
1000b824:	003da206 	br	1000aeb0 <__alt_data_end+0xf800aeb0>
1000b828:	89400117 	ldw	r5,4(r17)
1000b82c:	8009883a 	mov	r4,r16
1000b830:	000db400 	call	1000db40 <_Balloc>
1000b834:	89800417 	ldw	r6,16(r17)
1000b838:	11000304 	addi	r4,r2,12
1000b83c:	89400304 	addi	r5,r17,12
1000b840:	31800084 	addi	r6,r6,2
1000b844:	318d883a 	add	r6,r6,r6
1000b848:	318d883a 	add	r6,r6,r6
1000b84c:	1027883a 	mov	r19,r2
1000b850:	000d7880 	call	1000d788 <memcpy>
1000b854:	8009883a 	mov	r4,r16
1000b858:	980b883a 	mov	r5,r19
1000b85c:	01800044 	movi	r6,1
1000b860:	000e3740 	call	1000e374 <__lshift>
1000b864:	1029883a 	mov	r20,r2
1000b868:	003e8606 	br	1000b284 <__alt_data_end+0xf800b284>
1000b86c:	00800e44 	movi	r2,57
1000b870:	90809526 	beq	r18,r2,1000bac8 <_dtoa_r+0x15c4>
1000b874:	92000044 	addi	r8,r18,1
1000b878:	003f2306 	br	1000b508 <__alt_data_end+0xf800b508>
1000b87c:	9011883a 	mov	r8,r18
1000b880:	8825883a 	mov	r18,r17
1000b884:	a023883a 	mov	r17,r20
1000b888:	003e3706 	br	1000b168 <__alt_data_end+0xf800b168>
1000b88c:	002b883a 	mov	r21,zero
1000b890:	0023883a 	mov	r17,zero
1000b894:	003f5606 	br	1000b5f0 <__alt_data_end+0xf800b5f0>
1000b898:	51bfffc4 	addi	r6,r10,-1
1000b89c:	300490fa 	slli	r2,r6,3
1000b8a0:	00c40074 	movhi	r3,4097
1000b8a4:	18d51204 	addi	r3,r3,21576
1000b8a8:	1885883a 	add	r2,r3,r2
1000b8ac:	d9c00e17 	ldw	r7,56(sp)
1000b8b0:	11000017 	ldw	r4,0(r2)
1000b8b4:	11400117 	ldw	r5,4(r2)
1000b8b8:	d8800717 	ldw	r2,28(sp)
1000b8bc:	d9801015 	stw	r6,64(sp)
1000b8c0:	880d883a 	mov	r6,r17
1000b8c4:	da801615 	stw	r10,88(sp)
1000b8c8:	15c00044 	addi	r23,r2,1
1000b8cc:	0006bb80 	call	10006bb8 <__muldf3>
1000b8d0:	a80b883a 	mov	r5,r21
1000b8d4:	a009883a 	mov	r4,r20
1000b8d8:	d8c01115 	stw	r3,68(sp)
1000b8dc:	d8800e15 	stw	r2,56(sp)
1000b8e0:	0007cf40 	call	10007cf4 <__fixdfsi>
1000b8e4:	1009883a 	mov	r4,r2
1000b8e8:	1023883a 	mov	r17,r2
1000b8ec:	0007d7c0 	call	10007d7c <__floatsidf>
1000b8f0:	a009883a 	mov	r4,r20
1000b8f4:	a80b883a 	mov	r5,r21
1000b8f8:	100d883a 	mov	r6,r2
1000b8fc:	180f883a 	mov	r7,r3
1000b900:	00074240 	call	10007424 <__subdf3>
1000b904:	1813883a 	mov	r9,r3
1000b908:	d8c00717 	ldw	r3,28(sp)
1000b90c:	8c400c04 	addi	r17,r17,48
1000b910:	1011883a 	mov	r8,r2
1000b914:	1c400005 	stb	r17,0(r3)
1000b918:	da801617 	ldw	r10,88(sp)
1000b91c:	00800044 	movi	r2,1
1000b920:	50802326 	beq	r10,r2,1000b9b0 <_dtoa_r+0x14ac>
1000b924:	d8800717 	ldw	r2,28(sp)
1000b928:	b82b883a 	mov	r21,r23
1000b92c:	dc001315 	stw	r16,76(sp)
1000b930:	12a9883a 	add	r20,r2,r10
1000b934:	4807883a 	mov	r3,r9
1000b938:	4005883a 	mov	r2,r8
1000b93c:	dc801415 	stw	r18,80(sp)
1000b940:	000d883a 	mov	r6,zero
1000b944:	01d00934 	movhi	r7,16420
1000b948:	1009883a 	mov	r4,r2
1000b94c:	180b883a 	mov	r5,r3
1000b950:	0006bb80 	call	10006bb8 <__muldf3>
1000b954:	180b883a 	mov	r5,r3
1000b958:	1009883a 	mov	r4,r2
1000b95c:	1821883a 	mov	r16,r3
1000b960:	1025883a 	mov	r18,r2
1000b964:	0007cf40 	call	10007cf4 <__fixdfsi>
1000b968:	1009883a 	mov	r4,r2
1000b96c:	1023883a 	mov	r17,r2
1000b970:	0007d7c0 	call	10007d7c <__floatsidf>
1000b974:	9009883a 	mov	r4,r18
1000b978:	800b883a 	mov	r5,r16
1000b97c:	100d883a 	mov	r6,r2
1000b980:	180f883a 	mov	r7,r3
1000b984:	8c400c04 	addi	r17,r17,48
1000b988:	00074240 	call	10007424 <__subdf3>
1000b98c:	ad400044 	addi	r21,r21,1
1000b990:	ac7fffc5 	stb	r17,-1(r21)
1000b994:	ad3fea1e 	bne	r21,r20,1000b940 <__alt_data_end+0xf800b940>
1000b998:	1813883a 	mov	r9,r3
1000b99c:	d8c01017 	ldw	r3,64(sp)
1000b9a0:	dc001317 	ldw	r16,76(sp)
1000b9a4:	dc801417 	ldw	r18,80(sp)
1000b9a8:	1011883a 	mov	r8,r2
1000b9ac:	b8ef883a 	add	r23,r23,r3
1000b9b0:	d9000e17 	ldw	r4,56(sp)
1000b9b4:	d9401117 	ldw	r5,68(sp)
1000b9b8:	000d883a 	mov	r6,zero
1000b9bc:	01cff834 	movhi	r7,16352
1000b9c0:	da001715 	stw	r8,92(sp)
1000b9c4:	da401515 	stw	r9,84(sp)
1000b9c8:	00057580 	call	10005758 <__adddf3>
1000b9cc:	da001717 	ldw	r8,92(sp)
1000b9d0:	da401517 	ldw	r9,84(sp)
1000b9d4:	1009883a 	mov	r4,r2
1000b9d8:	400d883a 	mov	r6,r8
1000b9dc:	480f883a 	mov	r7,r9
1000b9e0:	180b883a 	mov	r5,r3
1000b9e4:	0006ad80 	call	10006ad8 <__ledf2>
1000b9e8:	da001717 	ldw	r8,92(sp)
1000b9ec:	da401517 	ldw	r9,84(sp)
1000b9f0:	10003b0e 	bge	r2,zero,1000bae0 <_dtoa_r+0x15dc>
1000b9f4:	d9001217 	ldw	r4,72(sp)
1000b9f8:	bd7fffc3 	ldbu	r21,-1(r23)
1000b9fc:	d9000515 	stw	r4,20(sp)
1000ba00:	003d1c06 	br	1000ae74 <__alt_data_end+0xf800ae74>
1000ba04:	d8c00817 	ldw	r3,32(sp)
1000ba08:	18a9c83a 	sub	r20,r3,r2
1000ba0c:	0005883a 	mov	r2,zero
1000ba10:	003d3706 	br	1000aef0 <__alt_data_end+0xf800aef0>
1000ba14:	00800044 	movi	r2,1
1000ba18:	003dd006 	br	1000b15c <__alt_data_end+0xf800b15c>
1000ba1c:	d8c00217 	ldw	r3,8(sp)
1000ba20:	00800d84 	movi	r2,54
1000ba24:	dd400917 	ldw	r21,36(sp)
1000ba28:	10c5c83a 	sub	r2,r2,r3
1000ba2c:	dd000817 	ldw	r20,32(sp)
1000ba30:	003d2f06 	br	1000aef0 <__alt_data_end+0xf800aef0>
1000ba34:	9029883a 	mov	r20,r18
1000ba38:	982b883a 	mov	r21,r19
1000ba3c:	04400084 	movi	r17,2
1000ba40:	003bc606 	br	1000a95c <__alt_data_end+0xf800a95c>
1000ba44:	d8800617 	ldw	r2,24(sp)
1000ba48:	103efc26 	beq	r2,zero,1000b63c <__alt_data_end+0xf800b63c>
1000ba4c:	d8c00d17 	ldw	r3,52(sp)
1000ba50:	00fc890e 	bge	zero,r3,1000ac78 <__alt_data_end+0xf800ac78>
1000ba54:	a80b883a 	mov	r5,r21
1000ba58:	a009883a 	mov	r4,r20
1000ba5c:	000d883a 	mov	r6,zero
1000ba60:	01d00934 	movhi	r7,16420
1000ba64:	0006bb80 	call	10006bb8 <__muldf3>
1000ba68:	89000044 	addi	r4,r17,1
1000ba6c:	1029883a 	mov	r20,r2
1000ba70:	182b883a 	mov	r21,r3
1000ba74:	0007d7c0 	call	10007d7c <__floatsidf>
1000ba78:	a009883a 	mov	r4,r20
1000ba7c:	a80b883a 	mov	r5,r21
1000ba80:	100d883a 	mov	r6,r2
1000ba84:	180f883a 	mov	r7,r3
1000ba88:	0006bb80 	call	10006bb8 <__muldf3>
1000ba8c:	1009883a 	mov	r4,r2
1000ba90:	180b883a 	mov	r5,r3
1000ba94:	000d883a 	mov	r6,zero
1000ba98:	01d00734 	movhi	r7,16412
1000ba9c:	00057580 	call	10005758 <__adddf3>
1000baa0:	d9000517 	ldw	r4,20(sp)
1000baa4:	1023883a 	mov	r17,r2
1000baa8:	00bf3034 	movhi	r2,64704
1000baac:	213fffc4 	addi	r4,r4,-1
1000bab0:	1885883a 	add	r2,r3,r2
1000bab4:	d9001215 	stw	r4,72(sp)
1000bab8:	d8800e15 	stw	r2,56(sp)
1000babc:	da800d17 	ldw	r10,52(sp)
1000bac0:	003bc306 	br	1000a9d0 <__alt_data_end+0xf800a9d0>
1000bac4:	b039883a 	mov	fp,r22
1000bac8:	01000e44 	movi	r4,57
1000bacc:	8825883a 	mov	r18,r17
1000bad0:	9dc00044 	addi	r23,r19,1
1000bad4:	99000005 	stb	r4,0(r19)
1000bad8:	a023883a 	mov	r17,r20
1000badc:	003dae06 	br	1000b198 <__alt_data_end+0xf800b198>
1000bae0:	d9800e17 	ldw	r6,56(sp)
1000bae4:	d9c01117 	ldw	r7,68(sp)
1000bae8:	0009883a 	mov	r4,zero
1000baec:	014ff834 	movhi	r5,16352
1000baf0:	da001715 	stw	r8,92(sp)
1000baf4:	da401515 	stw	r9,84(sp)
1000baf8:	00074240 	call	10007424 <__subdf3>
1000bafc:	da001717 	ldw	r8,92(sp)
1000bb00:	da401517 	ldw	r9,84(sp)
1000bb04:	1009883a 	mov	r4,r2
1000bb08:	180b883a 	mov	r5,r3
1000bb0c:	400d883a 	mov	r6,r8
1000bb10:	480f883a 	mov	r7,r9
1000bb14:	00069f80 	call	100069f8 <__gedf2>
1000bb18:	00bc570e 	bge	zero,r2,1000ac78 <__alt_data_end+0xf800ac78>
1000bb1c:	01000c04 	movi	r4,48
1000bb20:	00000106 	br	1000bb28 <_dtoa_r+0x1624>
1000bb24:	102f883a 	mov	r23,r2
1000bb28:	b8bfffc4 	addi	r2,r23,-1
1000bb2c:	10c00007 	ldb	r3,0(r2)
1000bb30:	193ffc26 	beq	r3,r4,1000bb24 <__alt_data_end+0xf800bb24>
1000bb34:	d9801217 	ldw	r6,72(sp)
1000bb38:	d9800515 	stw	r6,20(sp)
1000bb3c:	003c1f06 	br	1000abbc <__alt_data_end+0xf800abbc>
1000bb40:	d8801217 	ldw	r2,72(sp)
1000bb44:	dc001117 	ldw	r16,68(sp)
1000bb48:	d8800515 	stw	r2,20(sp)
1000bb4c:	003cc906 	br	1000ae74 <__alt_data_end+0xf800ae74>
1000bb50:	dd801317 	ldw	r22,76(sp)
1000bb54:	dc001117 	ldw	r16,68(sp)
1000bb58:	dcc01417 	ldw	r19,80(sp)
1000bb5c:	dc801017 	ldw	r18,64(sp)
1000bb60:	003c4506 	br	1000ac78 <__alt_data_end+0xf800ac78>
1000bb64:	103e5d1e 	bne	r2,zero,1000b4dc <__alt_data_end+0xf800b4dc>
1000bb68:	4080004c 	andi	r2,r8,1
1000bb6c:	103e5b26 	beq	r2,zero,1000b4dc <__alt_data_end+0xf800b4dc>
1000bb70:	003e5706 	br	1000b4d0 <__alt_data_end+0xf800b4d0>
1000bb74:	d8c00317 	ldw	r3,12(sp)
1000bb78:	00800084 	movi	r2,2
1000bb7c:	10c00a16 	blt	r2,r3,1000bba8 <_dtoa_r+0x16a4>
1000bb80:	d9000d17 	ldw	r4,52(sp)
1000bb84:	003e8306 	br	1000b594 <__alt_data_end+0xf800b594>
1000bb88:	04400084 	movi	r17,2
1000bb8c:	003b7306 	br	1000a95c <__alt_data_end+0xf800a95c>
1000bb90:	d9801217 	ldw	r6,72(sp)
1000bb94:	d9800515 	stw	r6,20(sp)
1000bb98:	003cb606 	br	1000ae74 <__alt_data_end+0xf800ae74>
1000bb9c:	d9001217 	ldw	r4,72(sp)
1000bba0:	d9000515 	stw	r4,20(sp)
1000bba4:	003c0506 	br	1000abbc <__alt_data_end+0xf800abbc>
1000bba8:	d9800d17 	ldw	r6,52(sp)
1000bbac:	d9800615 	stw	r6,24(sp)
1000bbb0:	003e8306 	br	1000b5c0 <__alt_data_end+0xf800b5c0>
1000bbb4:	d9800317 	ldw	r6,12(sp)
1000bbb8:	00800084 	movi	r2,2
1000bbbc:	11800216 	blt	r2,r6,1000bbc8 <_dtoa_r+0x16c4>
1000bbc0:	d8800d17 	ldw	r2,52(sp)
1000bbc4:	003da606 	br	1000b260 <__alt_data_end+0xf800b260>
1000bbc8:	d8800d17 	ldw	r2,52(sp)
1000bbcc:	d8800615 	stw	r2,24(sp)
1000bbd0:	003e7b06 	br	1000b5c0 <__alt_data_end+0xf800b5c0>
1000bbd4:	05000044 	movi	r20,1
1000bbd8:	003b0506 	br	1000a7f0 <__alt_data_end+0xf800a7f0>
1000bbdc:	8009883a 	mov	r4,r16
1000bbe0:	80001115 	stw	zero,68(r16)
1000bbe4:	000b883a 	mov	r5,zero
1000bbe8:	000db400 	call	1000db40 <_Balloc>
1000bbec:	d8800715 	stw	r2,28(sp)
1000bbf0:	d8c00717 	ldw	r3,28(sp)
1000bbf4:	00bfffc4 	movi	r2,-1
1000bbf8:	01000044 	movi	r4,1
1000bbfc:	d8800615 	stw	r2,24(sp)
1000bc00:	80c01015 	stw	r3,64(r16)
1000bc04:	d9000b15 	stw	r4,44(sp)
1000bc08:	d8002215 	stw	zero,136(sp)
1000bc0c:	d8800d15 	stw	r2,52(sp)
1000bc10:	003c1906 	br	1000ac78 <__alt_data_end+0xf800ac78>
1000bc14:	193d2926 	beq	r3,r4,1000b0bc <__alt_data_end+0xf800b0bc>
1000bc18:	00c00f04 	movi	r3,60
1000bc1c:	1885c83a 	sub	r2,r3,r2
1000bc20:	003d7b06 	br	1000b210 <__alt_data_end+0xf800b210>
1000bc24:	000b883a 	mov	r5,zero
1000bc28:	003b1006 	br	1000a86c <__alt_data_end+0xf800a86c>

1000bc2c <_fflush_r>:
1000bc2c:	defffb04 	addi	sp,sp,-20
1000bc30:	dcc00315 	stw	r19,12(sp)
1000bc34:	dc000015 	stw	r16,0(sp)
1000bc38:	dfc00415 	stw	ra,16(sp)
1000bc3c:	dc800215 	stw	r18,8(sp)
1000bc40:	dc400115 	stw	r17,4(sp)
1000bc44:	2027883a 	mov	r19,r4
1000bc48:	2821883a 	mov	r16,r5
1000bc4c:	20000226 	beq	r4,zero,1000bc58 <_fflush_r+0x2c>
1000bc50:	20800e17 	ldw	r2,56(r4)
1000bc54:	10005326 	beq	r2,zero,1000bda4 <_fflush_r+0x178>
1000bc58:	8080030b 	ldhu	r2,12(r16)
1000bc5c:	10ffffcc 	andi	r3,r2,65535
1000bc60:	18e0001c 	xori	r3,r3,32768
1000bc64:	18e00004 	addi	r3,r3,-32768
1000bc68:	18002c26 	beq	r3,zero,1000bd1c <_fflush_r+0xf0>
1000bc6c:	10c0020c 	andi	r3,r2,8
1000bc70:	1800321e 	bne	r3,zero,1000bd3c <_fflush_r+0x110>
1000bc74:	80c00117 	ldw	r3,4(r16)
1000bc78:	10820014 	ori	r2,r2,2048
1000bc7c:	8080030d 	sth	r2,12(r16)
1000bc80:	00c0570e 	bge	zero,r3,1000bde0 <_fflush_r+0x1b4>
1000bc84:	82000a17 	ldw	r8,40(r16)
1000bc88:	40002426 	beq	r8,zero,1000bd1c <_fflush_r+0xf0>
1000bc8c:	9c400017 	ldw	r17,0(r19)
1000bc90:	10c4000c 	andi	r3,r2,4096
1000bc94:	98000015 	stw	zero,0(r19)
1000bc98:	18004626 	beq	r3,zero,1000bdb4 <_fflush_r+0x188>
1000bc9c:	81801417 	ldw	r6,80(r16)
1000bca0:	10c0010c 	andi	r3,r2,4
1000bca4:	18000626 	beq	r3,zero,1000bcc0 <_fflush_r+0x94>
1000bca8:	80c00117 	ldw	r3,4(r16)
1000bcac:	80800c17 	ldw	r2,48(r16)
1000bcb0:	30cdc83a 	sub	r6,r6,r3
1000bcb4:	10000226 	beq	r2,zero,1000bcc0 <_fflush_r+0x94>
1000bcb8:	80800f17 	ldw	r2,60(r16)
1000bcbc:	308dc83a 	sub	r6,r6,r2
1000bcc0:	81400717 	ldw	r5,28(r16)
1000bcc4:	9809883a 	mov	r4,r19
1000bcc8:	000f883a 	mov	r7,zero
1000bccc:	403ee83a 	callr	r8
1000bcd0:	00ffffc4 	movi	r3,-1
1000bcd4:	10c04526 	beq	r2,r3,1000bdec <_fflush_r+0x1c0>
1000bcd8:	80c0030b 	ldhu	r3,12(r16)
1000bcdc:	81000417 	ldw	r4,16(r16)
1000bce0:	80000115 	stw	zero,4(r16)
1000bce4:	197dffcc 	andi	r5,r3,63487
1000bce8:	8140030d 	sth	r5,12(r16)
1000bcec:	81000015 	stw	r4,0(r16)
1000bcf0:	18c4000c 	andi	r3,r3,4096
1000bcf4:	18000126 	beq	r3,zero,1000bcfc <_fflush_r+0xd0>
1000bcf8:	80801415 	stw	r2,80(r16)
1000bcfc:	81400c17 	ldw	r5,48(r16)
1000bd00:	9c400015 	stw	r17,0(r19)
1000bd04:	28000526 	beq	r5,zero,1000bd1c <_fflush_r+0xf0>
1000bd08:	80801004 	addi	r2,r16,64
1000bd0c:	28800226 	beq	r5,r2,1000bd18 <_fflush_r+0xec>
1000bd10:	9809883a 	mov	r4,r19
1000bd14:	000c35c0 	call	1000c35c <_free_r>
1000bd18:	80000c15 	stw	zero,48(r16)
1000bd1c:	0005883a 	mov	r2,zero
1000bd20:	dfc00417 	ldw	ra,16(sp)
1000bd24:	dcc00317 	ldw	r19,12(sp)
1000bd28:	dc800217 	ldw	r18,8(sp)
1000bd2c:	dc400117 	ldw	r17,4(sp)
1000bd30:	dc000017 	ldw	r16,0(sp)
1000bd34:	dec00504 	addi	sp,sp,20
1000bd38:	f800283a 	ret
1000bd3c:	84800417 	ldw	r18,16(r16)
1000bd40:	903ff626 	beq	r18,zero,1000bd1c <__alt_data_end+0xf800bd1c>
1000bd44:	84400017 	ldw	r17,0(r16)
1000bd48:	108000cc 	andi	r2,r2,3
1000bd4c:	84800015 	stw	r18,0(r16)
1000bd50:	8ca3c83a 	sub	r17,r17,r18
1000bd54:	10001526 	beq	r2,zero,1000bdac <_fflush_r+0x180>
1000bd58:	0005883a 	mov	r2,zero
1000bd5c:	80800215 	stw	r2,8(r16)
1000bd60:	04400316 	blt	zero,r17,1000bd70 <_fflush_r+0x144>
1000bd64:	003fed06 	br	1000bd1c <__alt_data_end+0xf800bd1c>
1000bd68:	90a5883a 	add	r18,r18,r2
1000bd6c:	047feb0e 	bge	zero,r17,1000bd1c <__alt_data_end+0xf800bd1c>
1000bd70:	80800917 	ldw	r2,36(r16)
1000bd74:	81400717 	ldw	r5,28(r16)
1000bd78:	880f883a 	mov	r7,r17
1000bd7c:	900d883a 	mov	r6,r18
1000bd80:	9809883a 	mov	r4,r19
1000bd84:	103ee83a 	callr	r2
1000bd88:	88a3c83a 	sub	r17,r17,r2
1000bd8c:	00bff616 	blt	zero,r2,1000bd68 <__alt_data_end+0xf800bd68>
1000bd90:	80c0030b 	ldhu	r3,12(r16)
1000bd94:	00bfffc4 	movi	r2,-1
1000bd98:	18c01014 	ori	r3,r3,64
1000bd9c:	80c0030d 	sth	r3,12(r16)
1000bda0:	003fdf06 	br	1000bd20 <__alt_data_end+0xf800bd20>
1000bda4:	000c1e80 	call	1000c1e8 <__sinit>
1000bda8:	003fab06 	br	1000bc58 <__alt_data_end+0xf800bc58>
1000bdac:	80800517 	ldw	r2,20(r16)
1000bdb0:	003fea06 	br	1000bd5c <__alt_data_end+0xf800bd5c>
1000bdb4:	81400717 	ldw	r5,28(r16)
1000bdb8:	000d883a 	mov	r6,zero
1000bdbc:	9809883a 	mov	r4,r19
1000bdc0:	01c00044 	movi	r7,1
1000bdc4:	403ee83a 	callr	r8
1000bdc8:	100d883a 	mov	r6,r2
1000bdcc:	00bfffc4 	movi	r2,-1
1000bdd0:	30801326 	beq	r6,r2,1000be20 <_fflush_r+0x1f4>
1000bdd4:	8080030b 	ldhu	r2,12(r16)
1000bdd8:	82000a17 	ldw	r8,40(r16)
1000bddc:	003fb006 	br	1000bca0 <__alt_data_end+0xf800bca0>
1000bde0:	80c00f17 	ldw	r3,60(r16)
1000bde4:	00ffa716 	blt	zero,r3,1000bc84 <__alt_data_end+0xf800bc84>
1000bde8:	003fcc06 	br	1000bd1c <__alt_data_end+0xf800bd1c>
1000bdec:	98c00017 	ldw	r3,0(r19)
1000bdf0:	183fb926 	beq	r3,zero,1000bcd8 <__alt_data_end+0xf800bcd8>
1000bdf4:	01000744 	movi	r4,29
1000bdf8:	19000226 	beq	r3,r4,1000be04 <_fflush_r+0x1d8>
1000bdfc:	01000584 	movi	r4,22
1000be00:	1900101e 	bne	r3,r4,1000be44 <_fflush_r+0x218>
1000be04:	8080030b 	ldhu	r2,12(r16)
1000be08:	80c00417 	ldw	r3,16(r16)
1000be0c:	80000115 	stw	zero,4(r16)
1000be10:	10bdffcc 	andi	r2,r2,63487
1000be14:	8080030d 	sth	r2,12(r16)
1000be18:	80c00015 	stw	r3,0(r16)
1000be1c:	003fb706 	br	1000bcfc <__alt_data_end+0xf800bcfc>
1000be20:	98800017 	ldw	r2,0(r19)
1000be24:	103feb26 	beq	r2,zero,1000bdd4 <__alt_data_end+0xf800bdd4>
1000be28:	00c00744 	movi	r3,29
1000be2c:	10c00226 	beq	r2,r3,1000be38 <_fflush_r+0x20c>
1000be30:	00c00584 	movi	r3,22
1000be34:	10ffd61e 	bne	r2,r3,1000bd90 <__alt_data_end+0xf800bd90>
1000be38:	9c400015 	stw	r17,0(r19)
1000be3c:	0005883a 	mov	r2,zero
1000be40:	003fb706 	br	1000bd20 <__alt_data_end+0xf800bd20>
1000be44:	80c0030b 	ldhu	r3,12(r16)
1000be48:	18c01014 	ori	r3,r3,64
1000be4c:	80c0030d 	sth	r3,12(r16)
1000be50:	003fb306 	br	1000bd20 <__alt_data_end+0xf800bd20>

1000be54 <fflush>:
1000be54:	20000526 	beq	r4,zero,1000be6c <fflush+0x18>
1000be58:	00840074 	movhi	r2,4097
1000be5c:	109c0604 	addi	r2,r2,28696
1000be60:	200b883a 	mov	r5,r4
1000be64:	11000017 	ldw	r4,0(r2)
1000be68:	000bc2c1 	jmpi	1000bc2c <_fflush_r>
1000be6c:	00840074 	movhi	r2,4097
1000be70:	109c0504 	addi	r2,r2,28692
1000be74:	11000017 	ldw	r4,0(r2)
1000be78:	01440074 	movhi	r5,4097
1000be7c:	296f0b04 	addi	r5,r5,-17364
1000be80:	000cba81 	jmpi	1000cba8 <_fwalk_reent>

1000be84 <__fp_lock>:
1000be84:	0005883a 	mov	r2,zero
1000be88:	f800283a 	ret

1000be8c <__fp_unlock>:
1000be8c:	0005883a 	mov	r2,zero
1000be90:	f800283a 	ret

1000be94 <_cleanup_r>:
1000be94:	01440074 	movhi	r5,4097
1000be98:	2942d004 	addi	r5,r5,2880
1000be9c:	000caf01 	jmpi	1000caf0 <_fwalk>

1000bea0 <__sinit.part.1>:
1000bea0:	defff604 	addi	sp,sp,-40
1000bea4:	00c40074 	movhi	r3,4097
1000bea8:	dfc00915 	stw	ra,36(sp)
1000beac:	df000815 	stw	fp,32(sp)
1000beb0:	ddc00715 	stw	r23,28(sp)
1000beb4:	dd800615 	stw	r22,24(sp)
1000beb8:	dd400515 	stw	r21,20(sp)
1000bebc:	dd000415 	stw	r20,16(sp)
1000bec0:	dcc00315 	stw	r19,12(sp)
1000bec4:	dc800215 	stw	r18,8(sp)
1000bec8:	dc400115 	stw	r17,4(sp)
1000becc:	dc000015 	stw	r16,0(sp)
1000bed0:	18efa504 	addi	r3,r3,-16748
1000bed4:	24000117 	ldw	r16,4(r4)
1000bed8:	20c00f15 	stw	r3,60(r4)
1000bedc:	07000044 	movi	fp,1
1000bee0:	00c000c4 	movi	r3,3
1000bee4:	2080bb04 	addi	r2,r4,748
1000bee8:	20c0b915 	stw	r3,740(r4)
1000beec:	27000e15 	stw	fp,56(r4)
1000bef0:	2080ba15 	stw	r2,744(r4)
1000bef4:	2000b815 	stw	zero,736(r4)
1000bef8:	05c00204 	movi	r23,8
1000befc:	00800104 	movi	r2,4
1000bf00:	2025883a 	mov	r18,r4
1000bf04:	b80d883a 	mov	r6,r23
1000bf08:	81001704 	addi	r4,r16,92
1000bf0c:	000b883a 	mov	r5,zero
1000bf10:	80000015 	stw	zero,0(r16)
1000bf14:	80000115 	stw	zero,4(r16)
1000bf18:	80000215 	stw	zero,8(r16)
1000bf1c:	8080030d 	sth	r2,12(r16)
1000bf20:	80001915 	stw	zero,100(r16)
1000bf24:	8000038d 	sth	zero,14(r16)
1000bf28:	80000415 	stw	zero,16(r16)
1000bf2c:	80000515 	stw	zero,20(r16)
1000bf30:	80000615 	stw	zero,24(r16)
1000bf34:	000da1c0 	call	1000da1c <memset>
1000bf38:	05840074 	movhi	r22,4097
1000bf3c:	94400217 	ldw	r17,8(r18)
1000bf40:	05440074 	movhi	r21,4097
1000bf44:	05040074 	movhi	r20,4097
1000bf48:	04c40074 	movhi	r19,4097
1000bf4c:	b5bc5f04 	addi	r22,r22,-3716
1000bf50:	ad7c7604 	addi	r21,r21,-3624
1000bf54:	a53c9504 	addi	r20,r20,-3500
1000bf58:	9cfcac04 	addi	r19,r19,-3408
1000bf5c:	85800815 	stw	r22,32(r16)
1000bf60:	85400915 	stw	r21,36(r16)
1000bf64:	85000a15 	stw	r20,40(r16)
1000bf68:	84c00b15 	stw	r19,44(r16)
1000bf6c:	84000715 	stw	r16,28(r16)
1000bf70:	00800284 	movi	r2,10
1000bf74:	89001704 	addi	r4,r17,92
1000bf78:	b80d883a 	mov	r6,r23
1000bf7c:	000b883a 	mov	r5,zero
1000bf80:	88000015 	stw	zero,0(r17)
1000bf84:	88000115 	stw	zero,4(r17)
1000bf88:	88000215 	stw	zero,8(r17)
1000bf8c:	8880030d 	sth	r2,12(r17)
1000bf90:	88001915 	stw	zero,100(r17)
1000bf94:	8f00038d 	sth	fp,14(r17)
1000bf98:	88000415 	stw	zero,16(r17)
1000bf9c:	88000515 	stw	zero,20(r17)
1000bfa0:	88000615 	stw	zero,24(r17)
1000bfa4:	000da1c0 	call	1000da1c <memset>
1000bfa8:	94000317 	ldw	r16,12(r18)
1000bfac:	00800484 	movi	r2,18
1000bfb0:	8c400715 	stw	r17,28(r17)
1000bfb4:	8d800815 	stw	r22,32(r17)
1000bfb8:	8d400915 	stw	r21,36(r17)
1000bfbc:	8d000a15 	stw	r20,40(r17)
1000bfc0:	8cc00b15 	stw	r19,44(r17)
1000bfc4:	8080030d 	sth	r2,12(r16)
1000bfc8:	00800084 	movi	r2,2
1000bfcc:	80000015 	stw	zero,0(r16)
1000bfd0:	80000115 	stw	zero,4(r16)
1000bfd4:	80000215 	stw	zero,8(r16)
1000bfd8:	80001915 	stw	zero,100(r16)
1000bfdc:	8080038d 	sth	r2,14(r16)
1000bfe0:	80000415 	stw	zero,16(r16)
1000bfe4:	80000515 	stw	zero,20(r16)
1000bfe8:	80000615 	stw	zero,24(r16)
1000bfec:	81001704 	addi	r4,r16,92
1000bff0:	000b883a 	mov	r5,zero
1000bff4:	b80d883a 	mov	r6,r23
1000bff8:	000da1c0 	call	1000da1c <memset>
1000bffc:	84000715 	stw	r16,28(r16)
1000c000:	85800815 	stw	r22,32(r16)
1000c004:	85400915 	stw	r21,36(r16)
1000c008:	85000a15 	stw	r20,40(r16)
1000c00c:	84c00b15 	stw	r19,44(r16)
1000c010:	dfc00917 	ldw	ra,36(sp)
1000c014:	df000817 	ldw	fp,32(sp)
1000c018:	ddc00717 	ldw	r23,28(sp)
1000c01c:	dd800617 	ldw	r22,24(sp)
1000c020:	dd400517 	ldw	r21,20(sp)
1000c024:	dd000417 	ldw	r20,16(sp)
1000c028:	dcc00317 	ldw	r19,12(sp)
1000c02c:	dc800217 	ldw	r18,8(sp)
1000c030:	dc400117 	ldw	r17,4(sp)
1000c034:	dc000017 	ldw	r16,0(sp)
1000c038:	dec00a04 	addi	sp,sp,40
1000c03c:	f800283a 	ret

1000c040 <__sfmoreglue>:
1000c040:	defffc04 	addi	sp,sp,-16
1000c044:	dc800215 	stw	r18,8(sp)
1000c048:	2825883a 	mov	r18,r5
1000c04c:	dc000015 	stw	r16,0(sp)
1000c050:	01401a04 	movi	r5,104
1000c054:	2021883a 	mov	r16,r4
1000c058:	9009883a 	mov	r4,r18
1000c05c:	dfc00315 	stw	ra,12(sp)
1000c060:	dc400115 	stw	r17,4(sp)
1000c064:	00057300 	call	10005730 <__mulsi3>
1000c068:	8009883a 	mov	r4,r16
1000c06c:	11400304 	addi	r5,r2,12
1000c070:	1023883a 	mov	r17,r2
1000c074:	000cef80 	call	1000cef8 <_malloc_r>
1000c078:	1021883a 	mov	r16,r2
1000c07c:	10000726 	beq	r2,zero,1000c09c <__sfmoreglue+0x5c>
1000c080:	11000304 	addi	r4,r2,12
1000c084:	10000015 	stw	zero,0(r2)
1000c088:	14800115 	stw	r18,4(r2)
1000c08c:	11000215 	stw	r4,8(r2)
1000c090:	000b883a 	mov	r5,zero
1000c094:	880d883a 	mov	r6,r17
1000c098:	000da1c0 	call	1000da1c <memset>
1000c09c:	8005883a 	mov	r2,r16
1000c0a0:	dfc00317 	ldw	ra,12(sp)
1000c0a4:	dc800217 	ldw	r18,8(sp)
1000c0a8:	dc400117 	ldw	r17,4(sp)
1000c0ac:	dc000017 	ldw	r16,0(sp)
1000c0b0:	dec00404 	addi	sp,sp,16
1000c0b4:	f800283a 	ret

1000c0b8 <__sfp>:
1000c0b8:	00840074 	movhi	r2,4097
1000c0bc:	defffb04 	addi	sp,sp,-20
1000c0c0:	109c0504 	addi	r2,r2,28692
1000c0c4:	dc800215 	stw	r18,8(sp)
1000c0c8:	14800017 	ldw	r18,0(r2)
1000c0cc:	dcc00315 	stw	r19,12(sp)
1000c0d0:	dfc00415 	stw	ra,16(sp)
1000c0d4:	90800e17 	ldw	r2,56(r18)
1000c0d8:	dc400115 	stw	r17,4(sp)
1000c0dc:	dc000015 	stw	r16,0(sp)
1000c0e0:	2027883a 	mov	r19,r4
1000c0e4:	1000021e 	bne	r2,zero,1000c0f0 <__sfp+0x38>
1000c0e8:	9009883a 	mov	r4,r18
1000c0ec:	000bea00 	call	1000bea0 <__sinit.part.1>
1000c0f0:	9480b804 	addi	r18,r18,736
1000c0f4:	047fffc4 	movi	r17,-1
1000c0f8:	91400117 	ldw	r5,4(r18)
1000c0fc:	94000217 	ldw	r16,8(r18)
1000c100:	297fffc4 	addi	r5,r5,-1
1000c104:	28000a16 	blt	r5,zero,1000c130 <__sfp+0x78>
1000c108:	8080030f 	ldh	r2,12(r16)
1000c10c:	10000c26 	beq	r2,zero,1000c140 <__sfp+0x88>
1000c110:	80c01d04 	addi	r3,r16,116
1000c114:	00000206 	br	1000c120 <__sfp+0x68>
1000c118:	18bfe60f 	ldh	r2,-104(r3)
1000c11c:	10000826 	beq	r2,zero,1000c140 <__sfp+0x88>
1000c120:	297fffc4 	addi	r5,r5,-1
1000c124:	1c3ffd04 	addi	r16,r3,-12
1000c128:	18c01a04 	addi	r3,r3,104
1000c12c:	2c7ffa1e 	bne	r5,r17,1000c118 <__alt_data_end+0xf800c118>
1000c130:	90800017 	ldw	r2,0(r18)
1000c134:	10001d26 	beq	r2,zero,1000c1ac <__sfp+0xf4>
1000c138:	1025883a 	mov	r18,r2
1000c13c:	003fee06 	br	1000c0f8 <__alt_data_end+0xf800c0f8>
1000c140:	00bfffc4 	movi	r2,-1
1000c144:	8080038d 	sth	r2,14(r16)
1000c148:	00800044 	movi	r2,1
1000c14c:	8080030d 	sth	r2,12(r16)
1000c150:	80001915 	stw	zero,100(r16)
1000c154:	80000015 	stw	zero,0(r16)
1000c158:	80000215 	stw	zero,8(r16)
1000c15c:	80000115 	stw	zero,4(r16)
1000c160:	80000415 	stw	zero,16(r16)
1000c164:	80000515 	stw	zero,20(r16)
1000c168:	80000615 	stw	zero,24(r16)
1000c16c:	81001704 	addi	r4,r16,92
1000c170:	000b883a 	mov	r5,zero
1000c174:	01800204 	movi	r6,8
1000c178:	000da1c0 	call	1000da1c <memset>
1000c17c:	8005883a 	mov	r2,r16
1000c180:	80000c15 	stw	zero,48(r16)
1000c184:	80000d15 	stw	zero,52(r16)
1000c188:	80001115 	stw	zero,68(r16)
1000c18c:	80001215 	stw	zero,72(r16)
1000c190:	dfc00417 	ldw	ra,16(sp)
1000c194:	dcc00317 	ldw	r19,12(sp)
1000c198:	dc800217 	ldw	r18,8(sp)
1000c19c:	dc400117 	ldw	r17,4(sp)
1000c1a0:	dc000017 	ldw	r16,0(sp)
1000c1a4:	dec00504 	addi	sp,sp,20
1000c1a8:	f800283a 	ret
1000c1ac:	9809883a 	mov	r4,r19
1000c1b0:	01400104 	movi	r5,4
1000c1b4:	000c0400 	call	1000c040 <__sfmoreglue>
1000c1b8:	90800015 	stw	r2,0(r18)
1000c1bc:	103fde1e 	bne	r2,zero,1000c138 <__alt_data_end+0xf800c138>
1000c1c0:	00800304 	movi	r2,12
1000c1c4:	98800015 	stw	r2,0(r19)
1000c1c8:	0005883a 	mov	r2,zero
1000c1cc:	003ff006 	br	1000c190 <__alt_data_end+0xf800c190>

1000c1d0 <_cleanup>:
1000c1d0:	00840074 	movhi	r2,4097
1000c1d4:	109c0504 	addi	r2,r2,28692
1000c1d8:	11000017 	ldw	r4,0(r2)
1000c1dc:	01440074 	movhi	r5,4097
1000c1e0:	2942d004 	addi	r5,r5,2880
1000c1e4:	000caf01 	jmpi	1000caf0 <_fwalk>

1000c1e8 <__sinit>:
1000c1e8:	20800e17 	ldw	r2,56(r4)
1000c1ec:	10000126 	beq	r2,zero,1000c1f4 <__sinit+0xc>
1000c1f0:	f800283a 	ret
1000c1f4:	000bea01 	jmpi	1000bea0 <__sinit.part.1>

1000c1f8 <__sfp_lock_acquire>:
1000c1f8:	f800283a 	ret

1000c1fc <__sfp_lock_release>:
1000c1fc:	f800283a 	ret

1000c200 <__sinit_lock_acquire>:
1000c200:	f800283a 	ret

1000c204 <__sinit_lock_release>:
1000c204:	f800283a 	ret

1000c208 <__fp_lock_all>:
1000c208:	00840074 	movhi	r2,4097
1000c20c:	109c0604 	addi	r2,r2,28696
1000c210:	11000017 	ldw	r4,0(r2)
1000c214:	01440074 	movhi	r5,4097
1000c218:	296fa104 	addi	r5,r5,-16764
1000c21c:	000caf01 	jmpi	1000caf0 <_fwalk>

1000c220 <__fp_unlock_all>:
1000c220:	00840074 	movhi	r2,4097
1000c224:	109c0604 	addi	r2,r2,28696
1000c228:	11000017 	ldw	r4,0(r2)
1000c22c:	01440074 	movhi	r5,4097
1000c230:	296fa304 	addi	r5,r5,-16756
1000c234:	000caf01 	jmpi	1000caf0 <_fwalk>

1000c238 <_malloc_trim_r>:
1000c238:	defffb04 	addi	sp,sp,-20
1000c23c:	dcc00315 	stw	r19,12(sp)
1000c240:	04c40074 	movhi	r19,4097
1000c244:	dc800215 	stw	r18,8(sp)
1000c248:	dc400115 	stw	r17,4(sp)
1000c24c:	dc000015 	stw	r16,0(sp)
1000c250:	dfc00415 	stw	ra,16(sp)
1000c254:	2821883a 	mov	r16,r5
1000c258:	9cd68004 	addi	r19,r19,23040
1000c25c:	2025883a 	mov	r18,r4
1000c260:	00124e40 	call	100124e4 <__malloc_lock>
1000c264:	98800217 	ldw	r2,8(r19)
1000c268:	14400117 	ldw	r17,4(r2)
1000c26c:	00bfff04 	movi	r2,-4
1000c270:	88a2703a 	and	r17,r17,r2
1000c274:	8c21c83a 	sub	r16,r17,r16
1000c278:	8403fbc4 	addi	r16,r16,4079
1000c27c:	8020d33a 	srli	r16,r16,12
1000c280:	0083ffc4 	movi	r2,4095
1000c284:	843fffc4 	addi	r16,r16,-1
1000c288:	8020933a 	slli	r16,r16,12
1000c28c:	1400060e 	bge	r2,r16,1000c2a8 <_malloc_trim_r+0x70>
1000c290:	9009883a 	mov	r4,r18
1000c294:	000b883a 	mov	r5,zero
1000c298:	000f1280 	call	1000f128 <_sbrk_r>
1000c29c:	98c00217 	ldw	r3,8(r19)
1000c2a0:	1c47883a 	add	r3,r3,r17
1000c2a4:	10c00a26 	beq	r2,r3,1000c2d0 <_malloc_trim_r+0x98>
1000c2a8:	9009883a 	mov	r4,r18
1000c2ac:	00125040 	call	10012504 <__malloc_unlock>
1000c2b0:	0005883a 	mov	r2,zero
1000c2b4:	dfc00417 	ldw	ra,16(sp)
1000c2b8:	dcc00317 	ldw	r19,12(sp)
1000c2bc:	dc800217 	ldw	r18,8(sp)
1000c2c0:	dc400117 	ldw	r17,4(sp)
1000c2c4:	dc000017 	ldw	r16,0(sp)
1000c2c8:	dec00504 	addi	sp,sp,20
1000c2cc:	f800283a 	ret
1000c2d0:	9009883a 	mov	r4,r18
1000c2d4:	040bc83a 	sub	r5,zero,r16
1000c2d8:	000f1280 	call	1000f128 <_sbrk_r>
1000c2dc:	00ffffc4 	movi	r3,-1
1000c2e0:	10c00d26 	beq	r2,r3,1000c318 <_malloc_trim_r+0xe0>
1000c2e4:	00c400b4 	movhi	r3,4098
1000c2e8:	18e2df04 	addi	r3,r3,-29828
1000c2ec:	18800017 	ldw	r2,0(r3)
1000c2f0:	99000217 	ldw	r4,8(r19)
1000c2f4:	8c23c83a 	sub	r17,r17,r16
1000c2f8:	8c400054 	ori	r17,r17,1
1000c2fc:	1421c83a 	sub	r16,r2,r16
1000c300:	24400115 	stw	r17,4(r4)
1000c304:	9009883a 	mov	r4,r18
1000c308:	1c000015 	stw	r16,0(r3)
1000c30c:	00125040 	call	10012504 <__malloc_unlock>
1000c310:	00800044 	movi	r2,1
1000c314:	003fe706 	br	1000c2b4 <__alt_data_end+0xf800c2b4>
1000c318:	9009883a 	mov	r4,r18
1000c31c:	000b883a 	mov	r5,zero
1000c320:	000f1280 	call	1000f128 <_sbrk_r>
1000c324:	99000217 	ldw	r4,8(r19)
1000c328:	014003c4 	movi	r5,15
1000c32c:	1107c83a 	sub	r3,r2,r4
1000c330:	28ffdd0e 	bge	r5,r3,1000c2a8 <__alt_data_end+0xf800c2a8>
1000c334:	01440074 	movhi	r5,4097
1000c338:	295c0804 	addi	r5,r5,28704
1000c33c:	29400017 	ldw	r5,0(r5)
1000c340:	18c00054 	ori	r3,r3,1
1000c344:	20c00115 	stw	r3,4(r4)
1000c348:	00c400b4 	movhi	r3,4098
1000c34c:	1145c83a 	sub	r2,r2,r5
1000c350:	18e2df04 	addi	r3,r3,-29828
1000c354:	18800015 	stw	r2,0(r3)
1000c358:	003fd306 	br	1000c2a8 <__alt_data_end+0xf800c2a8>

1000c35c <_free_r>:
1000c35c:	28004c26 	beq	r5,zero,1000c490 <_free_r+0x134>
1000c360:	defffd04 	addi	sp,sp,-12
1000c364:	dc400115 	stw	r17,4(sp)
1000c368:	dc000015 	stw	r16,0(sp)
1000c36c:	2023883a 	mov	r17,r4
1000c370:	2821883a 	mov	r16,r5
1000c374:	dfc00215 	stw	ra,8(sp)
1000c378:	00124e40 	call	100124e4 <__malloc_lock>
1000c37c:	813fff17 	ldw	r4,-4(r16)
1000c380:	00bfff84 	movi	r2,-2
1000c384:	02440074 	movhi	r9,4097
1000c388:	81bffe04 	addi	r6,r16,-8
1000c38c:	2084703a 	and	r2,r4,r2
1000c390:	4a568004 	addi	r9,r9,23040
1000c394:	308b883a 	add	r5,r6,r2
1000c398:	2a000117 	ldw	r8,4(r5)
1000c39c:	49c00217 	ldw	r7,8(r9)
1000c3a0:	00ffff04 	movi	r3,-4
1000c3a4:	40c6703a 	and	r3,r8,r3
1000c3a8:	39405326 	beq	r7,r5,1000c4f8 <_free_r+0x19c>
1000c3ac:	28c00115 	stw	r3,4(r5)
1000c3b0:	2100004c 	andi	r4,r4,1
1000c3b4:	2000091e 	bne	r4,zero,1000c3dc <_free_r+0x80>
1000c3b8:	81fffe17 	ldw	r7,-8(r16)
1000c3bc:	4a000204 	addi	r8,r9,8
1000c3c0:	31cdc83a 	sub	r6,r6,r7
1000c3c4:	31000217 	ldw	r4,8(r6)
1000c3c8:	11c5883a 	add	r2,r2,r7
1000c3cc:	22006126 	beq	r4,r8,1000c554 <_free_r+0x1f8>
1000c3d0:	31c00317 	ldw	r7,12(r6)
1000c3d4:	21c00315 	stw	r7,12(r4)
1000c3d8:	39000215 	stw	r4,8(r7)
1000c3dc:	28c9883a 	add	r4,r5,r3
1000c3e0:	21c00117 	ldw	r7,4(r4)
1000c3e4:	39c0004c 	andi	r7,r7,1
1000c3e8:	38000d1e 	bne	r7,zero,1000c420 <_free_r+0xc4>
1000c3ec:	29000217 	ldw	r4,8(r5)
1000c3f0:	10c5883a 	add	r2,r2,r3
1000c3f4:	00c40074 	movhi	r3,4097
1000c3f8:	18d68204 	addi	r3,r3,23048
1000c3fc:	20c07526 	beq	r4,r3,1000c5d4 <_free_r+0x278>
1000c400:	29c00317 	ldw	r7,12(r5)
1000c404:	11400054 	ori	r5,r2,1
1000c408:	3087883a 	add	r3,r6,r2
1000c40c:	21c00315 	stw	r7,12(r4)
1000c410:	39000215 	stw	r4,8(r7)
1000c414:	31400115 	stw	r5,4(r6)
1000c418:	18800015 	stw	r2,0(r3)
1000c41c:	00000406 	br	1000c430 <_free_r+0xd4>
1000c420:	10c00054 	ori	r3,r2,1
1000c424:	30c00115 	stw	r3,4(r6)
1000c428:	3087883a 	add	r3,r6,r2
1000c42c:	18800015 	stw	r2,0(r3)
1000c430:	00c07fc4 	movi	r3,511
1000c434:	18801736 	bltu	r3,r2,1000c494 <_free_r+0x138>
1000c438:	1004d0fa 	srli	r2,r2,3
1000c43c:	01400044 	movi	r5,1
1000c440:	49000117 	ldw	r4,4(r9)
1000c444:	1087883a 	add	r3,r2,r2
1000c448:	18c7883a 	add	r3,r3,r3
1000c44c:	1005d0ba 	srai	r2,r2,2
1000c450:	18c7883a 	add	r3,r3,r3
1000c454:	1a47883a 	add	r3,r3,r9
1000c458:	19c00217 	ldw	r7,8(r3)
1000c45c:	2884983a 	sll	r2,r5,r2
1000c460:	30c00315 	stw	r3,12(r6)
1000c464:	31c00215 	stw	r7,8(r6)
1000c468:	1104b03a 	or	r2,r2,r4
1000c46c:	19800215 	stw	r6,8(r3)
1000c470:	48800115 	stw	r2,4(r9)
1000c474:	39800315 	stw	r6,12(r7)
1000c478:	8809883a 	mov	r4,r17
1000c47c:	dfc00217 	ldw	ra,8(sp)
1000c480:	dc400117 	ldw	r17,4(sp)
1000c484:	dc000017 	ldw	r16,0(sp)
1000c488:	dec00304 	addi	sp,sp,12
1000c48c:	00125041 	jmpi	10012504 <__malloc_unlock>
1000c490:	f800283a 	ret
1000c494:	1006d27a 	srli	r3,r2,9
1000c498:	01000104 	movi	r4,4
1000c49c:	20c04036 	bltu	r4,r3,1000c5a0 <_free_r+0x244>
1000c4a0:	1006d1ba 	srli	r3,r2,6
1000c4a4:	19400e04 	addi	r5,r3,56
1000c4a8:	2947883a 	add	r3,r5,r5
1000c4ac:	18c7883a 	add	r3,r3,r3
1000c4b0:	18c7883a 	add	r3,r3,r3
1000c4b4:	1a49883a 	add	r4,r3,r9
1000c4b8:	20c00217 	ldw	r3,8(r4)
1000c4bc:	01c40074 	movhi	r7,4097
1000c4c0:	39d68004 	addi	r7,r7,23040
1000c4c4:	19003b26 	beq	r3,r4,1000c5b4 <_free_r+0x258>
1000c4c8:	01ffff04 	movi	r7,-4
1000c4cc:	19400117 	ldw	r5,4(r3)
1000c4d0:	29ca703a 	and	r5,r5,r7
1000c4d4:	1140022e 	bgeu	r2,r5,1000c4e0 <_free_r+0x184>
1000c4d8:	18c00217 	ldw	r3,8(r3)
1000c4dc:	20fffb1e 	bne	r4,r3,1000c4cc <__alt_data_end+0xf800c4cc>
1000c4e0:	18800317 	ldw	r2,12(r3)
1000c4e4:	30800315 	stw	r2,12(r6)
1000c4e8:	30c00215 	stw	r3,8(r6)
1000c4ec:	11800215 	stw	r6,8(r2)
1000c4f0:	19800315 	stw	r6,12(r3)
1000c4f4:	003fe006 	br	1000c478 <__alt_data_end+0xf800c478>
1000c4f8:	2100004c 	andi	r4,r4,1
1000c4fc:	1885883a 	add	r2,r3,r2
1000c500:	2000071e 	bne	r4,zero,1000c520 <_free_r+0x1c4>
1000c504:	817ffe17 	ldw	r5,-8(r16)
1000c508:	314dc83a 	sub	r6,r6,r5
1000c50c:	30c00317 	ldw	r3,12(r6)
1000c510:	31000217 	ldw	r4,8(r6)
1000c514:	1145883a 	add	r2,r2,r5
1000c518:	20c00315 	stw	r3,12(r4)
1000c51c:	19000215 	stw	r4,8(r3)
1000c520:	10c00054 	ori	r3,r2,1
1000c524:	30c00115 	stw	r3,4(r6)
1000c528:	00c40074 	movhi	r3,4097
1000c52c:	18dc0904 	addi	r3,r3,28708
1000c530:	18c00017 	ldw	r3,0(r3)
1000c534:	49800215 	stw	r6,8(r9)
1000c538:	10ffcf36 	bltu	r2,r3,1000c478 <__alt_data_end+0xf800c478>
1000c53c:	008400b4 	movhi	r2,4098
1000c540:	10a2d704 	addi	r2,r2,-29860
1000c544:	11400017 	ldw	r5,0(r2)
1000c548:	8809883a 	mov	r4,r17
1000c54c:	000c2380 	call	1000c238 <_malloc_trim_r>
1000c550:	003fc906 	br	1000c478 <__alt_data_end+0xf800c478>
1000c554:	28c9883a 	add	r4,r5,r3
1000c558:	21000117 	ldw	r4,4(r4)
1000c55c:	2100004c 	andi	r4,r4,1
1000c560:	20000a1e 	bne	r4,zero,1000c58c <_free_r+0x230>
1000c564:	29000317 	ldw	r4,12(r5)
1000c568:	29400217 	ldw	r5,8(r5)
1000c56c:	10c5883a 	add	r2,r2,r3
1000c570:	10c00054 	ori	r3,r2,1
1000c574:	29000315 	stw	r4,12(r5)
1000c578:	21400215 	stw	r5,8(r4)
1000c57c:	30c00115 	stw	r3,4(r6)
1000c580:	308d883a 	add	r6,r6,r2
1000c584:	30800015 	stw	r2,0(r6)
1000c588:	003fbb06 	br	1000c478 <__alt_data_end+0xf800c478>
1000c58c:	10c00054 	ori	r3,r2,1
1000c590:	30c00115 	stw	r3,4(r6)
1000c594:	308d883a 	add	r6,r6,r2
1000c598:	30800015 	stw	r2,0(r6)
1000c59c:	003fb606 	br	1000c478 <__alt_data_end+0xf800c478>
1000c5a0:	01000504 	movi	r4,20
1000c5a4:	20c01436 	bltu	r4,r3,1000c5f8 <_free_r+0x29c>
1000c5a8:	194016c4 	addi	r5,r3,91
1000c5ac:	2947883a 	add	r3,r5,r5
1000c5b0:	003fbe06 	br	1000c4ac <__alt_data_end+0xf800c4ac>
1000c5b4:	280bd0ba 	srai	r5,r5,2
1000c5b8:	00800044 	movi	r2,1
1000c5bc:	39000117 	ldw	r4,4(r7)
1000c5c0:	114a983a 	sll	r5,r2,r5
1000c5c4:	1805883a 	mov	r2,r3
1000c5c8:	2908b03a 	or	r4,r5,r4
1000c5cc:	39000115 	stw	r4,4(r7)
1000c5d0:	003fc406 	br	1000c4e4 <__alt_data_end+0xf800c4e4>
1000c5d4:	49800515 	stw	r6,20(r9)
1000c5d8:	49800415 	stw	r6,16(r9)
1000c5dc:	10c00054 	ori	r3,r2,1
1000c5e0:	31000315 	stw	r4,12(r6)
1000c5e4:	31000215 	stw	r4,8(r6)
1000c5e8:	30c00115 	stw	r3,4(r6)
1000c5ec:	308d883a 	add	r6,r6,r2
1000c5f0:	30800015 	stw	r2,0(r6)
1000c5f4:	003fa006 	br	1000c478 <__alt_data_end+0xf800c478>
1000c5f8:	01001504 	movi	r4,84
1000c5fc:	20c00436 	bltu	r4,r3,1000c610 <_free_r+0x2b4>
1000c600:	1006d33a 	srli	r3,r2,12
1000c604:	19401b84 	addi	r5,r3,110
1000c608:	2947883a 	add	r3,r5,r5
1000c60c:	003fa706 	br	1000c4ac <__alt_data_end+0xf800c4ac>
1000c610:	01005504 	movi	r4,340
1000c614:	20c00436 	bltu	r4,r3,1000c628 <_free_r+0x2cc>
1000c618:	1006d3fa 	srli	r3,r2,15
1000c61c:	19401dc4 	addi	r5,r3,119
1000c620:	2947883a 	add	r3,r5,r5
1000c624:	003fa106 	br	1000c4ac <__alt_data_end+0xf800c4ac>
1000c628:	01015504 	movi	r4,1364
1000c62c:	20c00436 	bltu	r4,r3,1000c640 <_free_r+0x2e4>
1000c630:	1006d4ba 	srli	r3,r2,18
1000c634:	19401f04 	addi	r5,r3,124
1000c638:	2947883a 	add	r3,r5,r5
1000c63c:	003f9b06 	br	1000c4ac <__alt_data_end+0xf800c4ac>
1000c640:	00c03f04 	movi	r3,252
1000c644:	01401f84 	movi	r5,126
1000c648:	003f9806 	br	1000c4ac <__alt_data_end+0xf800c4ac>

1000c64c <__sfvwrite_r>:
1000c64c:	30800217 	ldw	r2,8(r6)
1000c650:	10004526 	beq	r2,zero,1000c768 <__sfvwrite_r+0x11c>
1000c654:	28c0030b 	ldhu	r3,12(r5)
1000c658:	defff404 	addi	sp,sp,-48
1000c65c:	dd400715 	stw	r21,28(sp)
1000c660:	dcc00515 	stw	r19,20(sp)
1000c664:	dc000215 	stw	r16,8(sp)
1000c668:	dfc00b15 	stw	ra,44(sp)
1000c66c:	df000a15 	stw	fp,40(sp)
1000c670:	ddc00915 	stw	r23,36(sp)
1000c674:	dd800815 	stw	r22,32(sp)
1000c678:	dd000615 	stw	r20,24(sp)
1000c67c:	dc800415 	stw	r18,16(sp)
1000c680:	dc400315 	stw	r17,12(sp)
1000c684:	1880020c 	andi	r2,r3,8
1000c688:	2821883a 	mov	r16,r5
1000c68c:	202b883a 	mov	r21,r4
1000c690:	3027883a 	mov	r19,r6
1000c694:	10002526 	beq	r2,zero,1000c72c <__sfvwrite_r+0xe0>
1000c698:	28800417 	ldw	r2,16(r5)
1000c69c:	10002326 	beq	r2,zero,1000c72c <__sfvwrite_r+0xe0>
1000c6a0:	1880008c 	andi	r2,r3,2
1000c6a4:	9c400017 	ldw	r17,0(r19)
1000c6a8:	10003126 	beq	r2,zero,1000c770 <__sfvwrite_r+0x124>
1000c6ac:	0029883a 	mov	r20,zero
1000c6b0:	0025883a 	mov	r18,zero
1000c6b4:	05810004 	movi	r22,1024
1000c6b8:	a00d883a 	mov	r6,r20
1000c6bc:	a809883a 	mov	r4,r21
1000c6c0:	90002526 	beq	r18,zero,1000c758 <__sfvwrite_r+0x10c>
1000c6c4:	900f883a 	mov	r7,r18
1000c6c8:	81400717 	ldw	r5,28(r16)
1000c6cc:	b480012e 	bgeu	r22,r18,1000c6d4 <__sfvwrite_r+0x88>
1000c6d0:	01c10004 	movi	r7,1024
1000c6d4:	80800917 	ldw	r2,36(r16)
1000c6d8:	103ee83a 	callr	r2
1000c6dc:	0080510e 	bge	zero,r2,1000c824 <__sfvwrite_r+0x1d8>
1000c6e0:	98c00217 	ldw	r3,8(r19)
1000c6e4:	a0a9883a 	add	r20,r20,r2
1000c6e8:	90a5c83a 	sub	r18,r18,r2
1000c6ec:	1885c83a 	sub	r2,r3,r2
1000c6f0:	98800215 	stw	r2,8(r19)
1000c6f4:	103ff01e 	bne	r2,zero,1000c6b8 <__alt_data_end+0xf800c6b8>
1000c6f8:	0005883a 	mov	r2,zero
1000c6fc:	dfc00b17 	ldw	ra,44(sp)
1000c700:	df000a17 	ldw	fp,40(sp)
1000c704:	ddc00917 	ldw	r23,36(sp)
1000c708:	dd800817 	ldw	r22,32(sp)
1000c70c:	dd400717 	ldw	r21,28(sp)
1000c710:	dd000617 	ldw	r20,24(sp)
1000c714:	dcc00517 	ldw	r19,20(sp)
1000c718:	dc800417 	ldw	r18,16(sp)
1000c71c:	dc400317 	ldw	r17,12(sp)
1000c720:	dc000217 	ldw	r16,8(sp)
1000c724:	dec00c04 	addi	sp,sp,48
1000c728:	f800283a 	ret
1000c72c:	a809883a 	mov	r4,r21
1000c730:	800b883a 	mov	r5,r16
1000c734:	000a1ac0 	call	1000a1ac <__swsetup_r>
1000c738:	80c0030b 	ldhu	r3,12(r16)
1000c73c:	103fd826 	beq	r2,zero,1000c6a0 <__alt_data_end+0xf800c6a0>
1000c740:	18c01014 	ori	r3,r3,64
1000c744:	80c0030d 	sth	r3,12(r16)
1000c748:	00c00244 	movi	r3,9
1000c74c:	00bfffc4 	movi	r2,-1
1000c750:	a8c00015 	stw	r3,0(r21)
1000c754:	003fe906 	br	1000c6fc <__alt_data_end+0xf800c6fc>
1000c758:	8d000017 	ldw	r20,0(r17)
1000c75c:	8c800117 	ldw	r18,4(r17)
1000c760:	8c400204 	addi	r17,r17,8
1000c764:	003fd406 	br	1000c6b8 <__alt_data_end+0xf800c6b8>
1000c768:	0005883a 	mov	r2,zero
1000c76c:	f800283a 	ret
1000c770:	1880004c 	andi	r2,r3,1
1000c774:	1000301e 	bne	r2,zero,1000c838 <__sfvwrite_r+0x1ec>
1000c778:	002f883a 	mov	r23,zero
1000c77c:	0025883a 	mov	r18,zero
1000c780:	90001c26 	beq	r18,zero,1000c7f4 <__sfvwrite_r+0x1a8>
1000c784:	1880800c 	andi	r2,r3,512
1000c788:	85000217 	ldw	r20,8(r16)
1000c78c:	10006c26 	beq	r2,zero,1000c940 <__sfvwrite_r+0x2f4>
1000c790:	a02d883a 	mov	r22,r20
1000c794:	95008536 	bltu	r18,r20,1000c9ac <__sfvwrite_r+0x360>
1000c798:	1881200c 	andi	r2,r3,1152
1000c79c:	10009d1e 	bne	r2,zero,1000ca14 <__sfvwrite_r+0x3c8>
1000c7a0:	81000017 	ldw	r4,0(r16)
1000c7a4:	a039883a 	mov	fp,r20
1000c7a8:	9029883a 	mov	r20,r18
1000c7ac:	b80b883a 	mov	r5,r23
1000c7b0:	b00d883a 	mov	r6,r22
1000c7b4:	000d8c00 	call	1000d8c0 <memmove>
1000c7b8:	80c00217 	ldw	r3,8(r16)
1000c7bc:	81000017 	ldw	r4,0(r16)
1000c7c0:	9005883a 	mov	r2,r18
1000c7c4:	1f39c83a 	sub	fp,r3,fp
1000c7c8:	258f883a 	add	r7,r4,r22
1000c7cc:	87000215 	stw	fp,8(r16)
1000c7d0:	81c00015 	stw	r7,0(r16)
1000c7d4:	98c00217 	ldw	r3,8(r19)
1000c7d8:	b8af883a 	add	r23,r23,r2
1000c7dc:	90a5c83a 	sub	r18,r18,r2
1000c7e0:	1d05c83a 	sub	r2,r3,r20
1000c7e4:	98800215 	stw	r2,8(r19)
1000c7e8:	103fc326 	beq	r2,zero,1000c6f8 <__alt_data_end+0xf800c6f8>
1000c7ec:	80c0030b 	ldhu	r3,12(r16)
1000c7f0:	903fe41e 	bne	r18,zero,1000c784 <__alt_data_end+0xf800c784>
1000c7f4:	8dc00017 	ldw	r23,0(r17)
1000c7f8:	8c800117 	ldw	r18,4(r17)
1000c7fc:	8c400204 	addi	r17,r17,8
1000c800:	003fdf06 	br	1000c780 <__alt_data_end+0xf800c780>
1000c804:	000eb880 	call	1000eb88 <_realloc_r>
1000c808:	102d883a 	mov	r22,r2
1000c80c:	1000a01e 	bne	r2,zero,1000ca90 <__sfvwrite_r+0x444>
1000c810:	81400417 	ldw	r5,16(r16)
1000c814:	a809883a 	mov	r4,r21
1000c818:	000c35c0 	call	1000c35c <_free_r>
1000c81c:	00800304 	movi	r2,12
1000c820:	a8800015 	stw	r2,0(r21)
1000c824:	80c0030b 	ldhu	r3,12(r16)
1000c828:	00bfffc4 	movi	r2,-1
1000c82c:	18c01014 	ori	r3,r3,64
1000c830:	80c0030d 	sth	r3,12(r16)
1000c834:	003fb106 	br	1000c6fc <__alt_data_end+0xf800c6fc>
1000c838:	0029883a 	mov	r20,zero
1000c83c:	0011883a 	mov	r8,zero
1000c840:	0039883a 	mov	fp,zero
1000c844:	0025883a 	mov	r18,zero
1000c848:	90001f26 	beq	r18,zero,1000c8c8 <__sfvwrite_r+0x27c>
1000c84c:	40006826 	beq	r8,zero,1000c9f0 <__sfvwrite_r+0x3a4>
1000c850:	a02f883a 	mov	r23,r20
1000c854:	9500012e 	bgeu	r18,r20,1000c85c <__sfvwrite_r+0x210>
1000c858:	902f883a 	mov	r23,r18
1000c85c:	81000017 	ldw	r4,0(r16)
1000c860:	80800417 	ldw	r2,16(r16)
1000c864:	b82d883a 	mov	r22,r23
1000c868:	81800217 	ldw	r6,8(r16)
1000c86c:	81c00517 	ldw	r7,20(r16)
1000c870:	1100022e 	bgeu	r2,r4,1000c87c <__sfvwrite_r+0x230>
1000c874:	31c7883a 	add	r3,r6,r7
1000c878:	1dc01816 	blt	r3,r23,1000c8dc <__sfvwrite_r+0x290>
1000c87c:	b9c03f16 	blt	r23,r7,1000c97c <__sfvwrite_r+0x330>
1000c880:	80800917 	ldw	r2,36(r16)
1000c884:	81400717 	ldw	r5,28(r16)
1000c888:	a809883a 	mov	r4,r21
1000c88c:	da000115 	stw	r8,4(sp)
1000c890:	e00d883a 	mov	r6,fp
1000c894:	103ee83a 	callr	r2
1000c898:	102d883a 	mov	r22,r2
1000c89c:	da000117 	ldw	r8,4(sp)
1000c8a0:	00bfe00e 	bge	zero,r2,1000c824 <__alt_data_end+0xf800c824>
1000c8a4:	a5a9c83a 	sub	r20,r20,r22
1000c8a8:	a0001f26 	beq	r20,zero,1000c928 <__sfvwrite_r+0x2dc>
1000c8ac:	98800217 	ldw	r2,8(r19)
1000c8b0:	e5b9883a 	add	fp,fp,r22
1000c8b4:	95a5c83a 	sub	r18,r18,r22
1000c8b8:	15adc83a 	sub	r22,r2,r22
1000c8bc:	9d800215 	stw	r22,8(r19)
1000c8c0:	b03f8d26 	beq	r22,zero,1000c6f8 <__alt_data_end+0xf800c6f8>
1000c8c4:	903fe11e 	bne	r18,zero,1000c84c <__alt_data_end+0xf800c84c>
1000c8c8:	8f000017 	ldw	fp,0(r17)
1000c8cc:	8c800117 	ldw	r18,4(r17)
1000c8d0:	0011883a 	mov	r8,zero
1000c8d4:	8c400204 	addi	r17,r17,8
1000c8d8:	003fdb06 	br	1000c848 <__alt_data_end+0xf800c848>
1000c8dc:	180d883a 	mov	r6,r3
1000c8e0:	e00b883a 	mov	r5,fp
1000c8e4:	da000115 	stw	r8,4(sp)
1000c8e8:	d8c00015 	stw	r3,0(sp)
1000c8ec:	000d8c00 	call	1000d8c0 <memmove>
1000c8f0:	d8c00017 	ldw	r3,0(sp)
1000c8f4:	80800017 	ldw	r2,0(r16)
1000c8f8:	a809883a 	mov	r4,r21
1000c8fc:	800b883a 	mov	r5,r16
1000c900:	10c5883a 	add	r2,r2,r3
1000c904:	80800015 	stw	r2,0(r16)
1000c908:	d8c00015 	stw	r3,0(sp)
1000c90c:	000bc2c0 	call	1000bc2c <_fflush_r>
1000c910:	d8c00017 	ldw	r3,0(sp)
1000c914:	da000117 	ldw	r8,4(sp)
1000c918:	103fc21e 	bne	r2,zero,1000c824 <__alt_data_end+0xf800c824>
1000c91c:	182d883a 	mov	r22,r3
1000c920:	a5a9c83a 	sub	r20,r20,r22
1000c924:	a03fe11e 	bne	r20,zero,1000c8ac <__alt_data_end+0xf800c8ac>
1000c928:	a809883a 	mov	r4,r21
1000c92c:	800b883a 	mov	r5,r16
1000c930:	000bc2c0 	call	1000bc2c <_fflush_r>
1000c934:	103fbb1e 	bne	r2,zero,1000c824 <__alt_data_end+0xf800c824>
1000c938:	0011883a 	mov	r8,zero
1000c93c:	003fdb06 	br	1000c8ac <__alt_data_end+0xf800c8ac>
1000c940:	81000017 	ldw	r4,0(r16)
1000c944:	80800417 	ldw	r2,16(r16)
1000c948:	1100012e 	bgeu	r2,r4,1000c950 <__sfvwrite_r+0x304>
1000c94c:	a4805a36 	bltu	r20,r18,1000cab8 <__sfvwrite_r+0x46c>
1000c950:	81c00517 	ldw	r7,20(r16)
1000c954:	91c01a36 	bltu	r18,r7,1000c9c0 <__sfvwrite_r+0x374>
1000c958:	80800917 	ldw	r2,36(r16)
1000c95c:	81400717 	ldw	r5,28(r16)
1000c960:	a809883a 	mov	r4,r21
1000c964:	b80d883a 	mov	r6,r23
1000c968:	103ee83a 	callr	r2
1000c96c:	1029883a 	mov	r20,r2
1000c970:	00bfac0e 	bge	zero,r2,1000c824 <__alt_data_end+0xf800c824>
1000c974:	a005883a 	mov	r2,r20
1000c978:	003f9606 	br	1000c7d4 <__alt_data_end+0xf800c7d4>
1000c97c:	b80d883a 	mov	r6,r23
1000c980:	e00b883a 	mov	r5,fp
1000c984:	da000115 	stw	r8,4(sp)
1000c988:	000d8c00 	call	1000d8c0 <memmove>
1000c98c:	80800217 	ldw	r2,8(r16)
1000c990:	80c00017 	ldw	r3,0(r16)
1000c994:	da000117 	ldw	r8,4(sp)
1000c998:	15c5c83a 	sub	r2,r2,r23
1000c99c:	1def883a 	add	r23,r3,r23
1000c9a0:	80800215 	stw	r2,8(r16)
1000c9a4:	85c00015 	stw	r23,0(r16)
1000c9a8:	003fbe06 	br	1000c8a4 <__alt_data_end+0xf800c8a4>
1000c9ac:	81000017 	ldw	r4,0(r16)
1000c9b0:	9039883a 	mov	fp,r18
1000c9b4:	9029883a 	mov	r20,r18
1000c9b8:	902d883a 	mov	r22,r18
1000c9bc:	003f7b06 	br	1000c7ac <__alt_data_end+0xf800c7ac>
1000c9c0:	b80b883a 	mov	r5,r23
1000c9c4:	900d883a 	mov	r6,r18
1000c9c8:	000d8c00 	call	1000d8c0 <memmove>
1000c9cc:	80c00217 	ldw	r3,8(r16)
1000c9d0:	80800017 	ldw	r2,0(r16)
1000c9d4:	9029883a 	mov	r20,r18
1000c9d8:	1c87c83a 	sub	r3,r3,r18
1000c9dc:	1485883a 	add	r2,r2,r18
1000c9e0:	80800015 	stw	r2,0(r16)
1000c9e4:	80c00215 	stw	r3,8(r16)
1000c9e8:	9005883a 	mov	r2,r18
1000c9ec:	003f7906 	br	1000c7d4 <__alt_data_end+0xf800c7d4>
1000c9f0:	e009883a 	mov	r4,fp
1000c9f4:	01400284 	movi	r5,10
1000c9f8:	900d883a 	mov	r6,r18
1000c9fc:	000d6a00 	call	1000d6a0 <memchr>
1000ca00:	10003826 	beq	r2,zero,1000cae4 <__sfvwrite_r+0x498>
1000ca04:	10800044 	addi	r2,r2,1
1000ca08:	1729c83a 	sub	r20,r2,fp
1000ca0c:	02000044 	movi	r8,1
1000ca10:	003f8f06 	br	1000c850 <__alt_data_end+0xf800c850>
1000ca14:	80800517 	ldw	r2,20(r16)
1000ca18:	81400417 	ldw	r5,16(r16)
1000ca1c:	87000017 	ldw	fp,0(r16)
1000ca20:	10a9883a 	add	r20,r2,r2
1000ca24:	a085883a 	add	r2,r20,r2
1000ca28:	1028d7fa 	srli	r20,r2,31
1000ca2c:	e179c83a 	sub	fp,fp,r5
1000ca30:	e1000044 	addi	r4,fp,1
1000ca34:	a085883a 	add	r2,r20,r2
1000ca38:	1029d07a 	srai	r20,r2,1
1000ca3c:	2485883a 	add	r2,r4,r18
1000ca40:	a00d883a 	mov	r6,r20
1000ca44:	a080022e 	bgeu	r20,r2,1000ca50 <__sfvwrite_r+0x404>
1000ca48:	1029883a 	mov	r20,r2
1000ca4c:	100d883a 	mov	r6,r2
1000ca50:	18c1000c 	andi	r3,r3,1024
1000ca54:	a809883a 	mov	r4,r21
1000ca58:	183f6a26 	beq	r3,zero,1000c804 <__alt_data_end+0xf800c804>
1000ca5c:	300b883a 	mov	r5,r6
1000ca60:	000cef80 	call	1000cef8 <_malloc_r>
1000ca64:	102d883a 	mov	r22,r2
1000ca68:	103f6c26 	beq	r2,zero,1000c81c <__alt_data_end+0xf800c81c>
1000ca6c:	81400417 	ldw	r5,16(r16)
1000ca70:	1009883a 	mov	r4,r2
1000ca74:	e00d883a 	mov	r6,fp
1000ca78:	000d7880 	call	1000d788 <memcpy>
1000ca7c:	8080030b 	ldhu	r2,12(r16)
1000ca80:	00fedfc4 	movi	r3,-1153
1000ca84:	10c4703a 	and	r2,r2,r3
1000ca88:	10802014 	ori	r2,r2,128
1000ca8c:	8080030d 	sth	r2,12(r16)
1000ca90:	b709883a 	add	r4,r22,fp
1000ca94:	a707c83a 	sub	r3,r20,fp
1000ca98:	85800415 	stw	r22,16(r16)
1000ca9c:	85000515 	stw	r20,20(r16)
1000caa0:	81000015 	stw	r4,0(r16)
1000caa4:	9039883a 	mov	fp,r18
1000caa8:	80c00215 	stw	r3,8(r16)
1000caac:	9029883a 	mov	r20,r18
1000cab0:	902d883a 	mov	r22,r18
1000cab4:	003f3d06 	br	1000c7ac <__alt_data_end+0xf800c7ac>
1000cab8:	b80b883a 	mov	r5,r23
1000cabc:	a00d883a 	mov	r6,r20
1000cac0:	000d8c00 	call	1000d8c0 <memmove>
1000cac4:	80800017 	ldw	r2,0(r16)
1000cac8:	a809883a 	mov	r4,r21
1000cacc:	800b883a 	mov	r5,r16
1000cad0:	1505883a 	add	r2,r2,r20
1000cad4:	80800015 	stw	r2,0(r16)
1000cad8:	000bc2c0 	call	1000bc2c <_fflush_r>
1000cadc:	103fa526 	beq	r2,zero,1000c974 <__alt_data_end+0xf800c974>
1000cae0:	003f5006 	br	1000c824 <__alt_data_end+0xf800c824>
1000cae4:	95000044 	addi	r20,r18,1
1000cae8:	02000044 	movi	r8,1
1000caec:	003f5806 	br	1000c850 <__alt_data_end+0xf800c850>

1000caf0 <_fwalk>:
1000caf0:	defff804 	addi	sp,sp,-32
1000caf4:	dd400515 	stw	r21,20(sp)
1000caf8:	2540b804 	addi	r21,r4,736
1000cafc:	dd800615 	stw	r22,24(sp)
1000cb00:	dd000415 	stw	r20,16(sp)
1000cb04:	dfc00715 	stw	ra,28(sp)
1000cb08:	dcc00315 	stw	r19,12(sp)
1000cb0c:	dc800215 	stw	r18,8(sp)
1000cb10:	dc400115 	stw	r17,4(sp)
1000cb14:	dc000015 	stw	r16,0(sp)
1000cb18:	2829883a 	mov	r20,r5
1000cb1c:	002d883a 	mov	r22,zero
1000cb20:	000c1f80 	call	1000c1f8 <__sfp_lock_acquire>
1000cb24:	a8001426 	beq	r21,zero,1000cb78 <_fwalk+0x88>
1000cb28:	04ffffc4 	movi	r19,-1
1000cb2c:	ac400117 	ldw	r17,4(r21)
1000cb30:	ac800217 	ldw	r18,8(r21)
1000cb34:	8c7fffc4 	addi	r17,r17,-1
1000cb38:	88000d16 	blt	r17,zero,1000cb70 <_fwalk+0x80>
1000cb3c:	94000304 	addi	r16,r18,12
1000cb40:	94800384 	addi	r18,r18,14
1000cb44:	80c0000f 	ldh	r3,0(r16)
1000cb48:	8c7fffc4 	addi	r17,r17,-1
1000cb4c:	813ffd04 	addi	r4,r16,-12
1000cb50:	18000426 	beq	r3,zero,1000cb64 <_fwalk+0x74>
1000cb54:	90c0000f 	ldh	r3,0(r18)
1000cb58:	1cc00226 	beq	r3,r19,1000cb64 <_fwalk+0x74>
1000cb5c:	a03ee83a 	callr	r20
1000cb60:	b0acb03a 	or	r22,r22,r2
1000cb64:	84001a04 	addi	r16,r16,104
1000cb68:	94801a04 	addi	r18,r18,104
1000cb6c:	8cfff51e 	bne	r17,r19,1000cb44 <__alt_data_end+0xf800cb44>
1000cb70:	ad400017 	ldw	r21,0(r21)
1000cb74:	a83fed1e 	bne	r21,zero,1000cb2c <__alt_data_end+0xf800cb2c>
1000cb78:	000c1fc0 	call	1000c1fc <__sfp_lock_release>
1000cb7c:	b005883a 	mov	r2,r22
1000cb80:	dfc00717 	ldw	ra,28(sp)
1000cb84:	dd800617 	ldw	r22,24(sp)
1000cb88:	dd400517 	ldw	r21,20(sp)
1000cb8c:	dd000417 	ldw	r20,16(sp)
1000cb90:	dcc00317 	ldw	r19,12(sp)
1000cb94:	dc800217 	ldw	r18,8(sp)
1000cb98:	dc400117 	ldw	r17,4(sp)
1000cb9c:	dc000017 	ldw	r16,0(sp)
1000cba0:	dec00804 	addi	sp,sp,32
1000cba4:	f800283a 	ret

1000cba8 <_fwalk_reent>:
1000cba8:	defff804 	addi	sp,sp,-32
1000cbac:	dd400515 	stw	r21,20(sp)
1000cbb0:	2540b804 	addi	r21,r4,736
1000cbb4:	dd800615 	stw	r22,24(sp)
1000cbb8:	dd000415 	stw	r20,16(sp)
1000cbbc:	dcc00315 	stw	r19,12(sp)
1000cbc0:	dfc00715 	stw	ra,28(sp)
1000cbc4:	dc800215 	stw	r18,8(sp)
1000cbc8:	dc400115 	stw	r17,4(sp)
1000cbcc:	dc000015 	stw	r16,0(sp)
1000cbd0:	2027883a 	mov	r19,r4
1000cbd4:	2829883a 	mov	r20,r5
1000cbd8:	002d883a 	mov	r22,zero
1000cbdc:	000c1f80 	call	1000c1f8 <__sfp_lock_acquire>
1000cbe0:	a8001326 	beq	r21,zero,1000cc30 <_fwalk_reent+0x88>
1000cbe4:	04bfffc4 	movi	r18,-1
1000cbe8:	ac400117 	ldw	r17,4(r21)
1000cbec:	ac000217 	ldw	r16,8(r21)
1000cbf0:	8c7fffc4 	addi	r17,r17,-1
1000cbf4:	88000c16 	blt	r17,zero,1000cc28 <_fwalk_reent+0x80>
1000cbf8:	84000304 	addi	r16,r16,12
1000cbfc:	80c0000f 	ldh	r3,0(r16)
1000cc00:	8c7fffc4 	addi	r17,r17,-1
1000cc04:	817ffd04 	addi	r5,r16,-12
1000cc08:	18000526 	beq	r3,zero,1000cc20 <_fwalk_reent+0x78>
1000cc0c:	80c0008f 	ldh	r3,2(r16)
1000cc10:	9809883a 	mov	r4,r19
1000cc14:	1c800226 	beq	r3,r18,1000cc20 <_fwalk_reent+0x78>
1000cc18:	a03ee83a 	callr	r20
1000cc1c:	b0acb03a 	or	r22,r22,r2
1000cc20:	84001a04 	addi	r16,r16,104
1000cc24:	8cbff51e 	bne	r17,r18,1000cbfc <__alt_data_end+0xf800cbfc>
1000cc28:	ad400017 	ldw	r21,0(r21)
1000cc2c:	a83fee1e 	bne	r21,zero,1000cbe8 <__alt_data_end+0xf800cbe8>
1000cc30:	000c1fc0 	call	1000c1fc <__sfp_lock_release>
1000cc34:	b005883a 	mov	r2,r22
1000cc38:	dfc00717 	ldw	ra,28(sp)
1000cc3c:	dd800617 	ldw	r22,24(sp)
1000cc40:	dd400517 	ldw	r21,20(sp)
1000cc44:	dd000417 	ldw	r20,16(sp)
1000cc48:	dcc00317 	ldw	r19,12(sp)
1000cc4c:	dc800217 	ldw	r18,8(sp)
1000cc50:	dc400117 	ldw	r17,4(sp)
1000cc54:	dc000017 	ldw	r16,0(sp)
1000cc58:	dec00804 	addi	sp,sp,32
1000cc5c:	f800283a 	ret

1000cc60 <_setlocale_r>:
1000cc60:	30001b26 	beq	r6,zero,1000ccd0 <_setlocale_r+0x70>
1000cc64:	01440074 	movhi	r5,4097
1000cc68:	defffe04 	addi	sp,sp,-8
1000cc6c:	2954f804 	addi	r5,r5,21472
1000cc70:	3009883a 	mov	r4,r6
1000cc74:	dc000015 	stw	r16,0(sp)
1000cc78:	dfc00115 	stw	ra,4(sp)
1000cc7c:	3021883a 	mov	r16,r6
1000cc80:	000f2b80 	call	1000f2b8 <strcmp>
1000cc84:	1000061e 	bne	r2,zero,1000cca0 <_setlocale_r+0x40>
1000cc88:	00840074 	movhi	r2,4097
1000cc8c:	1094d904 	addi	r2,r2,21348
1000cc90:	dfc00117 	ldw	ra,4(sp)
1000cc94:	dc000017 	ldw	r16,0(sp)
1000cc98:	dec00204 	addi	sp,sp,8
1000cc9c:	f800283a 	ret
1000cca0:	01440074 	movhi	r5,4097
1000cca4:	2954d904 	addi	r5,r5,21348
1000cca8:	8009883a 	mov	r4,r16
1000ccac:	000f2b80 	call	1000f2b8 <strcmp>
1000ccb0:	103ff526 	beq	r2,zero,1000cc88 <__alt_data_end+0xf800cc88>
1000ccb4:	01440074 	movhi	r5,4097
1000ccb8:	2954e304 	addi	r5,r5,21388
1000ccbc:	8009883a 	mov	r4,r16
1000ccc0:	000f2b80 	call	1000f2b8 <strcmp>
1000ccc4:	103ff026 	beq	r2,zero,1000cc88 <__alt_data_end+0xf800cc88>
1000ccc8:	0005883a 	mov	r2,zero
1000cccc:	003ff006 	br	1000cc90 <__alt_data_end+0xf800cc90>
1000ccd0:	00840074 	movhi	r2,4097
1000ccd4:	1094d904 	addi	r2,r2,21348
1000ccd8:	f800283a 	ret

1000ccdc <__locale_charset>:
1000ccdc:	00840074 	movhi	r2,4097
1000cce0:	10966a04 	addi	r2,r2,22952
1000cce4:	f800283a 	ret

1000cce8 <__locale_mb_cur_max>:
1000cce8:	00840074 	movhi	r2,4097
1000ccec:	109c0704 	addi	r2,r2,28700
1000ccf0:	10800017 	ldw	r2,0(r2)
1000ccf4:	f800283a 	ret

1000ccf8 <__locale_msgcharset>:
1000ccf8:	00840074 	movhi	r2,4097
1000ccfc:	10966204 	addi	r2,r2,22920
1000cd00:	f800283a 	ret

1000cd04 <__locale_cjk_lang>:
1000cd04:	0005883a 	mov	r2,zero
1000cd08:	f800283a 	ret

1000cd0c <_localeconv_r>:
1000cd0c:	00840074 	movhi	r2,4097
1000cd10:	10967204 	addi	r2,r2,22984
1000cd14:	f800283a 	ret

1000cd18 <setlocale>:
1000cd18:	00c40074 	movhi	r3,4097
1000cd1c:	18dc0604 	addi	r3,r3,28696
1000cd20:	2005883a 	mov	r2,r4
1000cd24:	19000017 	ldw	r4,0(r3)
1000cd28:	280d883a 	mov	r6,r5
1000cd2c:	100b883a 	mov	r5,r2
1000cd30:	000cc601 	jmpi	1000cc60 <_setlocale_r>

1000cd34 <localeconv>:
1000cd34:	00840074 	movhi	r2,4097
1000cd38:	10967204 	addi	r2,r2,22984
1000cd3c:	f800283a 	ret

1000cd40 <__smakebuf_r>:
1000cd40:	2880030b 	ldhu	r2,12(r5)
1000cd44:	10c0008c 	andi	r3,r2,2
1000cd48:	1800401e 	bne	r3,zero,1000ce4c <__smakebuf_r+0x10c>
1000cd4c:	deffec04 	addi	sp,sp,-80
1000cd50:	dc000f15 	stw	r16,60(sp)
1000cd54:	2821883a 	mov	r16,r5
1000cd58:	2940038f 	ldh	r5,14(r5)
1000cd5c:	dc401015 	stw	r17,64(sp)
1000cd60:	dfc01315 	stw	ra,76(sp)
1000cd64:	dcc01215 	stw	r19,72(sp)
1000cd68:	dc801115 	stw	r18,68(sp)
1000cd6c:	2023883a 	mov	r17,r4
1000cd70:	28001b16 	blt	r5,zero,1000cde0 <__smakebuf_r+0xa0>
1000cd74:	d80d883a 	mov	r6,sp
1000cd78:	0010d300 	call	10010d30 <_fstat_r>
1000cd7c:	10001716 	blt	r2,zero,1000cddc <__smakebuf_r+0x9c>
1000cd80:	d8800117 	ldw	r2,4(sp)
1000cd84:	00e00014 	movui	r3,32768
1000cd88:	10bc000c 	andi	r2,r2,61440
1000cd8c:	10c03726 	beq	r2,r3,1000ce6c <__smakebuf_r+0x12c>
1000cd90:	80c0030b 	ldhu	r3,12(r16)
1000cd94:	18c20014 	ori	r3,r3,2048
1000cd98:	80c0030d 	sth	r3,12(r16)
1000cd9c:	00c80004 	movi	r3,8192
1000cda0:	10c03c1e 	bne	r2,r3,1000ce94 <__smakebuf_r+0x154>
1000cda4:	8140038f 	ldh	r5,14(r16)
1000cda8:	8809883a 	mov	r4,r17
1000cdac:	0010d880 	call	10010d88 <_isatty_r>
1000cdb0:	10004e26 	beq	r2,zero,1000ceec <__smakebuf_r+0x1ac>
1000cdb4:	8080030b 	ldhu	r2,12(r16)
1000cdb8:	04c00044 	movi	r19,1
1000cdbc:	80c010c4 	addi	r3,r16,67
1000cdc0:	14c4b03a 	or	r2,r2,r19
1000cdc4:	8080030d 	sth	r2,12(r16)
1000cdc8:	80c00015 	stw	r3,0(r16)
1000cdcc:	80c00415 	stw	r3,16(r16)
1000cdd0:	84c00515 	stw	r19,20(r16)
1000cdd4:	04810004 	movi	r18,1024
1000cdd8:	00000706 	br	1000cdf8 <__smakebuf_r+0xb8>
1000cddc:	8080030b 	ldhu	r2,12(r16)
1000cde0:	10c0200c 	andi	r3,r2,128
1000cde4:	18001f1e 	bne	r3,zero,1000ce64 <__smakebuf_r+0x124>
1000cde8:	04810004 	movi	r18,1024
1000cdec:	10820014 	ori	r2,r2,2048
1000cdf0:	8080030d 	sth	r2,12(r16)
1000cdf4:	0027883a 	mov	r19,zero
1000cdf8:	8809883a 	mov	r4,r17
1000cdfc:	900b883a 	mov	r5,r18
1000ce00:	000cef80 	call	1000cef8 <_malloc_r>
1000ce04:	10002e26 	beq	r2,zero,1000cec0 <__smakebuf_r+0x180>
1000ce08:	80c0030b 	ldhu	r3,12(r16)
1000ce0c:	01040074 	movhi	r4,4097
1000ce10:	212fa504 	addi	r4,r4,-16748
1000ce14:	89000f15 	stw	r4,60(r17)
1000ce18:	18c02014 	ori	r3,r3,128
1000ce1c:	80c0030d 	sth	r3,12(r16)
1000ce20:	80800015 	stw	r2,0(r16)
1000ce24:	80800415 	stw	r2,16(r16)
1000ce28:	84800515 	stw	r18,20(r16)
1000ce2c:	98001c1e 	bne	r19,zero,1000cea0 <__smakebuf_r+0x160>
1000ce30:	dfc01317 	ldw	ra,76(sp)
1000ce34:	dcc01217 	ldw	r19,72(sp)
1000ce38:	dc801117 	ldw	r18,68(sp)
1000ce3c:	dc401017 	ldw	r17,64(sp)
1000ce40:	dc000f17 	ldw	r16,60(sp)
1000ce44:	dec01404 	addi	sp,sp,80
1000ce48:	f800283a 	ret
1000ce4c:	288010c4 	addi	r2,r5,67
1000ce50:	28800015 	stw	r2,0(r5)
1000ce54:	28800415 	stw	r2,16(r5)
1000ce58:	00800044 	movi	r2,1
1000ce5c:	28800515 	stw	r2,20(r5)
1000ce60:	f800283a 	ret
1000ce64:	04801004 	movi	r18,64
1000ce68:	003fe006 	br	1000cdec <__alt_data_end+0xf800cdec>
1000ce6c:	81000a17 	ldw	r4,40(r16)
1000ce70:	00c40074 	movhi	r3,4097
1000ce74:	18fc9504 	addi	r3,r3,-3500
1000ce78:	20ffc51e 	bne	r4,r3,1000cd90 <__alt_data_end+0xf800cd90>
1000ce7c:	80c0030b 	ldhu	r3,12(r16)
1000ce80:	01010004 	movi	r4,1024
1000ce84:	81001315 	stw	r4,76(r16)
1000ce88:	1906b03a 	or	r3,r3,r4
1000ce8c:	80c0030d 	sth	r3,12(r16)
1000ce90:	003fc206 	br	1000cd9c <__alt_data_end+0xf800cd9c>
1000ce94:	0027883a 	mov	r19,zero
1000ce98:	04810004 	movi	r18,1024
1000ce9c:	003fd606 	br	1000cdf8 <__alt_data_end+0xf800cdf8>
1000cea0:	8140038f 	ldh	r5,14(r16)
1000cea4:	8809883a 	mov	r4,r17
1000cea8:	0010d880 	call	10010d88 <_isatty_r>
1000ceac:	103fe026 	beq	r2,zero,1000ce30 <__alt_data_end+0xf800ce30>
1000ceb0:	8080030b 	ldhu	r2,12(r16)
1000ceb4:	10800054 	ori	r2,r2,1
1000ceb8:	8080030d 	sth	r2,12(r16)
1000cebc:	003fdc06 	br	1000ce30 <__alt_data_end+0xf800ce30>
1000cec0:	8080030b 	ldhu	r2,12(r16)
1000cec4:	10c0800c 	andi	r3,r2,512
1000cec8:	183fd91e 	bne	r3,zero,1000ce30 <__alt_data_end+0xf800ce30>
1000cecc:	10800094 	ori	r2,r2,2
1000ced0:	80c010c4 	addi	r3,r16,67
1000ced4:	8080030d 	sth	r2,12(r16)
1000ced8:	00800044 	movi	r2,1
1000cedc:	80c00015 	stw	r3,0(r16)
1000cee0:	80c00415 	stw	r3,16(r16)
1000cee4:	80800515 	stw	r2,20(r16)
1000cee8:	003fd106 	br	1000ce30 <__alt_data_end+0xf800ce30>
1000ceec:	04c00044 	movi	r19,1
1000cef0:	04810004 	movi	r18,1024
1000cef4:	003fc006 	br	1000cdf8 <__alt_data_end+0xf800cdf8>

1000cef8 <_malloc_r>:
1000cef8:	defff504 	addi	sp,sp,-44
1000cefc:	dc800315 	stw	r18,12(sp)
1000cf00:	dfc00a15 	stw	ra,40(sp)
1000cf04:	df000915 	stw	fp,36(sp)
1000cf08:	ddc00815 	stw	r23,32(sp)
1000cf0c:	dd800715 	stw	r22,28(sp)
1000cf10:	dd400615 	stw	r21,24(sp)
1000cf14:	dd000515 	stw	r20,20(sp)
1000cf18:	dcc00415 	stw	r19,16(sp)
1000cf1c:	dc400215 	stw	r17,8(sp)
1000cf20:	dc000115 	stw	r16,4(sp)
1000cf24:	288002c4 	addi	r2,r5,11
1000cf28:	00c00584 	movi	r3,22
1000cf2c:	2025883a 	mov	r18,r4
1000cf30:	18802a2e 	bgeu	r3,r2,1000cfdc <_malloc_r+0xe4>
1000cf34:	047ffe04 	movi	r17,-8
1000cf38:	1462703a 	and	r17,r2,r17
1000cf3c:	88009e16 	blt	r17,zero,1000d1b8 <_malloc_r+0x2c0>
1000cf40:	89409d36 	bltu	r17,r5,1000d1b8 <_malloc_r+0x2c0>
1000cf44:	00124e40 	call	100124e4 <__malloc_lock>
1000cf48:	00807dc4 	movi	r2,503
1000cf4c:	14402736 	bltu	r2,r17,1000cfec <_malloc_r+0xf4>
1000cf50:	8806d0fa 	srli	r3,r17,3
1000cf54:	04c40074 	movhi	r19,4097
1000cf58:	9cd68004 	addi	r19,r19,23040
1000cf5c:	18c5883a 	add	r2,r3,r3
1000cf60:	1085883a 	add	r2,r2,r2
1000cf64:	1085883a 	add	r2,r2,r2
1000cf68:	9885883a 	add	r2,r19,r2
1000cf6c:	14000317 	ldw	r16,12(r2)
1000cf70:	80814a26 	beq	r16,r2,1000d49c <_malloc_r+0x5a4>
1000cf74:	80c00117 	ldw	r3,4(r16)
1000cf78:	81000317 	ldw	r4,12(r16)
1000cf7c:	00bfff04 	movi	r2,-4
1000cf80:	1884703a 	and	r2,r3,r2
1000cf84:	81400217 	ldw	r5,8(r16)
1000cf88:	8085883a 	add	r2,r16,r2
1000cf8c:	10c00117 	ldw	r3,4(r2)
1000cf90:	29000315 	stw	r4,12(r5)
1000cf94:	21400215 	stw	r5,8(r4)
1000cf98:	18c00054 	ori	r3,r3,1
1000cf9c:	10c00115 	stw	r3,4(r2)
1000cfa0:	9009883a 	mov	r4,r18
1000cfa4:	00125040 	call	10012504 <__malloc_unlock>
1000cfa8:	80800204 	addi	r2,r16,8
1000cfac:	dfc00a17 	ldw	ra,40(sp)
1000cfb0:	df000917 	ldw	fp,36(sp)
1000cfb4:	ddc00817 	ldw	r23,32(sp)
1000cfb8:	dd800717 	ldw	r22,28(sp)
1000cfbc:	dd400617 	ldw	r21,24(sp)
1000cfc0:	dd000517 	ldw	r20,20(sp)
1000cfc4:	dcc00417 	ldw	r19,16(sp)
1000cfc8:	dc800317 	ldw	r18,12(sp)
1000cfcc:	dc400217 	ldw	r17,8(sp)
1000cfd0:	dc000117 	ldw	r16,4(sp)
1000cfd4:	dec00b04 	addi	sp,sp,44
1000cfd8:	f800283a 	ret
1000cfdc:	04400404 	movi	r17,16
1000cfe0:	89407536 	bltu	r17,r5,1000d1b8 <_malloc_r+0x2c0>
1000cfe4:	00124e40 	call	100124e4 <__malloc_lock>
1000cfe8:	003fd906 	br	1000cf50 <__alt_data_end+0xf800cf50>
1000cfec:	8806d27a 	srli	r3,r17,9
1000cff0:	18007526 	beq	r3,zero,1000d1c8 <_malloc_r+0x2d0>
1000cff4:	00800104 	movi	r2,4
1000cff8:	10c0ef36 	bltu	r2,r3,1000d3b8 <_malloc_r+0x4c0>
1000cffc:	8806d1ba 	srli	r3,r17,6
1000d000:	19c00e04 	addi	r7,r3,56
1000d004:	39cb883a 	add	r5,r7,r7
1000d008:	04c40074 	movhi	r19,4097
1000d00c:	294b883a 	add	r5,r5,r5
1000d010:	9cd68004 	addi	r19,r19,23040
1000d014:	294b883a 	add	r5,r5,r5
1000d018:	994b883a 	add	r5,r19,r5
1000d01c:	2c000317 	ldw	r16,12(r5)
1000d020:	2c000e26 	beq	r5,r16,1000d05c <_malloc_r+0x164>
1000d024:	80800117 	ldw	r2,4(r16)
1000d028:	01bfff04 	movi	r6,-4
1000d02c:	010003c4 	movi	r4,15
1000d030:	1184703a 	and	r2,r2,r6
1000d034:	1447c83a 	sub	r3,r2,r17
1000d038:	20c00716 	blt	r4,r3,1000d058 <_malloc_r+0x160>
1000d03c:	1800650e 	bge	r3,zero,1000d1d4 <_malloc_r+0x2dc>
1000d040:	84000317 	ldw	r16,12(r16)
1000d044:	2c000526 	beq	r5,r16,1000d05c <_malloc_r+0x164>
1000d048:	80800117 	ldw	r2,4(r16)
1000d04c:	1184703a 	and	r2,r2,r6
1000d050:	1447c83a 	sub	r3,r2,r17
1000d054:	20fff90e 	bge	r4,r3,1000d03c <__alt_data_end+0xf800d03c>
1000d058:	39ffffc4 	addi	r7,r7,-1
1000d05c:	38c00044 	addi	r3,r7,1
1000d060:	01840074 	movhi	r6,4097
1000d064:	9c000417 	ldw	r16,16(r19)
1000d068:	31968004 	addi	r6,r6,23040
1000d06c:	32400204 	addi	r9,r6,8
1000d070:	82410326 	beq	r16,r9,1000d480 <_malloc_r+0x588>
1000d074:	81000117 	ldw	r4,4(r16)
1000d078:	00bfff04 	movi	r2,-4
1000d07c:	208e703a 	and	r7,r4,r2
1000d080:	3c45c83a 	sub	r2,r7,r17
1000d084:	010003c4 	movi	r4,15
1000d088:	2080ee16 	blt	r4,r2,1000d444 <_malloc_r+0x54c>
1000d08c:	32400515 	stw	r9,20(r6)
1000d090:	32400415 	stw	r9,16(r6)
1000d094:	1000510e 	bge	r2,zero,1000d1dc <_malloc_r+0x2e4>
1000d098:	00807fc4 	movi	r2,511
1000d09c:	11c0ce36 	bltu	r2,r7,1000d3d8 <_malloc_r+0x4e0>
1000d0a0:	3808d0fa 	srli	r4,r7,3
1000d0a4:	01c00044 	movi	r7,1
1000d0a8:	30800117 	ldw	r2,4(r6)
1000d0ac:	210b883a 	add	r5,r4,r4
1000d0b0:	294b883a 	add	r5,r5,r5
1000d0b4:	2009d0ba 	srai	r4,r4,2
1000d0b8:	294b883a 	add	r5,r5,r5
1000d0bc:	298b883a 	add	r5,r5,r6
1000d0c0:	2a000217 	ldw	r8,8(r5)
1000d0c4:	3908983a 	sll	r4,r7,r4
1000d0c8:	81400315 	stw	r5,12(r16)
1000d0cc:	82000215 	stw	r8,8(r16)
1000d0d0:	2088b03a 	or	r4,r4,r2
1000d0d4:	2c000215 	stw	r16,8(r5)
1000d0d8:	31000115 	stw	r4,4(r6)
1000d0dc:	44000315 	stw	r16,12(r8)
1000d0e0:	1805d0ba 	srai	r2,r3,2
1000d0e4:	01400044 	movi	r5,1
1000d0e8:	288a983a 	sll	r5,r5,r2
1000d0ec:	21404336 	bltu	r4,r5,1000d1fc <_malloc_r+0x304>
1000d0f0:	2144703a 	and	r2,r4,r5
1000d0f4:	10000a1e 	bne	r2,zero,1000d120 <_malloc_r+0x228>
1000d0f8:	00bfff04 	movi	r2,-4
1000d0fc:	294b883a 	add	r5,r5,r5
1000d100:	1886703a 	and	r3,r3,r2
1000d104:	2144703a 	and	r2,r4,r5
1000d108:	18c00104 	addi	r3,r3,4
1000d10c:	1000041e 	bne	r2,zero,1000d120 <_malloc_r+0x228>
1000d110:	294b883a 	add	r5,r5,r5
1000d114:	2144703a 	and	r2,r4,r5
1000d118:	18c00104 	addi	r3,r3,4
1000d11c:	103ffc26 	beq	r2,zero,1000d110 <__alt_data_end+0xf800d110>
1000d120:	023fff04 	movi	r8,-4
1000d124:	01c003c4 	movi	r7,15
1000d128:	18c5883a 	add	r2,r3,r3
1000d12c:	1085883a 	add	r2,r2,r2
1000d130:	1085883a 	add	r2,r2,r2
1000d134:	9895883a 	add	r10,r19,r2
1000d138:	52c00304 	addi	r11,r10,12
1000d13c:	1819883a 	mov	r12,r3
1000d140:	5c000017 	ldw	r16,0(r11)
1000d144:	59bffd04 	addi	r6,r11,-12
1000d148:	8180041e 	bne	r16,r6,1000d15c <_malloc_r+0x264>
1000d14c:	0000ce06 	br	1000d488 <_malloc_r+0x590>
1000d150:	2000d70e 	bge	r4,zero,1000d4b0 <_malloc_r+0x5b8>
1000d154:	84000317 	ldw	r16,12(r16)
1000d158:	8180cb26 	beq	r16,r6,1000d488 <_malloc_r+0x590>
1000d15c:	80800117 	ldw	r2,4(r16)
1000d160:	1204703a 	and	r2,r2,r8
1000d164:	1449c83a 	sub	r4,r2,r17
1000d168:	393ff90e 	bge	r7,r4,1000d150 <__alt_data_end+0xf800d150>
1000d16c:	80800317 	ldw	r2,12(r16)
1000d170:	80c00217 	ldw	r3,8(r16)
1000d174:	89400054 	ori	r5,r17,1
1000d178:	81400115 	stw	r5,4(r16)
1000d17c:	18800315 	stw	r2,12(r3)
1000d180:	10c00215 	stw	r3,8(r2)
1000d184:	8463883a 	add	r17,r16,r17
1000d188:	9c400515 	stw	r17,20(r19)
1000d18c:	9c400415 	stw	r17,16(r19)
1000d190:	20800054 	ori	r2,r4,1
1000d194:	88800115 	stw	r2,4(r17)
1000d198:	8a400315 	stw	r9,12(r17)
1000d19c:	8a400215 	stw	r9,8(r17)
1000d1a0:	8923883a 	add	r17,r17,r4
1000d1a4:	89000015 	stw	r4,0(r17)
1000d1a8:	9009883a 	mov	r4,r18
1000d1ac:	00125040 	call	10012504 <__malloc_unlock>
1000d1b0:	80800204 	addi	r2,r16,8
1000d1b4:	003f7d06 	br	1000cfac <__alt_data_end+0xf800cfac>
1000d1b8:	00800304 	movi	r2,12
1000d1bc:	90800015 	stw	r2,0(r18)
1000d1c0:	0005883a 	mov	r2,zero
1000d1c4:	003f7906 	br	1000cfac <__alt_data_end+0xf800cfac>
1000d1c8:	01401f84 	movi	r5,126
1000d1cc:	01c00fc4 	movi	r7,63
1000d1d0:	003f8d06 	br	1000d008 <__alt_data_end+0xf800d008>
1000d1d4:	81000317 	ldw	r4,12(r16)
1000d1d8:	003f6a06 	br	1000cf84 <__alt_data_end+0xf800cf84>
1000d1dc:	81c5883a 	add	r2,r16,r7
1000d1e0:	10c00117 	ldw	r3,4(r2)
1000d1e4:	9009883a 	mov	r4,r18
1000d1e8:	18c00054 	ori	r3,r3,1
1000d1ec:	10c00115 	stw	r3,4(r2)
1000d1f0:	00125040 	call	10012504 <__malloc_unlock>
1000d1f4:	80800204 	addi	r2,r16,8
1000d1f8:	003f6c06 	br	1000cfac <__alt_data_end+0xf800cfac>
1000d1fc:	9c000217 	ldw	r16,8(r19)
1000d200:	00bfff04 	movi	r2,-4
1000d204:	85800117 	ldw	r22,4(r16)
1000d208:	b0ac703a 	and	r22,r22,r2
1000d20c:	b4400336 	bltu	r22,r17,1000d21c <_malloc_r+0x324>
1000d210:	b445c83a 	sub	r2,r22,r17
1000d214:	00c003c4 	movi	r3,15
1000d218:	18805d16 	blt	r3,r2,1000d390 <_malloc_r+0x498>
1000d21c:	05c40074 	movhi	r23,4097
1000d220:	008400b4 	movhi	r2,4098
1000d224:	bddc0804 	addi	r23,r23,28704
1000d228:	10a2d704 	addi	r2,r2,-29860
1000d22c:	15400017 	ldw	r21,0(r2)
1000d230:	b9000017 	ldw	r4,0(r23)
1000d234:	00ffffc4 	movi	r3,-1
1000d238:	858d883a 	add	r6,r16,r22
1000d23c:	8d6b883a 	add	r21,r17,r21
1000d240:	20c0e426 	beq	r4,r3,1000d5d4 <_malloc_r+0x6dc>
1000d244:	ad4403c4 	addi	r21,r21,4111
1000d248:	00fc0004 	movi	r3,-4096
1000d24c:	a8ea703a 	and	r21,r21,r3
1000d250:	9009883a 	mov	r4,r18
1000d254:	a80b883a 	mov	r5,r21
1000d258:	d9800015 	stw	r6,0(sp)
1000d25c:	000f1280 	call	1000f128 <_sbrk_r>
1000d260:	00ffffc4 	movi	r3,-1
1000d264:	1029883a 	mov	r20,r2
1000d268:	d9800017 	ldw	r6,0(sp)
1000d26c:	10c0a426 	beq	r2,r3,1000d500 <_malloc_r+0x608>
1000d270:	1180a236 	bltu	r2,r6,1000d4fc <_malloc_r+0x604>
1000d274:	070400b4 	movhi	fp,4098
1000d278:	e722df04 	addi	fp,fp,-29828
1000d27c:	e0c00017 	ldw	r3,0(fp)
1000d280:	a8c7883a 	add	r3,r21,r3
1000d284:	e0c00015 	stw	r3,0(fp)
1000d288:	3500da26 	beq	r6,r20,1000d5f4 <_malloc_r+0x6fc>
1000d28c:	b9000017 	ldw	r4,0(r23)
1000d290:	00bfffc4 	movi	r2,-1
1000d294:	2080e426 	beq	r4,r2,1000d628 <_malloc_r+0x730>
1000d298:	a185c83a 	sub	r2,r20,r6
1000d29c:	1885883a 	add	r2,r3,r2
1000d2a0:	e0800015 	stw	r2,0(fp)
1000d2a4:	a0c001cc 	andi	r3,r20,7
1000d2a8:	1800b526 	beq	r3,zero,1000d580 <_malloc_r+0x688>
1000d2ac:	a0e9c83a 	sub	r20,r20,r3
1000d2b0:	00840204 	movi	r2,4104
1000d2b4:	a5000204 	addi	r20,r20,8
1000d2b8:	10c7c83a 	sub	r3,r2,r3
1000d2bc:	a545883a 	add	r2,r20,r21
1000d2c0:	1083ffcc 	andi	r2,r2,4095
1000d2c4:	18abc83a 	sub	r21,r3,r2
1000d2c8:	9009883a 	mov	r4,r18
1000d2cc:	a80b883a 	mov	r5,r21
1000d2d0:	000f1280 	call	1000f128 <_sbrk_r>
1000d2d4:	00ffffc4 	movi	r3,-1
1000d2d8:	10c0d026 	beq	r2,r3,1000d61c <_malloc_r+0x724>
1000d2dc:	1507c83a 	sub	r3,r2,r20
1000d2e0:	a8c7883a 	add	r3,r21,r3
1000d2e4:	18c00054 	ori	r3,r3,1
1000d2e8:	e0800017 	ldw	r2,0(fp)
1000d2ec:	9d000215 	stw	r20,8(r19)
1000d2f0:	a0c00115 	stw	r3,4(r20)
1000d2f4:	a887883a 	add	r3,r21,r2
1000d2f8:	e0c00015 	stw	r3,0(fp)
1000d2fc:	84c00e26 	beq	r16,r19,1000d338 <_malloc_r+0x440>
1000d300:	018003c4 	movi	r6,15
1000d304:	3580a02e 	bgeu	r6,r22,1000d588 <_malloc_r+0x690>
1000d308:	81400117 	ldw	r5,4(r16)
1000d30c:	013ffe04 	movi	r4,-8
1000d310:	b0bffd04 	addi	r2,r22,-12
1000d314:	1104703a 	and	r2,r2,r4
1000d318:	2900004c 	andi	r4,r5,1
1000d31c:	1108b03a 	or	r4,r2,r4
1000d320:	81000115 	stw	r4,4(r16)
1000d324:	01400144 	movi	r5,5
1000d328:	8089883a 	add	r4,r16,r2
1000d32c:	21400115 	stw	r5,4(r4)
1000d330:	21400215 	stw	r5,8(r4)
1000d334:	3080c036 	bltu	r6,r2,1000d638 <_malloc_r+0x740>
1000d338:	008400b4 	movhi	r2,4098
1000d33c:	10a2d604 	addi	r2,r2,-29864
1000d340:	11000017 	ldw	r4,0(r2)
1000d344:	20c0012e 	bgeu	r4,r3,1000d34c <_malloc_r+0x454>
1000d348:	10c00015 	stw	r3,0(r2)
1000d34c:	008400b4 	movhi	r2,4098
1000d350:	10a2d504 	addi	r2,r2,-29868
1000d354:	11000017 	ldw	r4,0(r2)
1000d358:	9c000217 	ldw	r16,8(r19)
1000d35c:	20c0012e 	bgeu	r4,r3,1000d364 <_malloc_r+0x46c>
1000d360:	10c00015 	stw	r3,0(r2)
1000d364:	80c00117 	ldw	r3,4(r16)
1000d368:	00bfff04 	movi	r2,-4
1000d36c:	1886703a 	and	r3,r3,r2
1000d370:	1c45c83a 	sub	r2,r3,r17
1000d374:	1c400236 	bltu	r3,r17,1000d380 <_malloc_r+0x488>
1000d378:	00c003c4 	movi	r3,15
1000d37c:	18800416 	blt	r3,r2,1000d390 <_malloc_r+0x498>
1000d380:	9009883a 	mov	r4,r18
1000d384:	00125040 	call	10012504 <__malloc_unlock>
1000d388:	0005883a 	mov	r2,zero
1000d38c:	003f0706 	br	1000cfac <__alt_data_end+0xf800cfac>
1000d390:	88c00054 	ori	r3,r17,1
1000d394:	80c00115 	stw	r3,4(r16)
1000d398:	8463883a 	add	r17,r16,r17
1000d39c:	10800054 	ori	r2,r2,1
1000d3a0:	9c400215 	stw	r17,8(r19)
1000d3a4:	88800115 	stw	r2,4(r17)
1000d3a8:	9009883a 	mov	r4,r18
1000d3ac:	00125040 	call	10012504 <__malloc_unlock>
1000d3b0:	80800204 	addi	r2,r16,8
1000d3b4:	003efd06 	br	1000cfac <__alt_data_end+0xf800cfac>
1000d3b8:	00800504 	movi	r2,20
1000d3bc:	10c0482e 	bgeu	r2,r3,1000d4e0 <_malloc_r+0x5e8>
1000d3c0:	00801504 	movi	r2,84
1000d3c4:	10c06836 	bltu	r2,r3,1000d568 <_malloc_r+0x670>
1000d3c8:	8806d33a 	srli	r3,r17,12
1000d3cc:	19c01b84 	addi	r7,r3,110
1000d3d0:	39cb883a 	add	r5,r7,r7
1000d3d4:	003f0c06 	br	1000d008 <__alt_data_end+0xf800d008>
1000d3d8:	3804d27a 	srli	r2,r7,9
1000d3dc:	01000104 	movi	r4,4
1000d3e0:	2080422e 	bgeu	r4,r2,1000d4ec <_malloc_r+0x5f4>
1000d3e4:	01000504 	movi	r4,20
1000d3e8:	20807c36 	bltu	r4,r2,1000d5dc <_malloc_r+0x6e4>
1000d3ec:	110016c4 	addi	r4,r2,91
1000d3f0:	210b883a 	add	r5,r4,r4
1000d3f4:	294b883a 	add	r5,r5,r5
1000d3f8:	294b883a 	add	r5,r5,r5
1000d3fc:	994b883a 	add	r5,r19,r5
1000d400:	28800217 	ldw	r2,8(r5)
1000d404:	02040074 	movhi	r8,4097
1000d408:	42168004 	addi	r8,r8,23040
1000d40c:	11406326 	beq	r2,r5,1000d59c <_malloc_r+0x6a4>
1000d410:	01bfff04 	movi	r6,-4
1000d414:	11000117 	ldw	r4,4(r2)
1000d418:	2188703a 	and	r4,r4,r6
1000d41c:	3900022e 	bgeu	r7,r4,1000d428 <_malloc_r+0x530>
1000d420:	10800217 	ldw	r2,8(r2)
1000d424:	28bffb1e 	bne	r5,r2,1000d414 <__alt_data_end+0xf800d414>
1000d428:	11800317 	ldw	r6,12(r2)
1000d42c:	99000117 	ldw	r4,4(r19)
1000d430:	81800315 	stw	r6,12(r16)
1000d434:	80800215 	stw	r2,8(r16)
1000d438:	34000215 	stw	r16,8(r6)
1000d43c:	14000315 	stw	r16,12(r2)
1000d440:	003f2706 	br	1000d0e0 <__alt_data_end+0xf800d0e0>
1000d444:	88c00054 	ori	r3,r17,1
1000d448:	80c00115 	stw	r3,4(r16)
1000d44c:	8463883a 	add	r17,r16,r17
1000d450:	34400515 	stw	r17,20(r6)
1000d454:	34400415 	stw	r17,16(r6)
1000d458:	10c00054 	ori	r3,r2,1
1000d45c:	8a400315 	stw	r9,12(r17)
1000d460:	8a400215 	stw	r9,8(r17)
1000d464:	88c00115 	stw	r3,4(r17)
1000d468:	88a3883a 	add	r17,r17,r2
1000d46c:	88800015 	stw	r2,0(r17)
1000d470:	9009883a 	mov	r4,r18
1000d474:	00125040 	call	10012504 <__malloc_unlock>
1000d478:	80800204 	addi	r2,r16,8
1000d47c:	003ecb06 	br	1000cfac <__alt_data_end+0xf800cfac>
1000d480:	31000117 	ldw	r4,4(r6)
1000d484:	003f1606 	br	1000d0e0 <__alt_data_end+0xf800d0e0>
1000d488:	63000044 	addi	r12,r12,1
1000d48c:	608000cc 	andi	r2,r12,3
1000d490:	5ac00204 	addi	r11,r11,8
1000d494:	103f2a1e 	bne	r2,zero,1000d140 <__alt_data_end+0xf800d140>
1000d498:	00002106 	br	1000d520 <_malloc_r+0x628>
1000d49c:	80800204 	addi	r2,r16,8
1000d4a0:	84000517 	ldw	r16,20(r16)
1000d4a4:	143eb31e 	bne	r2,r16,1000cf74 <__alt_data_end+0xf800cf74>
1000d4a8:	18c00084 	addi	r3,r3,2
1000d4ac:	003eec06 	br	1000d060 <__alt_data_end+0xf800d060>
1000d4b0:	8085883a 	add	r2,r16,r2
1000d4b4:	10c00117 	ldw	r3,4(r2)
1000d4b8:	81000317 	ldw	r4,12(r16)
1000d4bc:	81400217 	ldw	r5,8(r16)
1000d4c0:	18c00054 	ori	r3,r3,1
1000d4c4:	10c00115 	stw	r3,4(r2)
1000d4c8:	29000315 	stw	r4,12(r5)
1000d4cc:	21400215 	stw	r5,8(r4)
1000d4d0:	9009883a 	mov	r4,r18
1000d4d4:	00125040 	call	10012504 <__malloc_unlock>
1000d4d8:	80800204 	addi	r2,r16,8
1000d4dc:	003eb306 	br	1000cfac <__alt_data_end+0xf800cfac>
1000d4e0:	19c016c4 	addi	r7,r3,91
1000d4e4:	39cb883a 	add	r5,r7,r7
1000d4e8:	003ec706 	br	1000d008 <__alt_data_end+0xf800d008>
1000d4ec:	3804d1ba 	srli	r2,r7,6
1000d4f0:	11000e04 	addi	r4,r2,56
1000d4f4:	210b883a 	add	r5,r4,r4
1000d4f8:	003fbe06 	br	1000d3f4 <__alt_data_end+0xf800d3f4>
1000d4fc:	84ff5d26 	beq	r16,r19,1000d274 <__alt_data_end+0xf800d274>
1000d500:	9c000217 	ldw	r16,8(r19)
1000d504:	00bfff04 	movi	r2,-4
1000d508:	80c00117 	ldw	r3,4(r16)
1000d50c:	1886703a 	and	r3,r3,r2
1000d510:	003f9706 	br	1000d370 <__alt_data_end+0xf800d370>
1000d514:	52800017 	ldw	r10,0(r10)
1000d518:	18ffffc4 	addi	r3,r3,-1
1000d51c:	50805c1e 	bne	r10,r2,1000d690 <_malloc_r+0x798>
1000d520:	190000cc 	andi	r4,r3,3
1000d524:	50bffe04 	addi	r2,r10,-8
1000d528:	203ffa1e 	bne	r4,zero,1000d514 <__alt_data_end+0xf800d514>
1000d52c:	98800117 	ldw	r2,4(r19)
1000d530:	0146303a 	nor	r3,zero,r5
1000d534:	1884703a 	and	r2,r3,r2
1000d538:	98800115 	stw	r2,4(r19)
1000d53c:	294b883a 	add	r5,r5,r5
1000d540:	117f2e36 	bltu	r2,r5,1000d1fc <__alt_data_end+0xf800d1fc>
1000d544:	283f2d26 	beq	r5,zero,1000d1fc <__alt_data_end+0xf800d1fc>
1000d548:	1146703a 	and	r3,r2,r5
1000d54c:	1800521e 	bne	r3,zero,1000d698 <_malloc_r+0x7a0>
1000d550:	6007883a 	mov	r3,r12
1000d554:	294b883a 	add	r5,r5,r5
1000d558:	1148703a 	and	r4,r2,r5
1000d55c:	18c00104 	addi	r3,r3,4
1000d560:	203ffc26 	beq	r4,zero,1000d554 <__alt_data_end+0xf800d554>
1000d564:	003ef006 	br	1000d128 <__alt_data_end+0xf800d128>
1000d568:	00805504 	movi	r2,340
1000d56c:	10c01336 	bltu	r2,r3,1000d5bc <_malloc_r+0x6c4>
1000d570:	8806d3fa 	srli	r3,r17,15
1000d574:	19c01dc4 	addi	r7,r3,119
1000d578:	39cb883a 	add	r5,r7,r7
1000d57c:	003ea206 	br	1000d008 <__alt_data_end+0xf800d008>
1000d580:	00c40004 	movi	r3,4096
1000d584:	003f4d06 	br	1000d2bc <__alt_data_end+0xf800d2bc>
1000d588:	00800044 	movi	r2,1
1000d58c:	a0800115 	stw	r2,4(r20)
1000d590:	a021883a 	mov	r16,r20
1000d594:	0007883a 	mov	r3,zero
1000d598:	003f7506 	br	1000d370 <__alt_data_end+0xf800d370>
1000d59c:	200bd0ba 	srai	r5,r4,2
1000d5a0:	01800044 	movi	r6,1
1000d5a4:	41000117 	ldw	r4,4(r8)
1000d5a8:	314a983a 	sll	r5,r6,r5
1000d5ac:	100d883a 	mov	r6,r2
1000d5b0:	2908b03a 	or	r4,r5,r4
1000d5b4:	41000115 	stw	r4,4(r8)
1000d5b8:	003f9d06 	br	1000d430 <__alt_data_end+0xf800d430>
1000d5bc:	00815504 	movi	r2,1364
1000d5c0:	10c01336 	bltu	r2,r3,1000d610 <_malloc_r+0x718>
1000d5c4:	8806d4ba 	srli	r3,r17,18
1000d5c8:	19c01f04 	addi	r7,r3,124
1000d5cc:	39cb883a 	add	r5,r7,r7
1000d5d0:	003e8d06 	br	1000d008 <__alt_data_end+0xf800d008>
1000d5d4:	ad400404 	addi	r21,r21,16
1000d5d8:	003f1d06 	br	1000d250 <__alt_data_end+0xf800d250>
1000d5dc:	01001504 	movi	r4,84
1000d5e0:	20801c36 	bltu	r4,r2,1000d654 <_malloc_r+0x75c>
1000d5e4:	3804d33a 	srli	r2,r7,12
1000d5e8:	11001b84 	addi	r4,r2,110
1000d5ec:	210b883a 	add	r5,r4,r4
1000d5f0:	003f8006 	br	1000d3f4 <__alt_data_end+0xf800d3f4>
1000d5f4:	3083ffcc 	andi	r2,r6,4095
1000d5f8:	103f241e 	bne	r2,zero,1000d28c <__alt_data_end+0xf800d28c>
1000d5fc:	99000217 	ldw	r4,8(r19)
1000d600:	ad85883a 	add	r2,r21,r22
1000d604:	10800054 	ori	r2,r2,1
1000d608:	20800115 	stw	r2,4(r4)
1000d60c:	003f4a06 	br	1000d338 <__alt_data_end+0xf800d338>
1000d610:	01403f04 	movi	r5,252
1000d614:	01c01f84 	movi	r7,126
1000d618:	003e7b06 	br	1000d008 <__alt_data_end+0xf800d008>
1000d61c:	00c00044 	movi	r3,1
1000d620:	002b883a 	mov	r21,zero
1000d624:	003f3006 	br	1000d2e8 <__alt_data_end+0xf800d2e8>
1000d628:	00840074 	movhi	r2,4097
1000d62c:	109c0804 	addi	r2,r2,28704
1000d630:	15000015 	stw	r20,0(r2)
1000d634:	003f1b06 	br	1000d2a4 <__alt_data_end+0xf800d2a4>
1000d638:	9009883a 	mov	r4,r18
1000d63c:	81400204 	addi	r5,r16,8
1000d640:	000c35c0 	call	1000c35c <_free_r>
1000d644:	008400b4 	movhi	r2,4098
1000d648:	10a2df04 	addi	r2,r2,-29828
1000d64c:	10c00017 	ldw	r3,0(r2)
1000d650:	003f3906 	br	1000d338 <__alt_data_end+0xf800d338>
1000d654:	01005504 	movi	r4,340
1000d658:	20800436 	bltu	r4,r2,1000d66c <_malloc_r+0x774>
1000d65c:	3804d3fa 	srli	r2,r7,15
1000d660:	11001dc4 	addi	r4,r2,119
1000d664:	210b883a 	add	r5,r4,r4
1000d668:	003f6206 	br	1000d3f4 <__alt_data_end+0xf800d3f4>
1000d66c:	01015504 	movi	r4,1364
1000d670:	20800436 	bltu	r4,r2,1000d684 <_malloc_r+0x78c>
1000d674:	3804d4ba 	srli	r2,r7,18
1000d678:	11001f04 	addi	r4,r2,124
1000d67c:	210b883a 	add	r5,r4,r4
1000d680:	003f5c06 	br	1000d3f4 <__alt_data_end+0xf800d3f4>
1000d684:	01403f04 	movi	r5,252
1000d688:	01001f84 	movi	r4,126
1000d68c:	003f5906 	br	1000d3f4 <__alt_data_end+0xf800d3f4>
1000d690:	98800117 	ldw	r2,4(r19)
1000d694:	003fa906 	br	1000d53c <__alt_data_end+0xf800d53c>
1000d698:	6007883a 	mov	r3,r12
1000d69c:	003ea206 	br	1000d128 <__alt_data_end+0xf800d128>

1000d6a0 <memchr>:
1000d6a0:	208000cc 	andi	r2,r4,3
1000d6a4:	280f883a 	mov	r7,r5
1000d6a8:	10003526 	beq	r2,zero,1000d780 <memchr+0xe0>
1000d6ac:	30bfffc4 	addi	r2,r6,-1
1000d6b0:	30001b26 	beq	r6,zero,1000d720 <memchr+0x80>
1000d6b4:	21800003 	ldbu	r6,0(r4)
1000d6b8:	28c03fcc 	andi	r3,r5,255
1000d6bc:	30c01a26 	beq	r6,r3,1000d728 <memchr+0x88>
1000d6c0:	180d883a 	mov	r6,r3
1000d6c4:	00000406 	br	1000d6d8 <memchr+0x38>
1000d6c8:	10001526 	beq	r2,zero,1000d720 <memchr+0x80>
1000d6cc:	20c00003 	ldbu	r3,0(r4)
1000d6d0:	10bfffc4 	addi	r2,r2,-1
1000d6d4:	19801426 	beq	r3,r6,1000d728 <memchr+0x88>
1000d6d8:	21000044 	addi	r4,r4,1
1000d6dc:	20c000cc 	andi	r3,r4,3
1000d6e0:	183ff91e 	bne	r3,zero,1000d6c8 <__alt_data_end+0xf800d6c8>
1000d6e4:	024000c4 	movi	r9,3
1000d6e8:	48801136 	bltu	r9,r2,1000d730 <memchr+0x90>
1000d6ec:	10000c26 	beq	r2,zero,1000d720 <memchr+0x80>
1000d6f0:	20c00003 	ldbu	r3,0(r4)
1000d6f4:	29403fcc 	andi	r5,r5,255
1000d6f8:	19400b26 	beq	r3,r5,1000d728 <memchr+0x88>
1000d6fc:	20c00044 	addi	r3,r4,1
1000d700:	2085883a 	add	r2,r4,r2
1000d704:	39803fcc 	andi	r6,r7,255
1000d708:	00000306 	br	1000d718 <memchr+0x78>
1000d70c:	18c00044 	addi	r3,r3,1
1000d710:	197fffc3 	ldbu	r5,-1(r3)
1000d714:	29800426 	beq	r5,r6,1000d728 <memchr+0x88>
1000d718:	1809883a 	mov	r4,r3
1000d71c:	18bffb1e 	bne	r3,r2,1000d70c <__alt_data_end+0xf800d70c>
1000d720:	0005883a 	mov	r2,zero
1000d724:	f800283a 	ret
1000d728:	2005883a 	mov	r2,r4
1000d72c:	f800283a 	ret
1000d730:	28c03fcc 	andi	r3,r5,255
1000d734:	1810923a 	slli	r8,r3,8
1000d738:	02ffbff4 	movhi	r11,65279
1000d73c:	02a02074 	movhi	r10,32897
1000d740:	40c6b03a 	or	r3,r8,r3
1000d744:	1810943a 	slli	r8,r3,16
1000d748:	5affbfc4 	addi	r11,r11,-257
1000d74c:	52a02004 	addi	r10,r10,-32640
1000d750:	40d0b03a 	or	r8,r8,r3
1000d754:	20c00017 	ldw	r3,0(r4)
1000d758:	40c6f03a 	xor	r3,r8,r3
1000d75c:	1acd883a 	add	r6,r3,r11
1000d760:	00c6303a 	nor	r3,zero,r3
1000d764:	30c6703a 	and	r3,r6,r3
1000d768:	1a86703a 	and	r3,r3,r10
1000d76c:	183fdf1e 	bne	r3,zero,1000d6ec <__alt_data_end+0xf800d6ec>
1000d770:	10bfff04 	addi	r2,r2,-4
1000d774:	21000104 	addi	r4,r4,4
1000d778:	48bff636 	bltu	r9,r2,1000d754 <__alt_data_end+0xf800d754>
1000d77c:	003fdb06 	br	1000d6ec <__alt_data_end+0xf800d6ec>
1000d780:	3005883a 	mov	r2,r6
1000d784:	003fd706 	br	1000d6e4 <__alt_data_end+0xf800d6e4>

1000d788 <memcpy>:
1000d788:	deffff04 	addi	sp,sp,-4
1000d78c:	dc000015 	stw	r16,0(sp)
1000d790:	00c003c4 	movi	r3,15
1000d794:	2005883a 	mov	r2,r4
1000d798:	1980432e 	bgeu	r3,r6,1000d8a8 <memcpy+0x120>
1000d79c:	2146b03a 	or	r3,r4,r5
1000d7a0:	18c000cc 	andi	r3,r3,3
1000d7a4:	1800421e 	bne	r3,zero,1000d8b0 <memcpy+0x128>
1000d7a8:	343ffc04 	addi	r16,r6,-16
1000d7ac:	8020d13a 	srli	r16,r16,4
1000d7b0:	28c00104 	addi	r3,r5,4
1000d7b4:	23400104 	addi	r13,r4,4
1000d7b8:	801e913a 	slli	r15,r16,4
1000d7bc:	2b000204 	addi	r12,r5,8
1000d7c0:	22c00204 	addi	r11,r4,8
1000d7c4:	7bc00504 	addi	r15,r15,20
1000d7c8:	2a800304 	addi	r10,r5,12
1000d7cc:	22400304 	addi	r9,r4,12
1000d7d0:	2bdf883a 	add	r15,r5,r15
1000d7d4:	2811883a 	mov	r8,r5
1000d7d8:	200f883a 	mov	r7,r4
1000d7dc:	41000017 	ldw	r4,0(r8)
1000d7e0:	39c00404 	addi	r7,r7,16
1000d7e4:	18c00404 	addi	r3,r3,16
1000d7e8:	393ffc15 	stw	r4,-16(r7)
1000d7ec:	1bbffc17 	ldw	r14,-16(r3)
1000d7f0:	6b400404 	addi	r13,r13,16
1000d7f4:	5ac00404 	addi	r11,r11,16
1000d7f8:	6bbffc15 	stw	r14,-16(r13)
1000d7fc:	63800017 	ldw	r14,0(r12)
1000d800:	4a400404 	addi	r9,r9,16
1000d804:	42000404 	addi	r8,r8,16
1000d808:	5bbffc15 	stw	r14,-16(r11)
1000d80c:	53800017 	ldw	r14,0(r10)
1000d810:	63000404 	addi	r12,r12,16
1000d814:	52800404 	addi	r10,r10,16
1000d818:	4bbffc15 	stw	r14,-16(r9)
1000d81c:	1bffef1e 	bne	r3,r15,1000d7dc <__alt_data_end+0xf800d7dc>
1000d820:	81c00044 	addi	r7,r16,1
1000d824:	380e913a 	slli	r7,r7,4
1000d828:	310003cc 	andi	r4,r6,15
1000d82c:	02c000c4 	movi	r11,3
1000d830:	11c7883a 	add	r3,r2,r7
1000d834:	29cb883a 	add	r5,r5,r7
1000d838:	59001f2e 	bgeu	r11,r4,1000d8b8 <memcpy+0x130>
1000d83c:	1813883a 	mov	r9,r3
1000d840:	2811883a 	mov	r8,r5
1000d844:	200f883a 	mov	r7,r4
1000d848:	42800017 	ldw	r10,0(r8)
1000d84c:	4a400104 	addi	r9,r9,4
1000d850:	39ffff04 	addi	r7,r7,-4
1000d854:	4abfff15 	stw	r10,-4(r9)
1000d858:	42000104 	addi	r8,r8,4
1000d85c:	59fffa36 	bltu	r11,r7,1000d848 <__alt_data_end+0xf800d848>
1000d860:	213fff04 	addi	r4,r4,-4
1000d864:	2008d0ba 	srli	r4,r4,2
1000d868:	318000cc 	andi	r6,r6,3
1000d86c:	21000044 	addi	r4,r4,1
1000d870:	2109883a 	add	r4,r4,r4
1000d874:	2109883a 	add	r4,r4,r4
1000d878:	1907883a 	add	r3,r3,r4
1000d87c:	290b883a 	add	r5,r5,r4
1000d880:	30000626 	beq	r6,zero,1000d89c <memcpy+0x114>
1000d884:	198d883a 	add	r6,r3,r6
1000d888:	29c00003 	ldbu	r7,0(r5)
1000d88c:	18c00044 	addi	r3,r3,1
1000d890:	29400044 	addi	r5,r5,1
1000d894:	19ffffc5 	stb	r7,-1(r3)
1000d898:	19bffb1e 	bne	r3,r6,1000d888 <__alt_data_end+0xf800d888>
1000d89c:	dc000017 	ldw	r16,0(sp)
1000d8a0:	dec00104 	addi	sp,sp,4
1000d8a4:	f800283a 	ret
1000d8a8:	2007883a 	mov	r3,r4
1000d8ac:	003ff406 	br	1000d880 <__alt_data_end+0xf800d880>
1000d8b0:	2007883a 	mov	r3,r4
1000d8b4:	003ff306 	br	1000d884 <__alt_data_end+0xf800d884>
1000d8b8:	200d883a 	mov	r6,r4
1000d8bc:	003ff006 	br	1000d880 <__alt_data_end+0xf800d880>

1000d8c0 <memmove>:
1000d8c0:	2005883a 	mov	r2,r4
1000d8c4:	29000b2e 	bgeu	r5,r4,1000d8f4 <memmove+0x34>
1000d8c8:	298f883a 	add	r7,r5,r6
1000d8cc:	21c0092e 	bgeu	r4,r7,1000d8f4 <memmove+0x34>
1000d8d0:	2187883a 	add	r3,r4,r6
1000d8d4:	198bc83a 	sub	r5,r3,r6
1000d8d8:	30004b26 	beq	r6,zero,1000da08 <memmove+0x148>
1000d8dc:	39ffffc4 	addi	r7,r7,-1
1000d8e0:	39000003 	ldbu	r4,0(r7)
1000d8e4:	18ffffc4 	addi	r3,r3,-1
1000d8e8:	19000005 	stb	r4,0(r3)
1000d8ec:	197ffb1e 	bne	r3,r5,1000d8dc <__alt_data_end+0xf800d8dc>
1000d8f0:	f800283a 	ret
1000d8f4:	00c003c4 	movi	r3,15
1000d8f8:	1980412e 	bgeu	r3,r6,1000da00 <memmove+0x140>
1000d8fc:	1146b03a 	or	r3,r2,r5
1000d900:	18c000cc 	andi	r3,r3,3
1000d904:	1800411e 	bne	r3,zero,1000da0c <memmove+0x14c>
1000d908:	33fffc04 	addi	r15,r6,-16
1000d90c:	781ed13a 	srli	r15,r15,4
1000d910:	28c00104 	addi	r3,r5,4
1000d914:	13400104 	addi	r13,r2,4
1000d918:	781c913a 	slli	r14,r15,4
1000d91c:	2b000204 	addi	r12,r5,8
1000d920:	12c00204 	addi	r11,r2,8
1000d924:	73800504 	addi	r14,r14,20
1000d928:	2a800304 	addi	r10,r5,12
1000d92c:	12400304 	addi	r9,r2,12
1000d930:	2b9d883a 	add	r14,r5,r14
1000d934:	2811883a 	mov	r8,r5
1000d938:	100f883a 	mov	r7,r2
1000d93c:	41000017 	ldw	r4,0(r8)
1000d940:	39c00404 	addi	r7,r7,16
1000d944:	18c00404 	addi	r3,r3,16
1000d948:	393ffc15 	stw	r4,-16(r7)
1000d94c:	193ffc17 	ldw	r4,-16(r3)
1000d950:	6b400404 	addi	r13,r13,16
1000d954:	5ac00404 	addi	r11,r11,16
1000d958:	693ffc15 	stw	r4,-16(r13)
1000d95c:	61000017 	ldw	r4,0(r12)
1000d960:	4a400404 	addi	r9,r9,16
1000d964:	42000404 	addi	r8,r8,16
1000d968:	593ffc15 	stw	r4,-16(r11)
1000d96c:	51000017 	ldw	r4,0(r10)
1000d970:	63000404 	addi	r12,r12,16
1000d974:	52800404 	addi	r10,r10,16
1000d978:	493ffc15 	stw	r4,-16(r9)
1000d97c:	1bbfef1e 	bne	r3,r14,1000d93c <__alt_data_end+0xf800d93c>
1000d980:	79000044 	addi	r4,r15,1
1000d984:	2008913a 	slli	r4,r4,4
1000d988:	328003cc 	andi	r10,r6,15
1000d98c:	02c000c4 	movi	r11,3
1000d990:	1107883a 	add	r3,r2,r4
1000d994:	290b883a 	add	r5,r5,r4
1000d998:	5a801e2e 	bgeu	r11,r10,1000da14 <memmove+0x154>
1000d99c:	1813883a 	mov	r9,r3
1000d9a0:	2811883a 	mov	r8,r5
1000d9a4:	500f883a 	mov	r7,r10
1000d9a8:	41000017 	ldw	r4,0(r8)
1000d9ac:	4a400104 	addi	r9,r9,4
1000d9b0:	39ffff04 	addi	r7,r7,-4
1000d9b4:	493fff15 	stw	r4,-4(r9)
1000d9b8:	42000104 	addi	r8,r8,4
1000d9bc:	59fffa36 	bltu	r11,r7,1000d9a8 <__alt_data_end+0xf800d9a8>
1000d9c0:	513fff04 	addi	r4,r10,-4
1000d9c4:	2008d0ba 	srli	r4,r4,2
1000d9c8:	318000cc 	andi	r6,r6,3
1000d9cc:	21000044 	addi	r4,r4,1
1000d9d0:	2109883a 	add	r4,r4,r4
1000d9d4:	2109883a 	add	r4,r4,r4
1000d9d8:	1907883a 	add	r3,r3,r4
1000d9dc:	290b883a 	add	r5,r5,r4
1000d9e0:	30000926 	beq	r6,zero,1000da08 <memmove+0x148>
1000d9e4:	198d883a 	add	r6,r3,r6
1000d9e8:	29c00003 	ldbu	r7,0(r5)
1000d9ec:	18c00044 	addi	r3,r3,1
1000d9f0:	29400044 	addi	r5,r5,1
1000d9f4:	19ffffc5 	stb	r7,-1(r3)
1000d9f8:	19bffb1e 	bne	r3,r6,1000d9e8 <__alt_data_end+0xf800d9e8>
1000d9fc:	f800283a 	ret
1000da00:	1007883a 	mov	r3,r2
1000da04:	003ff606 	br	1000d9e0 <__alt_data_end+0xf800d9e0>
1000da08:	f800283a 	ret
1000da0c:	1007883a 	mov	r3,r2
1000da10:	003ff406 	br	1000d9e4 <__alt_data_end+0xf800d9e4>
1000da14:	500d883a 	mov	r6,r10
1000da18:	003ff106 	br	1000d9e0 <__alt_data_end+0xf800d9e0>

1000da1c <memset>:
1000da1c:	20c000cc 	andi	r3,r4,3
1000da20:	2005883a 	mov	r2,r4
1000da24:	18004326 	beq	r3,zero,1000db34 <memset+0x118>
1000da28:	31ffffc4 	addi	r7,r6,-1
1000da2c:	30004026 	beq	r6,zero,1000db30 <memset+0x114>
1000da30:	2813883a 	mov	r9,r5
1000da34:	200d883a 	mov	r6,r4
1000da38:	2007883a 	mov	r3,r4
1000da3c:	00000406 	br	1000da50 <memset+0x34>
1000da40:	3a3fffc4 	addi	r8,r7,-1
1000da44:	31800044 	addi	r6,r6,1
1000da48:	38003926 	beq	r7,zero,1000db30 <memset+0x114>
1000da4c:	400f883a 	mov	r7,r8
1000da50:	18c00044 	addi	r3,r3,1
1000da54:	32400005 	stb	r9,0(r6)
1000da58:	1a0000cc 	andi	r8,r3,3
1000da5c:	403ff81e 	bne	r8,zero,1000da40 <__alt_data_end+0xf800da40>
1000da60:	010000c4 	movi	r4,3
1000da64:	21c02d2e 	bgeu	r4,r7,1000db1c <memset+0x100>
1000da68:	29803fcc 	andi	r6,r5,255
1000da6c:	3008923a 	slli	r4,r6,8
1000da70:	218cb03a 	or	r6,r4,r6
1000da74:	3008943a 	slli	r4,r6,16
1000da78:	218cb03a 	or	r6,r4,r6
1000da7c:	010003c4 	movi	r4,15
1000da80:	21c0182e 	bgeu	r4,r7,1000dae4 <memset+0xc8>
1000da84:	3b3ffc04 	addi	r12,r7,-16
1000da88:	6018d13a 	srli	r12,r12,4
1000da8c:	1a000104 	addi	r8,r3,4
1000da90:	1ac00204 	addi	r11,r3,8
1000da94:	6008913a 	slli	r4,r12,4
1000da98:	1a800304 	addi	r10,r3,12
1000da9c:	1813883a 	mov	r9,r3
1000daa0:	21000504 	addi	r4,r4,20
1000daa4:	1909883a 	add	r4,r3,r4
1000daa8:	49800015 	stw	r6,0(r9)
1000daac:	41800015 	stw	r6,0(r8)
1000dab0:	59800015 	stw	r6,0(r11)
1000dab4:	51800015 	stw	r6,0(r10)
1000dab8:	42000404 	addi	r8,r8,16
1000dabc:	4a400404 	addi	r9,r9,16
1000dac0:	5ac00404 	addi	r11,r11,16
1000dac4:	52800404 	addi	r10,r10,16
1000dac8:	413ff71e 	bne	r8,r4,1000daa8 <__alt_data_end+0xf800daa8>
1000dacc:	63000044 	addi	r12,r12,1
1000dad0:	6018913a 	slli	r12,r12,4
1000dad4:	39c003cc 	andi	r7,r7,15
1000dad8:	010000c4 	movi	r4,3
1000dadc:	1b07883a 	add	r3,r3,r12
1000dae0:	21c00e2e 	bgeu	r4,r7,1000db1c <memset+0x100>
1000dae4:	1813883a 	mov	r9,r3
1000dae8:	3811883a 	mov	r8,r7
1000daec:	010000c4 	movi	r4,3
1000daf0:	49800015 	stw	r6,0(r9)
1000daf4:	423fff04 	addi	r8,r8,-4
1000daf8:	4a400104 	addi	r9,r9,4
1000dafc:	223ffc36 	bltu	r4,r8,1000daf0 <__alt_data_end+0xf800daf0>
1000db00:	393fff04 	addi	r4,r7,-4
1000db04:	2008d0ba 	srli	r4,r4,2
1000db08:	39c000cc 	andi	r7,r7,3
1000db0c:	21000044 	addi	r4,r4,1
1000db10:	2109883a 	add	r4,r4,r4
1000db14:	2109883a 	add	r4,r4,r4
1000db18:	1907883a 	add	r3,r3,r4
1000db1c:	38000426 	beq	r7,zero,1000db30 <memset+0x114>
1000db20:	19cf883a 	add	r7,r3,r7
1000db24:	19400005 	stb	r5,0(r3)
1000db28:	18c00044 	addi	r3,r3,1
1000db2c:	19fffd1e 	bne	r3,r7,1000db24 <__alt_data_end+0xf800db24>
1000db30:	f800283a 	ret
1000db34:	2007883a 	mov	r3,r4
1000db38:	300f883a 	mov	r7,r6
1000db3c:	003fc806 	br	1000da60 <__alt_data_end+0xf800da60>

1000db40 <_Balloc>:
1000db40:	20801317 	ldw	r2,76(r4)
1000db44:	defffc04 	addi	sp,sp,-16
1000db48:	dc400115 	stw	r17,4(sp)
1000db4c:	dc000015 	stw	r16,0(sp)
1000db50:	dfc00315 	stw	ra,12(sp)
1000db54:	dc800215 	stw	r18,8(sp)
1000db58:	2023883a 	mov	r17,r4
1000db5c:	2821883a 	mov	r16,r5
1000db60:	10000f26 	beq	r2,zero,1000dba0 <_Balloc+0x60>
1000db64:	8407883a 	add	r3,r16,r16
1000db68:	18c7883a 	add	r3,r3,r3
1000db6c:	10c7883a 	add	r3,r2,r3
1000db70:	18800017 	ldw	r2,0(r3)
1000db74:	10001126 	beq	r2,zero,1000dbbc <_Balloc+0x7c>
1000db78:	11000017 	ldw	r4,0(r2)
1000db7c:	19000015 	stw	r4,0(r3)
1000db80:	10000415 	stw	zero,16(r2)
1000db84:	10000315 	stw	zero,12(r2)
1000db88:	dfc00317 	ldw	ra,12(sp)
1000db8c:	dc800217 	ldw	r18,8(sp)
1000db90:	dc400117 	ldw	r17,4(sp)
1000db94:	dc000017 	ldw	r16,0(sp)
1000db98:	dec00404 	addi	sp,sp,16
1000db9c:	f800283a 	ret
1000dba0:	01400104 	movi	r5,4
1000dba4:	01800844 	movi	r6,33
1000dba8:	00109680 	call	10010968 <_calloc_r>
1000dbac:	88801315 	stw	r2,76(r17)
1000dbb0:	103fec1e 	bne	r2,zero,1000db64 <__alt_data_end+0xf800db64>
1000dbb4:	0005883a 	mov	r2,zero
1000dbb8:	003ff306 	br	1000db88 <__alt_data_end+0xf800db88>
1000dbbc:	01400044 	movi	r5,1
1000dbc0:	2c24983a 	sll	r18,r5,r16
1000dbc4:	8809883a 	mov	r4,r17
1000dbc8:	91800144 	addi	r6,r18,5
1000dbcc:	318d883a 	add	r6,r6,r6
1000dbd0:	318d883a 	add	r6,r6,r6
1000dbd4:	00109680 	call	10010968 <_calloc_r>
1000dbd8:	103ff626 	beq	r2,zero,1000dbb4 <__alt_data_end+0xf800dbb4>
1000dbdc:	14000115 	stw	r16,4(r2)
1000dbe0:	14800215 	stw	r18,8(r2)
1000dbe4:	003fe606 	br	1000db80 <__alt_data_end+0xf800db80>

1000dbe8 <_Bfree>:
1000dbe8:	28000826 	beq	r5,zero,1000dc0c <_Bfree+0x24>
1000dbec:	28c00117 	ldw	r3,4(r5)
1000dbf0:	20801317 	ldw	r2,76(r4)
1000dbf4:	18c7883a 	add	r3,r3,r3
1000dbf8:	18c7883a 	add	r3,r3,r3
1000dbfc:	10c5883a 	add	r2,r2,r3
1000dc00:	10c00017 	ldw	r3,0(r2)
1000dc04:	28c00015 	stw	r3,0(r5)
1000dc08:	11400015 	stw	r5,0(r2)
1000dc0c:	f800283a 	ret

1000dc10 <__multadd>:
1000dc10:	defff704 	addi	sp,sp,-36
1000dc14:	dc800215 	stw	r18,8(sp)
1000dc18:	2c800417 	ldw	r18,16(r5)
1000dc1c:	ddc00715 	stw	r23,28(sp)
1000dc20:	dd800615 	stw	r22,24(sp)
1000dc24:	dd000415 	stw	r20,16(sp)
1000dc28:	dcc00315 	stw	r19,12(sp)
1000dc2c:	dc400115 	stw	r17,4(sp)
1000dc30:	dc000015 	stw	r16,0(sp)
1000dc34:	dfc00815 	stw	ra,32(sp)
1000dc38:	dd400515 	stw	r21,20(sp)
1000dc3c:	2827883a 	mov	r19,r5
1000dc40:	2029883a 	mov	r20,r4
1000dc44:	3023883a 	mov	r17,r6
1000dc48:	3821883a 	mov	r16,r7
1000dc4c:	2d800504 	addi	r22,r5,20
1000dc50:	002f883a 	mov	r23,zero
1000dc54:	b5400017 	ldw	r21,0(r22)
1000dc58:	880b883a 	mov	r5,r17
1000dc5c:	bdc00044 	addi	r23,r23,1
1000dc60:	a93fffcc 	andi	r4,r21,65535
1000dc64:	00057300 	call	10005730 <__mulsi3>
1000dc68:	1421883a 	add	r16,r2,r16
1000dc6c:	a808d43a 	srli	r4,r21,16
1000dc70:	802ad43a 	srli	r21,r16,16
1000dc74:	880b883a 	mov	r5,r17
1000dc78:	00057300 	call	10005730 <__mulsi3>
1000dc7c:	a88f883a 	add	r7,r21,r2
1000dc80:	3804943a 	slli	r2,r7,16
1000dc84:	80ffffcc 	andi	r3,r16,65535
1000dc88:	b5800104 	addi	r22,r22,4
1000dc8c:	10c7883a 	add	r3,r2,r3
1000dc90:	b0ffff15 	stw	r3,-4(r22)
1000dc94:	3820d43a 	srli	r16,r7,16
1000dc98:	bcbfee16 	blt	r23,r18,1000dc54 <__alt_data_end+0xf800dc54>
1000dc9c:	80000926 	beq	r16,zero,1000dcc4 <__multadd+0xb4>
1000dca0:	98800217 	ldw	r2,8(r19)
1000dca4:	9080130e 	bge	r18,r2,1000dcf4 <__multadd+0xe4>
1000dca8:	90800144 	addi	r2,r18,5
1000dcac:	1085883a 	add	r2,r2,r2
1000dcb0:	1085883a 	add	r2,r2,r2
1000dcb4:	9885883a 	add	r2,r19,r2
1000dcb8:	14000015 	stw	r16,0(r2)
1000dcbc:	94800044 	addi	r18,r18,1
1000dcc0:	9c800415 	stw	r18,16(r19)
1000dcc4:	9805883a 	mov	r2,r19
1000dcc8:	dfc00817 	ldw	ra,32(sp)
1000dccc:	ddc00717 	ldw	r23,28(sp)
1000dcd0:	dd800617 	ldw	r22,24(sp)
1000dcd4:	dd400517 	ldw	r21,20(sp)
1000dcd8:	dd000417 	ldw	r20,16(sp)
1000dcdc:	dcc00317 	ldw	r19,12(sp)
1000dce0:	dc800217 	ldw	r18,8(sp)
1000dce4:	dc400117 	ldw	r17,4(sp)
1000dce8:	dc000017 	ldw	r16,0(sp)
1000dcec:	dec00904 	addi	sp,sp,36
1000dcf0:	f800283a 	ret
1000dcf4:	99400117 	ldw	r5,4(r19)
1000dcf8:	a009883a 	mov	r4,r20
1000dcfc:	29400044 	addi	r5,r5,1
1000dd00:	000db400 	call	1000db40 <_Balloc>
1000dd04:	99800417 	ldw	r6,16(r19)
1000dd08:	99400304 	addi	r5,r19,12
1000dd0c:	11000304 	addi	r4,r2,12
1000dd10:	31800084 	addi	r6,r6,2
1000dd14:	318d883a 	add	r6,r6,r6
1000dd18:	318d883a 	add	r6,r6,r6
1000dd1c:	1023883a 	mov	r17,r2
1000dd20:	000d7880 	call	1000d788 <memcpy>
1000dd24:	99000117 	ldw	r4,4(r19)
1000dd28:	a0c01317 	ldw	r3,76(r20)
1000dd2c:	2109883a 	add	r4,r4,r4
1000dd30:	2109883a 	add	r4,r4,r4
1000dd34:	1907883a 	add	r3,r3,r4
1000dd38:	18800017 	ldw	r2,0(r3)
1000dd3c:	98800015 	stw	r2,0(r19)
1000dd40:	1cc00015 	stw	r19,0(r3)
1000dd44:	8827883a 	mov	r19,r17
1000dd48:	003fd706 	br	1000dca8 <__alt_data_end+0xf800dca8>

1000dd4c <__s2b>:
1000dd4c:	defff904 	addi	sp,sp,-28
1000dd50:	dc400115 	stw	r17,4(sp)
1000dd54:	dc000015 	stw	r16,0(sp)
1000dd58:	2023883a 	mov	r17,r4
1000dd5c:	2821883a 	mov	r16,r5
1000dd60:	39000204 	addi	r4,r7,8
1000dd64:	01400244 	movi	r5,9
1000dd68:	dcc00315 	stw	r19,12(sp)
1000dd6c:	dc800215 	stw	r18,8(sp)
1000dd70:	dfc00615 	stw	ra,24(sp)
1000dd74:	dd400515 	stw	r21,20(sp)
1000dd78:	dd000415 	stw	r20,16(sp)
1000dd7c:	3825883a 	mov	r18,r7
1000dd80:	3027883a 	mov	r19,r6
1000dd84:	00056700 	call	10005670 <__divsi3>
1000dd88:	00c00044 	movi	r3,1
1000dd8c:	000b883a 	mov	r5,zero
1000dd90:	1880030e 	bge	r3,r2,1000dda0 <__s2b+0x54>
1000dd94:	18c7883a 	add	r3,r3,r3
1000dd98:	29400044 	addi	r5,r5,1
1000dd9c:	18bffd16 	blt	r3,r2,1000dd94 <__alt_data_end+0xf800dd94>
1000dda0:	8809883a 	mov	r4,r17
1000dda4:	000db400 	call	1000db40 <_Balloc>
1000dda8:	d8c00717 	ldw	r3,28(sp)
1000ddac:	10c00515 	stw	r3,20(r2)
1000ddb0:	00c00044 	movi	r3,1
1000ddb4:	10c00415 	stw	r3,16(r2)
1000ddb8:	00c00244 	movi	r3,9
1000ddbc:	1cc0210e 	bge	r3,r19,1000de44 <__s2b+0xf8>
1000ddc0:	80eb883a 	add	r21,r16,r3
1000ddc4:	a829883a 	mov	r20,r21
1000ddc8:	84e1883a 	add	r16,r16,r19
1000ddcc:	a1c00007 	ldb	r7,0(r20)
1000ddd0:	8809883a 	mov	r4,r17
1000ddd4:	a5000044 	addi	r20,r20,1
1000ddd8:	100b883a 	mov	r5,r2
1000dddc:	01800284 	movi	r6,10
1000dde0:	39fff404 	addi	r7,r7,-48
1000dde4:	000dc100 	call	1000dc10 <__multadd>
1000dde8:	a43ff81e 	bne	r20,r16,1000ddcc <__alt_data_end+0xf800ddcc>
1000ddec:	ace1883a 	add	r16,r21,r19
1000ddf0:	843ffe04 	addi	r16,r16,-8
1000ddf4:	9c800a0e 	bge	r19,r18,1000de20 <__s2b+0xd4>
1000ddf8:	94e5c83a 	sub	r18,r18,r19
1000ddfc:	84a5883a 	add	r18,r16,r18
1000de00:	81c00007 	ldb	r7,0(r16)
1000de04:	8809883a 	mov	r4,r17
1000de08:	84000044 	addi	r16,r16,1
1000de0c:	100b883a 	mov	r5,r2
1000de10:	01800284 	movi	r6,10
1000de14:	39fff404 	addi	r7,r7,-48
1000de18:	000dc100 	call	1000dc10 <__multadd>
1000de1c:	84bff81e 	bne	r16,r18,1000de00 <__alt_data_end+0xf800de00>
1000de20:	dfc00617 	ldw	ra,24(sp)
1000de24:	dd400517 	ldw	r21,20(sp)
1000de28:	dd000417 	ldw	r20,16(sp)
1000de2c:	dcc00317 	ldw	r19,12(sp)
1000de30:	dc800217 	ldw	r18,8(sp)
1000de34:	dc400117 	ldw	r17,4(sp)
1000de38:	dc000017 	ldw	r16,0(sp)
1000de3c:	dec00704 	addi	sp,sp,28
1000de40:	f800283a 	ret
1000de44:	84000284 	addi	r16,r16,10
1000de48:	1827883a 	mov	r19,r3
1000de4c:	003fe906 	br	1000ddf4 <__alt_data_end+0xf800ddf4>

1000de50 <__hi0bits>:
1000de50:	20bfffec 	andhi	r2,r4,65535
1000de54:	1000141e 	bne	r2,zero,1000dea8 <__hi0bits+0x58>
1000de58:	2008943a 	slli	r4,r4,16
1000de5c:	00800404 	movi	r2,16
1000de60:	20ffc02c 	andhi	r3,r4,65280
1000de64:	1800021e 	bne	r3,zero,1000de70 <__hi0bits+0x20>
1000de68:	2008923a 	slli	r4,r4,8
1000de6c:	10800204 	addi	r2,r2,8
1000de70:	20fc002c 	andhi	r3,r4,61440
1000de74:	1800021e 	bne	r3,zero,1000de80 <__hi0bits+0x30>
1000de78:	2008913a 	slli	r4,r4,4
1000de7c:	10800104 	addi	r2,r2,4
1000de80:	20f0002c 	andhi	r3,r4,49152
1000de84:	1800031e 	bne	r3,zero,1000de94 <__hi0bits+0x44>
1000de88:	2109883a 	add	r4,r4,r4
1000de8c:	10800084 	addi	r2,r2,2
1000de90:	2109883a 	add	r4,r4,r4
1000de94:	20000316 	blt	r4,zero,1000dea4 <__hi0bits+0x54>
1000de98:	2110002c 	andhi	r4,r4,16384
1000de9c:	2000041e 	bne	r4,zero,1000deb0 <__hi0bits+0x60>
1000dea0:	00800804 	movi	r2,32
1000dea4:	f800283a 	ret
1000dea8:	0005883a 	mov	r2,zero
1000deac:	003fec06 	br	1000de60 <__alt_data_end+0xf800de60>
1000deb0:	10800044 	addi	r2,r2,1
1000deb4:	f800283a 	ret

1000deb8 <__lo0bits>:
1000deb8:	20c00017 	ldw	r3,0(r4)
1000debc:	188001cc 	andi	r2,r3,7
1000dec0:	10000826 	beq	r2,zero,1000dee4 <__lo0bits+0x2c>
1000dec4:	1880004c 	andi	r2,r3,1
1000dec8:	1000211e 	bne	r2,zero,1000df50 <__lo0bits+0x98>
1000decc:	1880008c 	andi	r2,r3,2
1000ded0:	1000211e 	bne	r2,zero,1000df58 <__lo0bits+0xa0>
1000ded4:	1806d0ba 	srli	r3,r3,2
1000ded8:	00800084 	movi	r2,2
1000dedc:	20c00015 	stw	r3,0(r4)
1000dee0:	f800283a 	ret
1000dee4:	18bfffcc 	andi	r2,r3,65535
1000dee8:	10001326 	beq	r2,zero,1000df38 <__lo0bits+0x80>
1000deec:	0005883a 	mov	r2,zero
1000def0:	19403fcc 	andi	r5,r3,255
1000def4:	2800021e 	bne	r5,zero,1000df00 <__lo0bits+0x48>
1000def8:	1806d23a 	srli	r3,r3,8
1000defc:	10800204 	addi	r2,r2,8
1000df00:	194003cc 	andi	r5,r3,15
1000df04:	2800021e 	bne	r5,zero,1000df10 <__lo0bits+0x58>
1000df08:	1806d13a 	srli	r3,r3,4
1000df0c:	10800104 	addi	r2,r2,4
1000df10:	194000cc 	andi	r5,r3,3
1000df14:	2800021e 	bne	r5,zero,1000df20 <__lo0bits+0x68>
1000df18:	1806d0ba 	srli	r3,r3,2
1000df1c:	10800084 	addi	r2,r2,2
1000df20:	1940004c 	andi	r5,r3,1
1000df24:	2800081e 	bne	r5,zero,1000df48 <__lo0bits+0x90>
1000df28:	1806d07a 	srli	r3,r3,1
1000df2c:	1800051e 	bne	r3,zero,1000df44 <__lo0bits+0x8c>
1000df30:	00800804 	movi	r2,32
1000df34:	f800283a 	ret
1000df38:	1806d43a 	srli	r3,r3,16
1000df3c:	00800404 	movi	r2,16
1000df40:	003feb06 	br	1000def0 <__alt_data_end+0xf800def0>
1000df44:	10800044 	addi	r2,r2,1
1000df48:	20c00015 	stw	r3,0(r4)
1000df4c:	f800283a 	ret
1000df50:	0005883a 	mov	r2,zero
1000df54:	f800283a 	ret
1000df58:	1806d07a 	srli	r3,r3,1
1000df5c:	00800044 	movi	r2,1
1000df60:	20c00015 	stw	r3,0(r4)
1000df64:	f800283a 	ret

1000df68 <__i2b>:
1000df68:	defffd04 	addi	sp,sp,-12
1000df6c:	dc000015 	stw	r16,0(sp)
1000df70:	04000044 	movi	r16,1
1000df74:	dc400115 	stw	r17,4(sp)
1000df78:	2823883a 	mov	r17,r5
1000df7c:	800b883a 	mov	r5,r16
1000df80:	dfc00215 	stw	ra,8(sp)
1000df84:	000db400 	call	1000db40 <_Balloc>
1000df88:	14400515 	stw	r17,20(r2)
1000df8c:	14000415 	stw	r16,16(r2)
1000df90:	dfc00217 	ldw	ra,8(sp)
1000df94:	dc400117 	ldw	r17,4(sp)
1000df98:	dc000017 	ldw	r16,0(sp)
1000df9c:	dec00304 	addi	sp,sp,12
1000dfa0:	f800283a 	ret

1000dfa4 <__multiply>:
1000dfa4:	deffef04 	addi	sp,sp,-68
1000dfa8:	dc400815 	stw	r17,32(sp)
1000dfac:	dc000715 	stw	r16,28(sp)
1000dfb0:	2c400417 	ldw	r17,16(r5)
1000dfb4:	34000417 	ldw	r16,16(r6)
1000dfb8:	dd800d15 	stw	r22,52(sp)
1000dfbc:	dc800915 	stw	r18,36(sp)
1000dfc0:	dfc01015 	stw	ra,64(sp)
1000dfc4:	df000f15 	stw	fp,60(sp)
1000dfc8:	ddc00e15 	stw	r23,56(sp)
1000dfcc:	dd400c15 	stw	r21,48(sp)
1000dfd0:	dd000b15 	stw	r20,44(sp)
1000dfd4:	dcc00a15 	stw	r19,40(sp)
1000dfd8:	2825883a 	mov	r18,r5
1000dfdc:	302d883a 	mov	r22,r6
1000dfe0:	8c009116 	blt	r17,r16,1000e228 <__multiply+0x284>
1000dfe4:	8005883a 	mov	r2,r16
1000dfe8:	8821883a 	mov	r16,r17
1000dfec:	1023883a 	mov	r17,r2
1000dff0:	90800217 	ldw	r2,8(r18)
1000dff4:	8447883a 	add	r3,r16,r17
1000dff8:	d8c00215 	stw	r3,8(sp)
1000dffc:	91400117 	ldw	r5,4(r18)
1000e000:	10c0010e 	bge	r2,r3,1000e008 <__multiply+0x64>
1000e004:	29400044 	addi	r5,r5,1
1000e008:	000db400 	call	1000db40 <_Balloc>
1000e00c:	d8c00217 	ldw	r3,8(sp)
1000e010:	d8800615 	stw	r2,24(sp)
1000e014:	18eb883a 	add	r21,r3,r3
1000e018:	ad6b883a 	add	r21,r21,r21
1000e01c:	10c00504 	addi	r3,r2,20
1000e020:	1d6b883a 	add	r21,r3,r21
1000e024:	d8c00115 	stw	r3,4(sp)
1000e028:	dd400315 	stw	r21,12(sp)
1000e02c:	1805883a 	mov	r2,r3
1000e030:	1d40042e 	bgeu	r3,r21,1000e044 <__multiply+0xa0>
1000e034:	d8c00317 	ldw	r3,12(sp)
1000e038:	10000015 	stw	zero,0(r2)
1000e03c:	10800104 	addi	r2,r2,4
1000e040:	10fffc36 	bltu	r2,r3,1000e034 <__alt_data_end+0xf800e034>
1000e044:	8c63883a 	add	r17,r17,r17
1000e048:	b5800504 	addi	r22,r22,20
1000e04c:	8c63883a 	add	r17,r17,r17
1000e050:	94800504 	addi	r18,r18,20
1000e054:	8421883a 	add	r16,r16,r16
1000e058:	b463883a 	add	r17,r22,r17
1000e05c:	8421883a 	add	r16,r16,r16
1000e060:	dd800015 	stw	r22,0(sp)
1000e064:	dc800415 	stw	r18,16(sp)
1000e068:	dc400515 	stw	r17,20(sp)
1000e06c:	9429883a 	add	r20,r18,r16
1000e070:	b4404f2e 	bgeu	r22,r17,1000e1b0 <__multiply+0x20c>
1000e074:	d8c00017 	ldw	r3,0(sp)
1000e078:	1c800017 	ldw	r18,0(r3)
1000e07c:	943fffcc 	andi	r16,r18,65535
1000e080:	80001e26 	beq	r16,zero,1000e0fc <__multiply+0x158>
1000e084:	dd800117 	ldw	r22,4(sp)
1000e088:	dd400417 	ldw	r21,16(sp)
1000e08c:	0025883a 	mov	r18,zero
1000e090:	adc00017 	ldw	r23,0(r21)
1000e094:	b4c00017 	ldw	r19,0(r22)
1000e098:	800b883a 	mov	r5,r16
1000e09c:	b93fffcc 	andi	r4,r23,65535
1000e0a0:	00057300 	call	10005730 <__mulsi3>
1000e0a4:	9c7fffcc 	andi	r17,r19,65535
1000e0a8:	8885883a 	add	r2,r17,r2
1000e0ac:	b808d43a 	srli	r4,r23,16
1000e0b0:	14a3883a 	add	r17,r2,r18
1000e0b4:	9826d43a 	srli	r19,r19,16
1000e0b8:	8824d43a 	srli	r18,r17,16
1000e0bc:	800b883a 	mov	r5,r16
1000e0c0:	00057300 	call	10005730 <__mulsi3>
1000e0c4:	9885883a 	add	r2,r19,r2
1000e0c8:	14a7883a 	add	r19,r2,r18
1000e0cc:	88ffffcc 	andi	r3,r17,65535
1000e0d0:	9822943a 	slli	r17,r19,16
1000e0d4:	ad400104 	addi	r21,r21,4
1000e0d8:	b005883a 	mov	r2,r22
1000e0dc:	88c6b03a 	or	r3,r17,r3
1000e0e0:	b0c00015 	stw	r3,0(r22)
1000e0e4:	9824d43a 	srli	r18,r19,16
1000e0e8:	b5800104 	addi	r22,r22,4
1000e0ec:	ad3fe836 	bltu	r21,r20,1000e090 <__alt_data_end+0xf800e090>
1000e0f0:	d8c00017 	ldw	r3,0(sp)
1000e0f4:	14800115 	stw	r18,4(r2)
1000e0f8:	1c800017 	ldw	r18,0(r3)
1000e0fc:	9024d43a 	srli	r18,r18,16
1000e100:	90002226 	beq	r18,zero,1000e18c <__multiply+0x1e8>
1000e104:	d8c00117 	ldw	r3,4(sp)
1000e108:	dd800417 	ldw	r22,16(sp)
1000e10c:	002f883a 	mov	r23,zero
1000e110:	1f000017 	ldw	fp,0(r3)
1000e114:	1823883a 	mov	r17,r3
1000e118:	182b883a 	mov	r21,r3
1000e11c:	e021883a 	mov	r16,fp
1000e120:	00000106 	br	1000e128 <__multiply+0x184>
1000e124:	982b883a 	mov	r21,r19
1000e128:	b100000b 	ldhu	r4,0(r22)
1000e12c:	8020d43a 	srli	r16,r16,16
1000e130:	900b883a 	mov	r5,r18
1000e134:	00057300 	call	10005730 <__mulsi3>
1000e138:	1405883a 	add	r2,r2,r16
1000e13c:	15ef883a 	add	r23,r2,r23
1000e140:	b804943a 	slli	r2,r23,16
1000e144:	e0ffffcc 	andi	r3,fp,65535
1000e148:	8c400104 	addi	r17,r17,4
1000e14c:	10c6b03a 	or	r3,r2,r3
1000e150:	88ffff15 	stw	r3,-4(r17)
1000e154:	b5800104 	addi	r22,r22,4
1000e158:	b13fff17 	ldw	r4,-4(r22)
1000e15c:	acc00104 	addi	r19,r21,4
1000e160:	900b883a 	mov	r5,r18
1000e164:	2008d43a 	srli	r4,r4,16
1000e168:	9c000017 	ldw	r16,0(r19)
1000e16c:	00057300 	call	10005730 <__mulsi3>
1000e170:	b806d43a 	srli	r3,r23,16
1000e174:	813fffcc 	andi	r4,r16,65535
1000e178:	1105883a 	add	r2,r2,r4
1000e17c:	10f9883a 	add	fp,r2,r3
1000e180:	e02ed43a 	srli	r23,fp,16
1000e184:	b53fe736 	bltu	r22,r20,1000e124 <__alt_data_end+0xf800e124>
1000e188:	af000115 	stw	fp,4(r21)
1000e18c:	d8c00017 	ldw	r3,0(sp)
1000e190:	d9000517 	ldw	r4,20(sp)
1000e194:	18c00104 	addi	r3,r3,4
1000e198:	d8c00015 	stw	r3,0(sp)
1000e19c:	d8c00117 	ldw	r3,4(sp)
1000e1a0:	18c00104 	addi	r3,r3,4
1000e1a4:	d8c00115 	stw	r3,4(sp)
1000e1a8:	d8c00017 	ldw	r3,0(sp)
1000e1ac:	193fb136 	bltu	r3,r4,1000e074 <__alt_data_end+0xf800e074>
1000e1b0:	d8c00217 	ldw	r3,8(sp)
1000e1b4:	00c00c0e 	bge	zero,r3,1000e1e8 <__multiply+0x244>
1000e1b8:	d8c00317 	ldw	r3,12(sp)
1000e1bc:	18bfff17 	ldw	r2,-4(r3)
1000e1c0:	1d7fff04 	addi	r21,r3,-4
1000e1c4:	10000326 	beq	r2,zero,1000e1d4 <__multiply+0x230>
1000e1c8:	00000706 	br	1000e1e8 <__multiply+0x244>
1000e1cc:	a8800017 	ldw	r2,0(r21)
1000e1d0:	1000051e 	bne	r2,zero,1000e1e8 <__multiply+0x244>
1000e1d4:	d8c00217 	ldw	r3,8(sp)
1000e1d8:	ad7fff04 	addi	r21,r21,-4
1000e1dc:	18ffffc4 	addi	r3,r3,-1
1000e1e0:	d8c00215 	stw	r3,8(sp)
1000e1e4:	183ff91e 	bne	r3,zero,1000e1cc <__alt_data_end+0xf800e1cc>
1000e1e8:	d8c00617 	ldw	r3,24(sp)
1000e1ec:	d9000217 	ldw	r4,8(sp)
1000e1f0:	1805883a 	mov	r2,r3
1000e1f4:	19000415 	stw	r4,16(r3)
1000e1f8:	dfc01017 	ldw	ra,64(sp)
1000e1fc:	df000f17 	ldw	fp,60(sp)
1000e200:	ddc00e17 	ldw	r23,56(sp)
1000e204:	dd800d17 	ldw	r22,52(sp)
1000e208:	dd400c17 	ldw	r21,48(sp)
1000e20c:	dd000b17 	ldw	r20,44(sp)
1000e210:	dcc00a17 	ldw	r19,40(sp)
1000e214:	dc800917 	ldw	r18,36(sp)
1000e218:	dc400817 	ldw	r17,32(sp)
1000e21c:	dc000717 	ldw	r16,28(sp)
1000e220:	dec01104 	addi	sp,sp,68
1000e224:	f800283a 	ret
1000e228:	3025883a 	mov	r18,r6
1000e22c:	282d883a 	mov	r22,r5
1000e230:	003f6f06 	br	1000dff0 <__alt_data_end+0xf800dff0>

1000e234 <__pow5mult>:
1000e234:	defffa04 	addi	sp,sp,-24
1000e238:	dcc00315 	stw	r19,12(sp)
1000e23c:	dc800215 	stw	r18,8(sp)
1000e240:	dc000015 	stw	r16,0(sp)
1000e244:	dfc00515 	stw	ra,20(sp)
1000e248:	dd000415 	stw	r20,16(sp)
1000e24c:	dc400115 	stw	r17,4(sp)
1000e250:	308000cc 	andi	r2,r6,3
1000e254:	3021883a 	mov	r16,r6
1000e258:	2027883a 	mov	r19,r4
1000e25c:	2825883a 	mov	r18,r5
1000e260:	10002e1e 	bne	r2,zero,1000e31c <__pow5mult+0xe8>
1000e264:	8021d0ba 	srai	r16,r16,2
1000e268:	80001a26 	beq	r16,zero,1000e2d4 <__pow5mult+0xa0>
1000e26c:	9c401217 	ldw	r17,72(r19)
1000e270:	8800061e 	bne	r17,zero,1000e28c <__pow5mult+0x58>
1000e274:	00003406 	br	1000e348 <__pow5mult+0x114>
1000e278:	8021d07a 	srai	r16,r16,1
1000e27c:	80001526 	beq	r16,zero,1000e2d4 <__pow5mult+0xa0>
1000e280:	88800017 	ldw	r2,0(r17)
1000e284:	10001c26 	beq	r2,zero,1000e2f8 <__pow5mult+0xc4>
1000e288:	1023883a 	mov	r17,r2
1000e28c:	80c0004c 	andi	r3,r16,1
1000e290:	183ff926 	beq	r3,zero,1000e278 <__alt_data_end+0xf800e278>
1000e294:	900b883a 	mov	r5,r18
1000e298:	880d883a 	mov	r6,r17
1000e29c:	9809883a 	mov	r4,r19
1000e2a0:	000dfa40 	call	1000dfa4 <__multiply>
1000e2a4:	90001b26 	beq	r18,zero,1000e314 <__pow5mult+0xe0>
1000e2a8:	91c00117 	ldw	r7,4(r18)
1000e2ac:	98c01317 	ldw	r3,76(r19)
1000e2b0:	8021d07a 	srai	r16,r16,1
1000e2b4:	39cf883a 	add	r7,r7,r7
1000e2b8:	39cf883a 	add	r7,r7,r7
1000e2bc:	19c7883a 	add	r3,r3,r7
1000e2c0:	19000017 	ldw	r4,0(r3)
1000e2c4:	91000015 	stw	r4,0(r18)
1000e2c8:	1c800015 	stw	r18,0(r3)
1000e2cc:	1025883a 	mov	r18,r2
1000e2d0:	803feb1e 	bne	r16,zero,1000e280 <__alt_data_end+0xf800e280>
1000e2d4:	9005883a 	mov	r2,r18
1000e2d8:	dfc00517 	ldw	ra,20(sp)
1000e2dc:	dd000417 	ldw	r20,16(sp)
1000e2e0:	dcc00317 	ldw	r19,12(sp)
1000e2e4:	dc800217 	ldw	r18,8(sp)
1000e2e8:	dc400117 	ldw	r17,4(sp)
1000e2ec:	dc000017 	ldw	r16,0(sp)
1000e2f0:	dec00604 	addi	sp,sp,24
1000e2f4:	f800283a 	ret
1000e2f8:	9809883a 	mov	r4,r19
1000e2fc:	880b883a 	mov	r5,r17
1000e300:	880d883a 	mov	r6,r17
1000e304:	000dfa40 	call	1000dfa4 <__multiply>
1000e308:	88800015 	stw	r2,0(r17)
1000e30c:	10000015 	stw	zero,0(r2)
1000e310:	003fdd06 	br	1000e288 <__alt_data_end+0xf800e288>
1000e314:	1025883a 	mov	r18,r2
1000e318:	003fd706 	br	1000e278 <__alt_data_end+0xf800e278>
1000e31c:	10bfffc4 	addi	r2,r2,-1
1000e320:	1085883a 	add	r2,r2,r2
1000e324:	00c40074 	movhi	r3,4097
1000e328:	18d4fb04 	addi	r3,r3,21484
1000e32c:	1085883a 	add	r2,r2,r2
1000e330:	1885883a 	add	r2,r3,r2
1000e334:	11800017 	ldw	r6,0(r2)
1000e338:	000f883a 	mov	r7,zero
1000e33c:	000dc100 	call	1000dc10 <__multadd>
1000e340:	1025883a 	mov	r18,r2
1000e344:	003fc706 	br	1000e264 <__alt_data_end+0xf800e264>
1000e348:	05000044 	movi	r20,1
1000e34c:	9809883a 	mov	r4,r19
1000e350:	a00b883a 	mov	r5,r20
1000e354:	000db400 	call	1000db40 <_Balloc>
1000e358:	1023883a 	mov	r17,r2
1000e35c:	00809c44 	movi	r2,625
1000e360:	88800515 	stw	r2,20(r17)
1000e364:	8d000415 	stw	r20,16(r17)
1000e368:	9c401215 	stw	r17,72(r19)
1000e36c:	88000015 	stw	zero,0(r17)
1000e370:	003fc606 	br	1000e28c <__alt_data_end+0xf800e28c>

1000e374 <__lshift>:
1000e374:	defff904 	addi	sp,sp,-28
1000e378:	dd000415 	stw	r20,16(sp)
1000e37c:	dcc00315 	stw	r19,12(sp)
1000e380:	3029d17a 	srai	r20,r6,5
1000e384:	2cc00417 	ldw	r19,16(r5)
1000e388:	28800217 	ldw	r2,8(r5)
1000e38c:	dd400515 	stw	r21,20(sp)
1000e390:	a4e7883a 	add	r19,r20,r19
1000e394:	dc800215 	stw	r18,8(sp)
1000e398:	dc400115 	stw	r17,4(sp)
1000e39c:	dc000015 	stw	r16,0(sp)
1000e3a0:	dfc00615 	stw	ra,24(sp)
1000e3a4:	9c000044 	addi	r16,r19,1
1000e3a8:	2823883a 	mov	r17,r5
1000e3ac:	302b883a 	mov	r21,r6
1000e3b0:	2025883a 	mov	r18,r4
1000e3b4:	29400117 	ldw	r5,4(r5)
1000e3b8:	1400030e 	bge	r2,r16,1000e3c8 <__lshift+0x54>
1000e3bc:	1085883a 	add	r2,r2,r2
1000e3c0:	29400044 	addi	r5,r5,1
1000e3c4:	143ffd16 	blt	r2,r16,1000e3bc <__alt_data_end+0xf800e3bc>
1000e3c8:	9009883a 	mov	r4,r18
1000e3cc:	000db400 	call	1000db40 <_Balloc>
1000e3d0:	11c00504 	addi	r7,r2,20
1000e3d4:	0500090e 	bge	zero,r20,1000e3fc <__lshift+0x88>
1000e3d8:	3811883a 	mov	r8,r7
1000e3dc:	0007883a 	mov	r3,zero
1000e3e0:	40000015 	stw	zero,0(r8)
1000e3e4:	18c00044 	addi	r3,r3,1
1000e3e8:	42000104 	addi	r8,r8,4
1000e3ec:	1d3ffc1e 	bne	r3,r20,1000e3e0 <__alt_data_end+0xf800e3e0>
1000e3f0:	18c7883a 	add	r3,r3,r3
1000e3f4:	18c7883a 	add	r3,r3,r3
1000e3f8:	38cf883a 	add	r7,r7,r3
1000e3fc:	89000417 	ldw	r4,16(r17)
1000e400:	88c00504 	addi	r3,r17,20
1000e404:	a98007cc 	andi	r6,r21,31
1000e408:	2109883a 	add	r4,r4,r4
1000e40c:	2109883a 	add	r4,r4,r4
1000e410:	1909883a 	add	r4,r3,r4
1000e414:	30002326 	beq	r6,zero,1000e4a4 <__lshift+0x130>
1000e418:	01400804 	movi	r5,32
1000e41c:	298bc83a 	sub	r5,r5,r6
1000e420:	0013883a 	mov	r9,zero
1000e424:	1a000017 	ldw	r8,0(r3)
1000e428:	3815883a 	mov	r10,r7
1000e42c:	39c00104 	addi	r7,r7,4
1000e430:	4190983a 	sll	r8,r8,r6
1000e434:	18c00104 	addi	r3,r3,4
1000e438:	4a10b03a 	or	r8,r9,r8
1000e43c:	3a3fff15 	stw	r8,-4(r7)
1000e440:	1a3fff17 	ldw	r8,-4(r3)
1000e444:	4152d83a 	srl	r9,r8,r5
1000e448:	193ff636 	bltu	r3,r4,1000e424 <__alt_data_end+0xf800e424>
1000e44c:	52400115 	stw	r9,4(r10)
1000e450:	48000126 	beq	r9,zero,1000e458 <__lshift+0xe4>
1000e454:	9c000084 	addi	r16,r19,2
1000e458:	89000117 	ldw	r4,4(r17)
1000e45c:	90c01317 	ldw	r3,76(r18)
1000e460:	843fffc4 	addi	r16,r16,-1
1000e464:	2109883a 	add	r4,r4,r4
1000e468:	2109883a 	add	r4,r4,r4
1000e46c:	1907883a 	add	r3,r3,r4
1000e470:	19000017 	ldw	r4,0(r3)
1000e474:	14000415 	stw	r16,16(r2)
1000e478:	89000015 	stw	r4,0(r17)
1000e47c:	1c400015 	stw	r17,0(r3)
1000e480:	dfc00617 	ldw	ra,24(sp)
1000e484:	dd400517 	ldw	r21,20(sp)
1000e488:	dd000417 	ldw	r20,16(sp)
1000e48c:	dcc00317 	ldw	r19,12(sp)
1000e490:	dc800217 	ldw	r18,8(sp)
1000e494:	dc400117 	ldw	r17,4(sp)
1000e498:	dc000017 	ldw	r16,0(sp)
1000e49c:	dec00704 	addi	sp,sp,28
1000e4a0:	f800283a 	ret
1000e4a4:	19400017 	ldw	r5,0(r3)
1000e4a8:	39c00104 	addi	r7,r7,4
1000e4ac:	18c00104 	addi	r3,r3,4
1000e4b0:	397fff15 	stw	r5,-4(r7)
1000e4b4:	193ffb36 	bltu	r3,r4,1000e4a4 <__alt_data_end+0xf800e4a4>
1000e4b8:	003fe706 	br	1000e458 <__alt_data_end+0xf800e458>

1000e4bc <__mcmp>:
1000e4bc:	20800417 	ldw	r2,16(r4)
1000e4c0:	28c00417 	ldw	r3,16(r5)
1000e4c4:	10c5c83a 	sub	r2,r2,r3
1000e4c8:	1000111e 	bne	r2,zero,1000e510 <__mcmp+0x54>
1000e4cc:	18c7883a 	add	r3,r3,r3
1000e4d0:	18c7883a 	add	r3,r3,r3
1000e4d4:	21000504 	addi	r4,r4,20
1000e4d8:	29400504 	addi	r5,r5,20
1000e4dc:	20c5883a 	add	r2,r4,r3
1000e4e0:	28cb883a 	add	r5,r5,r3
1000e4e4:	00000106 	br	1000e4ec <__mcmp+0x30>
1000e4e8:	20800a2e 	bgeu	r4,r2,1000e514 <__mcmp+0x58>
1000e4ec:	10bfff04 	addi	r2,r2,-4
1000e4f0:	297fff04 	addi	r5,r5,-4
1000e4f4:	11800017 	ldw	r6,0(r2)
1000e4f8:	28c00017 	ldw	r3,0(r5)
1000e4fc:	30fffa26 	beq	r6,r3,1000e4e8 <__alt_data_end+0xf800e4e8>
1000e500:	30c00236 	bltu	r6,r3,1000e50c <__mcmp+0x50>
1000e504:	00800044 	movi	r2,1
1000e508:	f800283a 	ret
1000e50c:	00bfffc4 	movi	r2,-1
1000e510:	f800283a 	ret
1000e514:	0005883a 	mov	r2,zero
1000e518:	f800283a 	ret

1000e51c <__mdiff>:
1000e51c:	defffb04 	addi	sp,sp,-20
1000e520:	dc000015 	stw	r16,0(sp)
1000e524:	2821883a 	mov	r16,r5
1000e528:	dcc00315 	stw	r19,12(sp)
1000e52c:	300b883a 	mov	r5,r6
1000e530:	2027883a 	mov	r19,r4
1000e534:	8009883a 	mov	r4,r16
1000e538:	dc800215 	stw	r18,8(sp)
1000e53c:	dfc00415 	stw	ra,16(sp)
1000e540:	dc400115 	stw	r17,4(sp)
1000e544:	3025883a 	mov	r18,r6
1000e548:	000e4bc0 	call	1000e4bc <__mcmp>
1000e54c:	10005226 	beq	r2,zero,1000e698 <__mdiff+0x17c>
1000e550:	10004c16 	blt	r2,zero,1000e684 <__mdiff+0x168>
1000e554:	0023883a 	mov	r17,zero
1000e558:	81400117 	ldw	r5,4(r16)
1000e55c:	9809883a 	mov	r4,r19
1000e560:	000db400 	call	1000db40 <_Balloc>
1000e564:	83400417 	ldw	r13,16(r16)
1000e568:	93800417 	ldw	r14,16(r18)
1000e56c:	81000504 	addi	r4,r16,20
1000e570:	6b59883a 	add	r12,r13,r13
1000e574:	739d883a 	add	r14,r14,r14
1000e578:	6319883a 	add	r12,r12,r12
1000e57c:	91800504 	addi	r6,r18,20
1000e580:	739d883a 	add	r14,r14,r14
1000e584:	14400315 	stw	r17,12(r2)
1000e588:	2319883a 	add	r12,r4,r12
1000e58c:	339d883a 	add	r14,r6,r14
1000e590:	12400504 	addi	r9,r2,20
1000e594:	0007883a 	mov	r3,zero
1000e598:	22000017 	ldw	r8,0(r4)
1000e59c:	32800017 	ldw	r10,0(r6)
1000e5a0:	4ac00104 	addi	r11,r9,4
1000e5a4:	41ffffcc 	andi	r7,r8,65535
1000e5a8:	38c7883a 	add	r3,r7,r3
1000e5ac:	51ffffcc 	andi	r7,r10,65535
1000e5b0:	19cfc83a 	sub	r7,r3,r7
1000e5b4:	4010d43a 	srli	r8,r8,16
1000e5b8:	5014d43a 	srli	r10,r10,16
1000e5bc:	3807d43a 	srai	r3,r7,16
1000e5c0:	39ffffcc 	andi	r7,r7,65535
1000e5c4:	4291c83a 	sub	r8,r8,r10
1000e5c8:	40c7883a 	add	r3,r8,r3
1000e5cc:	1810943a 	slli	r8,r3,16
1000e5d0:	31800104 	addi	r6,r6,4
1000e5d4:	21000104 	addi	r4,r4,4
1000e5d8:	41ceb03a 	or	r7,r8,r7
1000e5dc:	49c00015 	stw	r7,0(r9)
1000e5e0:	1807d43a 	srai	r3,r3,16
1000e5e4:	580b883a 	mov	r5,r11
1000e5e8:	5813883a 	mov	r9,r11
1000e5ec:	33bfea36 	bltu	r6,r14,1000e598 <__alt_data_end+0xf800e598>
1000e5f0:	2011883a 	mov	r8,r4
1000e5f4:	2300152e 	bgeu	r4,r12,1000e64c <__mdiff+0x130>
1000e5f8:	21400017 	ldw	r5,0(r4)
1000e5fc:	4a400104 	addi	r9,r9,4
1000e600:	21000104 	addi	r4,r4,4
1000e604:	29ffffcc 	andi	r7,r5,65535
1000e608:	38c7883a 	add	r3,r7,r3
1000e60c:	280ad43a 	srli	r5,r5,16
1000e610:	180dd43a 	srai	r6,r3,16
1000e614:	19ffffcc 	andi	r7,r3,65535
1000e618:	3147883a 	add	r3,r6,r5
1000e61c:	180a943a 	slli	r5,r3,16
1000e620:	1807d43a 	srai	r3,r3,16
1000e624:	29ceb03a 	or	r7,r5,r7
1000e628:	49ffff15 	stw	r7,-4(r9)
1000e62c:	233ff236 	bltu	r4,r12,1000e5f8 <__alt_data_end+0xf800e5f8>
1000e630:	0206303a 	nor	r3,zero,r8
1000e634:	1b07883a 	add	r3,r3,r12
1000e638:	1806d0ba 	srli	r3,r3,2
1000e63c:	18c00044 	addi	r3,r3,1
1000e640:	18c7883a 	add	r3,r3,r3
1000e644:	18c7883a 	add	r3,r3,r3
1000e648:	58cb883a 	add	r5,r11,r3
1000e64c:	28ffff04 	addi	r3,r5,-4
1000e650:	3800041e 	bne	r7,zero,1000e664 <__mdiff+0x148>
1000e654:	18ffff04 	addi	r3,r3,-4
1000e658:	19000017 	ldw	r4,0(r3)
1000e65c:	6b7fffc4 	addi	r13,r13,-1
1000e660:	203ffc26 	beq	r4,zero,1000e654 <__alt_data_end+0xf800e654>
1000e664:	13400415 	stw	r13,16(r2)
1000e668:	dfc00417 	ldw	ra,16(sp)
1000e66c:	dcc00317 	ldw	r19,12(sp)
1000e670:	dc800217 	ldw	r18,8(sp)
1000e674:	dc400117 	ldw	r17,4(sp)
1000e678:	dc000017 	ldw	r16,0(sp)
1000e67c:	dec00504 	addi	sp,sp,20
1000e680:	f800283a 	ret
1000e684:	8005883a 	mov	r2,r16
1000e688:	04400044 	movi	r17,1
1000e68c:	9021883a 	mov	r16,r18
1000e690:	1025883a 	mov	r18,r2
1000e694:	003fb006 	br	1000e558 <__alt_data_end+0xf800e558>
1000e698:	9809883a 	mov	r4,r19
1000e69c:	000b883a 	mov	r5,zero
1000e6a0:	000db400 	call	1000db40 <_Balloc>
1000e6a4:	00c00044 	movi	r3,1
1000e6a8:	10c00415 	stw	r3,16(r2)
1000e6ac:	10000515 	stw	zero,20(r2)
1000e6b0:	003fed06 	br	1000e668 <__alt_data_end+0xf800e668>

1000e6b4 <__ulp>:
1000e6b4:	295ffc2c 	andhi	r5,r5,32752
1000e6b8:	00bf3034 	movhi	r2,64704
1000e6bc:	2887883a 	add	r3,r5,r2
1000e6c0:	00c0020e 	bge	zero,r3,1000e6cc <__ulp+0x18>
1000e6c4:	0005883a 	mov	r2,zero
1000e6c8:	f800283a 	ret
1000e6cc:	00c7c83a 	sub	r3,zero,r3
1000e6d0:	180bd53a 	srai	r5,r3,20
1000e6d4:	008004c4 	movi	r2,19
1000e6d8:	11400a0e 	bge	r2,r5,1000e704 <__ulp+0x50>
1000e6dc:	00800c84 	movi	r2,50
1000e6e0:	0007883a 	mov	r3,zero
1000e6e4:	11400516 	blt	r2,r5,1000e6fc <__ulp+0x48>
1000e6e8:	00800cc4 	movi	r2,51
1000e6ec:	114bc83a 	sub	r5,r2,r5
1000e6f0:	00800044 	movi	r2,1
1000e6f4:	1144983a 	sll	r2,r2,r5
1000e6f8:	f800283a 	ret
1000e6fc:	00800044 	movi	r2,1
1000e700:	f800283a 	ret
1000e704:	00800234 	movhi	r2,8
1000e708:	1147d83a 	sra	r3,r2,r5
1000e70c:	0005883a 	mov	r2,zero
1000e710:	f800283a 	ret

1000e714 <__b2d>:
1000e714:	defffa04 	addi	sp,sp,-24
1000e718:	dc000015 	stw	r16,0(sp)
1000e71c:	24000417 	ldw	r16,16(r4)
1000e720:	dc400115 	stw	r17,4(sp)
1000e724:	24400504 	addi	r17,r4,20
1000e728:	8421883a 	add	r16,r16,r16
1000e72c:	8421883a 	add	r16,r16,r16
1000e730:	8c21883a 	add	r16,r17,r16
1000e734:	dc800215 	stw	r18,8(sp)
1000e738:	84bfff17 	ldw	r18,-4(r16)
1000e73c:	dd000415 	stw	r20,16(sp)
1000e740:	dcc00315 	stw	r19,12(sp)
1000e744:	9009883a 	mov	r4,r18
1000e748:	2829883a 	mov	r20,r5
1000e74c:	dfc00515 	stw	ra,20(sp)
1000e750:	000de500 	call	1000de50 <__hi0bits>
1000e754:	00c00804 	movi	r3,32
1000e758:	1887c83a 	sub	r3,r3,r2
1000e75c:	a0c00015 	stw	r3,0(r20)
1000e760:	00c00284 	movi	r3,10
1000e764:	84ffff04 	addi	r19,r16,-4
1000e768:	18801216 	blt	r3,r2,1000e7b4 <__b2d+0xa0>
1000e76c:	014002c4 	movi	r5,11
1000e770:	2889c83a 	sub	r4,r5,r2
1000e774:	9106d83a 	srl	r3,r18,r4
1000e778:	18cffc34 	orhi	r3,r3,16368
1000e77c:	8cc0282e 	bgeu	r17,r19,1000e820 <__b2d+0x10c>
1000e780:	817ffe17 	ldw	r5,-8(r16)
1000e784:	290ad83a 	srl	r5,r5,r4
1000e788:	10800544 	addi	r2,r2,21
1000e78c:	9084983a 	sll	r2,r18,r2
1000e790:	2884b03a 	or	r2,r5,r2
1000e794:	dfc00517 	ldw	ra,20(sp)
1000e798:	dd000417 	ldw	r20,16(sp)
1000e79c:	dcc00317 	ldw	r19,12(sp)
1000e7a0:	dc800217 	ldw	r18,8(sp)
1000e7a4:	dc400117 	ldw	r17,4(sp)
1000e7a8:	dc000017 	ldw	r16,0(sp)
1000e7ac:	dec00604 	addi	sp,sp,24
1000e7b0:	f800283a 	ret
1000e7b4:	113ffd44 	addi	r4,r2,-11
1000e7b8:	8cc00f2e 	bgeu	r17,r19,1000e7f8 <__b2d+0xe4>
1000e7bc:	81bffe04 	addi	r6,r16,-8
1000e7c0:	817ffe17 	ldw	r5,-8(r16)
1000e7c4:	20001326 	beq	r4,zero,1000e814 <__b2d+0x100>
1000e7c8:	00c00ac4 	movi	r3,43
1000e7cc:	1885c83a 	sub	r2,r3,r2
1000e7d0:	2886d83a 	srl	r3,r5,r2
1000e7d4:	9124983a 	sll	r18,r18,r4
1000e7d8:	90e4b03a 	or	r18,r18,r3
1000e7dc:	90cffc34 	orhi	r3,r18,16368
1000e7e0:	8980112e 	bgeu	r17,r6,1000e828 <__b2d+0x114>
1000e7e4:	81bffd17 	ldw	r6,-12(r16)
1000e7e8:	308cd83a 	srl	r6,r6,r2
1000e7ec:	2904983a 	sll	r2,r5,r4
1000e7f0:	1184b03a 	or	r2,r2,r6
1000e7f4:	003fe706 	br	1000e794 <__alt_data_end+0xf800e794>
1000e7f8:	20000526 	beq	r4,zero,1000e810 <__b2d+0xfc>
1000e7fc:	9124983a 	sll	r18,r18,r4
1000e800:	000d883a 	mov	r6,zero
1000e804:	000b883a 	mov	r5,zero
1000e808:	90cffc34 	orhi	r3,r18,16368
1000e80c:	003ff706 	br	1000e7ec <__alt_data_end+0xf800e7ec>
1000e810:	000b883a 	mov	r5,zero
1000e814:	90cffc34 	orhi	r3,r18,16368
1000e818:	2805883a 	mov	r2,r5
1000e81c:	003fdd06 	br	1000e794 <__alt_data_end+0xf800e794>
1000e820:	000b883a 	mov	r5,zero
1000e824:	003fd806 	br	1000e788 <__alt_data_end+0xf800e788>
1000e828:	000d883a 	mov	r6,zero
1000e82c:	003fef06 	br	1000e7ec <__alt_data_end+0xf800e7ec>

1000e830 <__d2b>:
1000e830:	defff704 	addi	sp,sp,-36
1000e834:	dc000215 	stw	r16,8(sp)
1000e838:	3021883a 	mov	r16,r6
1000e83c:	dc400315 	stw	r17,12(sp)
1000e840:	8022907a 	slli	r17,r16,1
1000e844:	dd400715 	stw	r21,28(sp)
1000e848:	282b883a 	mov	r21,r5
1000e84c:	01400044 	movi	r5,1
1000e850:	dd000615 	stw	r20,24(sp)
1000e854:	dcc00515 	stw	r19,20(sp)
1000e858:	dc800415 	stw	r18,16(sp)
1000e85c:	dfc00815 	stw	ra,32(sp)
1000e860:	3829883a 	mov	r20,r7
1000e864:	dc800917 	ldw	r18,36(sp)
1000e868:	8822d57a 	srli	r17,r17,21
1000e86c:	000db400 	call	1000db40 <_Balloc>
1000e870:	1027883a 	mov	r19,r2
1000e874:	00800434 	movhi	r2,16
1000e878:	10bfffc4 	addi	r2,r2,-1
1000e87c:	808c703a 	and	r6,r16,r2
1000e880:	88000126 	beq	r17,zero,1000e888 <__d2b+0x58>
1000e884:	31800434 	orhi	r6,r6,16
1000e888:	d9800015 	stw	r6,0(sp)
1000e88c:	a8001f26 	beq	r21,zero,1000e90c <__d2b+0xdc>
1000e890:	d9000104 	addi	r4,sp,4
1000e894:	dd400115 	stw	r21,4(sp)
1000e898:	000deb80 	call	1000deb8 <__lo0bits>
1000e89c:	d8c00017 	ldw	r3,0(sp)
1000e8a0:	1000291e 	bne	r2,zero,1000e948 <__d2b+0x118>
1000e8a4:	d9000117 	ldw	r4,4(sp)
1000e8a8:	99000515 	stw	r4,20(r19)
1000e8ac:	1820c03a 	cmpne	r16,r3,zero
1000e8b0:	84000044 	addi	r16,r16,1
1000e8b4:	98c00615 	stw	r3,24(r19)
1000e8b8:	9c000415 	stw	r16,16(r19)
1000e8bc:	88001b1e 	bne	r17,zero,1000e92c <__d2b+0xfc>
1000e8c0:	800690ba 	slli	r3,r16,2
1000e8c4:	10bef384 	addi	r2,r2,-1074
1000e8c8:	a0800015 	stw	r2,0(r20)
1000e8cc:	98c5883a 	add	r2,r19,r3
1000e8d0:	11000417 	ldw	r4,16(r2)
1000e8d4:	8020917a 	slli	r16,r16,5
1000e8d8:	000de500 	call	1000de50 <__hi0bits>
1000e8dc:	8085c83a 	sub	r2,r16,r2
1000e8e0:	90800015 	stw	r2,0(r18)
1000e8e4:	9805883a 	mov	r2,r19
1000e8e8:	dfc00817 	ldw	ra,32(sp)
1000e8ec:	dd400717 	ldw	r21,28(sp)
1000e8f0:	dd000617 	ldw	r20,24(sp)
1000e8f4:	dcc00517 	ldw	r19,20(sp)
1000e8f8:	dc800417 	ldw	r18,16(sp)
1000e8fc:	dc400317 	ldw	r17,12(sp)
1000e900:	dc000217 	ldw	r16,8(sp)
1000e904:	dec00904 	addi	sp,sp,36
1000e908:	f800283a 	ret
1000e90c:	d809883a 	mov	r4,sp
1000e910:	000deb80 	call	1000deb8 <__lo0bits>
1000e914:	d8c00017 	ldw	r3,0(sp)
1000e918:	04000044 	movi	r16,1
1000e91c:	9c000415 	stw	r16,16(r19)
1000e920:	98c00515 	stw	r3,20(r19)
1000e924:	10800804 	addi	r2,r2,32
1000e928:	883fe526 	beq	r17,zero,1000e8c0 <__alt_data_end+0xf800e8c0>
1000e92c:	8c7ef344 	addi	r17,r17,-1075
1000e930:	88a3883a 	add	r17,r17,r2
1000e934:	00c00d44 	movi	r3,53
1000e938:	a4400015 	stw	r17,0(r20)
1000e93c:	1885c83a 	sub	r2,r3,r2
1000e940:	90800015 	stw	r2,0(r18)
1000e944:	003fe706 	br	1000e8e4 <__alt_data_end+0xf800e8e4>
1000e948:	01000804 	movi	r4,32
1000e94c:	2089c83a 	sub	r4,r4,r2
1000e950:	1908983a 	sll	r4,r3,r4
1000e954:	d9400117 	ldw	r5,4(sp)
1000e958:	1886d83a 	srl	r3,r3,r2
1000e95c:	2148b03a 	or	r4,r4,r5
1000e960:	99000515 	stw	r4,20(r19)
1000e964:	d8c00015 	stw	r3,0(sp)
1000e968:	003fd006 	br	1000e8ac <__alt_data_end+0xf800e8ac>

1000e96c <__ratio>:
1000e96c:	defff904 	addi	sp,sp,-28
1000e970:	dc400315 	stw	r17,12(sp)
1000e974:	2823883a 	mov	r17,r5
1000e978:	d9400104 	addi	r5,sp,4
1000e97c:	dfc00615 	stw	ra,24(sp)
1000e980:	dcc00515 	stw	r19,20(sp)
1000e984:	dc800415 	stw	r18,16(sp)
1000e988:	2027883a 	mov	r19,r4
1000e98c:	dc000215 	stw	r16,8(sp)
1000e990:	000e7140 	call	1000e714 <__b2d>
1000e994:	8809883a 	mov	r4,r17
1000e998:	d80b883a 	mov	r5,sp
1000e99c:	1025883a 	mov	r18,r2
1000e9a0:	1821883a 	mov	r16,r3
1000e9a4:	000e7140 	call	1000e714 <__b2d>
1000e9a8:	8a400417 	ldw	r9,16(r17)
1000e9ac:	9a000417 	ldw	r8,16(r19)
1000e9b0:	100d883a 	mov	r6,r2
1000e9b4:	d8800017 	ldw	r2,0(sp)
1000e9b8:	4251c83a 	sub	r8,r8,r9
1000e9bc:	4012917a 	slli	r9,r8,5
1000e9c0:	da000117 	ldw	r8,4(sp)
1000e9c4:	4091c83a 	sub	r8,r8,r2
1000e9c8:	4251883a 	add	r8,r8,r9
1000e9cc:	02000d0e 	bge	zero,r8,1000ea04 <__ratio+0x98>
1000e9d0:	4010953a 	slli	r8,r8,20
1000e9d4:	4421883a 	add	r16,r8,r16
1000e9d8:	9009883a 	mov	r4,r18
1000e9dc:	800b883a 	mov	r5,r16
1000e9e0:	180f883a 	mov	r7,r3
1000e9e4:	0005ff40 	call	10005ff4 <__divdf3>
1000e9e8:	dfc00617 	ldw	ra,24(sp)
1000e9ec:	dcc00517 	ldw	r19,20(sp)
1000e9f0:	dc800417 	ldw	r18,16(sp)
1000e9f4:	dc400317 	ldw	r17,12(sp)
1000e9f8:	dc000217 	ldw	r16,8(sp)
1000e9fc:	dec00704 	addi	sp,sp,28
1000ea00:	f800283a 	ret
1000ea04:	4010953a 	slli	r8,r8,20
1000ea08:	1a07c83a 	sub	r3,r3,r8
1000ea0c:	003ff206 	br	1000e9d8 <__alt_data_end+0xf800e9d8>

1000ea10 <_mprec_log10>:
1000ea10:	defffe04 	addi	sp,sp,-8
1000ea14:	dc000015 	stw	r16,0(sp)
1000ea18:	dfc00115 	stw	ra,4(sp)
1000ea1c:	008005c4 	movi	r2,23
1000ea20:	2021883a 	mov	r16,r4
1000ea24:	11000d0e 	bge	r2,r4,1000ea5c <_mprec_log10+0x4c>
1000ea28:	0005883a 	mov	r2,zero
1000ea2c:	00cffc34 	movhi	r3,16368
1000ea30:	843fffc4 	addi	r16,r16,-1
1000ea34:	1009883a 	mov	r4,r2
1000ea38:	180b883a 	mov	r5,r3
1000ea3c:	000d883a 	mov	r6,zero
1000ea40:	01d00934 	movhi	r7,16420
1000ea44:	0006bb80 	call	10006bb8 <__muldf3>
1000ea48:	803ff91e 	bne	r16,zero,1000ea30 <__alt_data_end+0xf800ea30>
1000ea4c:	dfc00117 	ldw	ra,4(sp)
1000ea50:	dc000017 	ldw	r16,0(sp)
1000ea54:	dec00204 	addi	sp,sp,8
1000ea58:	f800283a 	ret
1000ea5c:	202090fa 	slli	r16,r4,3
1000ea60:	00840074 	movhi	r2,4097
1000ea64:	10951204 	addi	r2,r2,21576
1000ea68:	1421883a 	add	r16,r2,r16
1000ea6c:	80800017 	ldw	r2,0(r16)
1000ea70:	80c00117 	ldw	r3,4(r16)
1000ea74:	dfc00117 	ldw	ra,4(sp)
1000ea78:	dc000017 	ldw	r16,0(sp)
1000ea7c:	dec00204 	addi	sp,sp,8
1000ea80:	f800283a 	ret

1000ea84 <__copybits>:
1000ea84:	297fffc4 	addi	r5,r5,-1
1000ea88:	280fd17a 	srai	r7,r5,5
1000ea8c:	30c00417 	ldw	r3,16(r6)
1000ea90:	30800504 	addi	r2,r6,20
1000ea94:	39c00044 	addi	r7,r7,1
1000ea98:	18c7883a 	add	r3,r3,r3
1000ea9c:	39cf883a 	add	r7,r7,r7
1000eaa0:	18c7883a 	add	r3,r3,r3
1000eaa4:	39cf883a 	add	r7,r7,r7
1000eaa8:	10c7883a 	add	r3,r2,r3
1000eaac:	21cf883a 	add	r7,r4,r7
1000eab0:	10c00d2e 	bgeu	r2,r3,1000eae8 <__copybits+0x64>
1000eab4:	200b883a 	mov	r5,r4
1000eab8:	12000017 	ldw	r8,0(r2)
1000eabc:	29400104 	addi	r5,r5,4
1000eac0:	10800104 	addi	r2,r2,4
1000eac4:	2a3fff15 	stw	r8,-4(r5)
1000eac8:	10fffb36 	bltu	r2,r3,1000eab8 <__alt_data_end+0xf800eab8>
1000eacc:	1985c83a 	sub	r2,r3,r6
1000ead0:	10bffac4 	addi	r2,r2,-21
1000ead4:	1004d0ba 	srli	r2,r2,2
1000ead8:	10800044 	addi	r2,r2,1
1000eadc:	1085883a 	add	r2,r2,r2
1000eae0:	1085883a 	add	r2,r2,r2
1000eae4:	2089883a 	add	r4,r4,r2
1000eae8:	21c0032e 	bgeu	r4,r7,1000eaf8 <__copybits+0x74>
1000eaec:	20000015 	stw	zero,0(r4)
1000eaf0:	21000104 	addi	r4,r4,4
1000eaf4:	21fffd36 	bltu	r4,r7,1000eaec <__alt_data_end+0xf800eaec>
1000eaf8:	f800283a 	ret

1000eafc <__any_on>:
1000eafc:	20c00417 	ldw	r3,16(r4)
1000eb00:	2805d17a 	srai	r2,r5,5
1000eb04:	21000504 	addi	r4,r4,20
1000eb08:	18800d0e 	bge	r3,r2,1000eb40 <__any_on+0x44>
1000eb0c:	18c7883a 	add	r3,r3,r3
1000eb10:	18c7883a 	add	r3,r3,r3
1000eb14:	20c7883a 	add	r3,r4,r3
1000eb18:	20c0192e 	bgeu	r4,r3,1000eb80 <__any_on+0x84>
1000eb1c:	18bfff17 	ldw	r2,-4(r3)
1000eb20:	18ffff04 	addi	r3,r3,-4
1000eb24:	1000041e 	bne	r2,zero,1000eb38 <__any_on+0x3c>
1000eb28:	20c0142e 	bgeu	r4,r3,1000eb7c <__any_on+0x80>
1000eb2c:	18ffff04 	addi	r3,r3,-4
1000eb30:	19400017 	ldw	r5,0(r3)
1000eb34:	283ffc26 	beq	r5,zero,1000eb28 <__alt_data_end+0xf800eb28>
1000eb38:	00800044 	movi	r2,1
1000eb3c:	f800283a 	ret
1000eb40:	10c00a0e 	bge	r2,r3,1000eb6c <__any_on+0x70>
1000eb44:	1085883a 	add	r2,r2,r2
1000eb48:	1085883a 	add	r2,r2,r2
1000eb4c:	294007cc 	andi	r5,r5,31
1000eb50:	2087883a 	add	r3,r4,r2
1000eb54:	283ff026 	beq	r5,zero,1000eb18 <__alt_data_end+0xf800eb18>
1000eb58:	19800017 	ldw	r6,0(r3)
1000eb5c:	3144d83a 	srl	r2,r6,r5
1000eb60:	114a983a 	sll	r5,r2,r5
1000eb64:	29bff41e 	bne	r5,r6,1000eb38 <__alt_data_end+0xf800eb38>
1000eb68:	003feb06 	br	1000eb18 <__alt_data_end+0xf800eb18>
1000eb6c:	1085883a 	add	r2,r2,r2
1000eb70:	1085883a 	add	r2,r2,r2
1000eb74:	2087883a 	add	r3,r4,r2
1000eb78:	003fe706 	br	1000eb18 <__alt_data_end+0xf800eb18>
1000eb7c:	f800283a 	ret
1000eb80:	0005883a 	mov	r2,zero
1000eb84:	f800283a 	ret

1000eb88 <_realloc_r>:
1000eb88:	defff604 	addi	sp,sp,-40
1000eb8c:	dcc00315 	stw	r19,12(sp)
1000eb90:	dc400115 	stw	r17,4(sp)
1000eb94:	dfc00915 	stw	ra,36(sp)
1000eb98:	df000815 	stw	fp,32(sp)
1000eb9c:	ddc00715 	stw	r23,28(sp)
1000eba0:	dd800615 	stw	r22,24(sp)
1000eba4:	dd400515 	stw	r21,20(sp)
1000eba8:	dd000415 	stw	r20,16(sp)
1000ebac:	dc800215 	stw	r18,8(sp)
1000ebb0:	dc000015 	stw	r16,0(sp)
1000ebb4:	2827883a 	mov	r19,r5
1000ebb8:	3023883a 	mov	r17,r6
1000ebbc:	2800bf26 	beq	r5,zero,1000eebc <_realloc_r+0x334>
1000ebc0:	2025883a 	mov	r18,r4
1000ebc4:	00124e40 	call	100124e4 <__malloc_lock>
1000ebc8:	98ffff17 	ldw	r3,-4(r19)
1000ebcc:	01bfff04 	movi	r6,-4
1000ebd0:	890002c4 	addi	r4,r17,11
1000ebd4:	01c00584 	movi	r7,22
1000ebd8:	9d7ffe04 	addi	r21,r19,-8
1000ebdc:	19a0703a 	and	r16,r3,r6
1000ebe0:	39003f2e 	bgeu	r7,r4,1000ece0 <_realloc_r+0x158>
1000ebe4:	053ffe04 	movi	r20,-8
1000ebe8:	2528703a 	and	r20,r4,r20
1000ebec:	a00f883a 	mov	r7,r20
1000ebf0:	a0008216 	blt	r20,zero,1000edfc <_realloc_r+0x274>
1000ebf4:	a4408136 	bltu	r20,r17,1000edfc <_realloc_r+0x274>
1000ebf8:	81c03c0e 	bge	r16,r7,1000ecec <_realloc_r+0x164>
1000ebfc:	07040074 	movhi	fp,4097
1000ec00:	e7168004 	addi	fp,fp,23040
1000ec04:	e1000217 	ldw	r4,8(fp)
1000ec08:	ac05883a 	add	r2,r21,r16
1000ec0c:	2080bf26 	beq	r4,r2,1000ef0c <_realloc_r+0x384>
1000ec10:	11000117 	ldw	r4,4(r2)
1000ec14:	023fff84 	movi	r8,-2
1000ec18:	2210703a 	and	r8,r4,r8
1000ec1c:	1211883a 	add	r8,r2,r8
1000ec20:	41400117 	ldw	r5,4(r8)
1000ec24:	2940004c 	andi	r5,r5,1
1000ec28:	28004a1e 	bne	r5,zero,1000ed54 <_realloc_r+0x1cc>
1000ec2c:	017fff04 	movi	r5,-4
1000ec30:	2148703a 	and	r4,r4,r5
1000ec34:	2409883a 	add	r4,r4,r16
1000ec38:	21c0ad0e 	bge	r4,r7,1000eef0 <_realloc_r+0x368>
1000ec3c:	18c0004c 	andi	r3,r3,1
1000ec40:	18007f1e 	bne	r3,zero,1000ee40 <_realloc_r+0x2b8>
1000ec44:	9dfffe17 	ldw	r23,-8(r19)
1000ec48:	adefc83a 	sub	r23,r21,r23
1000ec4c:	bd800117 	ldw	r22,4(r23)
1000ec50:	b14a703a 	and	r5,r22,r5
1000ec54:	216d883a 	add	r22,r4,r5
1000ec58:	b1c04516 	blt	r22,r7,1000ed70 <_realloc_r+0x1e8>
1000ec5c:	10c00317 	ldw	r3,12(r2)
1000ec60:	10800217 	ldw	r2,8(r2)
1000ec64:	81bfff04 	addi	r6,r16,-4
1000ec68:	bc400204 	addi	r17,r23,8
1000ec6c:	10c00315 	stw	r3,12(r2)
1000ec70:	18800215 	stw	r2,8(r3)
1000ec74:	b9400217 	ldw	r5,8(r23)
1000ec78:	b8c00317 	ldw	r3,12(r23)
1000ec7c:	00800904 	movi	r2,36
1000ec80:	28c00315 	stw	r3,12(r5)
1000ec84:	19400215 	stw	r5,8(r3)
1000ec88:	1180ef36 	bltu	r2,r6,1000f048 <_realloc_r+0x4c0>
1000ec8c:	008004c4 	movi	r2,19
1000ec90:	1180da2e 	bgeu	r2,r6,1000effc <_realloc_r+0x474>
1000ec94:	98800017 	ldw	r2,0(r19)
1000ec98:	b8800215 	stw	r2,8(r23)
1000ec9c:	98800117 	ldw	r2,4(r19)
1000eca0:	b8800315 	stw	r2,12(r23)
1000eca4:	008006c4 	movi	r2,27
1000eca8:	1180fc2e 	bgeu	r2,r6,1000f09c <_realloc_r+0x514>
1000ecac:	98800217 	ldw	r2,8(r19)
1000ecb0:	b8800415 	stw	r2,16(r23)
1000ecb4:	98800317 	ldw	r2,12(r19)
1000ecb8:	b8800515 	stw	r2,20(r23)
1000ecbc:	00800904 	movi	r2,36
1000ecc0:	3080421e 	bne	r6,r2,1000edcc <_realloc_r+0x244>
1000ecc4:	98800417 	ldw	r2,16(r19)
1000ecc8:	9cc00604 	addi	r19,r19,24
1000eccc:	b8c00804 	addi	r3,r23,32
1000ecd0:	b8800615 	stw	r2,24(r23)
1000ecd4:	98bfff17 	ldw	r2,-4(r19)
1000ecd8:	b8800715 	stw	r2,28(r23)
1000ecdc:	00003d06 	br	1000edd4 <_realloc_r+0x24c>
1000ece0:	01c00404 	movi	r7,16
1000ece4:	3829883a 	mov	r20,r7
1000ece8:	003fc206 	br	1000ebf4 <__alt_data_end+0xf800ebf4>
1000ecec:	9823883a 	mov	r17,r19
1000ecf0:	850fc83a 	sub	r7,r16,r20
1000ecf4:	008003c4 	movi	r2,15
1000ecf8:	18c0004c 	andi	r3,r3,1
1000ecfc:	11c04336 	bltu	r2,r7,1000ee0c <_realloc_r+0x284>
1000ed00:	1c06b03a 	or	r3,r3,r16
1000ed04:	a8c00115 	stw	r3,4(r21)
1000ed08:	ac21883a 	add	r16,r21,r16
1000ed0c:	80c00117 	ldw	r3,4(r16)
1000ed10:	18c00054 	ori	r3,r3,1
1000ed14:	80c00115 	stw	r3,4(r16)
1000ed18:	9009883a 	mov	r4,r18
1000ed1c:	00125040 	call	10012504 <__malloc_unlock>
1000ed20:	8805883a 	mov	r2,r17
1000ed24:	dfc00917 	ldw	ra,36(sp)
1000ed28:	df000817 	ldw	fp,32(sp)
1000ed2c:	ddc00717 	ldw	r23,28(sp)
1000ed30:	dd800617 	ldw	r22,24(sp)
1000ed34:	dd400517 	ldw	r21,20(sp)
1000ed38:	dd000417 	ldw	r20,16(sp)
1000ed3c:	dcc00317 	ldw	r19,12(sp)
1000ed40:	dc800217 	ldw	r18,8(sp)
1000ed44:	dc400117 	ldw	r17,4(sp)
1000ed48:	dc000017 	ldw	r16,0(sp)
1000ed4c:	dec00a04 	addi	sp,sp,40
1000ed50:	f800283a 	ret
1000ed54:	18c0004c 	andi	r3,r3,1
1000ed58:	1800391e 	bne	r3,zero,1000ee40 <_realloc_r+0x2b8>
1000ed5c:	9dfffe17 	ldw	r23,-8(r19)
1000ed60:	00bfff04 	movi	r2,-4
1000ed64:	adefc83a 	sub	r23,r21,r23
1000ed68:	b9400117 	ldw	r5,4(r23)
1000ed6c:	288a703a 	and	r5,r5,r2
1000ed70:	2c2d883a 	add	r22,r5,r16
1000ed74:	b1c03216 	blt	r22,r7,1000ee40 <_realloc_r+0x2b8>
1000ed78:	b8800317 	ldw	r2,12(r23)
1000ed7c:	b8c00217 	ldw	r3,8(r23)
1000ed80:	81bfff04 	addi	r6,r16,-4
1000ed84:	01000904 	movi	r4,36
1000ed88:	18800315 	stw	r2,12(r3)
1000ed8c:	10c00215 	stw	r3,8(r2)
1000ed90:	bc400204 	addi	r17,r23,8
1000ed94:	2180ac36 	bltu	r4,r6,1000f048 <_realloc_r+0x4c0>
1000ed98:	008004c4 	movi	r2,19
1000ed9c:	1180972e 	bgeu	r2,r6,1000effc <_realloc_r+0x474>
1000eda0:	98800017 	ldw	r2,0(r19)
1000eda4:	b8800215 	stw	r2,8(r23)
1000eda8:	98800117 	ldw	r2,4(r19)
1000edac:	b8800315 	stw	r2,12(r23)
1000edb0:	008006c4 	movi	r2,27
1000edb4:	1180b92e 	bgeu	r2,r6,1000f09c <_realloc_r+0x514>
1000edb8:	98800217 	ldw	r2,8(r19)
1000edbc:	b8800415 	stw	r2,16(r23)
1000edc0:	98800317 	ldw	r2,12(r19)
1000edc4:	b8800515 	stw	r2,20(r23)
1000edc8:	313fbe26 	beq	r6,r4,1000ecc4 <__alt_data_end+0xf800ecc4>
1000edcc:	b8c00604 	addi	r3,r23,24
1000edd0:	9cc00404 	addi	r19,r19,16
1000edd4:	98800017 	ldw	r2,0(r19)
1000edd8:	b021883a 	mov	r16,r22
1000eddc:	b82b883a 	mov	r21,r23
1000ede0:	18800015 	stw	r2,0(r3)
1000ede4:	98800117 	ldw	r2,4(r19)
1000ede8:	18800115 	stw	r2,4(r3)
1000edec:	98800217 	ldw	r2,8(r19)
1000edf0:	18800215 	stw	r2,8(r3)
1000edf4:	b8c00117 	ldw	r3,4(r23)
1000edf8:	003fbd06 	br	1000ecf0 <__alt_data_end+0xf800ecf0>
1000edfc:	00800304 	movi	r2,12
1000ee00:	90800015 	stw	r2,0(r18)
1000ee04:	0005883a 	mov	r2,zero
1000ee08:	003fc606 	br	1000ed24 <__alt_data_end+0xf800ed24>
1000ee0c:	1d06b03a 	or	r3,r3,r20
1000ee10:	ad0b883a 	add	r5,r21,r20
1000ee14:	a8c00115 	stw	r3,4(r21)
1000ee18:	38800054 	ori	r2,r7,1
1000ee1c:	28800115 	stw	r2,4(r5)
1000ee20:	29cf883a 	add	r7,r5,r7
1000ee24:	38800117 	ldw	r2,4(r7)
1000ee28:	9009883a 	mov	r4,r18
1000ee2c:	29400204 	addi	r5,r5,8
1000ee30:	10800054 	ori	r2,r2,1
1000ee34:	38800115 	stw	r2,4(r7)
1000ee38:	000c35c0 	call	1000c35c <_free_r>
1000ee3c:	003fb606 	br	1000ed18 <__alt_data_end+0xf800ed18>
1000ee40:	880b883a 	mov	r5,r17
1000ee44:	9009883a 	mov	r4,r18
1000ee48:	000cef80 	call	1000cef8 <_malloc_r>
1000ee4c:	1023883a 	mov	r17,r2
1000ee50:	1000aa26 	beq	r2,zero,1000f0fc <_realloc_r+0x574>
1000ee54:	98ffff17 	ldw	r3,-4(r19)
1000ee58:	113ffe04 	addi	r4,r2,-8
1000ee5c:	00bfff84 	movi	r2,-2
1000ee60:	1884703a 	and	r2,r3,r2
1000ee64:	a885883a 	add	r2,r21,r2
1000ee68:	20808626 	beq	r4,r2,1000f084 <_realloc_r+0x4fc>
1000ee6c:	81bfff04 	addi	r6,r16,-4
1000ee70:	00800904 	movi	r2,36
1000ee74:	11807036 	bltu	r2,r6,1000f038 <_realloc_r+0x4b0>
1000ee78:	00c004c4 	movi	r3,19
1000ee7c:	19805636 	bltu	r3,r6,1000efd8 <_realloc_r+0x450>
1000ee80:	8805883a 	mov	r2,r17
1000ee84:	9807883a 	mov	r3,r19
1000ee88:	19000017 	ldw	r4,0(r3)
1000ee8c:	11000015 	stw	r4,0(r2)
1000ee90:	19000117 	ldw	r4,4(r3)
1000ee94:	11000115 	stw	r4,4(r2)
1000ee98:	18c00217 	ldw	r3,8(r3)
1000ee9c:	10c00215 	stw	r3,8(r2)
1000eea0:	980b883a 	mov	r5,r19
1000eea4:	9009883a 	mov	r4,r18
1000eea8:	000c35c0 	call	1000c35c <_free_r>
1000eeac:	9009883a 	mov	r4,r18
1000eeb0:	00125040 	call	10012504 <__malloc_unlock>
1000eeb4:	8805883a 	mov	r2,r17
1000eeb8:	003f9a06 	br	1000ed24 <__alt_data_end+0xf800ed24>
1000eebc:	300b883a 	mov	r5,r6
1000eec0:	dfc00917 	ldw	ra,36(sp)
1000eec4:	df000817 	ldw	fp,32(sp)
1000eec8:	ddc00717 	ldw	r23,28(sp)
1000eecc:	dd800617 	ldw	r22,24(sp)
1000eed0:	dd400517 	ldw	r21,20(sp)
1000eed4:	dd000417 	ldw	r20,16(sp)
1000eed8:	dcc00317 	ldw	r19,12(sp)
1000eedc:	dc800217 	ldw	r18,8(sp)
1000eee0:	dc400117 	ldw	r17,4(sp)
1000eee4:	dc000017 	ldw	r16,0(sp)
1000eee8:	dec00a04 	addi	sp,sp,40
1000eeec:	000cef81 	jmpi	1000cef8 <_malloc_r>
1000eef0:	11400317 	ldw	r5,12(r2)
1000eef4:	10800217 	ldw	r2,8(r2)
1000eef8:	9823883a 	mov	r17,r19
1000eefc:	2021883a 	mov	r16,r4
1000ef00:	11400315 	stw	r5,12(r2)
1000ef04:	28800215 	stw	r2,8(r5)
1000ef08:	003f7906 	br	1000ecf0 <__alt_data_end+0xf800ecf0>
1000ef0c:	21000117 	ldw	r4,4(r4)
1000ef10:	00bfff04 	movi	r2,-4
1000ef14:	a1800404 	addi	r6,r20,16
1000ef18:	2088703a 	and	r4,r4,r2
1000ef1c:	2409883a 	add	r4,r4,r16
1000ef20:	2180380e 	bge	r4,r6,1000f004 <_realloc_r+0x47c>
1000ef24:	18c0004c 	andi	r3,r3,1
1000ef28:	183fc51e 	bne	r3,zero,1000ee40 <__alt_data_end+0xf800ee40>
1000ef2c:	9dfffe17 	ldw	r23,-8(r19)
1000ef30:	adefc83a 	sub	r23,r21,r23
1000ef34:	b9400117 	ldw	r5,4(r23)
1000ef38:	288a703a 	and	r5,r5,r2
1000ef3c:	216d883a 	add	r22,r4,r5
1000ef40:	b1bf8b16 	blt	r22,r6,1000ed70 <__alt_data_end+0xf800ed70>
1000ef44:	b8800317 	ldw	r2,12(r23)
1000ef48:	b8c00217 	ldw	r3,8(r23)
1000ef4c:	81bfff04 	addi	r6,r16,-4
1000ef50:	01000904 	movi	r4,36
1000ef54:	18800315 	stw	r2,12(r3)
1000ef58:	10c00215 	stw	r3,8(r2)
1000ef5c:	bc400204 	addi	r17,r23,8
1000ef60:	21805a36 	bltu	r4,r6,1000f0cc <_realloc_r+0x544>
1000ef64:	008004c4 	movi	r2,19
1000ef68:	1180562e 	bgeu	r2,r6,1000f0c4 <_realloc_r+0x53c>
1000ef6c:	98800017 	ldw	r2,0(r19)
1000ef70:	b8800215 	stw	r2,8(r23)
1000ef74:	98800117 	ldw	r2,4(r19)
1000ef78:	b8800315 	stw	r2,12(r23)
1000ef7c:	008006c4 	movi	r2,27
1000ef80:	11805636 	bltu	r2,r6,1000f0dc <_realloc_r+0x554>
1000ef84:	b8800404 	addi	r2,r23,16
1000ef88:	9cc00204 	addi	r19,r19,8
1000ef8c:	98c00017 	ldw	r3,0(r19)
1000ef90:	10c00015 	stw	r3,0(r2)
1000ef94:	98c00117 	ldw	r3,4(r19)
1000ef98:	10c00115 	stw	r3,4(r2)
1000ef9c:	98c00217 	ldw	r3,8(r19)
1000efa0:	10c00215 	stw	r3,8(r2)
1000efa4:	bd07883a 	add	r3,r23,r20
1000efa8:	b505c83a 	sub	r2,r22,r20
1000efac:	e0c00215 	stw	r3,8(fp)
1000efb0:	10800054 	ori	r2,r2,1
1000efb4:	18800115 	stw	r2,4(r3)
1000efb8:	b8800117 	ldw	r2,4(r23)
1000efbc:	9009883a 	mov	r4,r18
1000efc0:	1080004c 	andi	r2,r2,1
1000efc4:	a0a8b03a 	or	r20,r20,r2
1000efc8:	bd000115 	stw	r20,4(r23)
1000efcc:	00125040 	call	10012504 <__malloc_unlock>
1000efd0:	8805883a 	mov	r2,r17
1000efd4:	003f5306 	br	1000ed24 <__alt_data_end+0xf800ed24>
1000efd8:	98c00017 	ldw	r3,0(r19)
1000efdc:	88c00015 	stw	r3,0(r17)
1000efe0:	98c00117 	ldw	r3,4(r19)
1000efe4:	88c00115 	stw	r3,4(r17)
1000efe8:	00c006c4 	movi	r3,27
1000efec:	19801d36 	bltu	r3,r6,1000f064 <_realloc_r+0x4dc>
1000eff0:	88800204 	addi	r2,r17,8
1000eff4:	98c00204 	addi	r3,r19,8
1000eff8:	003fa306 	br	1000ee88 <__alt_data_end+0xf800ee88>
1000effc:	8807883a 	mov	r3,r17
1000f000:	003f7406 	br	1000edd4 <__alt_data_end+0xf800edd4>
1000f004:	ad2b883a 	add	r21,r21,r20
1000f008:	2505c83a 	sub	r2,r4,r20
1000f00c:	e5400215 	stw	r21,8(fp)
1000f010:	10800054 	ori	r2,r2,1
1000f014:	a8800115 	stw	r2,4(r21)
1000f018:	98bfff17 	ldw	r2,-4(r19)
1000f01c:	9009883a 	mov	r4,r18
1000f020:	1080004c 	andi	r2,r2,1
1000f024:	a0a8b03a 	or	r20,r20,r2
1000f028:	9d3fff15 	stw	r20,-4(r19)
1000f02c:	00125040 	call	10012504 <__malloc_unlock>
1000f030:	9805883a 	mov	r2,r19
1000f034:	003f3b06 	br	1000ed24 <__alt_data_end+0xf800ed24>
1000f038:	8809883a 	mov	r4,r17
1000f03c:	980b883a 	mov	r5,r19
1000f040:	000d8c00 	call	1000d8c0 <memmove>
1000f044:	003f9606 	br	1000eea0 <__alt_data_end+0xf800eea0>
1000f048:	8809883a 	mov	r4,r17
1000f04c:	980b883a 	mov	r5,r19
1000f050:	000d8c00 	call	1000d8c0 <memmove>
1000f054:	b8c00117 	ldw	r3,4(r23)
1000f058:	b021883a 	mov	r16,r22
1000f05c:	b82b883a 	mov	r21,r23
1000f060:	003f2306 	br	1000ecf0 <__alt_data_end+0xf800ecf0>
1000f064:	98c00217 	ldw	r3,8(r19)
1000f068:	88c00215 	stw	r3,8(r17)
1000f06c:	98c00317 	ldw	r3,12(r19)
1000f070:	88c00315 	stw	r3,12(r17)
1000f074:	30800c26 	beq	r6,r2,1000f0a8 <_realloc_r+0x520>
1000f078:	88800404 	addi	r2,r17,16
1000f07c:	98c00404 	addi	r3,r19,16
1000f080:	003f8106 	br	1000ee88 <__alt_data_end+0xf800ee88>
1000f084:	893fff17 	ldw	r4,-4(r17)
1000f088:	00bfff04 	movi	r2,-4
1000f08c:	9823883a 	mov	r17,r19
1000f090:	2084703a 	and	r2,r4,r2
1000f094:	80a1883a 	add	r16,r16,r2
1000f098:	003f1506 	br	1000ecf0 <__alt_data_end+0xf800ecf0>
1000f09c:	b8c00404 	addi	r3,r23,16
1000f0a0:	9cc00204 	addi	r19,r19,8
1000f0a4:	003f4b06 	br	1000edd4 <__alt_data_end+0xf800edd4>
1000f0a8:	99000417 	ldw	r4,16(r19)
1000f0ac:	88800604 	addi	r2,r17,24
1000f0b0:	98c00604 	addi	r3,r19,24
1000f0b4:	89000415 	stw	r4,16(r17)
1000f0b8:	99000517 	ldw	r4,20(r19)
1000f0bc:	89000515 	stw	r4,20(r17)
1000f0c0:	003f7106 	br	1000ee88 <__alt_data_end+0xf800ee88>
1000f0c4:	8805883a 	mov	r2,r17
1000f0c8:	003fb006 	br	1000ef8c <__alt_data_end+0xf800ef8c>
1000f0cc:	8809883a 	mov	r4,r17
1000f0d0:	980b883a 	mov	r5,r19
1000f0d4:	000d8c00 	call	1000d8c0 <memmove>
1000f0d8:	003fb206 	br	1000efa4 <__alt_data_end+0xf800efa4>
1000f0dc:	98800217 	ldw	r2,8(r19)
1000f0e0:	b8800415 	stw	r2,16(r23)
1000f0e4:	98800317 	ldw	r2,12(r19)
1000f0e8:	b8800515 	stw	r2,20(r23)
1000f0ec:	31000726 	beq	r6,r4,1000f10c <_realloc_r+0x584>
1000f0f0:	b8800604 	addi	r2,r23,24
1000f0f4:	9cc00404 	addi	r19,r19,16
1000f0f8:	003fa406 	br	1000ef8c <__alt_data_end+0xf800ef8c>
1000f0fc:	9009883a 	mov	r4,r18
1000f100:	00125040 	call	10012504 <__malloc_unlock>
1000f104:	0005883a 	mov	r2,zero
1000f108:	003f0606 	br	1000ed24 <__alt_data_end+0xf800ed24>
1000f10c:	98c00417 	ldw	r3,16(r19)
1000f110:	9cc00604 	addi	r19,r19,24
1000f114:	b8800804 	addi	r2,r23,32
1000f118:	b8c00615 	stw	r3,24(r23)
1000f11c:	98ffff17 	ldw	r3,-4(r19)
1000f120:	b8c00715 	stw	r3,28(r23)
1000f124:	003f9906 	br	1000ef8c <__alt_data_end+0xf800ef8c>

1000f128 <_sbrk_r>:
1000f128:	defffd04 	addi	sp,sp,-12
1000f12c:	dc000015 	stw	r16,0(sp)
1000f130:	040400b4 	movhi	r16,4098
1000f134:	dc400115 	stw	r17,4(sp)
1000f138:	8422d804 	addi	r16,r16,-29856
1000f13c:	2023883a 	mov	r17,r4
1000f140:	2809883a 	mov	r4,r5
1000f144:	dfc00215 	stw	ra,8(sp)
1000f148:	80000015 	stw	zero,0(r16)
1000f14c:	00126f80 	call	100126f8 <sbrk>
1000f150:	00ffffc4 	movi	r3,-1
1000f154:	10c00526 	beq	r2,r3,1000f16c <_sbrk_r+0x44>
1000f158:	dfc00217 	ldw	ra,8(sp)
1000f15c:	dc400117 	ldw	r17,4(sp)
1000f160:	dc000017 	ldw	r16,0(sp)
1000f164:	dec00304 	addi	sp,sp,12
1000f168:	f800283a 	ret
1000f16c:	80c00017 	ldw	r3,0(r16)
1000f170:	183ff926 	beq	r3,zero,1000f158 <__alt_data_end+0xf800f158>
1000f174:	88c00015 	stw	r3,0(r17)
1000f178:	003ff706 	br	1000f158 <__alt_data_end+0xf800f158>

1000f17c <__sread>:
1000f17c:	defffe04 	addi	sp,sp,-8
1000f180:	dc000015 	stw	r16,0(sp)
1000f184:	2821883a 	mov	r16,r5
1000f188:	2940038f 	ldh	r5,14(r5)
1000f18c:	dfc00115 	stw	ra,4(sp)
1000f190:	0010e380 	call	10010e38 <_read_r>
1000f194:	10000716 	blt	r2,zero,1000f1b4 <__sread+0x38>
1000f198:	80c01417 	ldw	r3,80(r16)
1000f19c:	1887883a 	add	r3,r3,r2
1000f1a0:	80c01415 	stw	r3,80(r16)
1000f1a4:	dfc00117 	ldw	ra,4(sp)
1000f1a8:	dc000017 	ldw	r16,0(sp)
1000f1ac:	dec00204 	addi	sp,sp,8
1000f1b0:	f800283a 	ret
1000f1b4:	80c0030b 	ldhu	r3,12(r16)
1000f1b8:	18fbffcc 	andi	r3,r3,61439
1000f1bc:	80c0030d 	sth	r3,12(r16)
1000f1c0:	dfc00117 	ldw	ra,4(sp)
1000f1c4:	dc000017 	ldw	r16,0(sp)
1000f1c8:	dec00204 	addi	sp,sp,8
1000f1cc:	f800283a 	ret

1000f1d0 <__seofread>:
1000f1d0:	0005883a 	mov	r2,zero
1000f1d4:	f800283a 	ret

1000f1d8 <__swrite>:
1000f1d8:	2880030b 	ldhu	r2,12(r5)
1000f1dc:	defffb04 	addi	sp,sp,-20
1000f1e0:	dcc00315 	stw	r19,12(sp)
1000f1e4:	dc800215 	stw	r18,8(sp)
1000f1e8:	dc400115 	stw	r17,4(sp)
1000f1ec:	dc000015 	stw	r16,0(sp)
1000f1f0:	dfc00415 	stw	ra,16(sp)
1000f1f4:	10c0400c 	andi	r3,r2,256
1000f1f8:	2821883a 	mov	r16,r5
1000f1fc:	2027883a 	mov	r19,r4
1000f200:	3025883a 	mov	r18,r6
1000f204:	3823883a 	mov	r17,r7
1000f208:	18000526 	beq	r3,zero,1000f220 <__swrite+0x48>
1000f20c:	2940038f 	ldh	r5,14(r5)
1000f210:	000d883a 	mov	r6,zero
1000f214:	01c00084 	movi	r7,2
1000f218:	0010ddc0 	call	10010ddc <_lseek_r>
1000f21c:	8080030b 	ldhu	r2,12(r16)
1000f220:	8140038f 	ldh	r5,14(r16)
1000f224:	10bbffcc 	andi	r2,r2,61439
1000f228:	9809883a 	mov	r4,r19
1000f22c:	900d883a 	mov	r6,r18
1000f230:	880f883a 	mov	r7,r17
1000f234:	8080030d 	sth	r2,12(r16)
1000f238:	dfc00417 	ldw	ra,16(sp)
1000f23c:	dcc00317 	ldw	r19,12(sp)
1000f240:	dc800217 	ldw	r18,8(sp)
1000f244:	dc400117 	ldw	r17,4(sp)
1000f248:	dc000017 	ldw	r16,0(sp)
1000f24c:	dec00504 	addi	sp,sp,20
1000f250:	00108b81 	jmpi	100108b8 <_write_r>

1000f254 <__sseek>:
1000f254:	defffe04 	addi	sp,sp,-8
1000f258:	dc000015 	stw	r16,0(sp)
1000f25c:	2821883a 	mov	r16,r5
1000f260:	2940038f 	ldh	r5,14(r5)
1000f264:	dfc00115 	stw	ra,4(sp)
1000f268:	0010ddc0 	call	10010ddc <_lseek_r>
1000f26c:	00ffffc4 	movi	r3,-1
1000f270:	10c00826 	beq	r2,r3,1000f294 <__sseek+0x40>
1000f274:	80c0030b 	ldhu	r3,12(r16)
1000f278:	80801415 	stw	r2,80(r16)
1000f27c:	18c40014 	ori	r3,r3,4096
1000f280:	80c0030d 	sth	r3,12(r16)
1000f284:	dfc00117 	ldw	ra,4(sp)
1000f288:	dc000017 	ldw	r16,0(sp)
1000f28c:	dec00204 	addi	sp,sp,8
1000f290:	f800283a 	ret
1000f294:	80c0030b 	ldhu	r3,12(r16)
1000f298:	18fbffcc 	andi	r3,r3,61439
1000f29c:	80c0030d 	sth	r3,12(r16)
1000f2a0:	dfc00117 	ldw	ra,4(sp)
1000f2a4:	dc000017 	ldw	r16,0(sp)
1000f2a8:	dec00204 	addi	sp,sp,8
1000f2ac:	f800283a 	ret

1000f2b0 <__sclose>:
1000f2b0:	2940038f 	ldh	r5,14(r5)
1000f2b4:	00109141 	jmpi	10010914 <_close_r>

1000f2b8 <strcmp>:
1000f2b8:	2144b03a 	or	r2,r4,r5
1000f2bc:	108000cc 	andi	r2,r2,3
1000f2c0:	1000171e 	bne	r2,zero,1000f320 <strcmp+0x68>
1000f2c4:	20800017 	ldw	r2,0(r4)
1000f2c8:	28c00017 	ldw	r3,0(r5)
1000f2cc:	10c0141e 	bne	r2,r3,1000f320 <strcmp+0x68>
1000f2d0:	027fbff4 	movhi	r9,65279
1000f2d4:	4a7fbfc4 	addi	r9,r9,-257
1000f2d8:	0086303a 	nor	r3,zero,r2
1000f2dc:	02202074 	movhi	r8,32897
1000f2e0:	1245883a 	add	r2,r2,r9
1000f2e4:	42202004 	addi	r8,r8,-32640
1000f2e8:	10c4703a 	and	r2,r2,r3
1000f2ec:	1204703a 	and	r2,r2,r8
1000f2f0:	10000226 	beq	r2,zero,1000f2fc <strcmp+0x44>
1000f2f4:	00001706 	br	1000f354 <strcmp+0x9c>
1000f2f8:	1000161e 	bne	r2,zero,1000f354 <strcmp+0x9c>
1000f2fc:	21000104 	addi	r4,r4,4
1000f300:	20c00017 	ldw	r3,0(r4)
1000f304:	29400104 	addi	r5,r5,4
1000f308:	29800017 	ldw	r6,0(r5)
1000f30c:	1a4f883a 	add	r7,r3,r9
1000f310:	00c4303a 	nor	r2,zero,r3
1000f314:	3884703a 	and	r2,r7,r2
1000f318:	1204703a 	and	r2,r2,r8
1000f31c:	19bff626 	beq	r3,r6,1000f2f8 <__alt_data_end+0xf800f2f8>
1000f320:	20800007 	ldb	r2,0(r4)
1000f324:	1000051e 	bne	r2,zero,1000f33c <strcmp+0x84>
1000f328:	00000606 	br	1000f344 <strcmp+0x8c>
1000f32c:	21000044 	addi	r4,r4,1
1000f330:	20800007 	ldb	r2,0(r4)
1000f334:	29400044 	addi	r5,r5,1
1000f338:	10000226 	beq	r2,zero,1000f344 <strcmp+0x8c>
1000f33c:	28c00007 	ldb	r3,0(r5)
1000f340:	10fffa26 	beq	r2,r3,1000f32c <__alt_data_end+0xf800f32c>
1000f344:	20800003 	ldbu	r2,0(r4)
1000f348:	28c00003 	ldbu	r3,0(r5)
1000f34c:	10c5c83a 	sub	r2,r2,r3
1000f350:	f800283a 	ret
1000f354:	0005883a 	mov	r2,zero
1000f358:	f800283a 	ret

1000f35c <__sprint_r.part.0>:
1000f35c:	28801917 	ldw	r2,100(r5)
1000f360:	defff604 	addi	sp,sp,-40
1000f364:	dd400515 	stw	r21,20(sp)
1000f368:	dcc00315 	stw	r19,12(sp)
1000f36c:	dfc00915 	stw	ra,36(sp)
1000f370:	df000815 	stw	fp,32(sp)
1000f374:	ddc00715 	stw	r23,28(sp)
1000f378:	dd800615 	stw	r22,24(sp)
1000f37c:	dd000415 	stw	r20,16(sp)
1000f380:	dc800215 	stw	r18,8(sp)
1000f384:	dc400115 	stw	r17,4(sp)
1000f388:	dc000015 	stw	r16,0(sp)
1000f38c:	1088000c 	andi	r2,r2,8192
1000f390:	2827883a 	mov	r19,r5
1000f394:	302b883a 	mov	r21,r6
1000f398:	10002d26 	beq	r2,zero,1000f450 <__sprint_r.part.0+0xf4>
1000f39c:	30800217 	ldw	r2,8(r6)
1000f3a0:	35800017 	ldw	r22,0(r6)
1000f3a4:	10002826 	beq	r2,zero,1000f448 <__sprint_r.part.0+0xec>
1000f3a8:	2029883a 	mov	r20,r4
1000f3ac:	b5c00104 	addi	r23,r22,4
1000f3b0:	04bfffc4 	movi	r18,-1
1000f3b4:	bc400017 	ldw	r17,0(r23)
1000f3b8:	b4000017 	ldw	r16,0(r22)
1000f3bc:	0039883a 	mov	fp,zero
1000f3c0:	8822d0ba 	srli	r17,r17,2
1000f3c4:	04400316 	blt	zero,r17,1000f3d4 <__sprint_r.part.0+0x78>
1000f3c8:	00001706 	br	1000f428 <__sprint_r.part.0+0xcc>
1000f3cc:	84000104 	addi	r16,r16,4
1000f3d0:	8f001526 	beq	r17,fp,1000f428 <__sprint_r.part.0+0xcc>
1000f3d4:	81400017 	ldw	r5,0(r16)
1000f3d8:	a009883a 	mov	r4,r20
1000f3dc:	980d883a 	mov	r6,r19
1000f3e0:	0010b540 	call	10010b54 <_fputwc_r>
1000f3e4:	e7000044 	addi	fp,fp,1
1000f3e8:	14bff81e 	bne	r2,r18,1000f3cc <__alt_data_end+0xf800f3cc>
1000f3ec:	9005883a 	mov	r2,r18
1000f3f0:	a8000215 	stw	zero,8(r21)
1000f3f4:	a8000115 	stw	zero,4(r21)
1000f3f8:	dfc00917 	ldw	ra,36(sp)
1000f3fc:	df000817 	ldw	fp,32(sp)
1000f400:	ddc00717 	ldw	r23,28(sp)
1000f404:	dd800617 	ldw	r22,24(sp)
1000f408:	dd400517 	ldw	r21,20(sp)
1000f40c:	dd000417 	ldw	r20,16(sp)
1000f410:	dcc00317 	ldw	r19,12(sp)
1000f414:	dc800217 	ldw	r18,8(sp)
1000f418:	dc400117 	ldw	r17,4(sp)
1000f41c:	dc000017 	ldw	r16,0(sp)
1000f420:	dec00a04 	addi	sp,sp,40
1000f424:	f800283a 	ret
1000f428:	a8c00217 	ldw	r3,8(r21)
1000f42c:	8c63883a 	add	r17,r17,r17
1000f430:	8c63883a 	add	r17,r17,r17
1000f434:	1c45c83a 	sub	r2,r3,r17
1000f438:	a8800215 	stw	r2,8(r21)
1000f43c:	b5800204 	addi	r22,r22,8
1000f440:	bdc00204 	addi	r23,r23,8
1000f444:	103fdb1e 	bne	r2,zero,1000f3b4 <__alt_data_end+0xf800f3b4>
1000f448:	0005883a 	mov	r2,zero
1000f44c:	003fe806 	br	1000f3f0 <__alt_data_end+0xf800f3f0>
1000f450:	000c64c0 	call	1000c64c <__sfvwrite_r>
1000f454:	003fe606 	br	1000f3f0 <__alt_data_end+0xf800f3f0>

1000f458 <__sprint_r>:
1000f458:	30c00217 	ldw	r3,8(r6)
1000f45c:	18000126 	beq	r3,zero,1000f464 <__sprint_r+0xc>
1000f460:	000f35c1 	jmpi	1000f35c <__sprint_r.part.0>
1000f464:	30000115 	stw	zero,4(r6)
1000f468:	0005883a 	mov	r2,zero
1000f46c:	f800283a 	ret

1000f470 <___vfiprintf_internal_r>:
1000f470:	defeca04 	addi	sp,sp,-1240
1000f474:	dcc12f15 	stw	r19,1212(sp)
1000f478:	dfc13515 	stw	ra,1236(sp)
1000f47c:	df013415 	stw	fp,1232(sp)
1000f480:	ddc13315 	stw	r23,1228(sp)
1000f484:	dd813215 	stw	r22,1224(sp)
1000f488:	dd413115 	stw	r21,1220(sp)
1000f48c:	dd013015 	stw	r20,1216(sp)
1000f490:	dc812e15 	stw	r18,1208(sp)
1000f494:	dc412d15 	stw	r17,1204(sp)
1000f498:	dc012c15 	stw	r16,1200(sp)
1000f49c:	d9012115 	stw	r4,1156(sp)
1000f4a0:	d9412015 	stw	r5,1152(sp)
1000f4a4:	d9c12315 	stw	r7,1164(sp)
1000f4a8:	3027883a 	mov	r19,r6
1000f4ac:	20000226 	beq	r4,zero,1000f4b8 <___vfiprintf_internal_r+0x48>
1000f4b0:	20800e17 	ldw	r2,56(r4)
1000f4b4:	1000f726 	beq	r2,zero,1000f894 <___vfiprintf_internal_r+0x424>
1000f4b8:	d8812017 	ldw	r2,1152(sp)
1000f4bc:	10c0030b 	ldhu	r3,12(r2)
1000f4c0:	1908000c 	andi	r4,r3,8192
1000f4c4:	1805883a 	mov	r2,r3
1000f4c8:	2000081e 	bne	r4,zero,1000f4ec <___vfiprintf_internal_r+0x7c>
1000f4cc:	d9412017 	ldw	r5,1152(sp)
1000f4d0:	18880014 	ori	r2,r3,8192
1000f4d4:	00f7ffc4 	movi	r3,-8193
1000f4d8:	29001917 	ldw	r4,100(r5)
1000f4dc:	2880030d 	sth	r2,12(r5)
1000f4e0:	20c8703a 	and	r4,r4,r3
1000f4e4:	29001915 	stw	r4,100(r5)
1000f4e8:	1007883a 	mov	r3,r2
1000f4ec:	1100020c 	andi	r4,r2,8
1000f4f0:	2000a726 	beq	r4,zero,1000f790 <___vfiprintf_internal_r+0x320>
1000f4f4:	d9412017 	ldw	r5,1152(sp)
1000f4f8:	29000417 	ldw	r4,16(r5)
1000f4fc:	2000a426 	beq	r4,zero,1000f790 <___vfiprintf_internal_r+0x320>
1000f500:	1080068c 	andi	r2,r2,26
1000f504:	01000284 	movi	r4,10
1000f508:	1100ab26 	beq	r2,r4,1000f7b8 <___vfiprintf_internal_r+0x348>
1000f50c:	d9010a04 	addi	r4,sp,1064
1000f510:	d94109c4 	addi	r5,sp,1063
1000f514:	07040074 	movhi	fp,4097
1000f518:	04440074 	movhi	r17,4097
1000f51c:	2145c83a 	sub	r2,r4,r5
1000f520:	e7154804 	addi	fp,fp,21792
1000f524:	8c554404 	addi	r17,r17,21776
1000f528:	d9011e15 	stw	r4,1144(sp)
1000f52c:	d9411f15 	stw	r5,1148(sp)
1000f530:	dec11a15 	stw	sp,1128(sp)
1000f534:	d8011c15 	stw	zero,1136(sp)
1000f538:	d8011b15 	stw	zero,1132(sp)
1000f53c:	d8012715 	stw	zero,1180(sp)
1000f540:	d8012515 	stw	zero,1172(sp)
1000f544:	d811883a 	mov	r8,sp
1000f548:	d8812815 	stw	r2,1184(sp)
1000f54c:	982f883a 	mov	r23,r19
1000f550:	b8800007 	ldb	r2,0(r23)
1000f554:	1003b026 	beq	r2,zero,10010418 <___vfiprintf_internal_r+0xfa8>
1000f558:	01000944 	movi	r4,37
1000f55c:	1103ae26 	beq	r2,r4,10010418 <___vfiprintf_internal_r+0xfa8>
1000f560:	b805883a 	mov	r2,r23
1000f564:	00000106 	br	1000f56c <___vfiprintf_internal_r+0xfc>
1000f568:	19000326 	beq	r3,r4,1000f578 <___vfiprintf_internal_r+0x108>
1000f56c:	10800044 	addi	r2,r2,1
1000f570:	10c00007 	ldb	r3,0(r2)
1000f574:	183ffc1e 	bne	r3,zero,1000f568 <__alt_data_end+0xf800f568>
1000f578:	15e1c83a 	sub	r16,r2,r23
1000f57c:	1029883a 	mov	r20,r2
1000f580:	80001026 	beq	r16,zero,1000f5c4 <___vfiprintf_internal_r+0x154>
1000f584:	d8c11c17 	ldw	r3,1136(sp)
1000f588:	d8811b17 	ldw	r2,1132(sp)
1000f58c:	45c00015 	stw	r23,0(r8)
1000f590:	80c7883a 	add	r3,r16,r3
1000f594:	10800044 	addi	r2,r2,1
1000f598:	44000115 	stw	r16,4(r8)
1000f59c:	d8c11c15 	stw	r3,1136(sp)
1000f5a0:	d8811b15 	stw	r2,1132(sp)
1000f5a4:	010001c4 	movi	r4,7
1000f5a8:	2080740e 	bge	r4,r2,1000f77c <___vfiprintf_internal_r+0x30c>
1000f5ac:	1803a71e 	bne	r3,zero,1001044c <___vfiprintf_internal_r+0xfdc>
1000f5b0:	d8c12517 	ldw	r3,1172(sp)
1000f5b4:	d8011b15 	stw	zero,1132(sp)
1000f5b8:	d811883a 	mov	r8,sp
1000f5bc:	1c07883a 	add	r3,r3,r16
1000f5c0:	d8c12515 	stw	r3,1172(sp)
1000f5c4:	a0800007 	ldb	r2,0(r20)
1000f5c8:	1002bf26 	beq	r2,zero,100100c8 <___vfiprintf_internal_r+0xc58>
1000f5cc:	a5c00044 	addi	r23,r20,1
1000f5d0:	a1800047 	ldb	r6,1(r20)
1000f5d4:	d8011d85 	stb	zero,1142(sp)
1000f5d8:	d8012205 	stb	zero,1160(sp)
1000f5dc:	043fffc4 	movi	r16,-1
1000f5e0:	d8012415 	stw	zero,1168(sp)
1000f5e4:	0025883a 	mov	r18,zero
1000f5e8:	05001604 	movi	r20,88
1000f5ec:	05400244 	movi	r21,9
1000f5f0:	4027883a 	mov	r19,r8
1000f5f4:	bdc00044 	addi	r23,r23,1
1000f5f8:	30bff804 	addi	r2,r6,-32
1000f5fc:	a0825636 	bltu	r20,r2,1000ff58 <___vfiprintf_internal_r+0xae8>
1000f600:	100490ba 	slli	r2,r2,2
1000f604:	01040074 	movhi	r4,4097
1000f608:	213d8604 	addi	r4,r4,-2536
1000f60c:	1105883a 	add	r2,r2,r4
1000f610:	10800017 	ldw	r2,0(r2)
1000f614:	1000683a 	jmp	r2
1000f618:	1000fee8 	cmpgeui	zero,r2,1019
1000f61c:	1000ff58 	cmpnei	zero,r2,1021
1000f620:	1000ff58 	cmpnei	zero,r2,1021
1000f624:	1000ff4c 	andi	zero,r2,1021
1000f628:	1000ff58 	cmpnei	zero,r2,1021
1000f62c:	1000ff58 	cmpnei	zero,r2,1021
1000f630:	1000ff58 	cmpnei	zero,r2,1021
1000f634:	1000ff58 	cmpnei	zero,r2,1021
1000f638:	1000ff58 	cmpnei	zero,r2,1021
1000f63c:	1000ff58 	cmpnei	zero,r2,1021
1000f640:	1000fcd8 	cmpnei	zero,r2,1011
1000f644:	1000ff00 	call	11000ff0 <_gp+0xfe1fe0>
1000f648:	1000ff58 	cmpnei	zero,r2,1021
1000f64c:	1000f8ac 	andhi	zero,r2,994
1000f650:	1000fcfc 	xorhi	zero,r2,1011
1000f654:	1000ff58 	cmpnei	zero,r2,1021
1000f658:	1000f8b8 	rdprs	zero,r2,994
1000f65c:	1000f8c4 	addi	zero,r2,995
1000f660:	1000f8c4 	addi	zero,r2,995
1000f664:	1000f8c4 	addi	zero,r2,995
1000f668:	1000f8c4 	addi	zero,r2,995
1000f66c:	1000f8c4 	addi	zero,r2,995
1000f670:	1000f8c4 	addi	zero,r2,995
1000f674:	1000f8c4 	addi	zero,r2,995
1000f678:	1000f8c4 	addi	zero,r2,995
1000f67c:	1000f8c4 	addi	zero,r2,995
1000f680:	1000ff58 	cmpnei	zero,r2,1021
1000f684:	1000ff58 	cmpnei	zero,r2,1021
1000f688:	1000ff58 	cmpnei	zero,r2,1021
1000f68c:	1000ff58 	cmpnei	zero,r2,1021
1000f690:	1000ff58 	cmpnei	zero,r2,1021
1000f694:	1000ff58 	cmpnei	zero,r2,1021
1000f698:	1000ff58 	cmpnei	zero,r2,1021
1000f69c:	1000ff58 	cmpnei	zero,r2,1021
1000f6a0:	1000ff58 	cmpnei	zero,r2,1021
1000f6a4:	1000ff58 	cmpnei	zero,r2,1021
1000f6a8:	1000f904 	addi	zero,r2,996
1000f6ac:	1000ff58 	cmpnei	zero,r2,1021
1000f6b0:	1000ff58 	cmpnei	zero,r2,1021
1000f6b4:	1000ff58 	cmpnei	zero,r2,1021
1000f6b8:	1000ff58 	cmpnei	zero,r2,1021
1000f6bc:	1000ff58 	cmpnei	zero,r2,1021
1000f6c0:	1000ff58 	cmpnei	zero,r2,1021
1000f6c4:	1000ff58 	cmpnei	zero,r2,1021
1000f6c8:	1000ff58 	cmpnei	zero,r2,1021
1000f6cc:	1000ff58 	cmpnei	zero,r2,1021
1000f6d0:	1000ff58 	cmpnei	zero,r2,1021
1000f6d4:	1000fbf4 	orhi	zero,r2,1007
1000f6d8:	1000ff58 	cmpnei	zero,r2,1021
1000f6dc:	1000ff58 	cmpnei	zero,r2,1021
1000f6e0:	1000ff58 	cmpnei	zero,r2,1021
1000f6e4:	1000ff58 	cmpnei	zero,r2,1021
1000f6e8:	1000ff58 	cmpnei	zero,r2,1021
1000f6ec:	1000fc34 	orhi	zero,r2,1008
1000f6f0:	1000ff58 	cmpnei	zero,r2,1021
1000f6f4:	1000ff58 	cmpnei	zero,r2,1021
1000f6f8:	1000fc78 	rdprs	zero,r2,1009
1000f6fc:	1000ff58 	cmpnei	zero,r2,1021
1000f700:	1000ff58 	cmpnei	zero,r2,1021
1000f704:	1000ff58 	cmpnei	zero,r2,1021
1000f708:	1000ff58 	cmpnei	zero,r2,1021
1000f70c:	1000ff58 	cmpnei	zero,r2,1021
1000f710:	1000ff58 	cmpnei	zero,r2,1021
1000f714:	1000ff58 	cmpnei	zero,r2,1021
1000f718:	1000ff58 	cmpnei	zero,r2,1021
1000f71c:	1000ff58 	cmpnei	zero,r2,1021
1000f720:	1000ff58 	cmpnei	zero,r2,1021
1000f724:	1000fbc0 	call	11000fbc <_gp+0xfe1fac>
1000f728:	1000ff10 	cmplti	zero,r2,1020
1000f72c:	1000ff58 	cmpnei	zero,r2,1021
1000f730:	1000ff58 	cmpnei	zero,r2,1021
1000f734:	1000ff58 	cmpnei	zero,r2,1021
1000f738:	1000fd4c 	andi	zero,r2,1013
1000f73c:	1000ff10 	cmplti	zero,r2,1020
1000f740:	1000ff58 	cmpnei	zero,r2,1021
1000f744:	1000ff58 	cmpnei	zero,r2,1021
1000f748:	1000fc64 	muli	zero,r2,1009
1000f74c:	1000ff58 	cmpnei	zero,r2,1021
1000f750:	1000feb0 	cmpltui	zero,r2,1018
1000f754:	1000fe38 	rdprs	zero,r2,1016
1000f758:	1000fe6c 	andhi	zero,r2,1017
1000f75c:	1000fd58 	cmpnei	zero,r2,1013
1000f760:	1000ff58 	cmpnei	zero,r2,1021
1000f764:	1000fd64 	muli	zero,r2,1013
1000f768:	1000ff58 	cmpnei	zero,r2,1021
1000f76c:	1000fdc0 	call	11000fdc <_gp+0xfe1fcc>
1000f770:	1000ff58 	cmpnei	zero,r2,1021
1000f774:	1000ff58 	cmpnei	zero,r2,1021
1000f778:	1000fdf4 	orhi	zero,r2,1015
1000f77c:	42000204 	addi	r8,r8,8
1000f780:	d8c12517 	ldw	r3,1172(sp)
1000f784:	1c07883a 	add	r3,r3,r16
1000f788:	d8c12515 	stw	r3,1172(sp)
1000f78c:	003f8d06 	br	1000f5c4 <__alt_data_end+0xf800f5c4>
1000f790:	d9012117 	ldw	r4,1156(sp)
1000f794:	d9412017 	ldw	r5,1152(sp)
1000f798:	000a1ac0 	call	1000a1ac <__swsetup_r>
1000f79c:	1000301e 	bne	r2,zero,1000f860 <___vfiprintf_internal_r+0x3f0>
1000f7a0:	d8812017 	ldw	r2,1152(sp)
1000f7a4:	01000284 	movi	r4,10
1000f7a8:	10c0030b 	ldhu	r3,12(r2)
1000f7ac:	1805883a 	mov	r2,r3
1000f7b0:	1080068c 	andi	r2,r2,26
1000f7b4:	113f551e 	bne	r2,r4,1000f50c <__alt_data_end+0xf800f50c>
1000f7b8:	d9012017 	ldw	r4,1152(sp)
1000f7bc:	2080038b 	ldhu	r2,14(r4)
1000f7c0:	113fffcc 	andi	r4,r2,65535
1000f7c4:	2120001c 	xori	r4,r4,32768
1000f7c8:	21200004 	addi	r4,r4,-32768
1000f7cc:	203f4f16 	blt	r4,zero,1000f50c <__alt_data_end+0xf800f50c>
1000f7d0:	d9412017 	ldw	r5,1152(sp)
1000f7d4:	d9012117 	ldw	r4,1156(sp)
1000f7d8:	d9c12317 	ldw	r7,1164(sp)
1000f7dc:	2b001917 	ldw	r12,100(r5)
1000f7e0:	2ac00717 	ldw	r11,28(r5)
1000f7e4:	2a800917 	ldw	r10,36(r5)
1000f7e8:	02010004 	movi	r8,1024
1000f7ec:	18ffff4c 	andi	r3,r3,65533
1000f7f0:	da0b883a 	add	r5,sp,r8
1000f7f4:	980d883a 	mov	r6,r19
1000f7f8:	d8c1030d 	sth	r3,1036(sp)
1000f7fc:	db011915 	stw	r12,1124(sp)
1000f800:	d881038d 	sth	r2,1038(sp)
1000f804:	dac10715 	stw	r11,1052(sp)
1000f808:	da810915 	stw	r10,1060(sp)
1000f80c:	dec10015 	stw	sp,1024(sp)
1000f810:	dec10415 	stw	sp,1040(sp)
1000f814:	da010215 	stw	r8,1032(sp)
1000f818:	da010515 	stw	r8,1044(sp)
1000f81c:	d8010615 	stw	zero,1048(sp)
1000f820:	000f4700 	call	1000f470 <___vfiprintf_internal_r>
1000f824:	1021883a 	mov	r16,r2
1000f828:	10000416 	blt	r2,zero,1000f83c <___vfiprintf_internal_r+0x3cc>
1000f82c:	d9012117 	ldw	r4,1156(sp)
1000f830:	d9410004 	addi	r5,sp,1024
1000f834:	000bc2c0 	call	1000bc2c <_fflush_r>
1000f838:	10040f1e 	bne	r2,zero,10010878 <___vfiprintf_internal_r+0x1408>
1000f83c:	d881030b 	ldhu	r2,1036(sp)
1000f840:	1080100c 	andi	r2,r2,64
1000f844:	10000426 	beq	r2,zero,1000f858 <___vfiprintf_internal_r+0x3e8>
1000f848:	d8c12017 	ldw	r3,1152(sp)
1000f84c:	1880030b 	ldhu	r2,12(r3)
1000f850:	10801014 	ori	r2,r2,64
1000f854:	1880030d 	sth	r2,12(r3)
1000f858:	8005883a 	mov	r2,r16
1000f85c:	00000106 	br	1000f864 <___vfiprintf_internal_r+0x3f4>
1000f860:	00bfffc4 	movi	r2,-1
1000f864:	dfc13517 	ldw	ra,1236(sp)
1000f868:	df013417 	ldw	fp,1232(sp)
1000f86c:	ddc13317 	ldw	r23,1228(sp)
1000f870:	dd813217 	ldw	r22,1224(sp)
1000f874:	dd413117 	ldw	r21,1220(sp)
1000f878:	dd013017 	ldw	r20,1216(sp)
1000f87c:	dcc12f17 	ldw	r19,1212(sp)
1000f880:	dc812e17 	ldw	r18,1208(sp)
1000f884:	dc412d17 	ldw	r17,1204(sp)
1000f888:	dc012c17 	ldw	r16,1200(sp)
1000f88c:	dec13604 	addi	sp,sp,1240
1000f890:	f800283a 	ret
1000f894:	000c1e80 	call	1000c1e8 <__sinit>
1000f898:	003f0706 	br	1000f4b8 <__alt_data_end+0xf800f4b8>
1000f89c:	d8c12417 	ldw	r3,1168(sp)
1000f8a0:	d8812315 	stw	r2,1164(sp)
1000f8a4:	00c7c83a 	sub	r3,zero,r3
1000f8a8:	d8c12415 	stw	r3,1168(sp)
1000f8ac:	94800114 	ori	r18,r18,4
1000f8b0:	b9800007 	ldb	r6,0(r23)
1000f8b4:	003f4f06 	br	1000f5f4 <__alt_data_end+0xf800f5f4>
1000f8b8:	94802014 	ori	r18,r18,128
1000f8bc:	b9800007 	ldb	r6,0(r23)
1000f8c0:	003f4c06 	br	1000f5f4 <__alt_data_end+0xf800f5f4>
1000f8c4:	dc012615 	stw	r16,1176(sp)
1000f8c8:	d8012415 	stw	zero,1168(sp)
1000f8cc:	35bff404 	addi	r22,r6,-48
1000f8d0:	0009883a 	mov	r4,zero
1000f8d4:	b821883a 	mov	r16,r23
1000f8d8:	01400284 	movi	r5,10
1000f8dc:	00057300 	call	10005730 <__mulsi3>
1000f8e0:	81800007 	ldb	r6,0(r16)
1000f8e4:	1589883a 	add	r4,r2,r22
1000f8e8:	bdc00044 	addi	r23,r23,1
1000f8ec:	35bff404 	addi	r22,r6,-48
1000f8f0:	b821883a 	mov	r16,r23
1000f8f4:	adbff82e 	bgeu	r21,r22,1000f8d8 <__alt_data_end+0xf800f8d8>
1000f8f8:	d9012415 	stw	r4,1168(sp)
1000f8fc:	dc012617 	ldw	r16,1176(sp)
1000f900:	003f3d06 	br	1000f5f8 <__alt_data_end+0xf800f5f8>
1000f904:	d8c12203 	ldbu	r3,1160(sp)
1000f908:	94800414 	ori	r18,r18,16
1000f90c:	9080080c 	andi	r2,r18,32
1000f910:	d8c11d85 	stb	r3,1142(sp)
1000f914:	9811883a 	mov	r8,r19
1000f918:	d8c12317 	ldw	r3,1164(sp)
1000f91c:	10018226 	beq	r2,zero,1000ff28 <___vfiprintf_internal_r+0xab8>
1000f920:	d9012317 	ldw	r4,1164(sp)
1000f924:	18800117 	ldw	r2,4(r3)
1000f928:	1cc00017 	ldw	r19,0(r3)
1000f92c:	21000204 	addi	r4,r4,8
1000f930:	d9012315 	stw	r4,1164(sp)
1000f934:	102b883a 	mov	r21,r2
1000f938:	10030016 	blt	r2,zero,1001053c <___vfiprintf_internal_r+0x10cc>
1000f93c:	dd811d83 	ldbu	r22,1142(sp)
1000f940:	8029883a 	mov	r20,r16
1000f944:	00800044 	movi	r2,1
1000f948:	9d46b03a 	or	r3,r19,r21
1000f94c:	80000216 	blt	r16,zero,1000f958 <___vfiprintf_internal_r+0x4e8>
1000f950:	013fdfc4 	movi	r4,-129
1000f954:	9124703a 	and	r18,r18,r4
1000f958:	1801b41e 	bne	r3,zero,1001002c <___vfiprintf_internal_r+0xbbc>
1000f95c:	80028126 	beq	r16,zero,10010364 <___vfiprintf_internal_r+0xef4>
1000f960:	10803fcc 	andi	r2,r2,255
1000f964:	00c00044 	movi	r3,1
1000f968:	10c1d126 	beq	r2,r3,100100b0 <___vfiprintf_internal_r+0xc40>
1000f96c:	00c00084 	movi	r3,2
1000f970:	10c28626 	beq	r2,r3,1001038c <___vfiprintf_internal_r+0xf1c>
1000f974:	d8c10a04 	addi	r3,sp,1064
1000f978:	9808d0fa 	srli	r4,r19,3
1000f97c:	a80a977a 	slli	r5,r21,29
1000f980:	a82ad0fa 	srli	r21,r21,3
1000f984:	9cc001cc 	andi	r19,r19,7
1000f988:	98800c04 	addi	r2,r19,48
1000f98c:	18ffffc4 	addi	r3,r3,-1
1000f990:	2926b03a 	or	r19,r5,r4
1000f994:	18800005 	stb	r2,0(r3)
1000f998:	9d48b03a 	or	r4,r19,r21
1000f99c:	203ff61e 	bne	r4,zero,1000f978 <__alt_data_end+0xf800f978>
1000f9a0:	9100004c 	andi	r4,r18,1
1000f9a4:	d8c12215 	stw	r3,1160(sp)
1000f9a8:	2002b31e 	bne	r4,zero,10010478 <___vfiprintf_internal_r+0x1008>
1000f9ac:	d9411e17 	ldw	r5,1144(sp)
1000f9b0:	28e9c83a 	sub	r20,r5,r3
1000f9b4:	a02b883a 	mov	r21,r20
1000f9b8:	a400010e 	bge	r20,r16,1000f9c0 <___vfiprintf_internal_r+0x550>
1000f9bc:	802b883a 	mov	r21,r16
1000f9c0:	b5803fcc 	andi	r22,r22,255
1000f9c4:	b580201c 	xori	r22,r22,128
1000f9c8:	b5bfe004 	addi	r22,r22,-128
1000f9cc:	b0000126 	beq	r22,zero,1000f9d4 <___vfiprintf_internal_r+0x564>
1000f9d0:	ad400044 	addi	r21,r21,1
1000f9d4:	9280008c 	andi	r10,r18,2
1000f9d8:	50000126 	beq	r10,zero,1000f9e0 <___vfiprintf_internal_r+0x570>
1000f9dc:	ad400084 	addi	r21,r21,2
1000f9e0:	9580210c 	andi	r22,r18,132
1000f9e4:	b001751e 	bne	r22,zero,1000ffbc <___vfiprintf_internal_r+0xb4c>
1000f9e8:	d9012417 	ldw	r4,1168(sp)
1000f9ec:	2567c83a 	sub	r19,r4,r21
1000f9f0:	04c1720e 	bge	zero,r19,1000ffbc <___vfiprintf_internal_r+0xb4c>
1000f9f4:	01c00404 	movi	r7,16
1000f9f8:	d8c11c17 	ldw	r3,1136(sp)
1000f9fc:	3cc36b0e 	bge	r7,r19,100107ac <___vfiprintf_internal_r+0x133c>
1000fa00:	00840074 	movhi	r2,4097
1000fa04:	10954804 	addi	r2,r2,21792
1000fa08:	dc012915 	stw	r16,1188(sp)
1000fa0c:	d9011b17 	ldw	r4,1132(sp)
1000fa10:	9821883a 	mov	r16,r19
1000fa14:	d8812615 	stw	r2,1176(sp)
1000fa18:	030001c4 	movi	r12,7
1000fa1c:	5027883a 	mov	r19,r10
1000fa20:	00000506 	br	1000fa38 <___vfiprintf_internal_r+0x5c8>
1000fa24:	21400084 	addi	r5,r4,2
1000fa28:	42000204 	addi	r8,r8,8
1000fa2c:	1009883a 	mov	r4,r2
1000fa30:	843ffc04 	addi	r16,r16,-16
1000fa34:	3c000d0e 	bge	r7,r16,1000fa6c <___vfiprintf_internal_r+0x5fc>
1000fa38:	18c00404 	addi	r3,r3,16
1000fa3c:	20800044 	addi	r2,r4,1
1000fa40:	47000015 	stw	fp,0(r8)
1000fa44:	41c00115 	stw	r7,4(r8)
1000fa48:	d8c11c15 	stw	r3,1136(sp)
1000fa4c:	d8811b15 	stw	r2,1132(sp)
1000fa50:	60bff40e 	bge	r12,r2,1000fa24 <__alt_data_end+0xf800fa24>
1000fa54:	18014b1e 	bne	r3,zero,1000ff84 <___vfiprintf_internal_r+0xb14>
1000fa58:	843ffc04 	addi	r16,r16,-16
1000fa5c:	0009883a 	mov	r4,zero
1000fa60:	01400044 	movi	r5,1
1000fa64:	d811883a 	mov	r8,sp
1000fa68:	3c3ff316 	blt	r7,r16,1000fa38 <__alt_data_end+0xf800fa38>
1000fa6c:	9815883a 	mov	r10,r19
1000fa70:	8027883a 	mov	r19,r16
1000fa74:	dc012917 	ldw	r16,1188(sp)
1000fa78:	d9012617 	ldw	r4,1176(sp)
1000fa7c:	98c7883a 	add	r3,r19,r3
1000fa80:	44c00115 	stw	r19,4(r8)
1000fa84:	41000015 	stw	r4,0(r8)
1000fa88:	d8c11c15 	stw	r3,1136(sp)
1000fa8c:	d9411b15 	stw	r5,1132(sp)
1000fa90:	008001c4 	movi	r2,7
1000fa94:	11425116 	blt	r2,r5,100103dc <___vfiprintf_internal_r+0xf6c>
1000fa98:	d9011d87 	ldb	r4,1142(sp)
1000fa9c:	42000204 	addi	r8,r8,8
1000faa0:	28800044 	addi	r2,r5,1
1000faa4:	20014a1e 	bne	r4,zero,1000ffd0 <___vfiprintf_internal_r+0xb60>
1000faa8:	50000c26 	beq	r10,zero,1000fadc <___vfiprintf_internal_r+0x66c>
1000faac:	d9011d04 	addi	r4,sp,1140
1000fab0:	18c00084 	addi	r3,r3,2
1000fab4:	41000015 	stw	r4,0(r8)
1000fab8:	01000084 	movi	r4,2
1000fabc:	41000115 	stw	r4,4(r8)
1000fac0:	d8c11c15 	stw	r3,1136(sp)
1000fac4:	d8811b15 	stw	r2,1132(sp)
1000fac8:	010001c4 	movi	r4,7
1000facc:	20822016 	blt	r4,r2,10010350 <___vfiprintf_internal_r+0xee0>
1000fad0:	100b883a 	mov	r5,r2
1000fad4:	42000204 	addi	r8,r8,8
1000fad8:	10800044 	addi	r2,r2,1
1000fadc:	01002004 	movi	r4,128
1000fae0:	b101de26 	beq	r22,r4,1001025c <___vfiprintf_internal_r+0xdec>
1000fae4:	8521c83a 	sub	r16,r16,r20
1000fae8:	0400230e 	bge	zero,r16,1000fb78 <___vfiprintf_internal_r+0x708>
1000faec:	04c00404 	movi	r19,16
1000faf0:	9c030d0e 	bge	r19,r16,10010728 <___vfiprintf_internal_r+0x12b8>
1000faf4:	00840074 	movhi	r2,4097
1000faf8:	10954404 	addi	r2,r2,21776
1000fafc:	d8812615 	stw	r2,1176(sp)
1000fb00:	058001c4 	movi	r22,7
1000fb04:	00000506 	br	1000fb1c <___vfiprintf_internal_r+0x6ac>
1000fb08:	28800084 	addi	r2,r5,2
1000fb0c:	42000204 	addi	r8,r8,8
1000fb10:	200b883a 	mov	r5,r4
1000fb14:	843ffc04 	addi	r16,r16,-16
1000fb18:	9c000d0e 	bge	r19,r16,1000fb50 <___vfiprintf_internal_r+0x6e0>
1000fb1c:	18c00404 	addi	r3,r3,16
1000fb20:	29000044 	addi	r4,r5,1
1000fb24:	44400015 	stw	r17,0(r8)
1000fb28:	44c00115 	stw	r19,4(r8)
1000fb2c:	d8c11c15 	stw	r3,1136(sp)
1000fb30:	d9011b15 	stw	r4,1132(sp)
1000fb34:	b13ff40e 	bge	r22,r4,1000fb08 <__alt_data_end+0xf800fb08>
1000fb38:	1801321e 	bne	r3,zero,10010004 <___vfiprintf_internal_r+0xb94>
1000fb3c:	843ffc04 	addi	r16,r16,-16
1000fb40:	000b883a 	mov	r5,zero
1000fb44:	00800044 	movi	r2,1
1000fb48:	d811883a 	mov	r8,sp
1000fb4c:	9c3ff316 	blt	r19,r16,1000fb1c <__alt_data_end+0xf800fb1c>
1000fb50:	d9012617 	ldw	r4,1176(sp)
1000fb54:	1c07883a 	add	r3,r3,r16
1000fb58:	44000115 	stw	r16,4(r8)
1000fb5c:	41000015 	stw	r4,0(r8)
1000fb60:	d8c11c15 	stw	r3,1136(sp)
1000fb64:	d8811b15 	stw	r2,1132(sp)
1000fb68:	010001c4 	movi	r4,7
1000fb6c:	20816216 	blt	r4,r2,100100f8 <___vfiprintf_internal_r+0xc88>
1000fb70:	42000204 	addi	r8,r8,8
1000fb74:	10800044 	addi	r2,r2,1
1000fb78:	d9012217 	ldw	r4,1160(sp)
1000fb7c:	1d07883a 	add	r3,r3,r20
1000fb80:	45000115 	stw	r20,4(r8)
1000fb84:	41000015 	stw	r4,0(r8)
1000fb88:	d8c11c15 	stw	r3,1136(sp)
1000fb8c:	d8811b15 	stw	r2,1132(sp)
1000fb90:	010001c4 	movi	r4,7
1000fb94:	2081610e 	bge	r4,r2,1001011c <___vfiprintf_internal_r+0xcac>
1000fb98:	1802211e 	bne	r3,zero,10010420 <___vfiprintf_internal_r+0xfb0>
1000fb9c:	d8011b15 	stw	zero,1132(sp)
1000fba0:	9480010c 	andi	r18,r18,4
1000fba4:	9002171e 	bne	r18,zero,10010404 <___vfiprintf_internal_r+0xf94>
1000fba8:	d9412417 	ldw	r5,1168(sp)
1000fbac:	a9433716 	blt	r21,r5,1001088c <___vfiprintf_internal_r+0x141c>
1000fbb0:	d8812517 	ldw	r2,1172(sp)
1000fbb4:	1545883a 	add	r2,r2,r21
1000fbb8:	d8812515 	stw	r2,1172(sp)
1000fbbc:	00019a06 	br	10010228 <___vfiprintf_internal_r+0xdb8>
1000fbc0:	d8c12317 	ldw	r3,1164(sp)
1000fbc4:	05400044 	movi	r21,1
1000fbc8:	9811883a 	mov	r8,r19
1000fbcc:	18800017 	ldw	r2,0(r3)
1000fbd0:	18c00104 	addi	r3,r3,4
1000fbd4:	d8c12315 	stw	r3,1164(sp)
1000fbd8:	d8c10004 	addi	r3,sp,1024
1000fbdc:	d8011d85 	stb	zero,1142(sp)
1000fbe0:	d8810005 	stb	r2,1024(sp)
1000fbe4:	a829883a 	mov	r20,r21
1000fbe8:	d8c12215 	stw	r3,1160(sp)
1000fbec:	0021883a 	mov	r16,zero
1000fbf0:	003f7806 	br	1000f9d4 <__alt_data_end+0xf800f9d4>
1000fbf4:	94800414 	ori	r18,r18,16
1000fbf8:	9080080c 	andi	r2,r18,32
1000fbfc:	9811883a 	mov	r8,r19
1000fc00:	10009026 	beq	r2,zero,1000fe44 <___vfiprintf_internal_r+0x9d4>
1000fc04:	d8812317 	ldw	r2,1164(sp)
1000fc08:	d8c12317 	ldw	r3,1164(sp)
1000fc0c:	14c00017 	ldw	r19,0(r2)
1000fc10:	15400117 	ldw	r21,4(r2)
1000fc14:	18c00204 	addi	r3,r3,8
1000fc18:	d8c12315 	stw	r3,1164(sp)
1000fc1c:	0005883a 	mov	r2,zero
1000fc20:	9d46b03a 	or	r3,r19,r21
1000fc24:	d8011d85 	stb	zero,1142(sp)
1000fc28:	8029883a 	mov	r20,r16
1000fc2c:	002d883a 	mov	r22,zero
1000fc30:	003f4606 	br	1000f94c <__alt_data_end+0xf800f94c>
1000fc34:	94800414 	ori	r18,r18,16
1000fc38:	9080080c 	andi	r2,r18,32
1000fc3c:	9811883a 	mov	r8,r19
1000fc40:	10006226 	beq	r2,zero,1000fdcc <___vfiprintf_internal_r+0x95c>
1000fc44:	d9012317 	ldw	r4,1164(sp)
1000fc48:	00800044 	movi	r2,1
1000fc4c:	24c00017 	ldw	r19,0(r4)
1000fc50:	25400117 	ldw	r21,4(r4)
1000fc54:	21000204 	addi	r4,r4,8
1000fc58:	d9012315 	stw	r4,1164(sp)
1000fc5c:	9d46b03a 	or	r3,r19,r21
1000fc60:	003ff006 	br	1000fc24 <__alt_data_end+0xf800fc24>
1000fc64:	b9800007 	ldb	r6,0(r23)
1000fc68:	00801b04 	movi	r2,108
1000fc6c:	3082b226 	beq	r6,r2,10010738 <___vfiprintf_internal_r+0x12c8>
1000fc70:	94800414 	ori	r18,r18,16
1000fc74:	003e5f06 	br	1000f5f4 <__alt_data_end+0xf800f5f4>
1000fc78:	d8c12203 	ldbu	r3,1160(sp)
1000fc7c:	01040074 	movhi	r4,4097
1000fc80:	2114df04 	addi	r4,r4,21372
1000fc84:	d8c11d85 	stb	r3,1142(sp)
1000fc88:	d9012715 	stw	r4,1180(sp)
1000fc8c:	90c0080c 	andi	r3,r18,32
1000fc90:	9811883a 	mov	r8,r19
1000fc94:	d8812317 	ldw	r2,1164(sp)
1000fc98:	18005f26 	beq	r3,zero,1000fe18 <___vfiprintf_internal_r+0x9a8>
1000fc9c:	d9012317 	ldw	r4,1164(sp)
1000fca0:	14c00017 	ldw	r19,0(r2)
1000fca4:	15400117 	ldw	r21,4(r2)
1000fca8:	21000204 	addi	r4,r4,8
1000fcac:	d9012315 	stw	r4,1164(sp)
1000fcb0:	9080004c 	andi	r2,r18,1
1000fcb4:	1001e226 	beq	r2,zero,10010440 <___vfiprintf_internal_r+0xfd0>
1000fcb8:	9d46b03a 	or	r3,r19,r21
1000fcbc:	18024e26 	beq	r3,zero,100105f8 <___vfiprintf_internal_r+0x1188>
1000fcc0:	00800c04 	movi	r2,48
1000fcc4:	d8811d05 	stb	r2,1140(sp)
1000fcc8:	d9811d45 	stb	r6,1141(sp)
1000fccc:	94800094 	ori	r18,r18,2
1000fcd0:	00800084 	movi	r2,2
1000fcd4:	003fd306 	br	1000fc24 <__alt_data_end+0xf800fc24>
1000fcd8:	d9012317 	ldw	r4,1164(sp)
1000fcdc:	d9412317 	ldw	r5,1164(sp)
1000fce0:	21000017 	ldw	r4,0(r4)
1000fce4:	28800104 	addi	r2,r5,4
1000fce8:	d9012415 	stw	r4,1168(sp)
1000fcec:	203eeb16 	blt	r4,zero,1000f89c <__alt_data_end+0xf800f89c>
1000fcf0:	d8812315 	stw	r2,1164(sp)
1000fcf4:	b9800007 	ldb	r6,0(r23)
1000fcf8:	003e3e06 	br	1000f5f4 <__alt_data_end+0xf800f5f4>
1000fcfc:	b9800007 	ldb	r6,0(r23)
1000fd00:	01000a84 	movi	r4,42
1000fd04:	b8800044 	addi	r2,r23,1
1000fd08:	3102d226 	beq	r6,r4,10010854 <___vfiprintf_internal_r+0x13e4>
1000fd0c:	35bff404 	addi	r22,r6,-48
1000fd10:	102f883a 	mov	r23,r2
1000fd14:	0021883a 	mov	r16,zero
1000fd18:	adbe3736 	bltu	r21,r22,1000f5f8 <__alt_data_end+0xf800f5f8>
1000fd1c:	0009883a 	mov	r4,zero
1000fd20:	01400284 	movi	r5,10
1000fd24:	00057300 	call	10005730 <__mulsi3>
1000fd28:	b9800007 	ldb	r6,0(r23)
1000fd2c:	b089883a 	add	r4,r22,r2
1000fd30:	bdc00044 	addi	r23,r23,1
1000fd34:	35bff404 	addi	r22,r6,-48
1000fd38:	adbff92e 	bgeu	r21,r22,1000fd20 <__alt_data_end+0xf800fd20>
1000fd3c:	2021883a 	mov	r16,r4
1000fd40:	203e2d0e 	bge	r4,zero,1000f5f8 <__alt_data_end+0xf800f5f8>
1000fd44:	043fffc4 	movi	r16,-1
1000fd48:	003e2b06 	br	1000f5f8 <__alt_data_end+0xf800f5f8>
1000fd4c:	94801014 	ori	r18,r18,64
1000fd50:	b9800007 	ldb	r6,0(r23)
1000fd54:	003e2706 	br	1000f5f4 <__alt_data_end+0xf800f5f4>
1000fd58:	94800814 	ori	r18,r18,32
1000fd5c:	b9800007 	ldb	r6,0(r23)
1000fd60:	003e2406 	br	1000f5f4 <__alt_data_end+0xf800f5f4>
1000fd64:	d9412317 	ldw	r5,1164(sp)
1000fd68:	d8812317 	ldw	r2,1164(sp)
1000fd6c:	d8011d85 	stb	zero,1142(sp)
1000fd70:	29400017 	ldw	r5,0(r5)
1000fd74:	9811883a 	mov	r8,r19
1000fd78:	14c00104 	addi	r19,r2,4
1000fd7c:	d9412215 	stw	r5,1160(sp)
1000fd80:	28029026 	beq	r5,zero,100107c4 <___vfiprintf_internal_r+0x1354>
1000fd84:	d9012217 	ldw	r4,1160(sp)
1000fd88:	80027616 	blt	r16,zero,10010764 <___vfiprintf_internal_r+0x12f4>
1000fd8c:	000b883a 	mov	r5,zero
1000fd90:	800d883a 	mov	r6,r16
1000fd94:	da012a15 	stw	r8,1192(sp)
1000fd98:	000d6a00 	call	1000d6a0 <memchr>
1000fd9c:	da012a17 	ldw	r8,1192(sp)
1000fda0:	1002a026 	beq	r2,zero,10010824 <___vfiprintf_internal_r+0x13b4>
1000fda4:	d8c12217 	ldw	r3,1160(sp)
1000fda8:	10e9c83a 	sub	r20,r2,r3
1000fdac:	85023816 	blt	r16,r20,10010690 <___vfiprintf_internal_r+0x1220>
1000fdb0:	dd811d83 	ldbu	r22,1142(sp)
1000fdb4:	dcc12315 	stw	r19,1164(sp)
1000fdb8:	0021883a 	mov	r16,zero
1000fdbc:	003efd06 	br	1000f9b4 <__alt_data_end+0xf800f9b4>
1000fdc0:	9080080c 	andi	r2,r18,32
1000fdc4:	9811883a 	mov	r8,r19
1000fdc8:	103f9e1e 	bne	r2,zero,1000fc44 <__alt_data_end+0xf800fc44>
1000fdcc:	9080040c 	andi	r2,r18,16
1000fdd0:	10021726 	beq	r2,zero,10010630 <___vfiprintf_internal_r+0x11c0>
1000fdd4:	d9412317 	ldw	r5,1164(sp)
1000fdd8:	002b883a 	mov	r21,zero
1000fddc:	00800044 	movi	r2,1
1000fde0:	2cc00017 	ldw	r19,0(r5)
1000fde4:	29400104 	addi	r5,r5,4
1000fde8:	d9412315 	stw	r5,1164(sp)
1000fdec:	9807883a 	mov	r3,r19
1000fdf0:	003f8c06 	br	1000fc24 <__alt_data_end+0xf800fc24>
1000fdf4:	d8c12203 	ldbu	r3,1160(sp)
1000fdf8:	01040074 	movhi	r4,4097
1000fdfc:	2114e404 	addi	r4,r4,21392
1000fe00:	d8c11d85 	stb	r3,1142(sp)
1000fe04:	d9012715 	stw	r4,1180(sp)
1000fe08:	90c0080c 	andi	r3,r18,32
1000fe0c:	9811883a 	mov	r8,r19
1000fe10:	d8812317 	ldw	r2,1164(sp)
1000fe14:	183fa11e 	bne	r3,zero,1000fc9c <__alt_data_end+0xf800fc9c>
1000fe18:	90c0040c 	andi	r3,r18,16
1000fe1c:	1801e526 	beq	r3,zero,100105b4 <___vfiprintf_internal_r+0x1144>
1000fe20:	d9412317 	ldw	r5,1164(sp)
1000fe24:	14c00017 	ldw	r19,0(r2)
1000fe28:	002b883a 	mov	r21,zero
1000fe2c:	29400104 	addi	r5,r5,4
1000fe30:	d9412315 	stw	r5,1164(sp)
1000fe34:	003f9e06 	br	1000fcb0 <__alt_data_end+0xf800fcb0>
1000fe38:	9080080c 	andi	r2,r18,32
1000fe3c:	9811883a 	mov	r8,r19
1000fe40:	103f701e 	bne	r2,zero,1000fc04 <__alt_data_end+0xf800fc04>
1000fe44:	9080040c 	andi	r2,r18,16
1000fe48:	1001ef26 	beq	r2,zero,10010608 <___vfiprintf_internal_r+0x1198>
1000fe4c:	d9012317 	ldw	r4,1164(sp)
1000fe50:	002b883a 	mov	r21,zero
1000fe54:	0005883a 	mov	r2,zero
1000fe58:	24c00017 	ldw	r19,0(r4)
1000fe5c:	21000104 	addi	r4,r4,4
1000fe60:	d9012315 	stw	r4,1164(sp)
1000fe64:	9807883a 	mov	r3,r19
1000fe68:	003f6e06 	br	1000fc24 <__alt_data_end+0xf800fc24>
1000fe6c:	d8c12317 	ldw	r3,1164(sp)
1000fe70:	9811883a 	mov	r8,r19
1000fe74:	00800c04 	movi	r2,48
1000fe78:	1cc00017 	ldw	r19,0(r3)
1000fe7c:	01040074 	movhi	r4,4097
1000fe80:	18c00104 	addi	r3,r3,4
1000fe84:	d8811d05 	stb	r2,1140(sp)
1000fe88:	2114e404 	addi	r4,r4,21392
1000fe8c:	00801e04 	movi	r2,120
1000fe90:	d8811d45 	stb	r2,1141(sp)
1000fe94:	d8c12315 	stw	r3,1164(sp)
1000fe98:	002b883a 	mov	r21,zero
1000fe9c:	94800094 	ori	r18,r18,2
1000fea0:	d9012715 	stw	r4,1180(sp)
1000fea4:	00800084 	movi	r2,2
1000fea8:	9807883a 	mov	r3,r19
1000feac:	003f5d06 	br	1000fc24 <__alt_data_end+0xf800fc24>
1000feb0:	d8c12203 	ldbu	r3,1160(sp)
1000feb4:	9080080c 	andi	r2,r18,32
1000feb8:	9811883a 	mov	r8,r19
1000febc:	d8c11d85 	stb	r3,1142(sp)
1000fec0:	1001b126 	beq	r2,zero,10010588 <___vfiprintf_internal_r+0x1118>
1000fec4:	d9012317 	ldw	r4,1164(sp)
1000fec8:	d9412517 	ldw	r5,1172(sp)
1000fecc:	20800017 	ldw	r2,0(r4)
1000fed0:	2807d7fa 	srai	r3,r5,31
1000fed4:	21000104 	addi	r4,r4,4
1000fed8:	d9012315 	stw	r4,1164(sp)
1000fedc:	11400015 	stw	r5,0(r2)
1000fee0:	10c00115 	stw	r3,4(r2)
1000fee4:	003d9a06 	br	1000f550 <__alt_data_end+0xf800f550>
1000fee8:	d8812207 	ldb	r2,1160(sp)
1000feec:	1001c41e 	bne	r2,zero,10010600 <___vfiprintf_internal_r+0x1190>
1000fef0:	00c00804 	movi	r3,32
1000fef4:	d8c12205 	stb	r3,1160(sp)
1000fef8:	b9800007 	ldb	r6,0(r23)
1000fefc:	003dbd06 	br	1000f5f4 <__alt_data_end+0xf800f5f4>
1000ff00:	00c00ac4 	movi	r3,43
1000ff04:	d8c12205 	stb	r3,1160(sp)
1000ff08:	b9800007 	ldb	r6,0(r23)
1000ff0c:	003db906 	br	1000f5f4 <__alt_data_end+0xf800f5f4>
1000ff10:	d8c12203 	ldbu	r3,1160(sp)
1000ff14:	9080080c 	andi	r2,r18,32
1000ff18:	9811883a 	mov	r8,r19
1000ff1c:	d8c11d85 	stb	r3,1142(sp)
1000ff20:	d8c12317 	ldw	r3,1164(sp)
1000ff24:	103e7e1e 	bne	r2,zero,1000f920 <__alt_data_end+0xf800f920>
1000ff28:	9080040c 	andi	r2,r18,16
1000ff2c:	1001a926 	beq	r2,zero,100105d4 <___vfiprintf_internal_r+0x1164>
1000ff30:	1cc00017 	ldw	r19,0(r3)
1000ff34:	d9412317 	ldw	r5,1164(sp)
1000ff38:	982bd7fa 	srai	r21,r19,31
1000ff3c:	29400104 	addi	r5,r5,4
1000ff40:	d9412315 	stw	r5,1164(sp)
1000ff44:	a805883a 	mov	r2,r21
1000ff48:	003e7b06 	br	1000f938 <__alt_data_end+0xf800f938>
1000ff4c:	94800054 	ori	r18,r18,1
1000ff50:	b9800007 	ldb	r6,0(r23)
1000ff54:	003da706 	br	1000f5f4 <__alt_data_end+0xf800f5f4>
1000ff58:	d8c12203 	ldbu	r3,1160(sp)
1000ff5c:	9811883a 	mov	r8,r19
1000ff60:	d8c11d85 	stb	r3,1142(sp)
1000ff64:	30005826 	beq	r6,zero,100100c8 <___vfiprintf_internal_r+0xc58>
1000ff68:	05400044 	movi	r21,1
1000ff6c:	d8c10004 	addi	r3,sp,1024
1000ff70:	d9810005 	stb	r6,1024(sp)
1000ff74:	d8011d85 	stb	zero,1142(sp)
1000ff78:	a829883a 	mov	r20,r21
1000ff7c:	d8c12215 	stw	r3,1160(sp)
1000ff80:	003f1a06 	br	1000fbec <__alt_data_end+0xf800fbec>
1000ff84:	d9012117 	ldw	r4,1156(sp)
1000ff88:	d9412017 	ldw	r5,1152(sp)
1000ff8c:	d9811a04 	addi	r6,sp,1128
1000ff90:	d9c12a15 	stw	r7,1192(sp)
1000ff94:	db012b15 	stw	r12,1196(sp)
1000ff98:	000f35c0 	call	1000f35c <__sprint_r.part.0>
1000ff9c:	d9c12a17 	ldw	r7,1192(sp)
1000ffa0:	db012b17 	ldw	r12,1196(sp)
1000ffa4:	10004e1e 	bne	r2,zero,100100e0 <___vfiprintf_internal_r+0xc70>
1000ffa8:	d9011b17 	ldw	r4,1132(sp)
1000ffac:	d8c11c17 	ldw	r3,1136(sp)
1000ffb0:	d811883a 	mov	r8,sp
1000ffb4:	21400044 	addi	r5,r4,1
1000ffb8:	003e9d06 	br	1000fa30 <__alt_data_end+0xf800fa30>
1000ffbc:	d9411b17 	ldw	r5,1132(sp)
1000ffc0:	d8c11c17 	ldw	r3,1136(sp)
1000ffc4:	28800044 	addi	r2,r5,1
1000ffc8:	d9011d87 	ldb	r4,1142(sp)
1000ffcc:	203eb626 	beq	r4,zero,1000faa8 <__alt_data_end+0xf800faa8>
1000ffd0:	01000044 	movi	r4,1
1000ffd4:	d9411d84 	addi	r5,sp,1142
1000ffd8:	1907883a 	add	r3,r3,r4
1000ffdc:	41400015 	stw	r5,0(r8)
1000ffe0:	41000115 	stw	r4,4(r8)
1000ffe4:	d8c11c15 	stw	r3,1136(sp)
1000ffe8:	d8811b15 	stw	r2,1132(sp)
1000ffec:	014001c4 	movi	r5,7
1000fff0:	2880ce16 	blt	r5,r2,1001032c <___vfiprintf_internal_r+0xebc>
1000fff4:	100b883a 	mov	r5,r2
1000fff8:	42000204 	addi	r8,r8,8
1000fffc:	10800044 	addi	r2,r2,1
10010000:	003ea906 	br	1000faa8 <__alt_data_end+0xf800faa8>
10010004:	d9012117 	ldw	r4,1156(sp)
10010008:	d9412017 	ldw	r5,1152(sp)
1001000c:	d9811a04 	addi	r6,sp,1128
10010010:	000f35c0 	call	1000f35c <__sprint_r.part.0>
10010014:	1000321e 	bne	r2,zero,100100e0 <___vfiprintf_internal_r+0xc70>
10010018:	d9411b17 	ldw	r5,1132(sp)
1001001c:	d8c11c17 	ldw	r3,1136(sp)
10010020:	d811883a 	mov	r8,sp
10010024:	28800044 	addi	r2,r5,1
10010028:	003eba06 	br	1000fb14 <__alt_data_end+0xf800fb14>
1001002c:	10803fcc 	andi	r2,r2,255
10010030:	00c00044 	movi	r3,1
10010034:	10fe4d1e 	bne	r2,r3,1000f96c <__alt_data_end+0xf800f96c>
10010038:	a800021e 	bne	r21,zero,10010044 <___vfiprintf_internal_r+0xbd4>
1001003c:	00800244 	movi	r2,9
10010040:	14c01b2e 	bgeu	r2,r19,100100b0 <___vfiprintf_internal_r+0xc40>
10010044:	dc012215 	stw	r16,1160(sp)
10010048:	dd010a04 	addi	r20,sp,1064
1001004c:	a821883a 	mov	r16,r21
10010050:	402b883a 	mov	r21,r8
10010054:	9809883a 	mov	r4,r19
10010058:	800b883a 	mov	r5,r16
1001005c:	01800284 	movi	r6,10
10010060:	000f883a 	mov	r7,zero
10010064:	00118440 	call	10011844 <__umoddi3>
10010068:	10800c04 	addi	r2,r2,48
1001006c:	a53fffc4 	addi	r20,r20,-1
10010070:	9809883a 	mov	r4,r19
10010074:	800b883a 	mov	r5,r16
10010078:	01800284 	movi	r6,10
1001007c:	000f883a 	mov	r7,zero
10010080:	a0800005 	stb	r2,0(r20)
10010084:	00112040 	call	10011204 <__udivdi3>
10010088:	1027883a 	mov	r19,r2
1001008c:	10c4b03a 	or	r2,r2,r3
10010090:	1821883a 	mov	r16,r3
10010094:	103fef1e 	bne	r2,zero,10010054 <__alt_data_end+0xf8010054>
10010098:	d9011e17 	ldw	r4,1144(sp)
1001009c:	dc012217 	ldw	r16,1160(sp)
100100a0:	a811883a 	mov	r8,r21
100100a4:	dd012215 	stw	r20,1160(sp)
100100a8:	2529c83a 	sub	r20,r4,r20
100100ac:	003e4106 	br	1000f9b4 <__alt_data_end+0xf800f9b4>
100100b0:	9cc00c04 	addi	r19,r19,48
100100b4:	d8c109c4 	addi	r3,sp,1063
100100b8:	dcc109c5 	stb	r19,1063(sp)
100100bc:	dd012817 	ldw	r20,1184(sp)
100100c0:	d8c12215 	stw	r3,1160(sp)
100100c4:	003e3b06 	br	1000f9b4 <__alt_data_end+0xf800f9b4>
100100c8:	d8811c17 	ldw	r2,1136(sp)
100100cc:	10000426 	beq	r2,zero,100100e0 <___vfiprintf_internal_r+0xc70>
100100d0:	d9012117 	ldw	r4,1156(sp)
100100d4:	d9412017 	ldw	r5,1152(sp)
100100d8:	d9811a04 	addi	r6,sp,1128
100100dc:	000f35c0 	call	1000f35c <__sprint_r.part.0>
100100e0:	d9412017 	ldw	r5,1152(sp)
100100e4:	2880030b 	ldhu	r2,12(r5)
100100e8:	1080100c 	andi	r2,r2,64
100100ec:	103ddc1e 	bne	r2,zero,1000f860 <__alt_data_end+0xf800f860>
100100f0:	d8812517 	ldw	r2,1172(sp)
100100f4:	003ddb06 	br	1000f864 <__alt_data_end+0xf800f864>
100100f8:	1801061e 	bne	r3,zero,10010514 <___vfiprintf_internal_r+0x10a4>
100100fc:	d8c12217 	ldw	r3,1160(sp)
10010100:	00800044 	movi	r2,1
10010104:	dd000115 	stw	r20,4(sp)
10010108:	d8c00015 	stw	r3,0(sp)
1001010c:	dd011c15 	stw	r20,1136(sp)
10010110:	d8811b15 	stw	r2,1132(sp)
10010114:	a007883a 	mov	r3,r20
10010118:	d811883a 	mov	r8,sp
1001011c:	42000204 	addi	r8,r8,8
10010120:	9480010c 	andi	r18,r18,4
10010124:	90003426 	beq	r18,zero,100101f8 <___vfiprintf_internal_r+0xd88>
10010128:	d9412417 	ldw	r5,1168(sp)
1001012c:	2d65c83a 	sub	r18,r5,r21
10010130:	0480310e 	bge	zero,r18,100101f8 <___vfiprintf_internal_r+0xd88>
10010134:	04000404 	movi	r16,16
10010138:	8481ad0e 	bge	r16,r18,100107f0 <___vfiprintf_internal_r+0x1380>
1001013c:	01440074 	movhi	r5,4097
10010140:	29554804 	addi	r5,r5,21792
10010144:	d9011b17 	ldw	r4,1132(sp)
10010148:	d9412615 	stw	r5,1176(sp)
1001014c:	04c001c4 	movi	r19,7
10010150:	dd012117 	ldw	r20,1156(sp)
10010154:	dd812017 	ldw	r22,1152(sp)
10010158:	00000506 	br	10010170 <___vfiprintf_internal_r+0xd00>
1001015c:	21400084 	addi	r5,r4,2
10010160:	42000204 	addi	r8,r8,8
10010164:	1009883a 	mov	r4,r2
10010168:	94bffc04 	addi	r18,r18,-16
1001016c:	84800d0e 	bge	r16,r18,100101a4 <___vfiprintf_internal_r+0xd34>
10010170:	18c00404 	addi	r3,r3,16
10010174:	20800044 	addi	r2,r4,1
10010178:	47000015 	stw	fp,0(r8)
1001017c:	44000115 	stw	r16,4(r8)
10010180:	d8c11c15 	stw	r3,1136(sp)
10010184:	d8811b15 	stw	r2,1132(sp)
10010188:	98bff40e 	bge	r19,r2,1001015c <__alt_data_end+0xf801015c>
1001018c:	1800291e 	bne	r3,zero,10010234 <___vfiprintf_internal_r+0xdc4>
10010190:	94bffc04 	addi	r18,r18,-16
10010194:	0009883a 	mov	r4,zero
10010198:	01400044 	movi	r5,1
1001019c:	d811883a 	mov	r8,sp
100101a0:	84bff316 	blt	r16,r18,10010170 <__alt_data_end+0xf8010170>
100101a4:	d8812617 	ldw	r2,1176(sp)
100101a8:	1c87883a 	add	r3,r3,r18
100101ac:	44800115 	stw	r18,4(r8)
100101b0:	40800015 	stw	r2,0(r8)
100101b4:	d8c11c15 	stw	r3,1136(sp)
100101b8:	d9411b15 	stw	r5,1132(sp)
100101bc:	008001c4 	movi	r2,7
100101c0:	11400d0e 	bge	r2,r5,100101f8 <___vfiprintf_internal_r+0xd88>
100101c4:	1800061e 	bne	r3,zero,100101e0 <___vfiprintf_internal_r+0xd70>
100101c8:	d8c12417 	ldw	r3,1168(sp)
100101cc:	a8c12e16 	blt	r21,r3,10010688 <___vfiprintf_internal_r+0x1218>
100101d0:	d9012517 	ldw	r4,1172(sp)
100101d4:	2549883a 	add	r4,r4,r21
100101d8:	d9012515 	stw	r4,1172(sp)
100101dc:	00001206 	br	10010228 <___vfiprintf_internal_r+0xdb8>
100101e0:	d9012117 	ldw	r4,1156(sp)
100101e4:	d9412017 	ldw	r5,1152(sp)
100101e8:	d9811a04 	addi	r6,sp,1128
100101ec:	000f35c0 	call	1000f35c <__sprint_r.part.0>
100101f0:	103fbb1e 	bne	r2,zero,100100e0 <__alt_data_end+0xf80100e0>
100101f4:	d8c11c17 	ldw	r3,1136(sp)
100101f8:	d8812417 	ldw	r2,1168(sp)
100101fc:	a880010e 	bge	r21,r2,10010204 <___vfiprintf_internal_r+0xd94>
10010200:	102b883a 	mov	r21,r2
10010204:	d9012517 	ldw	r4,1172(sp)
10010208:	2549883a 	add	r4,r4,r21
1001020c:	d9012515 	stw	r4,1172(sp)
10010210:	18000526 	beq	r3,zero,10010228 <___vfiprintf_internal_r+0xdb8>
10010214:	d9012117 	ldw	r4,1156(sp)
10010218:	d9412017 	ldw	r5,1152(sp)
1001021c:	d9811a04 	addi	r6,sp,1128
10010220:	000f35c0 	call	1000f35c <__sprint_r.part.0>
10010224:	103fae1e 	bne	r2,zero,100100e0 <__alt_data_end+0xf80100e0>
10010228:	d8011b15 	stw	zero,1132(sp)
1001022c:	d811883a 	mov	r8,sp
10010230:	003cc706 	br	1000f550 <__alt_data_end+0xf800f550>
10010234:	a009883a 	mov	r4,r20
10010238:	b00b883a 	mov	r5,r22
1001023c:	d9811a04 	addi	r6,sp,1128
10010240:	000f35c0 	call	1000f35c <__sprint_r.part.0>
10010244:	103fa61e 	bne	r2,zero,100100e0 <__alt_data_end+0xf80100e0>
10010248:	d9011b17 	ldw	r4,1132(sp)
1001024c:	d8c11c17 	ldw	r3,1136(sp)
10010250:	d811883a 	mov	r8,sp
10010254:	21400044 	addi	r5,r4,1
10010258:	003fc306 	br	10010168 <__alt_data_end+0xf8010168>
1001025c:	d9012417 	ldw	r4,1168(sp)
10010260:	256dc83a 	sub	r22,r4,r21
10010264:	05be1f0e 	bge	zero,r22,1000fae4 <__alt_data_end+0xf800fae4>
10010268:	04c00404 	movi	r19,16
1001026c:	9d81720e 	bge	r19,r22,10010838 <___vfiprintf_internal_r+0x13c8>
10010270:	00840074 	movhi	r2,4097
10010274:	10954404 	addi	r2,r2,21776
10010278:	d8812615 	stw	r2,1176(sp)
1001027c:	028001c4 	movi	r10,7
10010280:	00000506 	br	10010298 <___vfiprintf_internal_r+0xe28>
10010284:	29000084 	addi	r4,r5,2
10010288:	42000204 	addi	r8,r8,8
1001028c:	100b883a 	mov	r5,r2
10010290:	b5bffc04 	addi	r22,r22,-16
10010294:	9d800d0e 	bge	r19,r22,100102cc <___vfiprintf_internal_r+0xe5c>
10010298:	18c00404 	addi	r3,r3,16
1001029c:	28800044 	addi	r2,r5,1
100102a0:	44400015 	stw	r17,0(r8)
100102a4:	44c00115 	stw	r19,4(r8)
100102a8:	d8c11c15 	stw	r3,1136(sp)
100102ac:	d8811b15 	stw	r2,1132(sp)
100102b0:	50bff40e 	bge	r10,r2,10010284 <__alt_data_end+0xf8010284>
100102b4:	1800111e 	bne	r3,zero,100102fc <___vfiprintf_internal_r+0xe8c>
100102b8:	b5bffc04 	addi	r22,r22,-16
100102bc:	000b883a 	mov	r5,zero
100102c0:	01000044 	movi	r4,1
100102c4:	d811883a 	mov	r8,sp
100102c8:	9dbff316 	blt	r19,r22,10010298 <__alt_data_end+0xf8010298>
100102cc:	d9412617 	ldw	r5,1176(sp)
100102d0:	1d87883a 	add	r3,r3,r22
100102d4:	45800115 	stw	r22,4(r8)
100102d8:	41400015 	stw	r5,0(r8)
100102dc:	d8c11c15 	stw	r3,1136(sp)
100102e0:	d9011b15 	stw	r4,1132(sp)
100102e4:	008001c4 	movi	r2,7
100102e8:	11008516 	blt	r2,r4,10010500 <___vfiprintf_internal_r+0x1090>
100102ec:	42000204 	addi	r8,r8,8
100102f0:	20800044 	addi	r2,r4,1
100102f4:	200b883a 	mov	r5,r4
100102f8:	003dfa06 	br	1000fae4 <__alt_data_end+0xf800fae4>
100102fc:	d9012117 	ldw	r4,1156(sp)
10010300:	d9412017 	ldw	r5,1152(sp)
10010304:	d9811a04 	addi	r6,sp,1128
10010308:	da812a15 	stw	r10,1192(sp)
1001030c:	000f35c0 	call	1000f35c <__sprint_r.part.0>
10010310:	da812a17 	ldw	r10,1192(sp)
10010314:	103f721e 	bne	r2,zero,100100e0 <__alt_data_end+0xf80100e0>
10010318:	d9411b17 	ldw	r5,1132(sp)
1001031c:	d8c11c17 	ldw	r3,1136(sp)
10010320:	d811883a 	mov	r8,sp
10010324:	29000044 	addi	r4,r5,1
10010328:	003fd906 	br	10010290 <__alt_data_end+0xf8010290>
1001032c:	1800681e 	bne	r3,zero,100104d0 <___vfiprintf_internal_r+0x1060>
10010330:	50004d26 	beq	r10,zero,10010468 <___vfiprintf_internal_r+0xff8>
10010334:	d8811d04 	addi	r2,sp,1140
10010338:	00c00084 	movi	r3,2
1001033c:	d8800015 	stw	r2,0(sp)
10010340:	d8c00115 	stw	r3,4(sp)
10010344:	2005883a 	mov	r2,r4
10010348:	d811883a 	mov	r8,sp
1001034c:	003de006 	br	1000fad0 <__alt_data_end+0xf800fad0>
10010350:	1800551e 	bne	r3,zero,100104a8 <___vfiprintf_internal_r+0x1038>
10010354:	000b883a 	mov	r5,zero
10010358:	00800044 	movi	r2,1
1001035c:	d811883a 	mov	r8,sp
10010360:	003dde06 	br	1000fadc <__alt_data_end+0xf800fadc>
10010364:	10803fcc 	andi	r2,r2,255
10010368:	1000191e 	bne	r2,zero,100103d0 <___vfiprintf_internal_r+0xf60>
1001036c:	9080004c 	andi	r2,r18,1
10010370:	10001726 	beq	r2,zero,100103d0 <___vfiprintf_internal_r+0xf60>
10010374:	00800c04 	movi	r2,48
10010378:	d8c109c4 	addi	r3,sp,1063
1001037c:	d88109c5 	stb	r2,1063(sp)
10010380:	dd012817 	ldw	r20,1184(sp)
10010384:	d8c12215 	stw	r3,1160(sp)
10010388:	003d8a06 	br	1000f9b4 <__alt_data_end+0xf800f9b4>
1001038c:	d9012717 	ldw	r4,1180(sp)
10010390:	dd010a04 	addi	r20,sp,1064
10010394:	988003cc 	andi	r2,r19,15
10010398:	a806973a 	slli	r3,r21,28
1001039c:	2085883a 	add	r2,r4,r2
100103a0:	9826d13a 	srli	r19,r19,4
100103a4:	10800003 	ldbu	r2,0(r2)
100103a8:	a82ad13a 	srli	r21,r21,4
100103ac:	a53fffc4 	addi	r20,r20,-1
100103b0:	1ce6b03a 	or	r19,r3,r19
100103b4:	a0800005 	stb	r2,0(r20)
100103b8:	9d44b03a 	or	r2,r19,r21
100103bc:	103ff51e 	bne	r2,zero,10010394 <__alt_data_end+0xf8010394>
100103c0:	d9411e17 	ldw	r5,1144(sp)
100103c4:	dd012215 	stw	r20,1160(sp)
100103c8:	2d29c83a 	sub	r20,r5,r20
100103cc:	003d7906 	br	1000f9b4 <__alt_data_end+0xf800f9b4>
100103d0:	d8c10a04 	addi	r3,sp,1064
100103d4:	d8c12215 	stw	r3,1160(sp)
100103d8:	003d7606 	br	1000f9b4 <__alt_data_end+0xf800f9b4>
100103dc:	18009e1e 	bne	r3,zero,10010658 <___vfiprintf_internal_r+0x11e8>
100103e0:	d8811d87 	ldb	r2,1142(sp)
100103e4:	10005f26 	beq	r2,zero,10010564 <___vfiprintf_internal_r+0x10f4>
100103e8:	00c00044 	movi	r3,1
100103ec:	d9011d84 	addi	r4,sp,1142
100103f0:	1805883a 	mov	r2,r3
100103f4:	d9000015 	stw	r4,0(sp)
100103f8:	d8c00115 	stw	r3,4(sp)
100103fc:	d811883a 	mov	r8,sp
10010400:	003efc06 	br	1000fff4 <__alt_data_end+0xf800fff4>
10010404:	d9412417 	ldw	r5,1168(sp)
10010408:	d811883a 	mov	r8,sp
1001040c:	2d65c83a 	sub	r18,r5,r21
10010410:	04bf4816 	blt	zero,r18,10010134 <__alt_data_end+0xf8010134>
10010414:	003f6c06 	br	100101c8 <__alt_data_end+0xf80101c8>
10010418:	b829883a 	mov	r20,r23
1001041c:	003c6906 	br	1000f5c4 <__alt_data_end+0xf800f5c4>
10010420:	d9012117 	ldw	r4,1156(sp)
10010424:	d9412017 	ldw	r5,1152(sp)
10010428:	d9811a04 	addi	r6,sp,1128
1001042c:	000f35c0 	call	1000f35c <__sprint_r.part.0>
10010430:	103f2b1e 	bne	r2,zero,100100e0 <__alt_data_end+0xf80100e0>
10010434:	d8c11c17 	ldw	r3,1136(sp)
10010438:	d811883a 	mov	r8,sp
1001043c:	003f3806 	br	10010120 <__alt_data_end+0xf8010120>
10010440:	00800084 	movi	r2,2
10010444:	9d46b03a 	or	r3,r19,r21
10010448:	003df606 	br	1000fc24 <__alt_data_end+0xf800fc24>
1001044c:	d9012117 	ldw	r4,1156(sp)
10010450:	d9412017 	ldw	r5,1152(sp)
10010454:	d9811a04 	addi	r6,sp,1128
10010458:	000f35c0 	call	1000f35c <__sprint_r.part.0>
1001045c:	103f201e 	bne	r2,zero,100100e0 <__alt_data_end+0xf80100e0>
10010460:	d811883a 	mov	r8,sp
10010464:	003cc606 	br	1000f780 <__alt_data_end+0xf800f780>
10010468:	000b883a 	mov	r5,zero
1001046c:	2005883a 	mov	r2,r4
10010470:	d811883a 	mov	r8,sp
10010474:	003d9906 	br	1000fadc <__alt_data_end+0xf800fadc>
10010478:	10803fcc 	andi	r2,r2,255
1001047c:	1080201c 	xori	r2,r2,128
10010480:	10bfe004 	addi	r2,r2,-128
10010484:	01000c04 	movi	r4,48
10010488:	1100b226 	beq	r2,r4,10010754 <___vfiprintf_internal_r+0x12e4>
1001048c:	d9412217 	ldw	r5,1160(sp)
10010490:	d8811e17 	ldw	r2,1144(sp)
10010494:	193fffc5 	stb	r4,-1(r3)
10010498:	297fffc4 	addi	r5,r5,-1
1001049c:	d9412215 	stw	r5,1160(sp)
100104a0:	1169c83a 	sub	r20,r2,r5
100104a4:	003d4306 	br	1000f9b4 <__alt_data_end+0xf800f9b4>
100104a8:	d9012117 	ldw	r4,1156(sp)
100104ac:	d9412017 	ldw	r5,1152(sp)
100104b0:	d9811a04 	addi	r6,sp,1128
100104b4:	000f35c0 	call	1000f35c <__sprint_r.part.0>
100104b8:	103f091e 	bne	r2,zero,100100e0 <__alt_data_end+0xf80100e0>
100104bc:	d9411b17 	ldw	r5,1132(sp)
100104c0:	d8c11c17 	ldw	r3,1136(sp)
100104c4:	d811883a 	mov	r8,sp
100104c8:	28800044 	addi	r2,r5,1
100104cc:	003d8306 	br	1000fadc <__alt_data_end+0xf800fadc>
100104d0:	d9012117 	ldw	r4,1156(sp)
100104d4:	d9412017 	ldw	r5,1152(sp)
100104d8:	d9811a04 	addi	r6,sp,1128
100104dc:	da812a15 	stw	r10,1192(sp)
100104e0:	000f35c0 	call	1000f35c <__sprint_r.part.0>
100104e4:	da812a17 	ldw	r10,1192(sp)
100104e8:	103efd1e 	bne	r2,zero,100100e0 <__alt_data_end+0xf80100e0>
100104ec:	d9411b17 	ldw	r5,1132(sp)
100104f0:	d8c11c17 	ldw	r3,1136(sp)
100104f4:	d811883a 	mov	r8,sp
100104f8:	28800044 	addi	r2,r5,1
100104fc:	003d6a06 	br	1000faa8 <__alt_data_end+0xf800faa8>
10010500:	1800a01e 	bne	r3,zero,10010784 <___vfiprintf_internal_r+0x1314>
10010504:	000b883a 	mov	r5,zero
10010508:	00800044 	movi	r2,1
1001050c:	d811883a 	mov	r8,sp
10010510:	003d7406 	br	1000fae4 <__alt_data_end+0xf800fae4>
10010514:	d9012117 	ldw	r4,1156(sp)
10010518:	d9412017 	ldw	r5,1152(sp)
1001051c:	d9811a04 	addi	r6,sp,1128
10010520:	000f35c0 	call	1000f35c <__sprint_r.part.0>
10010524:	103eee1e 	bne	r2,zero,100100e0 <__alt_data_end+0xf80100e0>
10010528:	d8811b17 	ldw	r2,1132(sp)
1001052c:	d8c11c17 	ldw	r3,1136(sp)
10010530:	d811883a 	mov	r8,sp
10010534:	10800044 	addi	r2,r2,1
10010538:	003d8f06 	br	1000fb78 <__alt_data_end+0xf800fb78>
1001053c:	04e7c83a 	sub	r19,zero,r19
10010540:	9804c03a 	cmpne	r2,r19,zero
10010544:	056bc83a 	sub	r21,zero,r21
10010548:	a8abc83a 	sub	r21,r21,r2
1001054c:	05800b44 	movi	r22,45
10010550:	dd811d85 	stb	r22,1142(sp)
10010554:	8029883a 	mov	r20,r16
10010558:	00800044 	movi	r2,1
1001055c:	9d46b03a 	or	r3,r19,r21
10010560:	003cfa06 	br	1000f94c <__alt_data_end+0xf800f94c>
10010564:	000b883a 	mov	r5,zero
10010568:	00800044 	movi	r2,1
1001056c:	d811883a 	mov	r8,sp
10010570:	503d5a26 	beq	r10,zero,1000fadc <__alt_data_end+0xf800fadc>
10010574:	00c00084 	movi	r3,2
10010578:	d9011d04 	addi	r4,sp,1140
1001057c:	d9000015 	stw	r4,0(sp)
10010580:	d8c00115 	stw	r3,4(sp)
10010584:	003d5206 	br	1000fad0 <__alt_data_end+0xf800fad0>
10010588:	9080040c 	andi	r2,r18,16
1001058c:	1000421e 	bne	r2,zero,10010698 <___vfiprintf_internal_r+0x1228>
10010590:	9480100c 	andi	r18,r18,64
10010594:	90009c26 	beq	r18,zero,10010808 <___vfiprintf_internal_r+0x1398>
10010598:	d9412317 	ldw	r5,1164(sp)
1001059c:	d8c12517 	ldw	r3,1172(sp)
100105a0:	28800017 	ldw	r2,0(r5)
100105a4:	29400104 	addi	r5,r5,4
100105a8:	d9412315 	stw	r5,1164(sp)
100105ac:	10c0000d 	sth	r3,0(r2)
100105b0:	003be706 	br	1000f550 <__alt_data_end+0xf800f550>
100105b4:	90c0100c 	andi	r3,r18,64
100105b8:	18003e26 	beq	r3,zero,100106b4 <___vfiprintf_internal_r+0x1244>
100105bc:	d8c12317 	ldw	r3,1164(sp)
100105c0:	14c0000b 	ldhu	r19,0(r2)
100105c4:	002b883a 	mov	r21,zero
100105c8:	18c00104 	addi	r3,r3,4
100105cc:	d8c12315 	stw	r3,1164(sp)
100105d0:	003db706 	br	1000fcb0 <__alt_data_end+0xf800fcb0>
100105d4:	9080100c 	andi	r2,r18,64
100105d8:	10004c26 	beq	r2,zero,1001070c <___vfiprintf_internal_r+0x129c>
100105dc:	1cc0000f 	ldh	r19,0(r3)
100105e0:	d8812317 	ldw	r2,1164(sp)
100105e4:	982bd7fa 	srai	r21,r19,31
100105e8:	10800104 	addi	r2,r2,4
100105ec:	d8812315 	stw	r2,1164(sp)
100105f0:	a805883a 	mov	r2,r21
100105f4:	003cd006 	br	1000f938 <__alt_data_end+0xf800f938>
100105f8:	00800084 	movi	r2,2
100105fc:	003d8906 	br	1000fc24 <__alt_data_end+0xf800fc24>
10010600:	b9800007 	ldb	r6,0(r23)
10010604:	003bfb06 	br	1000f5f4 <__alt_data_end+0xf800f5f4>
10010608:	9080100c 	andi	r2,r18,64
1001060c:	10003726 	beq	r2,zero,100106ec <___vfiprintf_internal_r+0x127c>
10010610:	d9412317 	ldw	r5,1164(sp)
10010614:	002b883a 	mov	r21,zero
10010618:	0005883a 	mov	r2,zero
1001061c:	2cc0000b 	ldhu	r19,0(r5)
10010620:	29400104 	addi	r5,r5,4
10010624:	d9412315 	stw	r5,1164(sp)
10010628:	9807883a 	mov	r3,r19
1001062c:	003d7d06 	br	1000fc24 <__alt_data_end+0xf800fc24>
10010630:	9080100c 	andi	r2,r18,64
10010634:	10002526 	beq	r2,zero,100106cc <___vfiprintf_internal_r+0x125c>
10010638:	d8812317 	ldw	r2,1164(sp)
1001063c:	002b883a 	mov	r21,zero
10010640:	14c0000b 	ldhu	r19,0(r2)
10010644:	10800104 	addi	r2,r2,4
10010648:	d8812315 	stw	r2,1164(sp)
1001064c:	9807883a 	mov	r3,r19
10010650:	00800044 	movi	r2,1
10010654:	003d7306 	br	1000fc24 <__alt_data_end+0xf800fc24>
10010658:	d9012117 	ldw	r4,1156(sp)
1001065c:	d9412017 	ldw	r5,1152(sp)
10010660:	d9811a04 	addi	r6,sp,1128
10010664:	da812a15 	stw	r10,1192(sp)
10010668:	000f35c0 	call	1000f35c <__sprint_r.part.0>
1001066c:	da812a17 	ldw	r10,1192(sp)
10010670:	103e9b1e 	bne	r2,zero,100100e0 <__alt_data_end+0xf80100e0>
10010674:	d9411b17 	ldw	r5,1132(sp)
10010678:	d8c11c17 	ldw	r3,1136(sp)
1001067c:	d811883a 	mov	r8,sp
10010680:	28800044 	addi	r2,r5,1
10010684:	003e5006 	br	1000ffc8 <__alt_data_end+0xf800ffc8>
10010688:	182b883a 	mov	r21,r3
1001068c:	003ed006 	br	100101d0 <__alt_data_end+0xf80101d0>
10010690:	8029883a 	mov	r20,r16
10010694:	003dc606 	br	1000fdb0 <__alt_data_end+0xf800fdb0>
10010698:	d8c12317 	ldw	r3,1164(sp)
1001069c:	d9012517 	ldw	r4,1172(sp)
100106a0:	18800017 	ldw	r2,0(r3)
100106a4:	18c00104 	addi	r3,r3,4
100106a8:	d8c12315 	stw	r3,1164(sp)
100106ac:	11000015 	stw	r4,0(r2)
100106b0:	003ba706 	br	1000f550 <__alt_data_end+0xf800f550>
100106b4:	d9012317 	ldw	r4,1164(sp)
100106b8:	14c00017 	ldw	r19,0(r2)
100106bc:	002b883a 	mov	r21,zero
100106c0:	21000104 	addi	r4,r4,4
100106c4:	d9012315 	stw	r4,1164(sp)
100106c8:	003d7906 	br	1000fcb0 <__alt_data_end+0xf800fcb0>
100106cc:	d8c12317 	ldw	r3,1164(sp)
100106d0:	002b883a 	mov	r21,zero
100106d4:	00800044 	movi	r2,1
100106d8:	1cc00017 	ldw	r19,0(r3)
100106dc:	18c00104 	addi	r3,r3,4
100106e0:	d8c12315 	stw	r3,1164(sp)
100106e4:	9807883a 	mov	r3,r19
100106e8:	003d4e06 	br	1000fc24 <__alt_data_end+0xf800fc24>
100106ec:	d8812317 	ldw	r2,1164(sp)
100106f0:	002b883a 	mov	r21,zero
100106f4:	14c00017 	ldw	r19,0(r2)
100106f8:	10800104 	addi	r2,r2,4
100106fc:	d8812315 	stw	r2,1164(sp)
10010700:	9807883a 	mov	r3,r19
10010704:	0005883a 	mov	r2,zero
10010708:	003d4606 	br	1000fc24 <__alt_data_end+0xf800fc24>
1001070c:	1cc00017 	ldw	r19,0(r3)
10010710:	d8c12317 	ldw	r3,1164(sp)
10010714:	982bd7fa 	srai	r21,r19,31
10010718:	18c00104 	addi	r3,r3,4
1001071c:	d8c12315 	stw	r3,1164(sp)
10010720:	a805883a 	mov	r2,r21
10010724:	003c8406 	br	1000f938 <__alt_data_end+0xf800f938>
10010728:	01040074 	movhi	r4,4097
1001072c:	21154404 	addi	r4,r4,21776
10010730:	d9012615 	stw	r4,1176(sp)
10010734:	003d0606 	br	1000fb50 <__alt_data_end+0xf800fb50>
10010738:	b9800043 	ldbu	r6,1(r23)
1001073c:	94800814 	ori	r18,r18,32
10010740:	bdc00044 	addi	r23,r23,1
10010744:	31803fcc 	andi	r6,r6,255
10010748:	3180201c 	xori	r6,r6,128
1001074c:	31bfe004 	addi	r6,r6,-128
10010750:	003ba806 	br	1000f5f4 <__alt_data_end+0xf800f5f4>
10010754:	d8811e17 	ldw	r2,1144(sp)
10010758:	d8c12217 	ldw	r3,1160(sp)
1001075c:	10e9c83a 	sub	r20,r2,r3
10010760:	003c9406 	br	1000f9b4 <__alt_data_end+0xf800f9b4>
10010764:	da012a15 	stw	r8,1192(sp)
10010768:	0007ff40 	call	10007ff4 <strlen>
1001076c:	1029883a 	mov	r20,r2
10010770:	dd811d83 	ldbu	r22,1142(sp)
10010774:	dcc12315 	stw	r19,1164(sp)
10010778:	0021883a 	mov	r16,zero
1001077c:	da012a17 	ldw	r8,1192(sp)
10010780:	003c8c06 	br	1000f9b4 <__alt_data_end+0xf800f9b4>
10010784:	d9012117 	ldw	r4,1156(sp)
10010788:	d9412017 	ldw	r5,1152(sp)
1001078c:	d9811a04 	addi	r6,sp,1128
10010790:	000f35c0 	call	1000f35c <__sprint_r.part.0>
10010794:	103e521e 	bne	r2,zero,100100e0 <__alt_data_end+0xf80100e0>
10010798:	d9411b17 	ldw	r5,1132(sp)
1001079c:	d8c11c17 	ldw	r3,1136(sp)
100107a0:	d811883a 	mov	r8,sp
100107a4:	28800044 	addi	r2,r5,1
100107a8:	003cce06 	br	1000fae4 <__alt_data_end+0xf800fae4>
100107ac:	01440074 	movhi	r5,4097
100107b0:	29554804 	addi	r5,r5,21792
100107b4:	d9412615 	stw	r5,1176(sp)
100107b8:	d9411b17 	ldw	r5,1132(sp)
100107bc:	29400044 	addi	r5,r5,1
100107c0:	003cad06 	br	1000fa78 <__alt_data_end+0xf800fa78>
100107c4:	00800184 	movi	r2,6
100107c8:	1400012e 	bgeu	r2,r16,100107d0 <___vfiprintf_internal_r+0x1360>
100107cc:	1021883a 	mov	r16,r2
100107d0:	8029883a 	mov	r20,r16
100107d4:	802b883a 	mov	r21,r16
100107d8:	80001c16 	blt	r16,zero,1001084c <___vfiprintf_internal_r+0x13dc>
100107dc:	00c40074 	movhi	r3,4097
100107e0:	18d4e904 	addi	r3,r3,21412
100107e4:	dcc12315 	stw	r19,1164(sp)
100107e8:	d8c12215 	stw	r3,1160(sp)
100107ec:	003cff06 	br	1000fbec <__alt_data_end+0xf800fbec>
100107f0:	d9411b17 	ldw	r5,1132(sp)
100107f4:	00840074 	movhi	r2,4097
100107f8:	10954804 	addi	r2,r2,21792
100107fc:	d8812615 	stw	r2,1176(sp)
10010800:	29400044 	addi	r5,r5,1
10010804:	003e6706 	br	100101a4 <__alt_data_end+0xf80101a4>
10010808:	d9012317 	ldw	r4,1164(sp)
1001080c:	d9412517 	ldw	r5,1172(sp)
10010810:	20800017 	ldw	r2,0(r4)
10010814:	21000104 	addi	r4,r4,4
10010818:	d9012315 	stw	r4,1164(sp)
1001081c:	11400015 	stw	r5,0(r2)
10010820:	003b4b06 	br	1000f550 <__alt_data_end+0xf800f550>
10010824:	8029883a 	mov	r20,r16
10010828:	dd811d83 	ldbu	r22,1142(sp)
1001082c:	dcc12315 	stw	r19,1164(sp)
10010830:	0021883a 	mov	r16,zero
10010834:	003c5f06 	br	1000f9b4 <__alt_data_end+0xf800f9b4>
10010838:	01040074 	movhi	r4,4097
1001083c:	21154404 	addi	r4,r4,21776
10010840:	d9012615 	stw	r4,1176(sp)
10010844:	1009883a 	mov	r4,r2
10010848:	003ea006 	br	100102cc <__alt_data_end+0xf80102cc>
1001084c:	002b883a 	mov	r21,zero
10010850:	003fe206 	br	100107dc <__alt_data_end+0xf80107dc>
10010854:	d9412317 	ldw	r5,1164(sp)
10010858:	b807883a 	mov	r3,r23
1001085c:	102f883a 	mov	r23,r2
10010860:	2c000017 	ldw	r16,0(r5)
10010864:	29000104 	addi	r4,r5,4
10010868:	d9012315 	stw	r4,1164(sp)
1001086c:	80000416 	blt	r16,zero,10010880 <___vfiprintf_internal_r+0x1410>
10010870:	19800047 	ldb	r6,1(r3)
10010874:	003b5f06 	br	1000f5f4 <__alt_data_end+0xf800f5f4>
10010878:	043fffc4 	movi	r16,-1
1001087c:	003bef06 	br	1000f83c <__alt_data_end+0xf800f83c>
10010880:	043fffc4 	movi	r16,-1
10010884:	19800047 	ldb	r6,1(r3)
10010888:	003b5a06 	br	1000f5f4 <__alt_data_end+0xf800f5f4>
1001088c:	282b883a 	mov	r21,r5
10010890:	003cc706 	br	1000fbb0 <__alt_data_end+0xf800fbb0>

10010894 <__vfiprintf_internal>:
10010894:	2007883a 	mov	r3,r4
10010898:	01040074 	movhi	r4,4097
1001089c:	211c0604 	addi	r4,r4,28696
100108a0:	21000017 	ldw	r4,0(r4)
100108a4:	2805883a 	mov	r2,r5
100108a8:	300f883a 	mov	r7,r6
100108ac:	180b883a 	mov	r5,r3
100108b0:	100d883a 	mov	r6,r2
100108b4:	000f4701 	jmpi	1000f470 <___vfiprintf_internal_r>

100108b8 <_write_r>:
100108b8:	defffd04 	addi	sp,sp,-12
100108bc:	dc000015 	stw	r16,0(sp)
100108c0:	040400b4 	movhi	r16,4098
100108c4:	dc400115 	stw	r17,4(sp)
100108c8:	8422d804 	addi	r16,r16,-29856
100108cc:	2023883a 	mov	r17,r4
100108d0:	2809883a 	mov	r4,r5
100108d4:	300b883a 	mov	r5,r6
100108d8:	380d883a 	mov	r6,r7
100108dc:	dfc00215 	stw	ra,8(sp)
100108e0:	80000015 	stw	zero,0(r16)
100108e4:	00128280 	call	10012828 <write>
100108e8:	00ffffc4 	movi	r3,-1
100108ec:	10c00526 	beq	r2,r3,10010904 <_write_r+0x4c>
100108f0:	dfc00217 	ldw	ra,8(sp)
100108f4:	dc400117 	ldw	r17,4(sp)
100108f8:	dc000017 	ldw	r16,0(sp)
100108fc:	dec00304 	addi	sp,sp,12
10010900:	f800283a 	ret
10010904:	80c00017 	ldw	r3,0(r16)
10010908:	183ff926 	beq	r3,zero,100108f0 <__alt_data_end+0xf80108f0>
1001090c:	88c00015 	stw	r3,0(r17)
10010910:	003ff706 	br	100108f0 <__alt_data_end+0xf80108f0>

10010914 <_close_r>:
10010914:	defffd04 	addi	sp,sp,-12
10010918:	dc000015 	stw	r16,0(sp)
1001091c:	040400b4 	movhi	r16,4098
10010920:	dc400115 	stw	r17,4(sp)
10010924:	8422d804 	addi	r16,r16,-29856
10010928:	2023883a 	mov	r17,r4
1001092c:	2809883a 	mov	r4,r5
10010930:	dfc00215 	stw	ra,8(sp)
10010934:	80000015 	stw	zero,0(r16)
10010938:	0011f540 	call	10011f54 <close>
1001093c:	00ffffc4 	movi	r3,-1
10010940:	10c00526 	beq	r2,r3,10010958 <_close_r+0x44>
10010944:	dfc00217 	ldw	ra,8(sp)
10010948:	dc400117 	ldw	r17,4(sp)
1001094c:	dc000017 	ldw	r16,0(sp)
10010950:	dec00304 	addi	sp,sp,12
10010954:	f800283a 	ret
10010958:	80c00017 	ldw	r3,0(r16)
1001095c:	183ff926 	beq	r3,zero,10010944 <__alt_data_end+0xf8010944>
10010960:	88c00015 	stw	r3,0(r17)
10010964:	003ff706 	br	10010944 <__alt_data_end+0xf8010944>

10010968 <_calloc_r>:
10010968:	defffe04 	addi	sp,sp,-8
1001096c:	dc000015 	stw	r16,0(sp)
10010970:	2021883a 	mov	r16,r4
10010974:	2809883a 	mov	r4,r5
10010978:	300b883a 	mov	r5,r6
1001097c:	dfc00115 	stw	ra,4(sp)
10010980:	00057300 	call	10005730 <__mulsi3>
10010984:	8009883a 	mov	r4,r16
10010988:	100b883a 	mov	r5,r2
1001098c:	000cef80 	call	1000cef8 <_malloc_r>
10010990:	1021883a 	mov	r16,r2
10010994:	10002826 	beq	r2,zero,10010a38 <_calloc_r+0xd0>
10010998:	11bfff17 	ldw	r6,-4(r2)
1001099c:	00bfff04 	movi	r2,-4
100109a0:	00c00904 	movi	r3,36
100109a4:	308c703a 	and	r6,r6,r2
100109a8:	308d883a 	add	r6,r6,r2
100109ac:	19801436 	bltu	r3,r6,10010a00 <_calloc_r+0x98>
100109b0:	008004c4 	movi	r2,19
100109b4:	11800936 	bltu	r2,r6,100109dc <_calloc_r+0x74>
100109b8:	8005883a 	mov	r2,r16
100109bc:	10000015 	stw	zero,0(r2)
100109c0:	10000115 	stw	zero,4(r2)
100109c4:	10000215 	stw	zero,8(r2)
100109c8:	8005883a 	mov	r2,r16
100109cc:	dfc00117 	ldw	ra,4(sp)
100109d0:	dc000017 	ldw	r16,0(sp)
100109d4:	dec00204 	addi	sp,sp,8
100109d8:	f800283a 	ret
100109dc:	80000015 	stw	zero,0(r16)
100109e0:	80000115 	stw	zero,4(r16)
100109e4:	008006c4 	movi	r2,27
100109e8:	11800d2e 	bgeu	r2,r6,10010a20 <_calloc_r+0xb8>
100109ec:	80000215 	stw	zero,8(r16)
100109f0:	80000315 	stw	zero,12(r16)
100109f4:	30c00c26 	beq	r6,r3,10010a28 <_calloc_r+0xc0>
100109f8:	80800404 	addi	r2,r16,16
100109fc:	003fef06 	br	100109bc <__alt_data_end+0xf80109bc>
10010a00:	8009883a 	mov	r4,r16
10010a04:	000b883a 	mov	r5,zero
10010a08:	000da1c0 	call	1000da1c <memset>
10010a0c:	8005883a 	mov	r2,r16
10010a10:	dfc00117 	ldw	ra,4(sp)
10010a14:	dc000017 	ldw	r16,0(sp)
10010a18:	dec00204 	addi	sp,sp,8
10010a1c:	f800283a 	ret
10010a20:	80800204 	addi	r2,r16,8
10010a24:	003fe506 	br	100109bc <__alt_data_end+0xf80109bc>
10010a28:	80000415 	stw	zero,16(r16)
10010a2c:	80800604 	addi	r2,r16,24
10010a30:	80000515 	stw	zero,20(r16)
10010a34:	003fe106 	br	100109bc <__alt_data_end+0xf80109bc>
10010a38:	0005883a 	mov	r2,zero
10010a3c:	003fe306 	br	100109cc <__alt_data_end+0xf80109cc>

10010a40 <_fclose_r>:
10010a40:	28003226 	beq	r5,zero,10010b0c <_fclose_r+0xcc>
10010a44:	defffc04 	addi	sp,sp,-16
10010a48:	dc400115 	stw	r17,4(sp)
10010a4c:	2023883a 	mov	r17,r4
10010a50:	dc000015 	stw	r16,0(sp)
10010a54:	dfc00315 	stw	ra,12(sp)
10010a58:	dc800215 	stw	r18,8(sp)
10010a5c:	2821883a 	mov	r16,r5
10010a60:	000c1f80 	call	1000c1f8 <__sfp_lock_acquire>
10010a64:	88000226 	beq	r17,zero,10010a70 <_fclose_r+0x30>
10010a68:	88800e17 	ldw	r2,56(r17)
10010a6c:	10002926 	beq	r2,zero,10010b14 <_fclose_r+0xd4>
10010a70:	8080030f 	ldh	r2,12(r16)
10010a74:	10002226 	beq	r2,zero,10010b00 <_fclose_r+0xc0>
10010a78:	8809883a 	mov	r4,r17
10010a7c:	800b883a 	mov	r5,r16
10010a80:	000bc2c0 	call	1000bc2c <_fflush_r>
10010a84:	1025883a 	mov	r18,r2
10010a88:	80800b17 	ldw	r2,44(r16)
10010a8c:	10000426 	beq	r2,zero,10010aa0 <_fclose_r+0x60>
10010a90:	81400717 	ldw	r5,28(r16)
10010a94:	8809883a 	mov	r4,r17
10010a98:	103ee83a 	callr	r2
10010a9c:	10002616 	blt	r2,zero,10010b38 <_fclose_r+0xf8>
10010aa0:	8080030b 	ldhu	r2,12(r16)
10010aa4:	1080200c 	andi	r2,r2,128
10010aa8:	10001f1e 	bne	r2,zero,10010b28 <_fclose_r+0xe8>
10010aac:	81400c17 	ldw	r5,48(r16)
10010ab0:	28000526 	beq	r5,zero,10010ac8 <_fclose_r+0x88>
10010ab4:	80801004 	addi	r2,r16,64
10010ab8:	28800226 	beq	r5,r2,10010ac4 <_fclose_r+0x84>
10010abc:	8809883a 	mov	r4,r17
10010ac0:	000c35c0 	call	1000c35c <_free_r>
10010ac4:	80000c15 	stw	zero,48(r16)
10010ac8:	81401117 	ldw	r5,68(r16)
10010acc:	28000326 	beq	r5,zero,10010adc <_fclose_r+0x9c>
10010ad0:	8809883a 	mov	r4,r17
10010ad4:	000c35c0 	call	1000c35c <_free_r>
10010ad8:	80001115 	stw	zero,68(r16)
10010adc:	8000030d 	sth	zero,12(r16)
10010ae0:	000c1fc0 	call	1000c1fc <__sfp_lock_release>
10010ae4:	9005883a 	mov	r2,r18
10010ae8:	dfc00317 	ldw	ra,12(sp)
10010aec:	dc800217 	ldw	r18,8(sp)
10010af0:	dc400117 	ldw	r17,4(sp)
10010af4:	dc000017 	ldw	r16,0(sp)
10010af8:	dec00404 	addi	sp,sp,16
10010afc:	f800283a 	ret
10010b00:	000c1fc0 	call	1000c1fc <__sfp_lock_release>
10010b04:	0005883a 	mov	r2,zero
10010b08:	003ff706 	br	10010ae8 <__alt_data_end+0xf8010ae8>
10010b0c:	0005883a 	mov	r2,zero
10010b10:	f800283a 	ret
10010b14:	8809883a 	mov	r4,r17
10010b18:	000c1e80 	call	1000c1e8 <__sinit>
10010b1c:	8080030f 	ldh	r2,12(r16)
10010b20:	103fd51e 	bne	r2,zero,10010a78 <__alt_data_end+0xf8010a78>
10010b24:	003ff606 	br	10010b00 <__alt_data_end+0xf8010b00>
10010b28:	81400417 	ldw	r5,16(r16)
10010b2c:	8809883a 	mov	r4,r17
10010b30:	000c35c0 	call	1000c35c <_free_r>
10010b34:	003fdd06 	br	10010aac <__alt_data_end+0xf8010aac>
10010b38:	04bfffc4 	movi	r18,-1
10010b3c:	003fd806 	br	10010aa0 <__alt_data_end+0xf8010aa0>

10010b40 <fclose>:
10010b40:	00840074 	movhi	r2,4097
10010b44:	109c0604 	addi	r2,r2,28696
10010b48:	200b883a 	mov	r5,r4
10010b4c:	11000017 	ldw	r4,0(r2)
10010b50:	0010a401 	jmpi	10010a40 <_fclose_r>

10010b54 <_fputwc_r>:
10010b54:	3080030b 	ldhu	r2,12(r6)
10010b58:	defff804 	addi	sp,sp,-32
10010b5c:	dcc00415 	stw	r19,16(sp)
10010b60:	dc800315 	stw	r18,12(sp)
10010b64:	dc000115 	stw	r16,4(sp)
10010b68:	dfc00715 	stw	ra,28(sp)
10010b6c:	dd400615 	stw	r21,24(sp)
10010b70:	dd000515 	stw	r20,20(sp)
10010b74:	dc400215 	stw	r17,8(sp)
10010b78:	10c8000c 	andi	r3,r2,8192
10010b7c:	3021883a 	mov	r16,r6
10010b80:	2027883a 	mov	r19,r4
10010b84:	2825883a 	mov	r18,r5
10010b88:	1800051e 	bne	r3,zero,10010ba0 <_fputwc_r+0x4c>
10010b8c:	30c01917 	ldw	r3,100(r6)
10010b90:	10880014 	ori	r2,r2,8192
10010b94:	3080030d 	sth	r2,12(r6)
10010b98:	18880014 	ori	r2,r3,8192
10010b9c:	30801915 	stw	r2,100(r6)
10010ba0:	000cce80 	call	1000cce8 <__locale_mb_cur_max>
10010ba4:	00c00044 	movi	r3,1
10010ba8:	10c03e26 	beq	r2,r3,10010ca4 <_fputwc_r+0x150>
10010bac:	9809883a 	mov	r4,r19
10010bb0:	d80b883a 	mov	r5,sp
10010bb4:	900d883a 	mov	r6,r18
10010bb8:	81c01704 	addi	r7,r16,92
10010bbc:	00110040 	call	10011004 <_wcrtomb_r>
10010bc0:	1029883a 	mov	r20,r2
10010bc4:	00bfffc4 	movi	r2,-1
10010bc8:	a0802026 	beq	r20,r2,10010c4c <_fputwc_r+0xf8>
10010bcc:	d9400003 	ldbu	r5,0(sp)
10010bd0:	a0001c26 	beq	r20,zero,10010c44 <_fputwc_r+0xf0>
10010bd4:	0023883a 	mov	r17,zero
10010bd8:	05400284 	movi	r21,10
10010bdc:	00000906 	br	10010c04 <_fputwc_r+0xb0>
10010be0:	80800017 	ldw	r2,0(r16)
10010be4:	11400005 	stb	r5,0(r2)
10010be8:	80c00017 	ldw	r3,0(r16)
10010bec:	18c00044 	addi	r3,r3,1
10010bf0:	80c00015 	stw	r3,0(r16)
10010bf4:	8c400044 	addi	r17,r17,1
10010bf8:	dc45883a 	add	r2,sp,r17
10010bfc:	8d00112e 	bgeu	r17,r20,10010c44 <_fputwc_r+0xf0>
10010c00:	11400003 	ldbu	r5,0(r2)
10010c04:	80c00217 	ldw	r3,8(r16)
10010c08:	18ffffc4 	addi	r3,r3,-1
10010c0c:	80c00215 	stw	r3,8(r16)
10010c10:	183ff30e 	bge	r3,zero,10010be0 <__alt_data_end+0xf8010be0>
10010c14:	80800617 	ldw	r2,24(r16)
10010c18:	18801916 	blt	r3,r2,10010c80 <_fputwc_r+0x12c>
10010c1c:	80800017 	ldw	r2,0(r16)
10010c20:	11400005 	stb	r5,0(r2)
10010c24:	80800017 	ldw	r2,0(r16)
10010c28:	10c00003 	ldbu	r3,0(r2)
10010c2c:	10800044 	addi	r2,r2,1
10010c30:	1d402326 	beq	r3,r21,10010cc0 <_fputwc_r+0x16c>
10010c34:	80800015 	stw	r2,0(r16)
10010c38:	8c400044 	addi	r17,r17,1
10010c3c:	dc45883a 	add	r2,sp,r17
10010c40:	8d3fef36 	bltu	r17,r20,10010c00 <__alt_data_end+0xf8010c00>
10010c44:	9005883a 	mov	r2,r18
10010c48:	00000406 	br	10010c5c <_fputwc_r+0x108>
10010c4c:	80c0030b 	ldhu	r3,12(r16)
10010c50:	a005883a 	mov	r2,r20
10010c54:	18c01014 	ori	r3,r3,64
10010c58:	80c0030d 	sth	r3,12(r16)
10010c5c:	dfc00717 	ldw	ra,28(sp)
10010c60:	dd400617 	ldw	r21,24(sp)
10010c64:	dd000517 	ldw	r20,20(sp)
10010c68:	dcc00417 	ldw	r19,16(sp)
10010c6c:	dc800317 	ldw	r18,12(sp)
10010c70:	dc400217 	ldw	r17,8(sp)
10010c74:	dc000117 	ldw	r16,4(sp)
10010c78:	dec00804 	addi	sp,sp,32
10010c7c:	f800283a 	ret
10010c80:	9809883a 	mov	r4,r19
10010c84:	29403fcc 	andi	r5,r5,255
10010c88:	800d883a 	mov	r6,r16
10010c8c:	0010e940 	call	10010e94 <__swbuf_r>
10010c90:	10bfffe0 	cmpeqi	r2,r2,-1
10010c94:	10803fcc 	andi	r2,r2,255
10010c98:	103fd626 	beq	r2,zero,10010bf4 <__alt_data_end+0xf8010bf4>
10010c9c:	00bfffc4 	movi	r2,-1
10010ca0:	003fee06 	br	10010c5c <__alt_data_end+0xf8010c5c>
10010ca4:	90ffffc4 	addi	r3,r18,-1
10010ca8:	01003f84 	movi	r4,254
10010cac:	20ffbf36 	bltu	r4,r3,10010bac <__alt_data_end+0xf8010bac>
10010cb0:	900b883a 	mov	r5,r18
10010cb4:	dc800005 	stb	r18,0(sp)
10010cb8:	1029883a 	mov	r20,r2
10010cbc:	003fc506 	br	10010bd4 <__alt_data_end+0xf8010bd4>
10010cc0:	9809883a 	mov	r4,r19
10010cc4:	a80b883a 	mov	r5,r21
10010cc8:	800d883a 	mov	r6,r16
10010ccc:	0010e940 	call	10010e94 <__swbuf_r>
10010cd0:	10bfffe0 	cmpeqi	r2,r2,-1
10010cd4:	003fef06 	br	10010c94 <__alt_data_end+0xf8010c94>

10010cd8 <fputwc>:
10010cd8:	defffc04 	addi	sp,sp,-16
10010cdc:	dc000115 	stw	r16,4(sp)
10010ce0:	04040074 	movhi	r16,4097
10010ce4:	841c0604 	addi	r16,r16,28696
10010ce8:	dc400215 	stw	r17,8(sp)
10010cec:	2023883a 	mov	r17,r4
10010cf0:	81000017 	ldw	r4,0(r16)
10010cf4:	dfc00315 	stw	ra,12(sp)
10010cf8:	280d883a 	mov	r6,r5
10010cfc:	20000626 	beq	r4,zero,10010d18 <fputwc+0x40>
10010d00:	20800e17 	ldw	r2,56(r4)
10010d04:	1000041e 	bne	r2,zero,10010d18 <fputwc+0x40>
10010d08:	d9400015 	stw	r5,0(sp)
10010d0c:	000c1e80 	call	1000c1e8 <__sinit>
10010d10:	81000017 	ldw	r4,0(r16)
10010d14:	d9800017 	ldw	r6,0(sp)
10010d18:	880b883a 	mov	r5,r17
10010d1c:	dfc00317 	ldw	ra,12(sp)
10010d20:	dc400217 	ldw	r17,8(sp)
10010d24:	dc000117 	ldw	r16,4(sp)
10010d28:	dec00404 	addi	sp,sp,16
10010d2c:	0010b541 	jmpi	10010b54 <_fputwc_r>

10010d30 <_fstat_r>:
10010d30:	defffd04 	addi	sp,sp,-12
10010d34:	dc000015 	stw	r16,0(sp)
10010d38:	040400b4 	movhi	r16,4098
10010d3c:	dc400115 	stw	r17,4(sp)
10010d40:	8422d804 	addi	r16,r16,-29856
10010d44:	2023883a 	mov	r17,r4
10010d48:	2809883a 	mov	r4,r5
10010d4c:	300b883a 	mov	r5,r6
10010d50:	dfc00215 	stw	ra,8(sp)
10010d54:	80000015 	stw	zero,0(r16)
10010d58:	00120a80 	call	100120a8 <fstat>
10010d5c:	00ffffc4 	movi	r3,-1
10010d60:	10c00526 	beq	r2,r3,10010d78 <_fstat_r+0x48>
10010d64:	dfc00217 	ldw	ra,8(sp)
10010d68:	dc400117 	ldw	r17,4(sp)
10010d6c:	dc000017 	ldw	r16,0(sp)
10010d70:	dec00304 	addi	sp,sp,12
10010d74:	f800283a 	ret
10010d78:	80c00017 	ldw	r3,0(r16)
10010d7c:	183ff926 	beq	r3,zero,10010d64 <__alt_data_end+0xf8010d64>
10010d80:	88c00015 	stw	r3,0(r17)
10010d84:	003ff706 	br	10010d64 <__alt_data_end+0xf8010d64>

10010d88 <_isatty_r>:
10010d88:	defffd04 	addi	sp,sp,-12
10010d8c:	dc000015 	stw	r16,0(sp)
10010d90:	040400b4 	movhi	r16,4098
10010d94:	dc400115 	stw	r17,4(sp)
10010d98:	8422d804 	addi	r16,r16,-29856
10010d9c:	2023883a 	mov	r17,r4
10010da0:	2809883a 	mov	r4,r5
10010da4:	dfc00215 	stw	ra,8(sp)
10010da8:	80000015 	stw	zero,0(r16)
10010dac:	00121b00 	call	100121b0 <isatty>
10010db0:	00ffffc4 	movi	r3,-1
10010db4:	10c00526 	beq	r2,r3,10010dcc <_isatty_r+0x44>
10010db8:	dfc00217 	ldw	ra,8(sp)
10010dbc:	dc400117 	ldw	r17,4(sp)
10010dc0:	dc000017 	ldw	r16,0(sp)
10010dc4:	dec00304 	addi	sp,sp,12
10010dc8:	f800283a 	ret
10010dcc:	80c00017 	ldw	r3,0(r16)
10010dd0:	183ff926 	beq	r3,zero,10010db8 <__alt_data_end+0xf8010db8>
10010dd4:	88c00015 	stw	r3,0(r17)
10010dd8:	003ff706 	br	10010db8 <__alt_data_end+0xf8010db8>

10010ddc <_lseek_r>:
10010ddc:	defffd04 	addi	sp,sp,-12
10010de0:	dc000015 	stw	r16,0(sp)
10010de4:	040400b4 	movhi	r16,4098
10010de8:	dc400115 	stw	r17,4(sp)
10010dec:	8422d804 	addi	r16,r16,-29856
10010df0:	2023883a 	mov	r17,r4
10010df4:	2809883a 	mov	r4,r5
10010df8:	300b883a 	mov	r5,r6
10010dfc:	380d883a 	mov	r6,r7
10010e00:	dfc00215 	stw	ra,8(sp)
10010e04:	80000015 	stw	zero,0(r16)
10010e08:	00123900 	call	10012390 <lseek>
10010e0c:	00ffffc4 	movi	r3,-1
10010e10:	10c00526 	beq	r2,r3,10010e28 <_lseek_r+0x4c>
10010e14:	dfc00217 	ldw	ra,8(sp)
10010e18:	dc400117 	ldw	r17,4(sp)
10010e1c:	dc000017 	ldw	r16,0(sp)
10010e20:	dec00304 	addi	sp,sp,12
10010e24:	f800283a 	ret
10010e28:	80c00017 	ldw	r3,0(r16)
10010e2c:	183ff926 	beq	r3,zero,10010e14 <__alt_data_end+0xf8010e14>
10010e30:	88c00015 	stw	r3,0(r17)
10010e34:	003ff706 	br	10010e14 <__alt_data_end+0xf8010e14>

10010e38 <_read_r>:
10010e38:	defffd04 	addi	sp,sp,-12
10010e3c:	dc000015 	stw	r16,0(sp)
10010e40:	040400b4 	movhi	r16,4098
10010e44:	dc400115 	stw	r17,4(sp)
10010e48:	8422d804 	addi	r16,r16,-29856
10010e4c:	2023883a 	mov	r17,r4
10010e50:	2809883a 	mov	r4,r5
10010e54:	300b883a 	mov	r5,r6
10010e58:	380d883a 	mov	r6,r7
10010e5c:	dfc00215 	stw	ra,8(sp)
10010e60:	80000015 	stw	zero,0(r16)
10010e64:	00125740 	call	10012574 <read>
10010e68:	00ffffc4 	movi	r3,-1
10010e6c:	10c00526 	beq	r2,r3,10010e84 <_read_r+0x4c>
10010e70:	dfc00217 	ldw	ra,8(sp)
10010e74:	dc400117 	ldw	r17,4(sp)
10010e78:	dc000017 	ldw	r16,0(sp)
10010e7c:	dec00304 	addi	sp,sp,12
10010e80:	f800283a 	ret
10010e84:	80c00017 	ldw	r3,0(r16)
10010e88:	183ff926 	beq	r3,zero,10010e70 <__alt_data_end+0xf8010e70>
10010e8c:	88c00015 	stw	r3,0(r17)
10010e90:	003ff706 	br	10010e70 <__alt_data_end+0xf8010e70>

10010e94 <__swbuf_r>:
10010e94:	defffc04 	addi	sp,sp,-16
10010e98:	dc800215 	stw	r18,8(sp)
10010e9c:	dc400115 	stw	r17,4(sp)
10010ea0:	dc000015 	stw	r16,0(sp)
10010ea4:	dfc00315 	stw	ra,12(sp)
10010ea8:	2025883a 	mov	r18,r4
10010eac:	2823883a 	mov	r17,r5
10010eb0:	3021883a 	mov	r16,r6
10010eb4:	20000226 	beq	r4,zero,10010ec0 <__swbuf_r+0x2c>
10010eb8:	20800e17 	ldw	r2,56(r4)
10010ebc:	10004126 	beq	r2,zero,10010fc4 <__swbuf_r+0x130>
10010ec0:	80c00617 	ldw	r3,24(r16)
10010ec4:	8180030b 	ldhu	r6,12(r16)
10010ec8:	80c00215 	stw	r3,8(r16)
10010ecc:	30c0020c 	andi	r3,r6,8
10010ed0:	18003526 	beq	r3,zero,10010fa8 <__swbuf_r+0x114>
10010ed4:	80c00417 	ldw	r3,16(r16)
10010ed8:	18003326 	beq	r3,zero,10010fa8 <__swbuf_r+0x114>
10010edc:	3088000c 	andi	r2,r6,8192
10010ee0:	8c403fcc 	andi	r17,r17,255
10010ee4:	10001726 	beq	r2,zero,10010f44 <__swbuf_r+0xb0>
10010ee8:	80800017 	ldw	r2,0(r16)
10010eec:	81000517 	ldw	r4,20(r16)
10010ef0:	10c7c83a 	sub	r3,r2,r3
10010ef4:	19001d0e 	bge	r3,r4,10010f6c <__swbuf_r+0xd8>
10010ef8:	18c00044 	addi	r3,r3,1
10010efc:	81400217 	ldw	r5,8(r16)
10010f00:	11000044 	addi	r4,r2,1
10010f04:	81000015 	stw	r4,0(r16)
10010f08:	297fffc4 	addi	r5,r5,-1
10010f0c:	81400215 	stw	r5,8(r16)
10010f10:	14400005 	stb	r17,0(r2)
10010f14:	80800517 	ldw	r2,20(r16)
10010f18:	10c01d26 	beq	r2,r3,10010f90 <__swbuf_r+0xfc>
10010f1c:	8080030b 	ldhu	r2,12(r16)
10010f20:	1080004c 	andi	r2,r2,1
10010f24:	1000181e 	bne	r2,zero,10010f88 <__swbuf_r+0xf4>
10010f28:	8805883a 	mov	r2,r17
10010f2c:	dfc00317 	ldw	ra,12(sp)
10010f30:	dc800217 	ldw	r18,8(sp)
10010f34:	dc400117 	ldw	r17,4(sp)
10010f38:	dc000017 	ldw	r16,0(sp)
10010f3c:	dec00404 	addi	sp,sp,16
10010f40:	f800283a 	ret
10010f44:	81001917 	ldw	r4,100(r16)
10010f48:	00b7ffc4 	movi	r2,-8193
10010f4c:	31880014 	ori	r6,r6,8192
10010f50:	2084703a 	and	r2,r4,r2
10010f54:	80801915 	stw	r2,100(r16)
10010f58:	80800017 	ldw	r2,0(r16)
10010f5c:	81000517 	ldw	r4,20(r16)
10010f60:	8180030d 	sth	r6,12(r16)
10010f64:	10c7c83a 	sub	r3,r2,r3
10010f68:	193fe316 	blt	r3,r4,10010ef8 <__alt_data_end+0xf8010ef8>
10010f6c:	9009883a 	mov	r4,r18
10010f70:	800b883a 	mov	r5,r16
10010f74:	000bc2c0 	call	1000bc2c <_fflush_r>
10010f78:	1000091e 	bne	r2,zero,10010fa0 <__swbuf_r+0x10c>
10010f7c:	80800017 	ldw	r2,0(r16)
10010f80:	00c00044 	movi	r3,1
10010f84:	003fdd06 	br	10010efc <__alt_data_end+0xf8010efc>
10010f88:	00800284 	movi	r2,10
10010f8c:	88bfe61e 	bne	r17,r2,10010f28 <__alt_data_end+0xf8010f28>
10010f90:	9009883a 	mov	r4,r18
10010f94:	800b883a 	mov	r5,r16
10010f98:	000bc2c0 	call	1000bc2c <_fflush_r>
10010f9c:	103fe226 	beq	r2,zero,10010f28 <__alt_data_end+0xf8010f28>
10010fa0:	00bfffc4 	movi	r2,-1
10010fa4:	003fe106 	br	10010f2c <__alt_data_end+0xf8010f2c>
10010fa8:	9009883a 	mov	r4,r18
10010fac:	800b883a 	mov	r5,r16
10010fb0:	000a1ac0 	call	1000a1ac <__swsetup_r>
10010fb4:	1000051e 	bne	r2,zero,10010fcc <__swbuf_r+0x138>
10010fb8:	8180030b 	ldhu	r6,12(r16)
10010fbc:	80c00417 	ldw	r3,16(r16)
10010fc0:	003fc606 	br	10010edc <__alt_data_end+0xf8010edc>
10010fc4:	000c1e80 	call	1000c1e8 <__sinit>
10010fc8:	003fbd06 	br	10010ec0 <__alt_data_end+0xf8010ec0>
10010fcc:	80c0030b 	ldhu	r3,12(r16)
10010fd0:	00bfffc4 	movi	r2,-1
10010fd4:	18c01014 	ori	r3,r3,64
10010fd8:	80c0030d 	sth	r3,12(r16)
10010fdc:	00c00244 	movi	r3,9
10010fe0:	90c00015 	stw	r3,0(r18)
10010fe4:	003fd106 	br	10010f2c <__alt_data_end+0xf8010f2c>

10010fe8 <__swbuf>:
10010fe8:	00c40074 	movhi	r3,4097
10010fec:	18dc0604 	addi	r3,r3,28696
10010ff0:	2005883a 	mov	r2,r4
10010ff4:	19000017 	ldw	r4,0(r3)
10010ff8:	280d883a 	mov	r6,r5
10010ffc:	100b883a 	mov	r5,r2
10011000:	0010e941 	jmpi	10010e94 <__swbuf_r>

10011004 <_wcrtomb_r>:
10011004:	defff604 	addi	sp,sp,-40
10011008:	00840074 	movhi	r2,4097
1001100c:	dc800815 	stw	r18,32(sp)
10011010:	dc400715 	stw	r17,28(sp)
10011014:	dc000615 	stw	r16,24(sp)
10011018:	109c0a04 	addi	r2,r2,28712
1001101c:	dfc00915 	stw	ra,36(sp)
10011020:	2021883a 	mov	r16,r4
10011024:	3823883a 	mov	r17,r7
10011028:	14800017 	ldw	r18,0(r2)
1001102c:	28001426 	beq	r5,zero,10011080 <_wcrtomb_r+0x7c>
10011030:	d9400415 	stw	r5,16(sp)
10011034:	d9800515 	stw	r6,20(sp)
10011038:	000ccdc0 	call	1000ccdc <__locale_charset>
1001103c:	d9400417 	ldw	r5,16(sp)
10011040:	d9800517 	ldw	r6,20(sp)
10011044:	8009883a 	mov	r4,r16
10011048:	dc400015 	stw	r17,0(sp)
1001104c:	100f883a 	mov	r7,r2
10011050:	903ee83a 	callr	r18
10011054:	00ffffc4 	movi	r3,-1
10011058:	10c0031e 	bne	r2,r3,10011068 <_wcrtomb_r+0x64>
1001105c:	88000015 	stw	zero,0(r17)
10011060:	00c02284 	movi	r3,138
10011064:	80c00015 	stw	r3,0(r16)
10011068:	dfc00917 	ldw	ra,36(sp)
1001106c:	dc800817 	ldw	r18,32(sp)
10011070:	dc400717 	ldw	r17,28(sp)
10011074:	dc000617 	ldw	r16,24(sp)
10011078:	dec00a04 	addi	sp,sp,40
1001107c:	f800283a 	ret
10011080:	000ccdc0 	call	1000ccdc <__locale_charset>
10011084:	8009883a 	mov	r4,r16
10011088:	dc400015 	stw	r17,0(sp)
1001108c:	d9400104 	addi	r5,sp,4
10011090:	000d883a 	mov	r6,zero
10011094:	100f883a 	mov	r7,r2
10011098:	903ee83a 	callr	r18
1001109c:	003fed06 	br	10011054 <__alt_data_end+0xf8011054>

100110a0 <wcrtomb>:
100110a0:	defff504 	addi	sp,sp,-44
100110a4:	dc400515 	stw	r17,20(sp)
100110a8:	dc000415 	stw	r16,16(sp)
100110ac:	dfc00a15 	stw	ra,40(sp)
100110b0:	dd400915 	stw	r21,36(sp)
100110b4:	dd000815 	stw	r20,32(sp)
100110b8:	dcc00715 	stw	r19,28(sp)
100110bc:	dc800615 	stw	r18,24(sp)
100110c0:	2021883a 	mov	r16,r4
100110c4:	3023883a 	mov	r17,r6
100110c8:	20001d26 	beq	r4,zero,10011140 <wcrtomb+0xa0>
100110cc:	04840074 	movhi	r18,4097
100110d0:	949c0604 	addi	r18,r18,28696
100110d4:	00840074 	movhi	r2,4097
100110d8:	95400017 	ldw	r21,0(r18)
100110dc:	109c0a04 	addi	r2,r2,28712
100110e0:	15000017 	ldw	r20,0(r2)
100110e4:	2827883a 	mov	r19,r5
100110e8:	000ccdc0 	call	1000ccdc <__locale_charset>
100110ec:	a809883a 	mov	r4,r21
100110f0:	dc400015 	stw	r17,0(sp)
100110f4:	800b883a 	mov	r5,r16
100110f8:	980d883a 	mov	r6,r19
100110fc:	100f883a 	mov	r7,r2
10011100:	a03ee83a 	callr	r20
10011104:	00ffffc4 	movi	r3,-1
10011108:	10c0041e 	bne	r2,r3,1001111c <wcrtomb+0x7c>
1001110c:	90c00017 	ldw	r3,0(r18)
10011110:	01002284 	movi	r4,138
10011114:	88000015 	stw	zero,0(r17)
10011118:	19000015 	stw	r4,0(r3)
1001111c:	dfc00a17 	ldw	ra,40(sp)
10011120:	dd400917 	ldw	r21,36(sp)
10011124:	dd000817 	ldw	r20,32(sp)
10011128:	dcc00717 	ldw	r19,28(sp)
1001112c:	dc800617 	ldw	r18,24(sp)
10011130:	dc400517 	ldw	r17,20(sp)
10011134:	dc000417 	ldw	r16,16(sp)
10011138:	dec00b04 	addi	sp,sp,44
1001113c:	f800283a 	ret
10011140:	04840074 	movhi	r18,4097
10011144:	949c0604 	addi	r18,r18,28696
10011148:	00840074 	movhi	r2,4097
1001114c:	94c00017 	ldw	r19,0(r18)
10011150:	109c0a04 	addi	r2,r2,28712
10011154:	14000017 	ldw	r16,0(r2)
10011158:	000ccdc0 	call	1000ccdc <__locale_charset>
1001115c:	9809883a 	mov	r4,r19
10011160:	dc400015 	stw	r17,0(sp)
10011164:	d9400104 	addi	r5,sp,4
10011168:	000d883a 	mov	r6,zero
1001116c:	100f883a 	mov	r7,r2
10011170:	803ee83a 	callr	r16
10011174:	003fe306 	br	10011104 <__alt_data_end+0xf8011104>

10011178 <__ascii_wctomb>:
10011178:	28000526 	beq	r5,zero,10011190 <__ascii_wctomb+0x18>
1001117c:	00803fc4 	movi	r2,255
10011180:	11800536 	bltu	r2,r6,10011198 <__ascii_wctomb+0x20>
10011184:	29800005 	stb	r6,0(r5)
10011188:	00800044 	movi	r2,1
1001118c:	f800283a 	ret
10011190:	0005883a 	mov	r2,zero
10011194:	f800283a 	ret
10011198:	00802284 	movi	r2,138
1001119c:	20800015 	stw	r2,0(r4)
100111a0:	00bfffc4 	movi	r2,-1
100111a4:	f800283a 	ret

100111a8 <_wctomb_r>:
100111a8:	00840074 	movhi	r2,4097
100111ac:	defff904 	addi	sp,sp,-28
100111b0:	109c0a04 	addi	r2,r2,28712
100111b4:	dfc00615 	stw	ra,24(sp)
100111b8:	dc400515 	stw	r17,20(sp)
100111bc:	dc000415 	stw	r16,16(sp)
100111c0:	3823883a 	mov	r17,r7
100111c4:	14000017 	ldw	r16,0(r2)
100111c8:	d9000115 	stw	r4,4(sp)
100111cc:	d9400215 	stw	r5,8(sp)
100111d0:	d9800315 	stw	r6,12(sp)
100111d4:	000ccdc0 	call	1000ccdc <__locale_charset>
100111d8:	d9000117 	ldw	r4,4(sp)
100111dc:	d9400217 	ldw	r5,8(sp)
100111e0:	d9800317 	ldw	r6,12(sp)
100111e4:	dc400015 	stw	r17,0(sp)
100111e8:	100f883a 	mov	r7,r2
100111ec:	803ee83a 	callr	r16
100111f0:	dfc00617 	ldw	ra,24(sp)
100111f4:	dc400517 	ldw	r17,20(sp)
100111f8:	dc000417 	ldw	r16,16(sp)
100111fc:	dec00704 	addi	sp,sp,28
10011200:	f800283a 	ret

10011204 <__udivdi3>:
10011204:	defff504 	addi	sp,sp,-44
10011208:	dcc00415 	stw	r19,16(sp)
1001120c:	dc000115 	stw	r16,4(sp)
10011210:	dfc00a15 	stw	ra,40(sp)
10011214:	df000915 	stw	fp,36(sp)
10011218:	ddc00815 	stw	r23,32(sp)
1001121c:	dd800715 	stw	r22,28(sp)
10011220:	dd400615 	stw	r21,24(sp)
10011224:	dd000515 	stw	r20,20(sp)
10011228:	dc800315 	stw	r18,12(sp)
1001122c:	dc400215 	stw	r17,8(sp)
10011230:	2027883a 	mov	r19,r4
10011234:	2821883a 	mov	r16,r5
10011238:	3800471e 	bne	r7,zero,10011358 <__udivdi3+0x154>
1001123c:	3025883a 	mov	r18,r6
10011240:	2023883a 	mov	r17,r4
10011244:	2980592e 	bgeu	r5,r6,100113ac <__udivdi3+0x1a8>
10011248:	00bfffd4 	movui	r2,65535
1001124c:	2829883a 	mov	r20,r5
10011250:	1180b236 	bltu	r2,r6,1001151c <__udivdi3+0x318>
10011254:	00803fc4 	movi	r2,255
10011258:	1181622e 	bgeu	r2,r6,100117e4 <__udivdi3+0x5e0>
1001125c:	00800204 	movi	r2,8
10011260:	1007883a 	mov	r3,r2
10011264:	3084d83a 	srl	r2,r6,r2
10011268:	01040074 	movhi	r4,4097
1001126c:	21149904 	addi	r4,r4,21092
10011270:	2085883a 	add	r2,r4,r2
10011274:	11000003 	ldbu	r4,0(r2)
10011278:	20c9883a 	add	r4,r4,r3
1001127c:	00c00804 	movi	r3,32
10011280:	1907c83a 	sub	r3,r3,r4
10011284:	18000526 	beq	r3,zero,1001129c <__udivdi3+0x98>
10011288:	80e0983a 	sll	r16,r16,r3
1001128c:	9908d83a 	srl	r4,r19,r4
10011290:	30e4983a 	sll	r18,r6,r3
10011294:	98e2983a 	sll	r17,r19,r3
10011298:	8128b03a 	or	r20,r16,r4
1001129c:	902ad43a 	srli	r21,r18,16
100112a0:	a009883a 	mov	r4,r20
100112a4:	95bfffcc 	andi	r22,r18,65535
100112a8:	a80b883a 	mov	r5,r21
100112ac:	00057280 	call	10005728 <__umodsi3>
100112b0:	a009883a 	mov	r4,r20
100112b4:	a80b883a 	mov	r5,r21
100112b8:	102f883a 	mov	r23,r2
100112bc:	00057200 	call	10005720 <__udivsi3>
100112c0:	1009883a 	mov	r4,r2
100112c4:	b00b883a 	mov	r5,r22
100112c8:	1021883a 	mov	r16,r2
100112cc:	00057300 	call	10005730 <__mulsi3>
100112d0:	b82e943a 	slli	r23,r23,16
100112d4:	8808d43a 	srli	r4,r17,16
100112d8:	b906b03a 	or	r3,r23,r4
100112dc:	1880052e 	bgeu	r3,r2,100112f4 <__udivdi3+0xf0>
100112e0:	1c87883a 	add	r3,r3,r18
100112e4:	813fffc4 	addi	r4,r16,-1
100112e8:	1c800136 	bltu	r3,r18,100112f0 <__udivdi3+0xec>
100112ec:	18815236 	bltu	r3,r2,10011838 <__udivdi3+0x634>
100112f0:	2021883a 	mov	r16,r4
100112f4:	18a7c83a 	sub	r19,r3,r2
100112f8:	9809883a 	mov	r4,r19
100112fc:	a80b883a 	mov	r5,r21
10011300:	00057280 	call	10005728 <__umodsi3>
10011304:	1029883a 	mov	r20,r2
10011308:	9809883a 	mov	r4,r19
1001130c:	a80b883a 	mov	r5,r21
10011310:	a028943a 	slli	r20,r20,16
10011314:	00057200 	call	10005720 <__udivsi3>
10011318:	1009883a 	mov	r4,r2
1001131c:	b00b883a 	mov	r5,r22
10011320:	8c7fffcc 	andi	r17,r17,65535
10011324:	1027883a 	mov	r19,r2
10011328:	a462b03a 	or	r17,r20,r17
1001132c:	00057300 	call	10005730 <__mulsi3>
10011330:	8880052e 	bgeu	r17,r2,10011348 <__udivdi3+0x144>
10011334:	8ca3883a 	add	r17,r17,r18
10011338:	98ffffc4 	addi	r3,r19,-1
1001133c:	8c811036 	bltu	r17,r18,10011780 <__udivdi3+0x57c>
10011340:	88810f2e 	bgeu	r17,r2,10011780 <__udivdi3+0x57c>
10011344:	9cffff84 	addi	r19,r19,-2
10011348:	8020943a 	slli	r16,r16,16
1001134c:	0007883a 	mov	r3,zero
10011350:	9c04b03a 	or	r2,r19,r16
10011354:	00006006 	br	100114d8 <__udivdi3+0x2d4>
10011358:	29c05d36 	bltu	r5,r7,100114d0 <__udivdi3+0x2cc>
1001135c:	00bfffd4 	movui	r2,65535
10011360:	11c0692e 	bgeu	r2,r7,10011508 <__udivdi3+0x304>
10011364:	00804034 	movhi	r2,256
10011368:	10bfffc4 	addi	r2,r2,-1
1001136c:	11c10e2e 	bgeu	r2,r7,100117a8 <__udivdi3+0x5a4>
10011370:	01400604 	movi	r5,24
10011374:	2811883a 	mov	r8,r5
10011378:	394ad83a 	srl	r5,r7,r5
1001137c:	00840074 	movhi	r2,4097
10011380:	10949904 	addi	r2,r2,21092
10011384:	114b883a 	add	r5,r2,r5
10011388:	29400003 	ldbu	r5,0(r5)
1001138c:	00c00804 	movi	r3,32
10011390:	2a0b883a 	add	r5,r5,r8
10011394:	196fc83a 	sub	r23,r3,r5
10011398:	b8006b1e 	bne	r23,zero,10011548 <__udivdi3+0x344>
1001139c:	3c011436 	bltu	r7,r16,100117f0 <__udivdi3+0x5ec>
100113a0:	9985403a 	cmpgeu	r2,r19,r6
100113a4:	0007883a 	mov	r3,zero
100113a8:	00004b06 	br	100114d8 <__udivdi3+0x2d4>
100113ac:	3000041e 	bne	r6,zero,100113c0 <__udivdi3+0x1bc>
100113b0:	01000044 	movi	r4,1
100113b4:	000b883a 	mov	r5,zero
100113b8:	00057200 	call	10005720 <__udivsi3>
100113bc:	1025883a 	mov	r18,r2
100113c0:	00bfffd4 	movui	r2,65535
100113c4:	14805b2e 	bgeu	r2,r18,10011534 <__udivdi3+0x330>
100113c8:	00804034 	movhi	r2,256
100113cc:	10bfffc4 	addi	r2,r2,-1
100113d0:	1480fe2e 	bgeu	r2,r18,100117cc <__udivdi3+0x5c8>
100113d4:	00800604 	movi	r2,24
100113d8:	1007883a 	mov	r3,r2
100113dc:	9084d83a 	srl	r2,r18,r2
100113e0:	01040074 	movhi	r4,4097
100113e4:	21149904 	addi	r4,r4,21092
100113e8:	2085883a 	add	r2,r4,r2
100113ec:	11800003 	ldbu	r6,0(r2)
100113f0:	01c00804 	movi	r7,32
100113f4:	30c7883a 	add	r3,r6,r3
100113f8:	38cfc83a 	sub	r7,r7,r3
100113fc:	3800a71e 	bne	r7,zero,1001169c <__udivdi3+0x498>
10011400:	9028d43a 	srli	r20,r18,16
10011404:	84a1c83a 	sub	r16,r16,r18
10011408:	957fffcc 	andi	r21,r18,65535
1001140c:	00c00044 	movi	r3,1
10011410:	8009883a 	mov	r4,r16
10011414:	a00b883a 	mov	r5,r20
10011418:	d8c00015 	stw	r3,0(sp)
1001141c:	00057280 	call	10005728 <__umodsi3>
10011420:	8009883a 	mov	r4,r16
10011424:	a00b883a 	mov	r5,r20
10011428:	102d883a 	mov	r22,r2
1001142c:	00057200 	call	10005720 <__udivsi3>
10011430:	1009883a 	mov	r4,r2
10011434:	a80b883a 	mov	r5,r21
10011438:	1021883a 	mov	r16,r2
1001143c:	00057300 	call	10005730 <__mulsi3>
10011440:	b02c943a 	slli	r22,r22,16
10011444:	880ed43a 	srli	r7,r17,16
10011448:	d8c00017 	ldw	r3,0(sp)
1001144c:	b1ccb03a 	or	r6,r22,r7
10011450:	3080052e 	bgeu	r6,r2,10011468 <__udivdi3+0x264>
10011454:	348d883a 	add	r6,r6,r18
10011458:	813fffc4 	addi	r4,r16,-1
1001145c:	34800136 	bltu	r6,r18,10011464 <__udivdi3+0x260>
10011460:	3080f236 	bltu	r6,r2,1001182c <__udivdi3+0x628>
10011464:	2021883a 	mov	r16,r4
10011468:	30a7c83a 	sub	r19,r6,r2
1001146c:	9809883a 	mov	r4,r19
10011470:	a00b883a 	mov	r5,r20
10011474:	d8c00015 	stw	r3,0(sp)
10011478:	00057280 	call	10005728 <__umodsi3>
1001147c:	102d883a 	mov	r22,r2
10011480:	9809883a 	mov	r4,r19
10011484:	a00b883a 	mov	r5,r20
10011488:	b02c943a 	slli	r22,r22,16
1001148c:	00057200 	call	10005720 <__udivsi3>
10011490:	1009883a 	mov	r4,r2
10011494:	a80b883a 	mov	r5,r21
10011498:	8c7fffcc 	andi	r17,r17,65535
1001149c:	1027883a 	mov	r19,r2
100114a0:	b462b03a 	or	r17,r22,r17
100114a4:	00057300 	call	10005730 <__mulsi3>
100114a8:	d8c00017 	ldw	r3,0(sp)
100114ac:	8880052e 	bgeu	r17,r2,100114c4 <__udivdi3+0x2c0>
100114b0:	8ca3883a 	add	r17,r17,r18
100114b4:	993fffc4 	addi	r4,r19,-1
100114b8:	8c80af36 	bltu	r17,r18,10011778 <__udivdi3+0x574>
100114bc:	8880ae2e 	bgeu	r17,r2,10011778 <__udivdi3+0x574>
100114c0:	9cffff84 	addi	r19,r19,-2
100114c4:	8020943a 	slli	r16,r16,16
100114c8:	9c04b03a 	or	r2,r19,r16
100114cc:	00000206 	br	100114d8 <__udivdi3+0x2d4>
100114d0:	0007883a 	mov	r3,zero
100114d4:	0005883a 	mov	r2,zero
100114d8:	dfc00a17 	ldw	ra,40(sp)
100114dc:	df000917 	ldw	fp,36(sp)
100114e0:	ddc00817 	ldw	r23,32(sp)
100114e4:	dd800717 	ldw	r22,28(sp)
100114e8:	dd400617 	ldw	r21,24(sp)
100114ec:	dd000517 	ldw	r20,20(sp)
100114f0:	dcc00417 	ldw	r19,16(sp)
100114f4:	dc800317 	ldw	r18,12(sp)
100114f8:	dc400217 	ldw	r17,8(sp)
100114fc:	dc000117 	ldw	r16,4(sp)
10011500:	dec00b04 	addi	sp,sp,44
10011504:	f800283a 	ret
10011508:	00803fc4 	movi	r2,255
1001150c:	11c0a92e 	bgeu	r2,r7,100117b4 <__udivdi3+0x5b0>
10011510:	01400204 	movi	r5,8
10011514:	2811883a 	mov	r8,r5
10011518:	003f9706 	br	10011378 <__alt_data_end+0xf8011378>
1001151c:	00804034 	movhi	r2,256
10011520:	10bfffc4 	addi	r2,r2,-1
10011524:	1180a62e 	bgeu	r2,r6,100117c0 <__udivdi3+0x5bc>
10011528:	00800604 	movi	r2,24
1001152c:	1007883a 	mov	r3,r2
10011530:	003f4c06 	br	10011264 <__alt_data_end+0xf8011264>
10011534:	00803fc4 	movi	r2,255
10011538:	1480a72e 	bgeu	r2,r18,100117d8 <__udivdi3+0x5d4>
1001153c:	00800204 	movi	r2,8
10011540:	1007883a 	mov	r3,r2
10011544:	003fa506 	br	100113dc <__alt_data_end+0xf80113dc>
10011548:	3178d83a 	srl	fp,r6,r5
1001154c:	3dce983a 	sll	r7,r7,r23
10011550:	8168d83a 	srl	r20,r16,r5
10011554:	9950d83a 	srl	r8,r19,r5
10011558:	3f38b03a 	or	fp,r7,fp
1001155c:	e024d43a 	srli	r18,fp,16
10011560:	85e0983a 	sll	r16,r16,r23
10011564:	a009883a 	mov	r4,r20
10011568:	900b883a 	mov	r5,r18
1001156c:	8220b03a 	or	r16,r16,r8
10011570:	35ea983a 	sll	r21,r6,r23
10011574:	00057280 	call	10005728 <__umodsi3>
10011578:	a009883a 	mov	r4,r20
1001157c:	900b883a 	mov	r5,r18
10011580:	1023883a 	mov	r17,r2
10011584:	e5bfffcc 	andi	r22,fp,65535
10011588:	00057200 	call	10005720 <__udivsi3>
1001158c:	1009883a 	mov	r4,r2
10011590:	b00b883a 	mov	r5,r22
10011594:	1029883a 	mov	r20,r2
10011598:	00057300 	call	10005730 <__mulsi3>
1001159c:	8806943a 	slli	r3,r17,16
100115a0:	8014d43a 	srli	r10,r16,16
100115a4:	1a92b03a 	or	r9,r3,r10
100115a8:	4880042e 	bgeu	r9,r2,100115bc <__udivdi3+0x3b8>
100115ac:	4f13883a 	add	r9,r9,fp
100115b0:	a0ffffc4 	addi	r3,r20,-1
100115b4:	4f00952e 	bgeu	r9,fp,1001180c <__udivdi3+0x608>
100115b8:	1829883a 	mov	r20,r3
100115bc:	48a3c83a 	sub	r17,r9,r2
100115c0:	8809883a 	mov	r4,r17
100115c4:	900b883a 	mov	r5,r18
100115c8:	00057280 	call	10005728 <__umodsi3>
100115cc:	8809883a 	mov	r4,r17
100115d0:	900b883a 	mov	r5,r18
100115d4:	d8800015 	stw	r2,0(sp)
100115d8:	00057200 	call	10005720 <__udivsi3>
100115dc:	1009883a 	mov	r4,r2
100115e0:	b00b883a 	mov	r5,r22
100115e4:	1023883a 	mov	r17,r2
100115e8:	00057300 	call	10005730 <__mulsi3>
100115ec:	d8c00017 	ldw	r3,0(sp)
100115f0:	823fffcc 	andi	r8,r16,65535
100115f4:	1806943a 	slli	r3,r3,16
100115f8:	1a20b03a 	or	r16,r3,r8
100115fc:	8080042e 	bgeu	r16,r2,10011610 <__udivdi3+0x40c>
10011600:	8721883a 	add	r16,r16,fp
10011604:	88ffffc4 	addi	r3,r17,-1
10011608:	87007c2e 	bgeu	r16,fp,100117fc <__udivdi3+0x5f8>
1001160c:	1823883a 	mov	r17,r3
10011610:	a028943a 	slli	r20,r20,16
10011614:	acbfffcc 	andi	r18,r21,65535
10011618:	900b883a 	mov	r5,r18
1001161c:	8d28b03a 	or	r20,r17,r20
10011620:	a022d43a 	srli	r17,r20,16
10011624:	a5bfffcc 	andi	r22,r20,65535
10011628:	b009883a 	mov	r4,r22
1001162c:	a82ad43a 	srli	r21,r21,16
10011630:	80a1c83a 	sub	r16,r16,r2
10011634:	00057300 	call	10005730 <__mulsi3>
10011638:	8809883a 	mov	r4,r17
1001163c:	900b883a 	mov	r5,r18
10011640:	1039883a 	mov	fp,r2
10011644:	00057300 	call	10005730 <__mulsi3>
10011648:	8809883a 	mov	r4,r17
1001164c:	a80b883a 	mov	r5,r21
10011650:	1025883a 	mov	r18,r2
10011654:	00057300 	call	10005730 <__mulsi3>
10011658:	b009883a 	mov	r4,r22
1001165c:	a80b883a 	mov	r5,r21
10011660:	1023883a 	mov	r17,r2
10011664:	00057300 	call	10005730 <__mulsi3>
10011668:	e006d43a 	srli	r3,fp,16
1001166c:	9085883a 	add	r2,r18,r2
10011670:	10c7883a 	add	r3,r2,r3
10011674:	1c80022e 	bgeu	r3,r18,10011680 <__udivdi3+0x47c>
10011678:	00800074 	movhi	r2,1
1001167c:	88a3883a 	add	r17,r17,r2
10011680:	1808d43a 	srli	r4,r3,16
10011684:	8909883a 	add	r4,r17,r4
10011688:	81004436 	bltu	r16,r4,1001179c <__udivdi3+0x598>
1001168c:	81003e26 	beq	r16,r4,10011788 <__udivdi3+0x584>
10011690:	a005883a 	mov	r2,r20
10011694:	0007883a 	mov	r3,zero
10011698:	003f8f06 	br	100114d8 <__alt_data_end+0xf80114d8>
1001169c:	91e4983a 	sll	r18,r18,r7
100116a0:	80eed83a 	srl	r23,r16,r3
100116a4:	81cc983a 	sll	r6,r16,r7
100116a8:	9028d43a 	srli	r20,r18,16
100116ac:	98c6d83a 	srl	r3,r19,r3
100116b0:	b809883a 	mov	r4,r23
100116b4:	a00b883a 	mov	r5,r20
100116b8:	30ecb03a 	or	r22,r6,r3
100116bc:	99e2983a 	sll	r17,r19,r7
100116c0:	00057280 	call	10005728 <__umodsi3>
100116c4:	b809883a 	mov	r4,r23
100116c8:	a00b883a 	mov	r5,r20
100116cc:	1021883a 	mov	r16,r2
100116d0:	957fffcc 	andi	r21,r18,65535
100116d4:	00057200 	call	10005720 <__udivsi3>
100116d8:	a80b883a 	mov	r5,r21
100116dc:	1009883a 	mov	r4,r2
100116e0:	102f883a 	mov	r23,r2
100116e4:	00057300 	call	10005730 <__mulsi3>
100116e8:	8020943a 	slli	r16,r16,16
100116ec:	b00ad43a 	srli	r5,r22,16
100116f0:	814cb03a 	or	r6,r16,r5
100116f4:	3080062e 	bgeu	r6,r2,10011710 <__udivdi3+0x50c>
100116f8:	348d883a 	add	r6,r6,r18
100116fc:	b8ffffc4 	addi	r3,r23,-1
10011700:	34804836 	bltu	r6,r18,10011824 <__udivdi3+0x620>
10011704:	3080472e 	bgeu	r6,r2,10011824 <__udivdi3+0x620>
10011708:	bdffff84 	addi	r23,r23,-2
1001170c:	348d883a 	add	r6,r6,r18
10011710:	30a7c83a 	sub	r19,r6,r2
10011714:	9809883a 	mov	r4,r19
10011718:	a00b883a 	mov	r5,r20
1001171c:	00057280 	call	10005728 <__umodsi3>
10011720:	9809883a 	mov	r4,r19
10011724:	a00b883a 	mov	r5,r20
10011728:	1039883a 	mov	fp,r2
1001172c:	00057200 	call	10005720 <__udivsi3>
10011730:	1009883a 	mov	r4,r2
10011734:	a80b883a 	mov	r5,r21
10011738:	e038943a 	slli	fp,fp,16
1001173c:	1027883a 	mov	r19,r2
10011740:	00057300 	call	10005730 <__mulsi3>
10011744:	b1bfffcc 	andi	r6,r22,65535
10011748:	e18cb03a 	or	r6,fp,r6
1001174c:	3080062e 	bgeu	r6,r2,10011768 <__udivdi3+0x564>
10011750:	348d883a 	add	r6,r6,r18
10011754:	98ffffc4 	addi	r3,r19,-1
10011758:	34803036 	bltu	r6,r18,1001181c <__udivdi3+0x618>
1001175c:	30802f2e 	bgeu	r6,r2,1001181c <__udivdi3+0x618>
10011760:	9cffff84 	addi	r19,r19,-2
10011764:	348d883a 	add	r6,r6,r18
10011768:	b82e943a 	slli	r23,r23,16
1001176c:	30a1c83a 	sub	r16,r6,r2
10011770:	9dc6b03a 	or	r3,r19,r23
10011774:	003f2606 	br	10011410 <__alt_data_end+0xf8011410>
10011778:	2027883a 	mov	r19,r4
1001177c:	003f5106 	br	100114c4 <__alt_data_end+0xf80114c4>
10011780:	1827883a 	mov	r19,r3
10011784:	003ef006 	br	10011348 <__alt_data_end+0xf8011348>
10011788:	1808943a 	slli	r4,r3,16
1001178c:	9dc6983a 	sll	r3,r19,r23
10011790:	e73fffcc 	andi	fp,fp,65535
10011794:	2709883a 	add	r4,r4,fp
10011798:	193fbd2e 	bgeu	r3,r4,10011690 <__alt_data_end+0xf8011690>
1001179c:	a0bfffc4 	addi	r2,r20,-1
100117a0:	0007883a 	mov	r3,zero
100117a4:	003f4c06 	br	100114d8 <__alt_data_end+0xf80114d8>
100117a8:	01400404 	movi	r5,16
100117ac:	2811883a 	mov	r8,r5
100117b0:	003ef106 	br	10011378 <__alt_data_end+0xf8011378>
100117b4:	000b883a 	mov	r5,zero
100117b8:	0011883a 	mov	r8,zero
100117bc:	003eee06 	br	10011378 <__alt_data_end+0xf8011378>
100117c0:	00800404 	movi	r2,16
100117c4:	1007883a 	mov	r3,r2
100117c8:	003ea606 	br	10011264 <__alt_data_end+0xf8011264>
100117cc:	00800404 	movi	r2,16
100117d0:	1007883a 	mov	r3,r2
100117d4:	003f0106 	br	100113dc <__alt_data_end+0xf80113dc>
100117d8:	0005883a 	mov	r2,zero
100117dc:	0007883a 	mov	r3,zero
100117e0:	003efe06 	br	100113dc <__alt_data_end+0xf80113dc>
100117e4:	0005883a 	mov	r2,zero
100117e8:	0007883a 	mov	r3,zero
100117ec:	003e9d06 	br	10011264 <__alt_data_end+0xf8011264>
100117f0:	0007883a 	mov	r3,zero
100117f4:	00800044 	movi	r2,1
100117f8:	003f3706 	br	100114d8 <__alt_data_end+0xf80114d8>
100117fc:	80bf832e 	bgeu	r16,r2,1001160c <__alt_data_end+0xf801160c>
10011800:	8c7fff84 	addi	r17,r17,-2
10011804:	8721883a 	add	r16,r16,fp
10011808:	003f8106 	br	10011610 <__alt_data_end+0xf8011610>
1001180c:	48bf6a2e 	bgeu	r9,r2,100115b8 <__alt_data_end+0xf80115b8>
10011810:	a53fff84 	addi	r20,r20,-2
10011814:	4f13883a 	add	r9,r9,fp
10011818:	003f6806 	br	100115bc <__alt_data_end+0xf80115bc>
1001181c:	1827883a 	mov	r19,r3
10011820:	003fd106 	br	10011768 <__alt_data_end+0xf8011768>
10011824:	182f883a 	mov	r23,r3
10011828:	003fb906 	br	10011710 <__alt_data_end+0xf8011710>
1001182c:	843fff84 	addi	r16,r16,-2
10011830:	348d883a 	add	r6,r6,r18
10011834:	003f0c06 	br	10011468 <__alt_data_end+0xf8011468>
10011838:	843fff84 	addi	r16,r16,-2
1001183c:	1c87883a 	add	r3,r3,r18
10011840:	003eac06 	br	100112f4 <__alt_data_end+0xf80112f4>

10011844 <__umoddi3>:
10011844:	defff404 	addi	sp,sp,-48
10011848:	dd800815 	stw	r22,32(sp)
1001184c:	dc400315 	stw	r17,12(sp)
10011850:	dc000215 	stw	r16,8(sp)
10011854:	dfc00b15 	stw	ra,44(sp)
10011858:	df000a15 	stw	fp,40(sp)
1001185c:	ddc00915 	stw	r23,36(sp)
10011860:	dd400715 	stw	r21,28(sp)
10011864:	dd000615 	stw	r20,24(sp)
10011868:	dcc00515 	stw	r19,20(sp)
1001186c:	dc800415 	stw	r18,16(sp)
10011870:	2021883a 	mov	r16,r4
10011874:	2823883a 	mov	r17,r5
10011878:	282d883a 	mov	r22,r5
1001187c:	38003c1e 	bne	r7,zero,10011970 <__umoddi3+0x12c>
10011880:	3027883a 	mov	r19,r6
10011884:	2029883a 	mov	r20,r4
10011888:	2980522e 	bgeu	r5,r6,100119d4 <__umoddi3+0x190>
1001188c:	00bfffd4 	movui	r2,65535
10011890:	1180a436 	bltu	r2,r6,10011b24 <__umoddi3+0x2e0>
10011894:	00803fc4 	movi	r2,255
10011898:	11815e2e 	bgeu	r2,r6,10011e14 <__umoddi3+0x5d0>
1001189c:	01400204 	movi	r5,8
100118a0:	2805883a 	mov	r2,r5
100118a4:	314ad83a 	srl	r5,r6,r5
100118a8:	00c40074 	movhi	r3,4097
100118ac:	18d49904 	addi	r3,r3,21092
100118b0:	194b883a 	add	r5,r3,r5
100118b4:	29000003 	ldbu	r4,0(r5)
100118b8:	2089883a 	add	r4,r4,r2
100118bc:	00800804 	movi	r2,32
100118c0:	1105c83a 	sub	r2,r2,r4
100118c4:	10010c26 	beq	r2,zero,10011cf8 <__umoddi3+0x4b4>
100118c8:	88a2983a 	sll	r17,r17,r2
100118cc:	8108d83a 	srl	r4,r16,r4
100118d0:	30a6983a 	sll	r19,r6,r2
100118d4:	80a8983a 	sll	r20,r16,r2
100118d8:	1025883a 	mov	r18,r2
100118dc:	892cb03a 	or	r22,r17,r4
100118e0:	9822d43a 	srli	r17,r19,16
100118e4:	b009883a 	mov	r4,r22
100118e8:	9d7fffcc 	andi	r21,r19,65535
100118ec:	880b883a 	mov	r5,r17
100118f0:	00057280 	call	10005728 <__umodsi3>
100118f4:	b009883a 	mov	r4,r22
100118f8:	880b883a 	mov	r5,r17
100118fc:	102f883a 	mov	r23,r2
10011900:	00057200 	call	10005720 <__udivsi3>
10011904:	1009883a 	mov	r4,r2
10011908:	a80b883a 	mov	r5,r21
1001190c:	00057300 	call	10005730 <__mulsi3>
10011910:	b82e943a 	slli	r23,r23,16
10011914:	a008d43a 	srli	r4,r20,16
10011918:	b906b03a 	or	r3,r23,r4
1001191c:	1880042e 	bgeu	r3,r2,10011930 <__umoddi3+0xec>
10011920:	1cc7883a 	add	r3,r3,r19
10011924:	1cc00236 	bltu	r3,r19,10011930 <__umoddi3+0xec>
10011928:	1880012e 	bgeu	r3,r2,10011930 <__umoddi3+0xec>
1001192c:	1cc7883a 	add	r3,r3,r19
10011930:	18a1c83a 	sub	r16,r3,r2
10011934:	8009883a 	mov	r4,r16
10011938:	880b883a 	mov	r5,r17
1001193c:	00057280 	call	10005728 <__umodsi3>
10011940:	8009883a 	mov	r4,r16
10011944:	880b883a 	mov	r5,r17
10011948:	102d883a 	mov	r22,r2
1001194c:	00057200 	call	10005720 <__udivsi3>
10011950:	1009883a 	mov	r4,r2
10011954:	a80b883a 	mov	r5,r21
10011958:	b02c943a 	slli	r22,r22,16
1001195c:	00057300 	call	10005730 <__mulsi3>
10011960:	a13fffcc 	andi	r4,r20,65535
10011964:	b106b03a 	or	r3,r22,r4
10011968:	1880572e 	bgeu	r3,r2,10011ac8 <__umoddi3+0x284>
1001196c:	00005206 	br	10011ab8 <__umoddi3+0x274>
10011970:	29c05936 	bltu	r5,r7,10011ad8 <__umoddi3+0x294>
10011974:	00bfffd4 	movui	r2,65535
10011978:	11c0652e 	bgeu	r2,r7,10011b10 <__umoddi3+0x2cc>
1001197c:	00804034 	movhi	r2,256
10011980:	10bfffc4 	addi	r2,r2,-1
10011984:	11c1172e 	bgeu	r2,r7,10011de4 <__umoddi3+0x5a0>
10011988:	01400604 	movi	r5,24
1001198c:	282b883a 	mov	r21,r5
10011990:	394ad83a 	srl	r5,r7,r5
10011994:	00c40074 	movhi	r3,4097
10011998:	18d49904 	addi	r3,r3,21092
1001199c:	194b883a 	add	r5,r3,r5
100119a0:	28800003 	ldbu	r2,0(r5)
100119a4:	00c00804 	movi	r3,32
100119a8:	156b883a 	add	r21,r2,r21
100119ac:	1d69c83a 	sub	r20,r3,r21
100119b0:	a000671e 	bne	r20,zero,10011b50 <__umoddi3+0x30c>
100119b4:	3c400136 	bltu	r7,r17,100119bc <__umoddi3+0x178>
100119b8:	81812336 	bltu	r16,r6,10011e48 <__umoddi3+0x604>
100119bc:	8185c83a 	sub	r2,r16,r6
100119c0:	89e3c83a 	sub	r17,r17,r7
100119c4:	8087803a 	cmpltu	r3,r16,r2
100119c8:	88edc83a 	sub	r22,r17,r3
100119cc:	b007883a 	mov	r3,r22
100119d0:	00004306 	br	10011ae0 <__umoddi3+0x29c>
100119d4:	3000041e 	bne	r6,zero,100119e8 <__umoddi3+0x1a4>
100119d8:	01000044 	movi	r4,1
100119dc:	000b883a 	mov	r5,zero
100119e0:	00057200 	call	10005720 <__udivsi3>
100119e4:	1027883a 	mov	r19,r2
100119e8:	00bfffd4 	movui	r2,65535
100119ec:	14c0532e 	bgeu	r2,r19,10011b3c <__umoddi3+0x2f8>
100119f0:	00804034 	movhi	r2,256
100119f4:	10bfffc4 	addi	r2,r2,-1
100119f8:	14c1032e 	bgeu	r2,r19,10011e08 <__umoddi3+0x5c4>
100119fc:	00800604 	movi	r2,24
10011a00:	1007883a 	mov	r3,r2
10011a04:	9884d83a 	srl	r2,r19,r2
10011a08:	01040074 	movhi	r4,4097
10011a0c:	21149904 	addi	r4,r4,21092
10011a10:	2085883a 	add	r2,r4,r2
10011a14:	11000003 	ldbu	r4,0(r2)
10011a18:	00800804 	movi	r2,32
10011a1c:	20c7883a 	add	r3,r4,r3
10011a20:	10c5c83a 	sub	r2,r2,r3
10011a24:	1000b61e 	bne	r2,zero,10011d00 <__umoddi3+0x4bc>
10011a28:	982ad43a 	srli	r21,r19,16
10011a2c:	8ce3c83a 	sub	r17,r17,r19
10011a30:	9dbfffcc 	andi	r22,r19,65535
10011a34:	0025883a 	mov	r18,zero
10011a38:	8809883a 	mov	r4,r17
10011a3c:	a80b883a 	mov	r5,r21
10011a40:	00057280 	call	10005728 <__umodsi3>
10011a44:	8809883a 	mov	r4,r17
10011a48:	a80b883a 	mov	r5,r21
10011a4c:	102f883a 	mov	r23,r2
10011a50:	00057200 	call	10005720 <__udivsi3>
10011a54:	1009883a 	mov	r4,r2
10011a58:	b00b883a 	mov	r5,r22
10011a5c:	00057300 	call	10005730 <__mulsi3>
10011a60:	b82e943a 	slli	r23,r23,16
10011a64:	a008d43a 	srli	r4,r20,16
10011a68:	b906b03a 	or	r3,r23,r4
10011a6c:	1880032e 	bgeu	r3,r2,10011a7c <__umoddi3+0x238>
10011a70:	1cc7883a 	add	r3,r3,r19
10011a74:	1cc00136 	bltu	r3,r19,10011a7c <__umoddi3+0x238>
10011a78:	1880f136 	bltu	r3,r2,10011e40 <__umoddi3+0x5fc>
10011a7c:	18a1c83a 	sub	r16,r3,r2
10011a80:	8009883a 	mov	r4,r16
10011a84:	a80b883a 	mov	r5,r21
10011a88:	00057280 	call	10005728 <__umodsi3>
10011a8c:	8009883a 	mov	r4,r16
10011a90:	a80b883a 	mov	r5,r21
10011a94:	1023883a 	mov	r17,r2
10011a98:	00057200 	call	10005720 <__udivsi3>
10011a9c:	1009883a 	mov	r4,r2
10011aa0:	b00b883a 	mov	r5,r22
10011aa4:	8822943a 	slli	r17,r17,16
10011aa8:	00057300 	call	10005730 <__mulsi3>
10011aac:	a13fffcc 	andi	r4,r20,65535
10011ab0:	8906b03a 	or	r3,r17,r4
10011ab4:	1880042e 	bgeu	r3,r2,10011ac8 <__umoddi3+0x284>
10011ab8:	1cc7883a 	add	r3,r3,r19
10011abc:	1cc00236 	bltu	r3,r19,10011ac8 <__umoddi3+0x284>
10011ac0:	1880012e 	bgeu	r3,r2,10011ac8 <__umoddi3+0x284>
10011ac4:	1cc7883a 	add	r3,r3,r19
10011ac8:	1887c83a 	sub	r3,r3,r2
10011acc:	1c84d83a 	srl	r2,r3,r18
10011ad0:	0007883a 	mov	r3,zero
10011ad4:	00000206 	br	10011ae0 <__umoddi3+0x29c>
10011ad8:	2005883a 	mov	r2,r4
10011adc:	2807883a 	mov	r3,r5
10011ae0:	dfc00b17 	ldw	ra,44(sp)
10011ae4:	df000a17 	ldw	fp,40(sp)
10011ae8:	ddc00917 	ldw	r23,36(sp)
10011aec:	dd800817 	ldw	r22,32(sp)
10011af0:	dd400717 	ldw	r21,28(sp)
10011af4:	dd000617 	ldw	r20,24(sp)
10011af8:	dcc00517 	ldw	r19,20(sp)
10011afc:	dc800417 	ldw	r18,16(sp)
10011b00:	dc400317 	ldw	r17,12(sp)
10011b04:	dc000217 	ldw	r16,8(sp)
10011b08:	dec00c04 	addi	sp,sp,48
10011b0c:	f800283a 	ret
10011b10:	00803fc4 	movi	r2,255
10011b14:	11c0b02e 	bgeu	r2,r7,10011dd8 <__umoddi3+0x594>
10011b18:	01400204 	movi	r5,8
10011b1c:	282b883a 	mov	r21,r5
10011b20:	003f9b06 	br	10011990 <__alt_data_end+0xf8011990>
10011b24:	00804034 	movhi	r2,256
10011b28:	10bfffc4 	addi	r2,r2,-1
10011b2c:	1180b02e 	bgeu	r2,r6,10011df0 <__umoddi3+0x5ac>
10011b30:	01400604 	movi	r5,24
10011b34:	2805883a 	mov	r2,r5
10011b38:	003f5a06 	br	100118a4 <__alt_data_end+0xf80118a4>
10011b3c:	00803fc4 	movi	r2,255
10011b40:	14c0ae2e 	bgeu	r2,r19,10011dfc <__umoddi3+0x5b8>
10011b44:	00800204 	movi	r2,8
10011b48:	1007883a 	mov	r3,r2
10011b4c:	003fad06 	br	10011a04 <__alt_data_end+0xf8011a04>
10011b50:	3d0a983a 	sll	r5,r7,r20
10011b54:	356cd83a 	srl	r22,r6,r21
10011b58:	8d78d83a 	srl	fp,r17,r21
10011b5c:	8d10983a 	sll	r8,r17,r20
10011b60:	2dacb03a 	or	r22,r5,r22
10011b64:	b02ed43a 	srli	r23,r22,16
10011b68:	8564d83a 	srl	r18,r16,r21
10011b6c:	e009883a 	mov	r4,fp
10011b70:	b80b883a 	mov	r5,r23
10011b74:	44a4b03a 	or	r18,r8,r18
10011b78:	3526983a 	sll	r19,r6,r20
10011b7c:	00057280 	call	10005728 <__umodsi3>
10011b80:	e009883a 	mov	r4,fp
10011b84:	b80b883a 	mov	r5,r23
10011b88:	b47fffcc 	andi	r17,r22,65535
10011b8c:	d8800015 	stw	r2,0(sp)
10011b90:	00057200 	call	10005720 <__udivsi3>
10011b94:	1009883a 	mov	r4,r2
10011b98:	880b883a 	mov	r5,r17
10011b9c:	1039883a 	mov	fp,r2
10011ba0:	00057300 	call	10005730 <__mulsi3>
10011ba4:	d9800017 	ldw	r6,0(sp)
10011ba8:	9008d43a 	srli	r4,r18,16
10011bac:	8520983a 	sll	r16,r16,r20
10011bb0:	300c943a 	slli	r6,r6,16
10011bb4:	3106b03a 	or	r3,r6,r4
10011bb8:	1880042e 	bgeu	r3,r2,10011bcc <__umoddi3+0x388>
10011bbc:	1d87883a 	add	r3,r3,r22
10011bc0:	e13fffc4 	addi	r4,fp,-1
10011bc4:	1d809a2e 	bgeu	r3,r22,10011e30 <__umoddi3+0x5ec>
10011bc8:	2039883a 	mov	fp,r4
10011bcc:	1887c83a 	sub	r3,r3,r2
10011bd0:	1809883a 	mov	r4,r3
10011bd4:	b80b883a 	mov	r5,r23
10011bd8:	d8c00115 	stw	r3,4(sp)
10011bdc:	00057280 	call	10005728 <__umodsi3>
10011be0:	d8c00117 	ldw	r3,4(sp)
10011be4:	b80b883a 	mov	r5,r23
10011be8:	d8800015 	stw	r2,0(sp)
10011bec:	1809883a 	mov	r4,r3
10011bf0:	00057200 	call	10005720 <__udivsi3>
10011bf4:	880b883a 	mov	r5,r17
10011bf8:	1009883a 	mov	r4,r2
10011bfc:	102f883a 	mov	r23,r2
10011c00:	00057300 	call	10005730 <__mulsi3>
10011c04:	d9800017 	ldw	r6,0(sp)
10011c08:	947fffcc 	andi	r17,r18,65535
10011c0c:	300c943a 	slli	r6,r6,16
10011c10:	3464b03a 	or	r18,r6,r17
10011c14:	9080042e 	bgeu	r18,r2,10011c28 <__umoddi3+0x3e4>
10011c18:	95a5883a 	add	r18,r18,r22
10011c1c:	b8ffffc4 	addi	r3,r23,-1
10011c20:	95807f2e 	bgeu	r18,r22,10011e20 <__umoddi3+0x5dc>
10011c24:	182f883a 	mov	r23,r3
10011c28:	e038943a 	slli	fp,fp,16
10011c2c:	980cd43a 	srli	r6,r19,16
10011c30:	98ffffcc 	andi	r3,r19,65535
10011c34:	bf38b03a 	or	fp,r23,fp
10011c38:	e02ed43a 	srli	r23,fp,16
10011c3c:	e73fffcc 	andi	fp,fp,65535
10011c40:	180b883a 	mov	r5,r3
10011c44:	e009883a 	mov	r4,fp
10011c48:	d9800015 	stw	r6,0(sp)
10011c4c:	d8c00115 	stw	r3,4(sp)
10011c50:	90a5c83a 	sub	r18,r18,r2
10011c54:	00057300 	call	10005730 <__mulsi3>
10011c58:	d8c00117 	ldw	r3,4(sp)
10011c5c:	b809883a 	mov	r4,r23
10011c60:	1023883a 	mov	r17,r2
10011c64:	180b883a 	mov	r5,r3
10011c68:	00057300 	call	10005730 <__mulsi3>
10011c6c:	d9800017 	ldw	r6,0(sp)
10011c70:	b809883a 	mov	r4,r23
10011c74:	d8800115 	stw	r2,4(sp)
10011c78:	300b883a 	mov	r5,r6
10011c7c:	302f883a 	mov	r23,r6
10011c80:	00057300 	call	10005730 <__mulsi3>
10011c84:	e009883a 	mov	r4,fp
10011c88:	b80b883a 	mov	r5,r23
10011c8c:	d8800015 	stw	r2,0(sp)
10011c90:	00057300 	call	10005730 <__mulsi3>
10011c94:	d8c00117 	ldw	r3,4(sp)
10011c98:	880cd43a 	srli	r6,r17,16
10011c9c:	d9c00017 	ldw	r7,0(sp)
10011ca0:	1885883a 	add	r2,r3,r2
10011ca4:	118d883a 	add	r6,r2,r6
10011ca8:	30c0022e 	bgeu	r6,r3,10011cb4 <__umoddi3+0x470>
10011cac:	00800074 	movhi	r2,1
10011cb0:	388f883a 	add	r7,r7,r2
10011cb4:	3006d43a 	srli	r3,r6,16
10011cb8:	300c943a 	slli	r6,r6,16
10011cbc:	8c7fffcc 	andi	r17,r17,65535
10011cc0:	38c7883a 	add	r3,r7,r3
10011cc4:	3463883a 	add	r17,r6,r17
10011cc8:	90c03d36 	bltu	r18,r3,10011dc0 <__umoddi3+0x57c>
10011ccc:	90c06026 	beq	r18,r3,10011e50 <__umoddi3+0x60c>
10011cd0:	90c9c83a 	sub	r4,r18,r3
10011cd4:	880f883a 	mov	r7,r17
10011cd8:	81cfc83a 	sub	r7,r16,r7
10011cdc:	81c7803a 	cmpltu	r3,r16,r7
10011ce0:	20c7c83a 	sub	r3,r4,r3
10011ce4:	1d44983a 	sll	r2,r3,r21
10011ce8:	3d0ed83a 	srl	r7,r7,r20
10011cec:	1d06d83a 	srl	r3,r3,r20
10011cf0:	11c4b03a 	or	r2,r2,r7
10011cf4:	003f7a06 	br	10011ae0 <__alt_data_end+0xf8011ae0>
10011cf8:	0025883a 	mov	r18,zero
10011cfc:	003ef806 	br	100118e0 <__alt_data_end+0xf80118e0>
10011d00:	98a6983a 	sll	r19,r19,r2
10011d04:	88e8d83a 	srl	r20,r17,r3
10011d08:	80c6d83a 	srl	r3,r16,r3
10011d0c:	982ad43a 	srli	r21,r19,16
10011d10:	88a2983a 	sll	r17,r17,r2
10011d14:	a009883a 	mov	r4,r20
10011d18:	a80b883a 	mov	r5,r21
10011d1c:	88eeb03a 	or	r23,r17,r3
10011d20:	1025883a 	mov	r18,r2
10011d24:	00057280 	call	10005728 <__umodsi3>
10011d28:	a009883a 	mov	r4,r20
10011d2c:	a80b883a 	mov	r5,r21
10011d30:	1023883a 	mov	r17,r2
10011d34:	9dbfffcc 	andi	r22,r19,65535
10011d38:	00057200 	call	10005720 <__udivsi3>
10011d3c:	1009883a 	mov	r4,r2
10011d40:	b00b883a 	mov	r5,r22
10011d44:	00057300 	call	10005730 <__mulsi3>
10011d48:	8822943a 	slli	r17,r17,16
10011d4c:	b808d43a 	srli	r4,r23,16
10011d50:	84a8983a 	sll	r20,r16,r18
10011d54:	8906b03a 	or	r3,r17,r4
10011d58:	1880042e 	bgeu	r3,r2,10011d6c <__umoddi3+0x528>
10011d5c:	1cc7883a 	add	r3,r3,r19
10011d60:	1cc00236 	bltu	r3,r19,10011d6c <__umoddi3+0x528>
10011d64:	1880012e 	bgeu	r3,r2,10011d6c <__umoddi3+0x528>
10011d68:	1cc7883a 	add	r3,r3,r19
10011d6c:	18a1c83a 	sub	r16,r3,r2
10011d70:	8009883a 	mov	r4,r16
10011d74:	a80b883a 	mov	r5,r21
10011d78:	00057280 	call	10005728 <__umodsi3>
10011d7c:	8009883a 	mov	r4,r16
10011d80:	a80b883a 	mov	r5,r21
10011d84:	1039883a 	mov	fp,r2
10011d88:	00057200 	call	10005720 <__udivsi3>
10011d8c:	1009883a 	mov	r4,r2
10011d90:	b00b883a 	mov	r5,r22
10011d94:	00057300 	call	10005730 <__mulsi3>
10011d98:	e006943a 	slli	r3,fp,16
10011d9c:	b93fffcc 	andi	r4,r23,65535
10011da0:	1906b03a 	or	r3,r3,r4
10011da4:	1880042e 	bgeu	r3,r2,10011db8 <__umoddi3+0x574>
10011da8:	1cc7883a 	add	r3,r3,r19
10011dac:	1cc00236 	bltu	r3,r19,10011db8 <__umoddi3+0x574>
10011db0:	1880012e 	bgeu	r3,r2,10011db8 <__umoddi3+0x574>
10011db4:	1cc7883a 	add	r3,r3,r19
10011db8:	18a3c83a 	sub	r17,r3,r2
10011dbc:	003f1e06 	br	10011a38 <__alt_data_end+0xf8011a38>
10011dc0:	8ccfc83a 	sub	r7,r17,r19
10011dc4:	1d89c83a 	sub	r4,r3,r22
10011dc8:	89e3803a 	cmpltu	r17,r17,r7
10011dcc:	2463c83a 	sub	r17,r4,r17
10011dd0:	9449c83a 	sub	r4,r18,r17
10011dd4:	003fc006 	br	10011cd8 <__alt_data_end+0xf8011cd8>
10011dd8:	000b883a 	mov	r5,zero
10011ddc:	002b883a 	mov	r21,zero
10011de0:	003eeb06 	br	10011990 <__alt_data_end+0xf8011990>
10011de4:	01400404 	movi	r5,16
10011de8:	282b883a 	mov	r21,r5
10011dec:	003ee806 	br	10011990 <__alt_data_end+0xf8011990>
10011df0:	01400404 	movi	r5,16
10011df4:	2805883a 	mov	r2,r5
10011df8:	003eaa06 	br	100118a4 <__alt_data_end+0xf80118a4>
10011dfc:	0005883a 	mov	r2,zero
10011e00:	0007883a 	mov	r3,zero
10011e04:	003eff06 	br	10011a04 <__alt_data_end+0xf8011a04>
10011e08:	00800404 	movi	r2,16
10011e0c:	1007883a 	mov	r3,r2
10011e10:	003efc06 	br	10011a04 <__alt_data_end+0xf8011a04>
10011e14:	000b883a 	mov	r5,zero
10011e18:	0005883a 	mov	r2,zero
10011e1c:	003ea106 	br	100118a4 <__alt_data_end+0xf80118a4>
10011e20:	90bf802e 	bgeu	r18,r2,10011c24 <__alt_data_end+0xf8011c24>
10011e24:	bdffff84 	addi	r23,r23,-2
10011e28:	95a5883a 	add	r18,r18,r22
10011e2c:	003f7e06 	br	10011c28 <__alt_data_end+0xf8011c28>
10011e30:	18bf652e 	bgeu	r3,r2,10011bc8 <__alt_data_end+0xf8011bc8>
10011e34:	e73fff84 	addi	fp,fp,-2
10011e38:	1d87883a 	add	r3,r3,r22
10011e3c:	003f6306 	br	10011bcc <__alt_data_end+0xf8011bcc>
10011e40:	1cc7883a 	add	r3,r3,r19
10011e44:	003f0d06 	br	10011a7c <__alt_data_end+0xf8011a7c>
10011e48:	8005883a 	mov	r2,r16
10011e4c:	003edf06 	br	100119cc <__alt_data_end+0xf80119cc>
10011e50:	847fdb36 	bltu	r16,r17,10011dc0 <__alt_data_end+0xf8011dc0>
10011e54:	880f883a 	mov	r7,r17
10011e58:	0009883a 	mov	r4,zero
10011e5c:	003f9e06 	br	10011cd8 <__alt_data_end+0xf8011cd8>

10011e60 <__floatunsidf>:
10011e60:	defffe04 	addi	sp,sp,-8
10011e64:	dc000015 	stw	r16,0(sp)
10011e68:	dfc00115 	stw	ra,4(sp)
10011e6c:	2021883a 	mov	r16,r4
10011e70:	20001026 	beq	r4,zero,10011eb4 <__floatunsidf+0x54>
10011e74:	0007e4c0 	call	10007e4c <__clzsi2>
10011e78:	01410784 	movi	r5,1054
10011e7c:	100d883a 	mov	r6,r2
10011e80:	288bc83a 	sub	r5,r5,r2
10011e84:	00800284 	movi	r2,10
10011e88:	11801616 	blt	r2,r6,10011ee4 <__floatunsidf+0x84>
10011e8c:	008002c4 	movi	r2,11
10011e90:	1185c83a 	sub	r2,r2,r6
10011e94:	8084d83a 	srl	r2,r16,r2
10011e98:	00c00434 	movhi	r3,16
10011e9c:	31c00544 	addi	r7,r6,21
10011ea0:	18ffffc4 	addi	r3,r3,-1
10011ea4:	81e0983a 	sll	r16,r16,r7
10011ea8:	10cc703a 	and	r6,r2,r3
10011eac:	2941ffcc 	andi	r5,r5,2047
10011eb0:	00000206 	br	10011ebc <__floatunsidf+0x5c>
10011eb4:	000b883a 	mov	r5,zero
10011eb8:	000d883a 	mov	r6,zero
10011ebc:	280a953a 	slli	r5,r5,20
10011ec0:	00c00434 	movhi	r3,16
10011ec4:	18ffffc4 	addi	r3,r3,-1
10011ec8:	30c6703a 	and	r3,r6,r3
10011ecc:	8005883a 	mov	r2,r16
10011ed0:	1946b03a 	or	r3,r3,r5
10011ed4:	dfc00117 	ldw	ra,4(sp)
10011ed8:	dc000017 	ldw	r16,0(sp)
10011edc:	dec00204 	addi	sp,sp,8
10011ee0:	f800283a 	ret
10011ee4:	31bffd44 	addi	r6,r6,-11
10011ee8:	818c983a 	sll	r6,r16,r6
10011eec:	00800434 	movhi	r2,16
10011ef0:	10bfffc4 	addi	r2,r2,-1
10011ef4:	2941ffcc 	andi	r5,r5,2047
10011ef8:	0021883a 	mov	r16,zero
10011efc:	308c703a 	and	r6,r6,r2
10011f00:	003fee06 	br	10011ebc <__alt_data_end+0xf8011ebc>

10011f04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011f04:	defffe04 	addi	sp,sp,-8
10011f08:	dfc00115 	stw	ra,4(sp)
10011f0c:	df000015 	stw	fp,0(sp)
10011f10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011f14:	00840074 	movhi	r2,4097
10011f18:	109c1004 	addi	r2,r2,28736
10011f1c:	10800017 	ldw	r2,0(r2)
10011f20:	10000526 	beq	r2,zero,10011f38 <alt_get_errno+0x34>
10011f24:	00840074 	movhi	r2,4097
10011f28:	109c1004 	addi	r2,r2,28736
10011f2c:	10800017 	ldw	r2,0(r2)
10011f30:	103ee83a 	callr	r2
10011f34:	00000206 	br	10011f40 <alt_get_errno+0x3c>
10011f38:	008400b4 	movhi	r2,4098
10011f3c:	10a2d804 	addi	r2,r2,-29856
}
10011f40:	e037883a 	mov	sp,fp
10011f44:	dfc00117 	ldw	ra,4(sp)
10011f48:	df000017 	ldw	fp,0(sp)
10011f4c:	dec00204 	addi	sp,sp,8
10011f50:	f800283a 	ret

10011f54 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10011f54:	defffb04 	addi	sp,sp,-20
10011f58:	dfc00415 	stw	ra,16(sp)
10011f5c:	df000315 	stw	fp,12(sp)
10011f60:	df000304 	addi	fp,sp,12
10011f64:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10011f68:	e0bfff17 	ldw	r2,-4(fp)
10011f6c:	10000816 	blt	r2,zero,10011f90 <close+0x3c>
10011f70:	e13fff17 	ldw	r4,-4(fp)
10011f74:	01400304 	movi	r5,12
10011f78:	00057300 	call	10005730 <__mulsi3>
10011f7c:	1007883a 	mov	r3,r2
10011f80:	00840074 	movhi	r2,4097
10011f84:	10978c04 	addi	r2,r2,24112
10011f88:	1885883a 	add	r2,r3,r2
10011f8c:	00000106 	br	10011f94 <close+0x40>
10011f90:	0005883a 	mov	r2,zero
10011f94:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10011f98:	e0bffd17 	ldw	r2,-12(fp)
10011f9c:	10001926 	beq	r2,zero,10012004 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10011fa0:	e0bffd17 	ldw	r2,-12(fp)
10011fa4:	10800017 	ldw	r2,0(r2)
10011fa8:	10800417 	ldw	r2,16(r2)
10011fac:	10000626 	beq	r2,zero,10011fc8 <close+0x74>
10011fb0:	e0bffd17 	ldw	r2,-12(fp)
10011fb4:	10800017 	ldw	r2,0(r2)
10011fb8:	10800417 	ldw	r2,16(r2)
10011fbc:	e13ffd17 	ldw	r4,-12(fp)
10011fc0:	103ee83a 	callr	r2
10011fc4:	00000106 	br	10011fcc <close+0x78>
10011fc8:	0005883a 	mov	r2,zero
10011fcc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10011fd0:	e13fff17 	ldw	r4,-4(fp)
10011fd4:	00126780 	call	10012678 <alt_release_fd>
    if (rval < 0)
10011fd8:	e0bffe17 	ldw	r2,-8(fp)
10011fdc:	1000070e 	bge	r2,zero,10011ffc <close+0xa8>
    {
      ALT_ERRNO = -rval;
10011fe0:	0011f040 	call	10011f04 <alt_get_errno>
10011fe4:	1007883a 	mov	r3,r2
10011fe8:	e0bffe17 	ldw	r2,-8(fp)
10011fec:	0085c83a 	sub	r2,zero,r2
10011ff0:	18800015 	stw	r2,0(r3)
      return -1;
10011ff4:	00bfffc4 	movi	r2,-1
10011ff8:	00000706 	br	10012018 <close+0xc4>
    }
    return 0;
10011ffc:	0005883a 	mov	r2,zero
10012000:	00000506 	br	10012018 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10012004:	0011f040 	call	10011f04 <alt_get_errno>
10012008:	1007883a 	mov	r3,r2
1001200c:	00801444 	movi	r2,81
10012010:	18800015 	stw	r2,0(r3)
    return -1;
10012014:	00bfffc4 	movi	r2,-1
  }
}
10012018:	e037883a 	mov	sp,fp
1001201c:	dfc00117 	ldw	ra,4(sp)
10012020:	df000017 	ldw	fp,0(sp)
10012024:	dec00204 	addi	sp,sp,8
10012028:	f800283a 	ret

1001202c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1001202c:	defffc04 	addi	sp,sp,-16
10012030:	df000315 	stw	fp,12(sp)
10012034:	df000304 	addi	fp,sp,12
10012038:	e13ffd15 	stw	r4,-12(fp)
1001203c:	e17ffe15 	stw	r5,-8(fp)
10012040:	e1bfff15 	stw	r6,-4(fp)
  return len;
10012044:	e0bfff17 	ldw	r2,-4(fp)
}
10012048:	e037883a 	mov	sp,fp
1001204c:	df000017 	ldw	fp,0(sp)
10012050:	dec00104 	addi	sp,sp,4
10012054:	f800283a 	ret

10012058 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10012058:	defffe04 	addi	sp,sp,-8
1001205c:	dfc00115 	stw	ra,4(sp)
10012060:	df000015 	stw	fp,0(sp)
10012064:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10012068:	00840074 	movhi	r2,4097
1001206c:	109c1004 	addi	r2,r2,28736
10012070:	10800017 	ldw	r2,0(r2)
10012074:	10000526 	beq	r2,zero,1001208c <alt_get_errno+0x34>
10012078:	00840074 	movhi	r2,4097
1001207c:	109c1004 	addi	r2,r2,28736
10012080:	10800017 	ldw	r2,0(r2)
10012084:	103ee83a 	callr	r2
10012088:	00000206 	br	10012094 <alt_get_errno+0x3c>
1001208c:	008400b4 	movhi	r2,4098
10012090:	10a2d804 	addi	r2,r2,-29856
}
10012094:	e037883a 	mov	sp,fp
10012098:	dfc00117 	ldw	ra,4(sp)
1001209c:	df000017 	ldw	fp,0(sp)
100120a0:	dec00204 	addi	sp,sp,8
100120a4:	f800283a 	ret

100120a8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
100120a8:	defffb04 	addi	sp,sp,-20
100120ac:	dfc00415 	stw	ra,16(sp)
100120b0:	df000315 	stw	fp,12(sp)
100120b4:	df000304 	addi	fp,sp,12
100120b8:	e13ffe15 	stw	r4,-8(fp)
100120bc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100120c0:	e0bffe17 	ldw	r2,-8(fp)
100120c4:	10000816 	blt	r2,zero,100120e8 <fstat+0x40>
100120c8:	e13ffe17 	ldw	r4,-8(fp)
100120cc:	01400304 	movi	r5,12
100120d0:	00057300 	call	10005730 <__mulsi3>
100120d4:	1007883a 	mov	r3,r2
100120d8:	00840074 	movhi	r2,4097
100120dc:	10978c04 	addi	r2,r2,24112
100120e0:	1885883a 	add	r2,r3,r2
100120e4:	00000106 	br	100120ec <fstat+0x44>
100120e8:	0005883a 	mov	r2,zero
100120ec:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
100120f0:	e0bffd17 	ldw	r2,-12(fp)
100120f4:	10001026 	beq	r2,zero,10012138 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
100120f8:	e0bffd17 	ldw	r2,-12(fp)
100120fc:	10800017 	ldw	r2,0(r2)
10012100:	10800817 	ldw	r2,32(r2)
10012104:	10000726 	beq	r2,zero,10012124 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
10012108:	e0bffd17 	ldw	r2,-12(fp)
1001210c:	10800017 	ldw	r2,0(r2)
10012110:	10800817 	ldw	r2,32(r2)
10012114:	e13ffd17 	ldw	r4,-12(fp)
10012118:	e17fff17 	ldw	r5,-4(fp)
1001211c:	103ee83a 	callr	r2
10012120:	00000a06 	br	1001214c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10012124:	e0bfff17 	ldw	r2,-4(fp)
10012128:	00c80004 	movi	r3,8192
1001212c:	10c00115 	stw	r3,4(r2)
      return 0;
10012130:	0005883a 	mov	r2,zero
10012134:	00000506 	br	1001214c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10012138:	00120580 	call	10012058 <alt_get_errno>
1001213c:	1007883a 	mov	r3,r2
10012140:	00801444 	movi	r2,81
10012144:	18800015 	stw	r2,0(r3)
    return -1;
10012148:	00bfffc4 	movi	r2,-1
  }
}
1001214c:	e037883a 	mov	sp,fp
10012150:	dfc00117 	ldw	ra,4(sp)
10012154:	df000017 	ldw	fp,0(sp)
10012158:	dec00204 	addi	sp,sp,8
1001215c:	f800283a 	ret

10012160 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10012160:	defffe04 	addi	sp,sp,-8
10012164:	dfc00115 	stw	ra,4(sp)
10012168:	df000015 	stw	fp,0(sp)
1001216c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10012170:	00840074 	movhi	r2,4097
10012174:	109c1004 	addi	r2,r2,28736
10012178:	10800017 	ldw	r2,0(r2)
1001217c:	10000526 	beq	r2,zero,10012194 <alt_get_errno+0x34>
10012180:	00840074 	movhi	r2,4097
10012184:	109c1004 	addi	r2,r2,28736
10012188:	10800017 	ldw	r2,0(r2)
1001218c:	103ee83a 	callr	r2
10012190:	00000206 	br	1001219c <alt_get_errno+0x3c>
10012194:	008400b4 	movhi	r2,4098
10012198:	10a2d804 	addi	r2,r2,-29856
}
1001219c:	e037883a 	mov	sp,fp
100121a0:	dfc00117 	ldw	ra,4(sp)
100121a4:	df000017 	ldw	fp,0(sp)
100121a8:	dec00204 	addi	sp,sp,8
100121ac:	f800283a 	ret

100121b0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
100121b0:	deffed04 	addi	sp,sp,-76
100121b4:	dfc01215 	stw	ra,72(sp)
100121b8:	df001115 	stw	fp,68(sp)
100121bc:	df001104 	addi	fp,sp,68
100121c0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100121c4:	e0bfff17 	ldw	r2,-4(fp)
100121c8:	10000816 	blt	r2,zero,100121ec <isatty+0x3c>
100121cc:	e13fff17 	ldw	r4,-4(fp)
100121d0:	01400304 	movi	r5,12
100121d4:	00057300 	call	10005730 <__mulsi3>
100121d8:	1007883a 	mov	r3,r2
100121dc:	00840074 	movhi	r2,4097
100121e0:	10978c04 	addi	r2,r2,24112
100121e4:	1885883a 	add	r2,r3,r2
100121e8:	00000106 	br	100121f0 <isatty+0x40>
100121ec:	0005883a 	mov	r2,zero
100121f0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
100121f4:	e0bfef17 	ldw	r2,-68(fp)
100121f8:	10000e26 	beq	r2,zero,10012234 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
100121fc:	e0bfef17 	ldw	r2,-68(fp)
10012200:	10800017 	ldw	r2,0(r2)
10012204:	10800817 	ldw	r2,32(r2)
10012208:	1000021e 	bne	r2,zero,10012214 <isatty+0x64>
    {
      return 1;
1001220c:	00800044 	movi	r2,1
10012210:	00000d06 	br	10012248 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10012214:	e0bff004 	addi	r2,fp,-64
10012218:	e13fff17 	ldw	r4,-4(fp)
1001221c:	100b883a 	mov	r5,r2
10012220:	00120a80 	call	100120a8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10012224:	e0bff117 	ldw	r2,-60(fp)
10012228:	10880020 	cmpeqi	r2,r2,8192
1001222c:	10803fcc 	andi	r2,r2,255
10012230:	00000506 	br	10012248 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10012234:	00121600 	call	10012160 <alt_get_errno>
10012238:	1007883a 	mov	r3,r2
1001223c:	00801444 	movi	r2,81
10012240:	18800015 	stw	r2,0(r3)
    return 0;
10012244:	0005883a 	mov	r2,zero
  }
}
10012248:	e037883a 	mov	sp,fp
1001224c:	dfc00117 	ldw	ra,4(sp)
10012250:	df000017 	ldw	fp,0(sp)
10012254:	dec00204 	addi	sp,sp,8
10012258:	f800283a 	ret

1001225c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1001225c:	defffc04 	addi	sp,sp,-16
10012260:	df000315 	stw	fp,12(sp)
10012264:	df000304 	addi	fp,sp,12
10012268:	e13ffd15 	stw	r4,-12(fp)
1001226c:	e17ffe15 	stw	r5,-8(fp)
10012270:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10012274:	e0fffe17 	ldw	r3,-8(fp)
10012278:	e0bffd17 	ldw	r2,-12(fp)
1001227c:	18800c26 	beq	r3,r2,100122b0 <alt_load_section+0x54>
  {
    while( to != end )
10012280:	00000806 	br	100122a4 <alt_load_section+0x48>
    {
      *to++ = *from++;
10012284:	e0bffe17 	ldw	r2,-8(fp)
10012288:	10c00104 	addi	r3,r2,4
1001228c:	e0fffe15 	stw	r3,-8(fp)
10012290:	e0fffd17 	ldw	r3,-12(fp)
10012294:	19000104 	addi	r4,r3,4
10012298:	e13ffd15 	stw	r4,-12(fp)
1001229c:	18c00017 	ldw	r3,0(r3)
100122a0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
100122a4:	e0fffe17 	ldw	r3,-8(fp)
100122a8:	e0bfff17 	ldw	r2,-4(fp)
100122ac:	18bff51e 	bne	r3,r2,10012284 <__alt_data_end+0xf8012284>
    {
      *to++ = *from++;
    }
  }
}
100122b0:	e037883a 	mov	sp,fp
100122b4:	df000017 	ldw	fp,0(sp)
100122b8:	dec00104 	addi	sp,sp,4
100122bc:	f800283a 	ret

100122c0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
100122c0:	defffe04 	addi	sp,sp,-8
100122c4:	dfc00115 	stw	ra,4(sp)
100122c8:	df000015 	stw	fp,0(sp)
100122cc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
100122d0:	01040074 	movhi	r4,4097
100122d4:	211c1504 	addi	r4,r4,28756
100122d8:	01440074 	movhi	r5,4097
100122dc:	29555904 	addi	r5,r5,21860
100122e0:	01840074 	movhi	r6,4097
100122e4:	319c1504 	addi	r6,r6,28756
100122e8:	001225c0 	call	1001225c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
100122ec:	01040034 	movhi	r4,4096
100122f0:	21000804 	addi	r4,r4,32
100122f4:	01440034 	movhi	r5,4096
100122f8:	29400804 	addi	r5,r5,32
100122fc:	01840034 	movhi	r6,4096
10012300:	31806f04 	addi	r6,r6,444
10012304:	001225c0 	call	1001225c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10012308:	01040074 	movhi	r4,4097
1001230c:	21121604 	addi	r4,r4,18520
10012310:	01440074 	movhi	r5,4097
10012314:	29521604 	addi	r5,r5,18520
10012318:	01840074 	movhi	r6,4097
1001231c:	31955904 	addi	r6,r6,21860
10012320:	001225c0 	call	1001225c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10012324:	00137d00 	call	100137d0 <alt_dcache_flush_all>
  alt_icache_flush_all();
10012328:	00139980 	call	10013998 <alt_icache_flush_all>
}
1001232c:	e037883a 	mov	sp,fp
10012330:	dfc00117 	ldw	ra,4(sp)
10012334:	df000017 	ldw	fp,0(sp)
10012338:	dec00204 	addi	sp,sp,8
1001233c:	f800283a 	ret

10012340 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10012340:	defffe04 	addi	sp,sp,-8
10012344:	dfc00115 	stw	ra,4(sp)
10012348:	df000015 	stw	fp,0(sp)
1001234c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10012350:	00840074 	movhi	r2,4097
10012354:	109c1004 	addi	r2,r2,28736
10012358:	10800017 	ldw	r2,0(r2)
1001235c:	10000526 	beq	r2,zero,10012374 <alt_get_errno+0x34>
10012360:	00840074 	movhi	r2,4097
10012364:	109c1004 	addi	r2,r2,28736
10012368:	10800017 	ldw	r2,0(r2)
1001236c:	103ee83a 	callr	r2
10012370:	00000206 	br	1001237c <alt_get_errno+0x3c>
10012374:	008400b4 	movhi	r2,4098
10012378:	10a2d804 	addi	r2,r2,-29856
}
1001237c:	e037883a 	mov	sp,fp
10012380:	dfc00117 	ldw	ra,4(sp)
10012384:	df000017 	ldw	fp,0(sp)
10012388:	dec00204 	addi	sp,sp,8
1001238c:	f800283a 	ret

10012390 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10012390:	defff904 	addi	sp,sp,-28
10012394:	dfc00615 	stw	ra,24(sp)
10012398:	df000515 	stw	fp,20(sp)
1001239c:	df000504 	addi	fp,sp,20
100123a0:	e13ffd15 	stw	r4,-12(fp)
100123a4:	e17ffe15 	stw	r5,-8(fp)
100123a8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
100123ac:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100123b0:	e0bffd17 	ldw	r2,-12(fp)
100123b4:	10000816 	blt	r2,zero,100123d8 <lseek+0x48>
100123b8:	e13ffd17 	ldw	r4,-12(fp)
100123bc:	01400304 	movi	r5,12
100123c0:	00057300 	call	10005730 <__mulsi3>
100123c4:	1007883a 	mov	r3,r2
100123c8:	00840074 	movhi	r2,4097
100123cc:	10978c04 	addi	r2,r2,24112
100123d0:	1885883a 	add	r2,r3,r2
100123d4:	00000106 	br	100123dc <lseek+0x4c>
100123d8:	0005883a 	mov	r2,zero
100123dc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
100123e0:	e0bffc17 	ldw	r2,-16(fp)
100123e4:	10001026 	beq	r2,zero,10012428 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
100123e8:	e0bffc17 	ldw	r2,-16(fp)
100123ec:	10800017 	ldw	r2,0(r2)
100123f0:	10800717 	ldw	r2,28(r2)
100123f4:	10000926 	beq	r2,zero,1001241c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
100123f8:	e0bffc17 	ldw	r2,-16(fp)
100123fc:	10800017 	ldw	r2,0(r2)
10012400:	10800717 	ldw	r2,28(r2)
10012404:	e13ffc17 	ldw	r4,-16(fp)
10012408:	e17ffe17 	ldw	r5,-8(fp)
1001240c:	e1bfff17 	ldw	r6,-4(fp)
10012410:	103ee83a 	callr	r2
10012414:	e0bffb15 	stw	r2,-20(fp)
10012418:	00000506 	br	10012430 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1001241c:	00bfde84 	movi	r2,-134
10012420:	e0bffb15 	stw	r2,-20(fp)
10012424:	00000206 	br	10012430 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
10012428:	00bfebc4 	movi	r2,-81
1001242c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10012430:	e0bffb17 	ldw	r2,-20(fp)
10012434:	1000070e 	bge	r2,zero,10012454 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
10012438:	00123400 	call	10012340 <alt_get_errno>
1001243c:	1007883a 	mov	r3,r2
10012440:	e0bffb17 	ldw	r2,-20(fp)
10012444:	0085c83a 	sub	r2,zero,r2
10012448:	18800015 	stw	r2,0(r3)
    rc = -1;
1001244c:	00bfffc4 	movi	r2,-1
10012450:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10012454:	e0bffb17 	ldw	r2,-20(fp)
}
10012458:	e037883a 	mov	sp,fp
1001245c:	dfc00117 	ldw	ra,4(sp)
10012460:	df000017 	ldw	fp,0(sp)
10012464:	dec00204 	addi	sp,sp,8
10012468:	f800283a 	ret

1001246c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1001246c:	defffd04 	addi	sp,sp,-12
10012470:	dfc00215 	stw	ra,8(sp)
10012474:	df000115 	stw	fp,4(sp)
10012478:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1001247c:	0009883a 	mov	r4,zero
10012480:	00129600 	call	10012960 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10012484:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10012488:	00129940 	call	10012994 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1001248c:	01040074 	movhi	r4,4097
10012490:	21154f04 	addi	r4,r4,21820
10012494:	01440074 	movhi	r5,4097
10012498:	29554f04 	addi	r5,r5,21820
1001249c:	01840074 	movhi	r6,4097
100124a0:	31954f04 	addi	r6,r6,21820
100124a4:	0013d640 	call	10013d64 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
100124a8:	00138e00 	call	100138e0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
100124ac:	01040074 	movhi	r4,4097
100124b0:	210e4f04 	addi	r4,r4,14652
100124b4:	00144b40 	call	100144b4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
100124b8:	d126d517 	ldw	r4,-25772(gp)
100124bc:	d0e6d617 	ldw	r3,-25768(gp)
100124c0:	d0a6d717 	ldw	r2,-25764(gp)
100124c4:	180b883a 	mov	r5,r3
100124c8:	100d883a 	mov	r6,r2
100124cc:	00004900 	call	10000490 <main>
100124d0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
100124d4:	01000044 	movi	r4,1
100124d8:	0011f540 	call	10011f54 <close>
  exit (result);
100124dc:	e13fff17 	ldw	r4,-4(fp)
100124e0:	00144c80 	call	100144c8 <exit>

100124e4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
100124e4:	defffe04 	addi	sp,sp,-8
100124e8:	df000115 	stw	fp,4(sp)
100124ec:	df000104 	addi	fp,sp,4
100124f0:	e13fff15 	stw	r4,-4(fp)
}
100124f4:	e037883a 	mov	sp,fp
100124f8:	df000017 	ldw	fp,0(sp)
100124fc:	dec00104 	addi	sp,sp,4
10012500:	f800283a 	ret

10012504 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10012504:	defffe04 	addi	sp,sp,-8
10012508:	df000115 	stw	fp,4(sp)
1001250c:	df000104 	addi	fp,sp,4
10012510:	e13fff15 	stw	r4,-4(fp)
}
10012514:	e037883a 	mov	sp,fp
10012518:	df000017 	ldw	fp,0(sp)
1001251c:	dec00104 	addi	sp,sp,4
10012520:	f800283a 	ret

10012524 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10012524:	defffe04 	addi	sp,sp,-8
10012528:	dfc00115 	stw	ra,4(sp)
1001252c:	df000015 	stw	fp,0(sp)
10012530:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10012534:	00840074 	movhi	r2,4097
10012538:	109c1004 	addi	r2,r2,28736
1001253c:	10800017 	ldw	r2,0(r2)
10012540:	10000526 	beq	r2,zero,10012558 <alt_get_errno+0x34>
10012544:	00840074 	movhi	r2,4097
10012548:	109c1004 	addi	r2,r2,28736
1001254c:	10800017 	ldw	r2,0(r2)
10012550:	103ee83a 	callr	r2
10012554:	00000206 	br	10012560 <alt_get_errno+0x3c>
10012558:	008400b4 	movhi	r2,4098
1001255c:	10a2d804 	addi	r2,r2,-29856
}
10012560:	e037883a 	mov	sp,fp
10012564:	dfc00117 	ldw	ra,4(sp)
10012568:	df000017 	ldw	fp,0(sp)
1001256c:	dec00204 	addi	sp,sp,8
10012570:	f800283a 	ret

10012574 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10012574:	defff904 	addi	sp,sp,-28
10012578:	dfc00615 	stw	ra,24(sp)
1001257c:	df000515 	stw	fp,20(sp)
10012580:	df000504 	addi	fp,sp,20
10012584:	e13ffd15 	stw	r4,-12(fp)
10012588:	e17ffe15 	stw	r5,-8(fp)
1001258c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10012590:	e0bffd17 	ldw	r2,-12(fp)
10012594:	10000816 	blt	r2,zero,100125b8 <read+0x44>
10012598:	e13ffd17 	ldw	r4,-12(fp)
1001259c:	01400304 	movi	r5,12
100125a0:	00057300 	call	10005730 <__mulsi3>
100125a4:	1007883a 	mov	r3,r2
100125a8:	00840074 	movhi	r2,4097
100125ac:	10978c04 	addi	r2,r2,24112
100125b0:	1885883a 	add	r2,r3,r2
100125b4:	00000106 	br	100125bc <read+0x48>
100125b8:	0005883a 	mov	r2,zero
100125bc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
100125c0:	e0bffb17 	ldw	r2,-20(fp)
100125c4:	10002226 	beq	r2,zero,10012650 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
100125c8:	e0bffb17 	ldw	r2,-20(fp)
100125cc:	10800217 	ldw	r2,8(r2)
100125d0:	108000cc 	andi	r2,r2,3
100125d4:	10800060 	cmpeqi	r2,r2,1
100125d8:	1000181e 	bne	r2,zero,1001263c <read+0xc8>
        (fd->dev->read))
100125dc:	e0bffb17 	ldw	r2,-20(fp)
100125e0:	10800017 	ldw	r2,0(r2)
100125e4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
100125e8:	10001426 	beq	r2,zero,1001263c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
100125ec:	e0bffb17 	ldw	r2,-20(fp)
100125f0:	10800017 	ldw	r2,0(r2)
100125f4:	10800517 	ldw	r2,20(r2)
100125f8:	e0ffff17 	ldw	r3,-4(fp)
100125fc:	e13ffb17 	ldw	r4,-20(fp)
10012600:	e17ffe17 	ldw	r5,-8(fp)
10012604:	180d883a 	mov	r6,r3
10012608:	103ee83a 	callr	r2
1001260c:	e0bffc15 	stw	r2,-16(fp)
10012610:	e0bffc17 	ldw	r2,-16(fp)
10012614:	1000070e 	bge	r2,zero,10012634 <read+0xc0>
        {
          ALT_ERRNO = -rval;
10012618:	00125240 	call	10012524 <alt_get_errno>
1001261c:	1007883a 	mov	r3,r2
10012620:	e0bffc17 	ldw	r2,-16(fp)
10012624:	0085c83a 	sub	r2,zero,r2
10012628:	18800015 	stw	r2,0(r3)
          return -1;
1001262c:	00bfffc4 	movi	r2,-1
10012630:	00000c06 	br	10012664 <read+0xf0>
        }
        return rval;
10012634:	e0bffc17 	ldw	r2,-16(fp)
10012638:	00000a06 	br	10012664 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1001263c:	00125240 	call	10012524 <alt_get_errno>
10012640:	1007883a 	mov	r3,r2
10012644:	00800344 	movi	r2,13
10012648:	18800015 	stw	r2,0(r3)
1001264c:	00000406 	br	10012660 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10012650:	00125240 	call	10012524 <alt_get_errno>
10012654:	1007883a 	mov	r3,r2
10012658:	00801444 	movi	r2,81
1001265c:	18800015 	stw	r2,0(r3)
  }
  return -1;
10012660:	00bfffc4 	movi	r2,-1
}
10012664:	e037883a 	mov	sp,fp
10012668:	dfc00117 	ldw	ra,4(sp)
1001266c:	df000017 	ldw	fp,0(sp)
10012670:	dec00204 	addi	sp,sp,8
10012674:	f800283a 	ret

10012678 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10012678:	defffc04 	addi	sp,sp,-16
1001267c:	dfc00315 	stw	ra,12(sp)
10012680:	df000215 	stw	fp,8(sp)
10012684:	dc000115 	stw	r16,4(sp)
10012688:	df000204 	addi	fp,sp,8
1001268c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10012690:	e0bffe17 	ldw	r2,-8(fp)
10012694:	108000d0 	cmplti	r2,r2,3
10012698:	1000111e 	bne	r2,zero,100126e0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1001269c:	04040074 	movhi	r16,4097
100126a0:	84178c04 	addi	r16,r16,24112
100126a4:	e0bffe17 	ldw	r2,-8(fp)
100126a8:	1009883a 	mov	r4,r2
100126ac:	01400304 	movi	r5,12
100126b0:	00057300 	call	10005730 <__mulsi3>
100126b4:	8085883a 	add	r2,r16,r2
100126b8:	10800204 	addi	r2,r2,8
100126bc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
100126c0:	04040074 	movhi	r16,4097
100126c4:	84178c04 	addi	r16,r16,24112
100126c8:	e0bffe17 	ldw	r2,-8(fp)
100126cc:	1009883a 	mov	r4,r2
100126d0:	01400304 	movi	r5,12
100126d4:	00057300 	call	10005730 <__mulsi3>
100126d8:	8085883a 	add	r2,r16,r2
100126dc:	10000015 	stw	zero,0(r2)
  }
}
100126e0:	e6ffff04 	addi	sp,fp,-4
100126e4:	dfc00217 	ldw	ra,8(sp)
100126e8:	df000117 	ldw	fp,4(sp)
100126ec:	dc000017 	ldw	r16,0(sp)
100126f0:	dec00304 	addi	sp,sp,12
100126f4:	f800283a 	ret

100126f8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
100126f8:	defff904 	addi	sp,sp,-28
100126fc:	df000615 	stw	fp,24(sp)
10012700:	df000604 	addi	fp,sp,24
10012704:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012708:	0005303a 	rdctl	r2,status
1001270c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012710:	e0fffc17 	ldw	r3,-16(fp)
10012714:	00bfff84 	movi	r2,-2
10012718:	1884703a 	and	r2,r3,r2
1001271c:	1001703a 	wrctl	status,r2
  
  return context;
10012720:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10012724:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10012728:	d0a00d17 	ldw	r2,-32716(gp)
1001272c:	10c000c4 	addi	r3,r2,3
10012730:	00bfff04 	movi	r2,-4
10012734:	1884703a 	and	r2,r3,r2
10012738:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1001273c:	d0e00d17 	ldw	r3,-32716(gp)
10012740:	e0bfff17 	ldw	r2,-4(fp)
10012744:	1887883a 	add	r3,r3,r2
10012748:	00860034 	movhi	r2,6144
1001274c:	10800004 	addi	r2,r2,0
10012750:	10c0062e 	bgeu	r2,r3,1001276c <sbrk+0x74>
10012754:	e0bffa17 	ldw	r2,-24(fp)
10012758:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001275c:	e0bffd17 	ldw	r2,-12(fp)
10012760:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10012764:	00bfffc4 	movi	r2,-1
10012768:	00000b06 	br	10012798 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1001276c:	d0a00d17 	ldw	r2,-32716(gp)
10012770:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
10012774:	d0e00d17 	ldw	r3,-32716(gp)
10012778:	e0bfff17 	ldw	r2,-4(fp)
1001277c:	1885883a 	add	r2,r3,r2
10012780:	d0a00d15 	stw	r2,-32716(gp)
10012784:	e0bffa17 	ldw	r2,-24(fp)
10012788:	e0bffe15 	stw	r2,-8(fp)
1001278c:	e0bffe17 	ldw	r2,-8(fp)
10012790:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10012794:	e0bffb17 	ldw	r2,-20(fp)
} 
10012798:	e037883a 	mov	sp,fp
1001279c:	df000017 	ldw	fp,0(sp)
100127a0:	dec00104 	addi	sp,sp,4
100127a4:	f800283a 	ret

100127a8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
100127a8:	defffd04 	addi	sp,sp,-12
100127ac:	dfc00215 	stw	ra,8(sp)
100127b0:	df000115 	stw	fp,4(sp)
100127b4:	df000104 	addi	fp,sp,4
100127b8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
100127bc:	e13fff17 	ldw	r4,-4(fp)
100127c0:	00136780 	call	10013678 <alt_busy_sleep>
}
100127c4:	e037883a 	mov	sp,fp
100127c8:	dfc00117 	ldw	ra,4(sp)
100127cc:	df000017 	ldw	fp,0(sp)
100127d0:	dec00204 	addi	sp,sp,8
100127d4:	f800283a 	ret

100127d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100127d8:	defffe04 	addi	sp,sp,-8
100127dc:	dfc00115 	stw	ra,4(sp)
100127e0:	df000015 	stw	fp,0(sp)
100127e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100127e8:	00840074 	movhi	r2,4097
100127ec:	109c1004 	addi	r2,r2,28736
100127f0:	10800017 	ldw	r2,0(r2)
100127f4:	10000526 	beq	r2,zero,1001280c <alt_get_errno+0x34>
100127f8:	00840074 	movhi	r2,4097
100127fc:	109c1004 	addi	r2,r2,28736
10012800:	10800017 	ldw	r2,0(r2)
10012804:	103ee83a 	callr	r2
10012808:	00000206 	br	10012814 <alt_get_errno+0x3c>
1001280c:	008400b4 	movhi	r2,4098
10012810:	10a2d804 	addi	r2,r2,-29856
}
10012814:	e037883a 	mov	sp,fp
10012818:	dfc00117 	ldw	ra,4(sp)
1001281c:	df000017 	ldw	fp,0(sp)
10012820:	dec00204 	addi	sp,sp,8
10012824:	f800283a 	ret

10012828 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10012828:	defff904 	addi	sp,sp,-28
1001282c:	dfc00615 	stw	ra,24(sp)
10012830:	df000515 	stw	fp,20(sp)
10012834:	df000504 	addi	fp,sp,20
10012838:	e13ffd15 	stw	r4,-12(fp)
1001283c:	e17ffe15 	stw	r5,-8(fp)
10012840:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10012844:	e0bffd17 	ldw	r2,-12(fp)
10012848:	10000816 	blt	r2,zero,1001286c <write+0x44>
1001284c:	e13ffd17 	ldw	r4,-12(fp)
10012850:	01400304 	movi	r5,12
10012854:	00057300 	call	10005730 <__mulsi3>
10012858:	1007883a 	mov	r3,r2
1001285c:	00840074 	movhi	r2,4097
10012860:	10978c04 	addi	r2,r2,24112
10012864:	1885883a 	add	r2,r3,r2
10012868:	00000106 	br	10012870 <write+0x48>
1001286c:	0005883a 	mov	r2,zero
10012870:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10012874:	e0bffb17 	ldw	r2,-20(fp)
10012878:	10002126 	beq	r2,zero,10012900 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1001287c:	e0bffb17 	ldw	r2,-20(fp)
10012880:	10800217 	ldw	r2,8(r2)
10012884:	108000cc 	andi	r2,r2,3
10012888:	10001826 	beq	r2,zero,100128ec <write+0xc4>
1001288c:	e0bffb17 	ldw	r2,-20(fp)
10012890:	10800017 	ldw	r2,0(r2)
10012894:	10800617 	ldw	r2,24(r2)
10012898:	10001426 	beq	r2,zero,100128ec <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1001289c:	e0bffb17 	ldw	r2,-20(fp)
100128a0:	10800017 	ldw	r2,0(r2)
100128a4:	10800617 	ldw	r2,24(r2)
100128a8:	e0ffff17 	ldw	r3,-4(fp)
100128ac:	e13ffb17 	ldw	r4,-20(fp)
100128b0:	e17ffe17 	ldw	r5,-8(fp)
100128b4:	180d883a 	mov	r6,r3
100128b8:	103ee83a 	callr	r2
100128bc:	e0bffc15 	stw	r2,-16(fp)
100128c0:	e0bffc17 	ldw	r2,-16(fp)
100128c4:	1000070e 	bge	r2,zero,100128e4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
100128c8:	00127d80 	call	100127d8 <alt_get_errno>
100128cc:	1007883a 	mov	r3,r2
100128d0:	e0bffc17 	ldw	r2,-16(fp)
100128d4:	0085c83a 	sub	r2,zero,r2
100128d8:	18800015 	stw	r2,0(r3)
        return -1;
100128dc:	00bfffc4 	movi	r2,-1
100128e0:	00000c06 	br	10012914 <write+0xec>
      }
      return rval;
100128e4:	e0bffc17 	ldw	r2,-16(fp)
100128e8:	00000a06 	br	10012914 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
100128ec:	00127d80 	call	100127d8 <alt_get_errno>
100128f0:	1007883a 	mov	r3,r2
100128f4:	00800344 	movi	r2,13
100128f8:	18800015 	stw	r2,0(r3)
100128fc:	00000406 	br	10012910 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10012900:	00127d80 	call	100127d8 <alt_get_errno>
10012904:	1007883a 	mov	r3,r2
10012908:	00801444 	movi	r2,81
1001290c:	18800015 	stw	r2,0(r3)
  }
  return -1;
10012910:	00bfffc4 	movi	r2,-1
}
10012914:	e037883a 	mov	sp,fp
10012918:	dfc00117 	ldw	ra,4(sp)
1001291c:	df000017 	ldw	fp,0(sp)
10012920:	dec00204 	addi	sp,sp,8
10012924:	f800283a 	ret

10012928 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10012928:	defffd04 	addi	sp,sp,-12
1001292c:	dfc00215 	stw	ra,8(sp)
10012930:	df000115 	stw	fp,4(sp)
10012934:	df000104 	addi	fp,sp,4
10012938:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1001293c:	e13fff17 	ldw	r4,-4(fp)
10012940:	01440074 	movhi	r5,4097
10012944:	295c0d04 	addi	r5,r5,28724
10012948:	001383c0 	call	1001383c <alt_dev_llist_insert>
}
1001294c:	e037883a 	mov	sp,fp
10012950:	dfc00117 	ldw	ra,4(sp)
10012954:	df000017 	ldw	fp,0(sp)
10012958:	dec00204 	addi	sp,sp,8
1001295c:	f800283a 	ret

10012960 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10012960:	defffd04 	addi	sp,sp,-12
10012964:	dfc00215 	stw	ra,8(sp)
10012968:	df000115 	stw	fp,4(sp)
1001296c:	df000104 	addi	fp,sp,4
10012970:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
10012974:	001421c0 	call	1001421c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10012978:	00800044 	movi	r2,1
1001297c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10012980:	e037883a 	mov	sp,fp
10012984:	dfc00117 	ldw	ra,4(sp)
10012988:	df000017 	ldw	fp,0(sp)
1001298c:	dec00204 	addi	sp,sp,8
10012990:	f800283a 	ret

10012994 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10012994:	defffe04 	addi	sp,sp,-8
10012998:	dfc00115 	stw	ra,4(sp)
1001299c:	df000015 	stw	fp,0(sp)
100129a0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
100129a4:	01000804 	movi	r4,32
100129a8:	000b883a 	mov	r5,zero
100129ac:	01800044 	movi	r6,1
100129b0:	01c0fa04 	movi	r7,1000
100129b4:	00134b00 	call	100134b0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
100129b8:	01040074 	movhi	r4,4097
100129bc:	2117f604 	addi	r4,r4,24536
100129c0:	000b883a 	mov	r5,zero
100129c4:	01800144 	movi	r6,5
100129c8:	0012b540 	call	10012b54 <altera_avalon_jtag_uart_init>
100129cc:	01040074 	movhi	r4,4097
100129d0:	2117ec04 	addi	r4,r4,24496
100129d4:	00129280 	call	10012928 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
100129d8:	0001883a 	nop
}
100129dc:	e037883a 	mov	sp,fp
100129e0:	dfc00117 	ldw	ra,4(sp)
100129e4:	df000017 	ldw	fp,0(sp)
100129e8:	dec00204 	addi	sp,sp,8
100129ec:	f800283a 	ret

100129f0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
100129f0:	defffa04 	addi	sp,sp,-24
100129f4:	dfc00515 	stw	ra,20(sp)
100129f8:	df000415 	stw	fp,16(sp)
100129fc:	df000404 	addi	fp,sp,16
10012a00:	e13ffd15 	stw	r4,-12(fp)
10012a04:	e17ffe15 	stw	r5,-8(fp)
10012a08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10012a0c:	e0bffd17 	ldw	r2,-12(fp)
10012a10:	10800017 	ldw	r2,0(r2)
10012a14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10012a18:	e0bffc17 	ldw	r2,-16(fp)
10012a1c:	10c00a04 	addi	r3,r2,40
10012a20:	e0bffd17 	ldw	r2,-12(fp)
10012a24:	10800217 	ldw	r2,8(r2)
10012a28:	1809883a 	mov	r4,r3
10012a2c:	e17ffe17 	ldw	r5,-8(fp)
10012a30:	e1bfff17 	ldw	r6,-4(fp)
10012a34:	100f883a 	mov	r7,r2
10012a38:	00130180 	call	10013018 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10012a3c:	e037883a 	mov	sp,fp
10012a40:	dfc00117 	ldw	ra,4(sp)
10012a44:	df000017 	ldw	fp,0(sp)
10012a48:	dec00204 	addi	sp,sp,8
10012a4c:	f800283a 	ret

10012a50 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10012a50:	defffa04 	addi	sp,sp,-24
10012a54:	dfc00515 	stw	ra,20(sp)
10012a58:	df000415 	stw	fp,16(sp)
10012a5c:	df000404 	addi	fp,sp,16
10012a60:	e13ffd15 	stw	r4,-12(fp)
10012a64:	e17ffe15 	stw	r5,-8(fp)
10012a68:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10012a6c:	e0bffd17 	ldw	r2,-12(fp)
10012a70:	10800017 	ldw	r2,0(r2)
10012a74:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10012a78:	e0bffc17 	ldw	r2,-16(fp)
10012a7c:	10c00a04 	addi	r3,r2,40
10012a80:	e0bffd17 	ldw	r2,-12(fp)
10012a84:	10800217 	ldw	r2,8(r2)
10012a88:	1809883a 	mov	r4,r3
10012a8c:	e17ffe17 	ldw	r5,-8(fp)
10012a90:	e1bfff17 	ldw	r6,-4(fp)
10012a94:	100f883a 	mov	r7,r2
10012a98:	00132240 	call	10013224 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10012a9c:	e037883a 	mov	sp,fp
10012aa0:	dfc00117 	ldw	ra,4(sp)
10012aa4:	df000017 	ldw	fp,0(sp)
10012aa8:	dec00204 	addi	sp,sp,8
10012aac:	f800283a 	ret

10012ab0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10012ab0:	defffc04 	addi	sp,sp,-16
10012ab4:	dfc00315 	stw	ra,12(sp)
10012ab8:	df000215 	stw	fp,8(sp)
10012abc:	df000204 	addi	fp,sp,8
10012ac0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10012ac4:	e0bfff17 	ldw	r2,-4(fp)
10012ac8:	10800017 	ldw	r2,0(r2)
10012acc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10012ad0:	e0bffe17 	ldw	r2,-8(fp)
10012ad4:	10c00a04 	addi	r3,r2,40
10012ad8:	e0bfff17 	ldw	r2,-4(fp)
10012adc:	10800217 	ldw	r2,8(r2)
10012ae0:	1809883a 	mov	r4,r3
10012ae4:	100b883a 	mov	r5,r2
10012ae8:	0012ec40 	call	10012ec4 <altera_avalon_jtag_uart_close>
}
10012aec:	e037883a 	mov	sp,fp
10012af0:	dfc00117 	ldw	ra,4(sp)
10012af4:	df000017 	ldw	fp,0(sp)
10012af8:	dec00204 	addi	sp,sp,8
10012afc:	f800283a 	ret

10012b00 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10012b00:	defffa04 	addi	sp,sp,-24
10012b04:	dfc00515 	stw	ra,20(sp)
10012b08:	df000415 	stw	fp,16(sp)
10012b0c:	df000404 	addi	fp,sp,16
10012b10:	e13ffd15 	stw	r4,-12(fp)
10012b14:	e17ffe15 	stw	r5,-8(fp)
10012b18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10012b1c:	e0bffd17 	ldw	r2,-12(fp)
10012b20:	10800017 	ldw	r2,0(r2)
10012b24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10012b28:	e0bffc17 	ldw	r2,-16(fp)
10012b2c:	10800a04 	addi	r2,r2,40
10012b30:	1009883a 	mov	r4,r2
10012b34:	e17ffe17 	ldw	r5,-8(fp)
10012b38:	e1bfff17 	ldw	r6,-4(fp)
10012b3c:	0012f2c0 	call	10012f2c <altera_avalon_jtag_uart_ioctl>
}
10012b40:	e037883a 	mov	sp,fp
10012b44:	dfc00117 	ldw	ra,4(sp)
10012b48:	df000017 	ldw	fp,0(sp)
10012b4c:	dec00204 	addi	sp,sp,8
10012b50:	f800283a 	ret

10012b54 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10012b54:	defffa04 	addi	sp,sp,-24
10012b58:	dfc00515 	stw	ra,20(sp)
10012b5c:	df000415 	stw	fp,16(sp)
10012b60:	df000404 	addi	fp,sp,16
10012b64:	e13ffd15 	stw	r4,-12(fp)
10012b68:	e17ffe15 	stw	r5,-8(fp)
10012b6c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10012b70:	e0bffd17 	ldw	r2,-12(fp)
10012b74:	00c00044 	movi	r3,1
10012b78:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10012b7c:	e0bffd17 	ldw	r2,-12(fp)
10012b80:	10800017 	ldw	r2,0(r2)
10012b84:	10800104 	addi	r2,r2,4
10012b88:	1007883a 	mov	r3,r2
10012b8c:	e0bffd17 	ldw	r2,-12(fp)
10012b90:	10800817 	ldw	r2,32(r2)
10012b94:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10012b98:	e0fffe17 	ldw	r3,-8(fp)
10012b9c:	e0bfff17 	ldw	r2,-4(fp)
10012ba0:	d8000015 	stw	zero,0(sp)
10012ba4:	1809883a 	mov	r4,r3
10012ba8:	100b883a 	mov	r5,r2
10012bac:	01840074 	movhi	r6,4097
10012bb0:	318b0604 	addi	r6,r6,11288
10012bb4:	e1fffd17 	ldw	r7,-12(fp)
10012bb8:	00139b40 	call	100139b4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10012bbc:	e0bffd17 	ldw	r2,-12(fp)
10012bc0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10012bc4:	e0bffd17 	ldw	r2,-12(fp)
10012bc8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10012bcc:	008400b4 	movhi	r2,4098
10012bd0:	10a2dd04 	addi	r2,r2,-29836
10012bd4:	10800017 	ldw	r2,0(r2)
10012bd8:	1809883a 	mov	r4,r3
10012bdc:	100b883a 	mov	r5,r2
10012be0:	01840074 	movhi	r6,4097
10012be4:	318b8704 	addi	r6,r6,11804
10012be8:	e1fffd17 	ldw	r7,-12(fp)
10012bec:	00135380 	call	10013538 <alt_alarm_start>
10012bf0:	1000040e 	bge	r2,zero,10012c04 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10012bf4:	e0fffd17 	ldw	r3,-12(fp)
10012bf8:	00a00034 	movhi	r2,32768
10012bfc:	10bfffc4 	addi	r2,r2,-1
10012c00:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10012c04:	e037883a 	mov	sp,fp
10012c08:	dfc00117 	ldw	ra,4(sp)
10012c0c:	df000017 	ldw	fp,0(sp)
10012c10:	dec00204 	addi	sp,sp,8
10012c14:	f800283a 	ret

10012c18 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10012c18:	defff804 	addi	sp,sp,-32
10012c1c:	df000715 	stw	fp,28(sp)
10012c20:	df000704 	addi	fp,sp,28
10012c24:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10012c28:	e0bfff17 	ldw	r2,-4(fp)
10012c2c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10012c30:	e0bffb17 	ldw	r2,-20(fp)
10012c34:	10800017 	ldw	r2,0(r2)
10012c38:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10012c3c:	e0bffc17 	ldw	r2,-16(fp)
10012c40:	10800104 	addi	r2,r2,4
10012c44:	10800037 	ldwio	r2,0(r2)
10012c48:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10012c4c:	e0bffd17 	ldw	r2,-12(fp)
10012c50:	1080c00c 	andi	r2,r2,768
10012c54:	1000011e 	bne	r2,zero,10012c5c <altera_avalon_jtag_uart_irq+0x44>
      break;
10012c58:	00006c06 	br	10012e0c <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10012c5c:	e0bffd17 	ldw	r2,-12(fp)
10012c60:	1080400c 	andi	r2,r2,256
10012c64:	10003426 	beq	r2,zero,10012d38 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10012c68:	00800074 	movhi	r2,1
10012c6c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012c70:	e0bffb17 	ldw	r2,-20(fp)
10012c74:	10800a17 	ldw	r2,40(r2)
10012c78:	10800044 	addi	r2,r2,1
10012c7c:	1081ffcc 	andi	r2,r2,2047
10012c80:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10012c84:	e0bffb17 	ldw	r2,-20(fp)
10012c88:	10c00b17 	ldw	r3,44(r2)
10012c8c:	e0bffe17 	ldw	r2,-8(fp)
10012c90:	1880011e 	bne	r3,r2,10012c98 <altera_avalon_jtag_uart_irq+0x80>
          break;
10012c94:	00001606 	br	10012cf0 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10012c98:	e0bffc17 	ldw	r2,-16(fp)
10012c9c:	10800037 	ldwio	r2,0(r2)
10012ca0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10012ca4:	e0bff917 	ldw	r2,-28(fp)
10012ca8:	10a0000c 	andi	r2,r2,32768
10012cac:	1000011e 	bne	r2,zero,10012cb4 <altera_avalon_jtag_uart_irq+0x9c>
          break;
10012cb0:	00000f06 	br	10012cf0 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10012cb4:	e0bffb17 	ldw	r2,-20(fp)
10012cb8:	10800a17 	ldw	r2,40(r2)
10012cbc:	e0fff917 	ldw	r3,-28(fp)
10012cc0:	1809883a 	mov	r4,r3
10012cc4:	e0fffb17 	ldw	r3,-20(fp)
10012cc8:	1885883a 	add	r2,r3,r2
10012ccc:	10800e04 	addi	r2,r2,56
10012cd0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012cd4:	e0bffb17 	ldw	r2,-20(fp)
10012cd8:	10800a17 	ldw	r2,40(r2)
10012cdc:	10800044 	addi	r2,r2,1
10012ce0:	10c1ffcc 	andi	r3,r2,2047
10012ce4:	e0bffb17 	ldw	r2,-20(fp)
10012ce8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10012cec:	003fe006 	br	10012c70 <__alt_data_end+0xf8012c70>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10012cf0:	e0bff917 	ldw	r2,-28(fp)
10012cf4:	10bfffec 	andhi	r2,r2,65535
10012cf8:	10000f26 	beq	r2,zero,10012d38 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10012cfc:	e0bffb17 	ldw	r2,-20(fp)
10012d00:	10c00817 	ldw	r3,32(r2)
10012d04:	00bfff84 	movi	r2,-2
10012d08:	1886703a 	and	r3,r3,r2
10012d0c:	e0bffb17 	ldw	r2,-20(fp)
10012d10:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10012d14:	e0bffc17 	ldw	r2,-16(fp)
10012d18:	10800104 	addi	r2,r2,4
10012d1c:	1007883a 	mov	r3,r2
10012d20:	e0bffb17 	ldw	r2,-20(fp)
10012d24:	10800817 	ldw	r2,32(r2)
10012d28:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10012d2c:	e0bffc17 	ldw	r2,-16(fp)
10012d30:	10800104 	addi	r2,r2,4
10012d34:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10012d38:	e0bffd17 	ldw	r2,-12(fp)
10012d3c:	1080800c 	andi	r2,r2,512
10012d40:	10003126 	beq	r2,zero,10012e08 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10012d44:	e0bffd17 	ldw	r2,-12(fp)
10012d48:	1004d43a 	srli	r2,r2,16
10012d4c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10012d50:	00001406 	br	10012da4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10012d54:	e0bffc17 	ldw	r2,-16(fp)
10012d58:	e0fffb17 	ldw	r3,-20(fp)
10012d5c:	18c00d17 	ldw	r3,52(r3)
10012d60:	e13ffb17 	ldw	r4,-20(fp)
10012d64:	20c7883a 	add	r3,r4,r3
10012d68:	18c20e04 	addi	r3,r3,2104
10012d6c:	18c00003 	ldbu	r3,0(r3)
10012d70:	18c03fcc 	andi	r3,r3,255
10012d74:	18c0201c 	xori	r3,r3,128
10012d78:	18ffe004 	addi	r3,r3,-128
10012d7c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012d80:	e0bffb17 	ldw	r2,-20(fp)
10012d84:	10800d17 	ldw	r2,52(r2)
10012d88:	10800044 	addi	r2,r2,1
10012d8c:	10c1ffcc 	andi	r3,r2,2047
10012d90:	e0bffb17 	ldw	r2,-20(fp)
10012d94:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10012d98:	e0bffa17 	ldw	r2,-24(fp)
10012d9c:	10bfffc4 	addi	r2,r2,-1
10012da0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10012da4:	e0bffa17 	ldw	r2,-24(fp)
10012da8:	10000526 	beq	r2,zero,10012dc0 <altera_avalon_jtag_uart_irq+0x1a8>
10012dac:	e0bffb17 	ldw	r2,-20(fp)
10012db0:	10c00d17 	ldw	r3,52(r2)
10012db4:	e0bffb17 	ldw	r2,-20(fp)
10012db8:	10800c17 	ldw	r2,48(r2)
10012dbc:	18bfe51e 	bne	r3,r2,10012d54 <__alt_data_end+0xf8012d54>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10012dc0:	e0bffa17 	ldw	r2,-24(fp)
10012dc4:	10001026 	beq	r2,zero,10012e08 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10012dc8:	e0bffb17 	ldw	r2,-20(fp)
10012dcc:	10c00817 	ldw	r3,32(r2)
10012dd0:	00bfff44 	movi	r2,-3
10012dd4:	1886703a 	and	r3,r3,r2
10012dd8:	e0bffb17 	ldw	r2,-20(fp)
10012ddc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10012de0:	e0bffb17 	ldw	r2,-20(fp)
10012de4:	10800017 	ldw	r2,0(r2)
10012de8:	10800104 	addi	r2,r2,4
10012dec:	1007883a 	mov	r3,r2
10012df0:	e0bffb17 	ldw	r2,-20(fp)
10012df4:	10800817 	ldw	r2,32(r2)
10012df8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10012dfc:	e0bffc17 	ldw	r2,-16(fp)
10012e00:	10800104 	addi	r2,r2,4
10012e04:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10012e08:	003f8c06 	br	10012c3c <__alt_data_end+0xf8012c3c>
}
10012e0c:	e037883a 	mov	sp,fp
10012e10:	df000017 	ldw	fp,0(sp)
10012e14:	dec00104 	addi	sp,sp,4
10012e18:	f800283a 	ret

10012e1c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10012e1c:	defff804 	addi	sp,sp,-32
10012e20:	df000715 	stw	fp,28(sp)
10012e24:	df000704 	addi	fp,sp,28
10012e28:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10012e2c:	e0bffb17 	ldw	r2,-20(fp)
10012e30:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10012e34:	e0bff917 	ldw	r2,-28(fp)
10012e38:	10800017 	ldw	r2,0(r2)
10012e3c:	10800104 	addi	r2,r2,4
10012e40:	10800037 	ldwio	r2,0(r2)
10012e44:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10012e48:	e0bffa17 	ldw	r2,-24(fp)
10012e4c:	1081000c 	andi	r2,r2,1024
10012e50:	10000b26 	beq	r2,zero,10012e80 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10012e54:	e0bff917 	ldw	r2,-28(fp)
10012e58:	10800017 	ldw	r2,0(r2)
10012e5c:	10800104 	addi	r2,r2,4
10012e60:	1007883a 	mov	r3,r2
10012e64:	e0bff917 	ldw	r2,-28(fp)
10012e68:	10800817 	ldw	r2,32(r2)
10012e6c:	10810014 	ori	r2,r2,1024
10012e70:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10012e74:	e0bff917 	ldw	r2,-28(fp)
10012e78:	10000915 	stw	zero,36(r2)
10012e7c:	00000a06 	br	10012ea8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10012e80:	e0bff917 	ldw	r2,-28(fp)
10012e84:	10c00917 	ldw	r3,36(r2)
10012e88:	00a00034 	movhi	r2,32768
10012e8c:	10bfff04 	addi	r2,r2,-4
10012e90:	10c00536 	bltu	r2,r3,10012ea8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10012e94:	e0bff917 	ldw	r2,-28(fp)
10012e98:	10800917 	ldw	r2,36(r2)
10012e9c:	10c00044 	addi	r3,r2,1
10012ea0:	e0bff917 	ldw	r2,-28(fp)
10012ea4:	10c00915 	stw	r3,36(r2)
10012ea8:	008400b4 	movhi	r2,4098
10012eac:	10a2dd04 	addi	r2,r2,-29836
10012eb0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10012eb4:	e037883a 	mov	sp,fp
10012eb8:	df000017 	ldw	fp,0(sp)
10012ebc:	dec00104 	addi	sp,sp,4
10012ec0:	f800283a 	ret

10012ec4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10012ec4:	defffd04 	addi	sp,sp,-12
10012ec8:	df000215 	stw	fp,8(sp)
10012ecc:	df000204 	addi	fp,sp,8
10012ed0:	e13ffe15 	stw	r4,-8(fp)
10012ed4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10012ed8:	00000506 	br	10012ef0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10012edc:	e0bfff17 	ldw	r2,-4(fp)
10012ee0:	1090000c 	andi	r2,r2,16384
10012ee4:	10000226 	beq	r2,zero,10012ef0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10012ee8:	00bffd44 	movi	r2,-11
10012eec:	00000b06 	br	10012f1c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10012ef0:	e0bffe17 	ldw	r2,-8(fp)
10012ef4:	10c00d17 	ldw	r3,52(r2)
10012ef8:	e0bffe17 	ldw	r2,-8(fp)
10012efc:	10800c17 	ldw	r2,48(r2)
10012f00:	18800526 	beq	r3,r2,10012f18 <altera_avalon_jtag_uart_close+0x54>
10012f04:	e0bffe17 	ldw	r2,-8(fp)
10012f08:	10c00917 	ldw	r3,36(r2)
10012f0c:	e0bffe17 	ldw	r2,-8(fp)
10012f10:	10800117 	ldw	r2,4(r2)
10012f14:	18bff136 	bltu	r3,r2,10012edc <__alt_data_end+0xf8012edc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10012f18:	0005883a 	mov	r2,zero
}
10012f1c:	e037883a 	mov	sp,fp
10012f20:	df000017 	ldw	fp,0(sp)
10012f24:	dec00104 	addi	sp,sp,4
10012f28:	f800283a 	ret

10012f2c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10012f2c:	defffa04 	addi	sp,sp,-24
10012f30:	df000515 	stw	fp,20(sp)
10012f34:	df000504 	addi	fp,sp,20
10012f38:	e13ffd15 	stw	r4,-12(fp)
10012f3c:	e17ffe15 	stw	r5,-8(fp)
10012f40:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10012f44:	00bff9c4 	movi	r2,-25
10012f48:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10012f4c:	e0bffe17 	ldw	r2,-8(fp)
10012f50:	10da8060 	cmpeqi	r3,r2,27137
10012f54:	1800031e 	bne	r3,zero,10012f64 <altera_avalon_jtag_uart_ioctl+0x38>
10012f58:	109a80a0 	cmpeqi	r2,r2,27138
10012f5c:	1000191e 	bne	r2,zero,10012fc4 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
10012f60:	00002806 	br	10013004 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10012f64:	e0bffd17 	ldw	r2,-12(fp)
10012f68:	10c00117 	ldw	r3,4(r2)
10012f6c:	00a00034 	movhi	r2,32768
10012f70:	10bfffc4 	addi	r2,r2,-1
10012f74:	18801226 	beq	r3,r2,10012fc0 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
10012f78:	e0bfff17 	ldw	r2,-4(fp)
10012f7c:	10800017 	ldw	r2,0(r2)
10012f80:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10012f84:	e0bffc17 	ldw	r2,-16(fp)
10012f88:	10800090 	cmplti	r2,r2,2
10012f8c:	1000061e 	bne	r2,zero,10012fa8 <altera_avalon_jtag_uart_ioctl+0x7c>
10012f90:	e0fffc17 	ldw	r3,-16(fp)
10012f94:	00a00034 	movhi	r2,32768
10012f98:	10bfffc4 	addi	r2,r2,-1
10012f9c:	18800226 	beq	r3,r2,10012fa8 <altera_avalon_jtag_uart_ioctl+0x7c>
10012fa0:	e0bffc17 	ldw	r2,-16(fp)
10012fa4:	00000206 	br	10012fb0 <altera_avalon_jtag_uart_ioctl+0x84>
10012fa8:	00a00034 	movhi	r2,32768
10012fac:	10bfff84 	addi	r2,r2,-2
10012fb0:	e0fffd17 	ldw	r3,-12(fp)
10012fb4:	18800115 	stw	r2,4(r3)
      rc = 0;
10012fb8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10012fbc:	00001106 	br	10013004 <altera_avalon_jtag_uart_ioctl+0xd8>
10012fc0:	00001006 	br	10013004 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10012fc4:	e0bffd17 	ldw	r2,-12(fp)
10012fc8:	10c00117 	ldw	r3,4(r2)
10012fcc:	00a00034 	movhi	r2,32768
10012fd0:	10bfffc4 	addi	r2,r2,-1
10012fd4:	18800a26 	beq	r3,r2,10013000 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10012fd8:	e0bffd17 	ldw	r2,-12(fp)
10012fdc:	10c00917 	ldw	r3,36(r2)
10012fe0:	e0bffd17 	ldw	r2,-12(fp)
10012fe4:	10800117 	ldw	r2,4(r2)
10012fe8:	1885803a 	cmpltu	r2,r3,r2
10012fec:	10c03fcc 	andi	r3,r2,255
10012ff0:	e0bfff17 	ldw	r2,-4(fp)
10012ff4:	10c00015 	stw	r3,0(r2)
      rc = 0;
10012ff8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10012ffc:	00000006 	br	10013000 <altera_avalon_jtag_uart_ioctl+0xd4>
10013000:	0001883a 	nop

  default:
    break;
  }

  return rc;
10013004:	e0bffb17 	ldw	r2,-20(fp)
}
10013008:	e037883a 	mov	sp,fp
1001300c:	df000017 	ldw	fp,0(sp)
10013010:	dec00104 	addi	sp,sp,4
10013014:	f800283a 	ret

10013018 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10013018:	defff304 	addi	sp,sp,-52
1001301c:	dfc00c15 	stw	ra,48(sp)
10013020:	df000b15 	stw	fp,44(sp)
10013024:	df000b04 	addi	fp,sp,44
10013028:	e13ffc15 	stw	r4,-16(fp)
1001302c:	e17ffd15 	stw	r5,-12(fp)
10013030:	e1bffe15 	stw	r6,-8(fp)
10013034:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10013038:	e0bffd17 	ldw	r2,-12(fp)
1001303c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10013040:	00004906 	br	10013168 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10013044:	e0bffc17 	ldw	r2,-16(fp)
10013048:	10800a17 	ldw	r2,40(r2)
1001304c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10013050:	e0bffc17 	ldw	r2,-16(fp)
10013054:	10800b17 	ldw	r2,44(r2)
10013058:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1001305c:	e0fff717 	ldw	r3,-36(fp)
10013060:	e0bff817 	ldw	r2,-32(fp)
10013064:	18800536 	bltu	r3,r2,1001307c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10013068:	e0fff717 	ldw	r3,-36(fp)
1001306c:	e0bff817 	ldw	r2,-32(fp)
10013070:	1885c83a 	sub	r2,r3,r2
10013074:	e0bff615 	stw	r2,-40(fp)
10013078:	00000406 	br	1001308c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1001307c:	00c20004 	movi	r3,2048
10013080:	e0bff817 	ldw	r2,-32(fp)
10013084:	1885c83a 	sub	r2,r3,r2
10013088:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1001308c:	e0bff617 	ldw	r2,-40(fp)
10013090:	1000011e 	bne	r2,zero,10013098 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
10013094:	00001d06 	br	1001310c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
10013098:	e0fffe17 	ldw	r3,-8(fp)
1001309c:	e0bff617 	ldw	r2,-40(fp)
100130a0:	1880022e 	bgeu	r3,r2,100130ac <altera_avalon_jtag_uart_read+0x94>
        n = space;
100130a4:	e0bffe17 	ldw	r2,-8(fp)
100130a8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
100130ac:	e0bff817 	ldw	r2,-32(fp)
100130b0:	10800e04 	addi	r2,r2,56
100130b4:	e0fffc17 	ldw	r3,-16(fp)
100130b8:	1885883a 	add	r2,r3,r2
100130bc:	e13ff517 	ldw	r4,-44(fp)
100130c0:	100b883a 	mov	r5,r2
100130c4:	e1bff617 	ldw	r6,-40(fp)
100130c8:	000d7880 	call	1000d788 <memcpy>
      ptr   += n;
100130cc:	e0fff517 	ldw	r3,-44(fp)
100130d0:	e0bff617 	ldw	r2,-40(fp)
100130d4:	1885883a 	add	r2,r3,r2
100130d8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
100130dc:	e0fffe17 	ldw	r3,-8(fp)
100130e0:	e0bff617 	ldw	r2,-40(fp)
100130e4:	1885c83a 	sub	r2,r3,r2
100130e8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100130ec:	e0fff817 	ldw	r3,-32(fp)
100130f0:	e0bff617 	ldw	r2,-40(fp)
100130f4:	1885883a 	add	r2,r3,r2
100130f8:	10c1ffcc 	andi	r3,r2,2047
100130fc:	e0bffc17 	ldw	r2,-16(fp)
10013100:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10013104:	e0bffe17 	ldw	r2,-8(fp)
10013108:	00bfce16 	blt	zero,r2,10013044 <__alt_data_end+0xf8013044>

    /* If we read any data then return it */
    if (ptr != buffer)
1001310c:	e0fff517 	ldw	r3,-44(fp)
10013110:	e0bffd17 	ldw	r2,-12(fp)
10013114:	18800126 	beq	r3,r2,1001311c <altera_avalon_jtag_uart_read+0x104>
      break;
10013118:	00001506 	br	10013170 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1001311c:	e0bfff17 	ldw	r2,-4(fp)
10013120:	1090000c 	andi	r2,r2,16384
10013124:	10000126 	beq	r2,zero,1001312c <altera_avalon_jtag_uart_read+0x114>
      break;
10013128:	00001106 	br	10013170 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1001312c:	0001883a 	nop
10013130:	e0bffc17 	ldw	r2,-16(fp)
10013134:	10c00a17 	ldw	r3,40(r2)
10013138:	e0bff717 	ldw	r2,-36(fp)
1001313c:	1880051e 	bne	r3,r2,10013154 <altera_avalon_jtag_uart_read+0x13c>
10013140:	e0bffc17 	ldw	r2,-16(fp)
10013144:	10c00917 	ldw	r3,36(r2)
10013148:	e0bffc17 	ldw	r2,-16(fp)
1001314c:	10800117 	ldw	r2,4(r2)
10013150:	18bff736 	bltu	r3,r2,10013130 <__alt_data_end+0xf8013130>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10013154:	e0bffc17 	ldw	r2,-16(fp)
10013158:	10c00a17 	ldw	r3,40(r2)
1001315c:	e0bff717 	ldw	r2,-36(fp)
10013160:	1880011e 	bne	r3,r2,10013168 <altera_avalon_jtag_uart_read+0x150>
      break;
10013164:	00000206 	br	10013170 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10013168:	e0bffe17 	ldw	r2,-8(fp)
1001316c:	00bfb516 	blt	zero,r2,10013044 <__alt_data_end+0xf8013044>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10013170:	e0fff517 	ldw	r3,-44(fp)
10013174:	e0bffd17 	ldw	r2,-12(fp)
10013178:	18801826 	beq	r3,r2,100131dc <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001317c:	0005303a 	rdctl	r2,status
10013180:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013184:	e0fffa17 	ldw	r3,-24(fp)
10013188:	00bfff84 	movi	r2,-2
1001318c:	1884703a 	and	r2,r3,r2
10013190:	1001703a 	wrctl	status,r2
  
  return context;
10013194:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10013198:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1001319c:	e0bffc17 	ldw	r2,-16(fp)
100131a0:	10800817 	ldw	r2,32(r2)
100131a4:	10c00054 	ori	r3,r2,1
100131a8:	e0bffc17 	ldw	r2,-16(fp)
100131ac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100131b0:	e0bffc17 	ldw	r2,-16(fp)
100131b4:	10800017 	ldw	r2,0(r2)
100131b8:	10800104 	addi	r2,r2,4
100131bc:	1007883a 	mov	r3,r2
100131c0:	e0bffc17 	ldw	r2,-16(fp)
100131c4:	10800817 	ldw	r2,32(r2)
100131c8:	18800035 	stwio	r2,0(r3)
100131cc:	e0bff917 	ldw	r2,-28(fp)
100131d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100131d4:	e0bffb17 	ldw	r2,-20(fp)
100131d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
100131dc:	e0fff517 	ldw	r3,-44(fp)
100131e0:	e0bffd17 	ldw	r2,-12(fp)
100131e4:	18800426 	beq	r3,r2,100131f8 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
100131e8:	e0fff517 	ldw	r3,-44(fp)
100131ec:	e0bffd17 	ldw	r2,-12(fp)
100131f0:	1885c83a 	sub	r2,r3,r2
100131f4:	00000606 	br	10013210 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
100131f8:	e0bfff17 	ldw	r2,-4(fp)
100131fc:	1090000c 	andi	r2,r2,16384
10013200:	10000226 	beq	r2,zero,1001320c <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
10013204:	00bffd44 	movi	r2,-11
10013208:	00000106 	br	10013210 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
1001320c:	00bffec4 	movi	r2,-5
}
10013210:	e037883a 	mov	sp,fp
10013214:	dfc00117 	ldw	ra,4(sp)
10013218:	df000017 	ldw	fp,0(sp)
1001321c:	dec00204 	addi	sp,sp,8
10013220:	f800283a 	ret

10013224 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10013224:	defff304 	addi	sp,sp,-52
10013228:	dfc00c15 	stw	ra,48(sp)
1001322c:	df000b15 	stw	fp,44(sp)
10013230:	df000b04 	addi	fp,sp,44
10013234:	e13ffc15 	stw	r4,-16(fp)
10013238:	e17ffd15 	stw	r5,-12(fp)
1001323c:	e1bffe15 	stw	r6,-8(fp)
10013240:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10013244:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10013248:	e0bffd17 	ldw	r2,-12(fp)
1001324c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10013250:	00003806 	br	10013334 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10013254:	e0bffc17 	ldw	r2,-16(fp)
10013258:	10800c17 	ldw	r2,48(r2)
1001325c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
10013260:	e0bffc17 	ldw	r2,-16(fp)
10013264:	10800d17 	ldw	r2,52(r2)
10013268:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1001326c:	e0fff817 	ldw	r3,-32(fp)
10013270:	e0bff517 	ldw	r2,-44(fp)
10013274:	1880062e 	bgeu	r3,r2,10013290 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10013278:	e0fff517 	ldw	r3,-44(fp)
1001327c:	e0bff817 	ldw	r2,-32(fp)
10013280:	1885c83a 	sub	r2,r3,r2
10013284:	10bfffc4 	addi	r2,r2,-1
10013288:	e0bff615 	stw	r2,-40(fp)
1001328c:	00000b06 	br	100132bc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10013290:	e0bff517 	ldw	r2,-44(fp)
10013294:	10000526 	beq	r2,zero,100132ac <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10013298:	00c20004 	movi	r3,2048
1001329c:	e0bff817 	ldw	r2,-32(fp)
100132a0:	1885c83a 	sub	r2,r3,r2
100132a4:	e0bff615 	stw	r2,-40(fp)
100132a8:	00000406 	br	100132bc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
100132ac:	00c1ffc4 	movi	r3,2047
100132b0:	e0bff817 	ldw	r2,-32(fp)
100132b4:	1885c83a 	sub	r2,r3,r2
100132b8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100132bc:	e0bff617 	ldw	r2,-40(fp)
100132c0:	1000011e 	bne	r2,zero,100132c8 <altera_avalon_jtag_uart_write+0xa4>
        break;
100132c4:	00001d06 	br	1001333c <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
100132c8:	e0fffe17 	ldw	r3,-8(fp)
100132cc:	e0bff617 	ldw	r2,-40(fp)
100132d0:	1880022e 	bgeu	r3,r2,100132dc <altera_avalon_jtag_uart_write+0xb8>
        n = count;
100132d4:	e0bffe17 	ldw	r2,-8(fp)
100132d8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
100132dc:	e0bff817 	ldw	r2,-32(fp)
100132e0:	10820e04 	addi	r2,r2,2104
100132e4:	e0fffc17 	ldw	r3,-16(fp)
100132e8:	1885883a 	add	r2,r3,r2
100132ec:	1009883a 	mov	r4,r2
100132f0:	e17ffd17 	ldw	r5,-12(fp)
100132f4:	e1bff617 	ldw	r6,-40(fp)
100132f8:	000d7880 	call	1000d788 <memcpy>
      ptr   += n;
100132fc:	e0fffd17 	ldw	r3,-12(fp)
10013300:	e0bff617 	ldw	r2,-40(fp)
10013304:	1885883a 	add	r2,r3,r2
10013308:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1001330c:	e0fffe17 	ldw	r3,-8(fp)
10013310:	e0bff617 	ldw	r2,-40(fp)
10013314:	1885c83a 	sub	r2,r3,r2
10013318:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001331c:	e0fff817 	ldw	r3,-32(fp)
10013320:	e0bff617 	ldw	r2,-40(fp)
10013324:	1885883a 	add	r2,r3,r2
10013328:	10c1ffcc 	andi	r3,r2,2047
1001332c:	e0bffc17 	ldw	r2,-16(fp)
10013330:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10013334:	e0bffe17 	ldw	r2,-8(fp)
10013338:	00bfc616 	blt	zero,r2,10013254 <__alt_data_end+0xf8013254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001333c:	0005303a 	rdctl	r2,status
10013340:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013344:	e0fffa17 	ldw	r3,-24(fp)
10013348:	00bfff84 	movi	r2,-2
1001334c:	1884703a 	and	r2,r3,r2
10013350:	1001703a 	wrctl	status,r2
  
  return context;
10013354:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10013358:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1001335c:	e0bffc17 	ldw	r2,-16(fp)
10013360:	10800817 	ldw	r2,32(r2)
10013364:	10c00094 	ori	r3,r2,2
10013368:	e0bffc17 	ldw	r2,-16(fp)
1001336c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10013370:	e0bffc17 	ldw	r2,-16(fp)
10013374:	10800017 	ldw	r2,0(r2)
10013378:	10800104 	addi	r2,r2,4
1001337c:	1007883a 	mov	r3,r2
10013380:	e0bffc17 	ldw	r2,-16(fp)
10013384:	10800817 	ldw	r2,32(r2)
10013388:	18800035 	stwio	r2,0(r3)
1001338c:	e0bff917 	ldw	r2,-28(fp)
10013390:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013394:	e0bffb17 	ldw	r2,-20(fp)
10013398:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1001339c:	e0bffe17 	ldw	r2,-8(fp)
100133a0:	0080120e 	bge	zero,r2,100133ec <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
100133a4:	e0bfff17 	ldw	r2,-4(fp)
100133a8:	1090000c 	andi	r2,r2,16384
100133ac:	10000126 	beq	r2,zero,100133b4 <altera_avalon_jtag_uart_write+0x190>
        break;
100133b0:	00001006 	br	100133f4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
100133b4:	0001883a 	nop
100133b8:	e0bffc17 	ldw	r2,-16(fp)
100133bc:	10c00d17 	ldw	r3,52(r2)
100133c0:	e0bff517 	ldw	r2,-44(fp)
100133c4:	1880051e 	bne	r3,r2,100133dc <altera_avalon_jtag_uart_write+0x1b8>
100133c8:	e0bffc17 	ldw	r2,-16(fp)
100133cc:	10c00917 	ldw	r3,36(r2)
100133d0:	e0bffc17 	ldw	r2,-16(fp)
100133d4:	10800117 	ldw	r2,4(r2)
100133d8:	18bff736 	bltu	r3,r2,100133b8 <__alt_data_end+0xf80133b8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
100133dc:	e0bffc17 	ldw	r2,-16(fp)
100133e0:	10800917 	ldw	r2,36(r2)
100133e4:	10000126 	beq	r2,zero,100133ec <altera_avalon_jtag_uart_write+0x1c8>
         break;
100133e8:	00000206 	br	100133f4 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
100133ec:	e0bffe17 	ldw	r2,-8(fp)
100133f0:	00bf9716 	blt	zero,r2,10013250 <__alt_data_end+0xf8013250>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
100133f4:	e0fffd17 	ldw	r3,-12(fp)
100133f8:	e0bff717 	ldw	r2,-36(fp)
100133fc:	18800426 	beq	r3,r2,10013410 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
10013400:	e0fffd17 	ldw	r3,-12(fp)
10013404:	e0bff717 	ldw	r2,-36(fp)
10013408:	1885c83a 	sub	r2,r3,r2
1001340c:	00000606 	br	10013428 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
10013410:	e0bfff17 	ldw	r2,-4(fp)
10013414:	1090000c 	andi	r2,r2,16384
10013418:	10000226 	beq	r2,zero,10013424 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
1001341c:	00bffd44 	movi	r2,-11
10013420:	00000106 	br	10013428 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10013424:	00bffec4 	movi	r2,-5
}
10013428:	e037883a 	mov	sp,fp
1001342c:	dfc00117 	ldw	ra,4(sp)
10013430:	df000017 	ldw	fp,0(sp)
10013434:	dec00204 	addi	sp,sp,8
10013438:	f800283a 	ret

1001343c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
1001343c:	defffa04 	addi	sp,sp,-24
10013440:	dfc00515 	stw	ra,20(sp)
10013444:	df000415 	stw	fp,16(sp)
10013448:	df000404 	addi	fp,sp,16
1001344c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
10013450:	0007883a 	mov	r3,zero
10013454:	e0bfff17 	ldw	r2,-4(fp)
10013458:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
1001345c:	e0bfff17 	ldw	r2,-4(fp)
10013460:	10800104 	addi	r2,r2,4
10013464:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013468:	0005303a 	rdctl	r2,status
1001346c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013470:	e0fffd17 	ldw	r3,-12(fp)
10013474:	00bfff84 	movi	r2,-2
10013478:	1884703a 	and	r2,r3,r2
1001347c:	1001703a 	wrctl	status,r2
  
  return context;
10013480:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
10013484:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
10013488:	00141180 	call	10014118 <alt_tick>
1001348c:	e0bffc17 	ldw	r2,-16(fp)
10013490:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013494:	e0bffe17 	ldw	r2,-8(fp)
10013498:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
1001349c:	e037883a 	mov	sp,fp
100134a0:	dfc00117 	ldw	ra,4(sp)
100134a4:	df000017 	ldw	fp,0(sp)
100134a8:	dec00204 	addi	sp,sp,8
100134ac:	f800283a 	ret

100134b0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
100134b0:	defff804 	addi	sp,sp,-32
100134b4:	dfc00715 	stw	ra,28(sp)
100134b8:	df000615 	stw	fp,24(sp)
100134bc:	df000604 	addi	fp,sp,24
100134c0:	e13ffc15 	stw	r4,-16(fp)
100134c4:	e17ffd15 	stw	r5,-12(fp)
100134c8:	e1bffe15 	stw	r6,-8(fp)
100134cc:	e1ffff15 	stw	r7,-4(fp)
100134d0:	e0bfff17 	ldw	r2,-4(fp)
100134d4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
100134d8:	008400b4 	movhi	r2,4098
100134dc:	10a2dd04 	addi	r2,r2,-29836
100134e0:	10800017 	ldw	r2,0(r2)
100134e4:	1000041e 	bne	r2,zero,100134f8 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
100134e8:	008400b4 	movhi	r2,4098
100134ec:	10a2dd04 	addi	r2,r2,-29836
100134f0:	e0fffb17 	ldw	r3,-20(fp)
100134f4:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
100134f8:	e0bffc17 	ldw	r2,-16(fp)
100134fc:	10800104 	addi	r2,r2,4
10013500:	00c001c4 	movi	r3,7
10013504:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
10013508:	d8000015 	stw	zero,0(sp)
1001350c:	e13ffd17 	ldw	r4,-12(fp)
10013510:	e17ffe17 	ldw	r5,-8(fp)
10013514:	01840074 	movhi	r6,4097
10013518:	318d0f04 	addi	r6,r6,13372
1001351c:	e1fffc17 	ldw	r7,-16(fp)
10013520:	00139b40 	call	100139b4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
10013524:	e037883a 	mov	sp,fp
10013528:	dfc00117 	ldw	ra,4(sp)
1001352c:	df000017 	ldw	fp,0(sp)
10013530:	dec00204 	addi	sp,sp,8
10013534:	f800283a 	ret

10013538 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10013538:	defff504 	addi	sp,sp,-44
1001353c:	df000a15 	stw	fp,40(sp)
10013540:	df000a04 	addi	fp,sp,40
10013544:	e13ffc15 	stw	r4,-16(fp)
10013548:	e17ffd15 	stw	r5,-12(fp)
1001354c:	e1bffe15 	stw	r6,-8(fp)
10013550:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10013554:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10013558:	008400b4 	movhi	r2,4098
1001355c:	10a2dd04 	addi	r2,r2,-29836
10013560:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
10013564:	10003f26 	beq	r2,zero,10013664 <alt_alarm_start+0x12c>
  {
    if (alarm)
10013568:	e0bffc17 	ldw	r2,-16(fp)
1001356c:	10003b26 	beq	r2,zero,1001365c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
10013570:	e0bffc17 	ldw	r2,-16(fp)
10013574:	e0fffe17 	ldw	r3,-8(fp)
10013578:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1001357c:	e0bffc17 	ldw	r2,-16(fp)
10013580:	e0ffff17 	ldw	r3,-4(fp)
10013584:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013588:	0005303a 	rdctl	r2,status
1001358c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013590:	e0fff817 	ldw	r3,-32(fp)
10013594:	00bfff84 	movi	r2,-2
10013598:	1884703a 	and	r2,r3,r2
1001359c:	1001703a 	wrctl	status,r2
  
  return context;
100135a0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
100135a4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
100135a8:	008400b4 	movhi	r2,4098
100135ac:	10a2de04 	addi	r2,r2,-29832
100135b0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
100135b4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
100135b8:	e0fffd17 	ldw	r3,-12(fp)
100135bc:	e0bff617 	ldw	r2,-40(fp)
100135c0:	1885883a 	add	r2,r3,r2
100135c4:	10c00044 	addi	r3,r2,1
100135c8:	e0bffc17 	ldw	r2,-16(fp)
100135cc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
100135d0:	e0bffc17 	ldw	r2,-16(fp)
100135d4:	10c00217 	ldw	r3,8(r2)
100135d8:	e0bff617 	ldw	r2,-40(fp)
100135dc:	1880042e 	bgeu	r3,r2,100135f0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
100135e0:	e0bffc17 	ldw	r2,-16(fp)
100135e4:	00c00044 	movi	r3,1
100135e8:	10c00405 	stb	r3,16(r2)
100135ec:	00000206 	br	100135f8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
100135f0:	e0bffc17 	ldw	r2,-16(fp)
100135f4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
100135f8:	e0fffc17 	ldw	r3,-16(fp)
100135fc:	00840074 	movhi	r2,4097
10013600:	109c1304 	addi	r2,r2,28748
10013604:	e0bff915 	stw	r2,-28(fp)
10013608:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1001360c:	e0bffa17 	ldw	r2,-24(fp)
10013610:	e0fff917 	ldw	r3,-28(fp)
10013614:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10013618:	e0bff917 	ldw	r2,-28(fp)
1001361c:	10c00017 	ldw	r3,0(r2)
10013620:	e0bffa17 	ldw	r2,-24(fp)
10013624:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10013628:	e0bff917 	ldw	r2,-28(fp)
1001362c:	10800017 	ldw	r2,0(r2)
10013630:	e0fffa17 	ldw	r3,-24(fp)
10013634:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10013638:	e0bff917 	ldw	r2,-28(fp)
1001363c:	e0fffa17 	ldw	r3,-24(fp)
10013640:	10c00015 	stw	r3,0(r2)
10013644:	e0bff717 	ldw	r2,-36(fp)
10013648:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001364c:	e0bffb17 	ldw	r2,-20(fp)
10013650:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10013654:	0005883a 	mov	r2,zero
10013658:	00000306 	br	10013668 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1001365c:	00bffa84 	movi	r2,-22
10013660:	00000106 	br	10013668 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
10013664:	00bfde84 	movi	r2,-134
  }
}
10013668:	e037883a 	mov	sp,fp
1001366c:	df000017 	ldw	fp,0(sp)
10013670:	dec00104 	addi	sp,sp,4
10013674:	f800283a 	ret

10013678 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10013678:	defffa04 	addi	sp,sp,-24
1001367c:	dfc00515 	stw	ra,20(sp)
10013680:	df000415 	stw	fp,16(sp)
10013684:	df000404 	addi	fp,sp,16
10013688:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
1001368c:	00800244 	movi	r2,9
10013690:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10013694:	e13ffd17 	ldw	r4,-12(fp)
10013698:	014003f4 	movhi	r5,15
1001369c:	29509004 	addi	r5,r5,16960
100136a0:	00057300 	call	10005730 <__mulsi3>
100136a4:	0100bef4 	movhi	r4,763
100136a8:	213c2004 	addi	r4,r4,-3968
100136ac:	100b883a 	mov	r5,r2
100136b0:	00057200 	call	10005720 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
100136b4:	01200034 	movhi	r4,32768
100136b8:	213fffc4 	addi	r4,r4,-1
100136bc:	100b883a 	mov	r5,r2
100136c0:	00057200 	call	10005720 <__udivsi3>
100136c4:	e13fff17 	ldw	r4,-4(fp)
100136c8:	100b883a 	mov	r5,r2
100136cc:	00057200 	call	10005720 <__udivsi3>
100136d0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
100136d4:	e0bffe17 	ldw	r2,-8(fp)
100136d8:	10002a26 	beq	r2,zero,10013784 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
100136dc:	e03ffc15 	stw	zero,-16(fp)
100136e0:	00001706 	br	10013740 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
100136e4:	00a00034 	movhi	r2,32768
100136e8:	10bfffc4 	addi	r2,r2,-1
100136ec:	10bfffc4 	addi	r2,r2,-1
100136f0:	103ffe1e 	bne	r2,zero,100136ec <__alt_data_end+0xf80136ec>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
100136f4:	e13ffd17 	ldw	r4,-12(fp)
100136f8:	014003f4 	movhi	r5,15
100136fc:	29509004 	addi	r5,r5,16960
10013700:	00057300 	call	10005730 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10013704:	0100bef4 	movhi	r4,763
10013708:	213c2004 	addi	r4,r4,-3968
1001370c:	100b883a 	mov	r5,r2
10013710:	00057200 	call	10005720 <__udivsi3>
10013714:	01200034 	movhi	r4,32768
10013718:	213fffc4 	addi	r4,r4,-1
1001371c:	100b883a 	mov	r5,r2
10013720:	00057200 	call	10005720 <__udivsi3>
10013724:	1007883a 	mov	r3,r2
10013728:	e0bfff17 	ldw	r2,-4(fp)
1001372c:	10c5c83a 	sub	r2,r2,r3
10013730:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10013734:	e0bffc17 	ldw	r2,-16(fp)
10013738:	10800044 	addi	r2,r2,1
1001373c:	e0bffc15 	stw	r2,-16(fp)
10013740:	e0fffc17 	ldw	r3,-16(fp)
10013744:	e0bffe17 	ldw	r2,-8(fp)
10013748:	18bfe616 	blt	r3,r2,100136e4 <__alt_data_end+0xf80136e4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1001374c:	e13ffd17 	ldw	r4,-12(fp)
10013750:	014003f4 	movhi	r5,15
10013754:	29509004 	addi	r5,r5,16960
10013758:	00057300 	call	10005730 <__mulsi3>
1001375c:	0100bef4 	movhi	r4,763
10013760:	213c2004 	addi	r4,r4,-3968
10013764:	100b883a 	mov	r5,r2
10013768:	00057200 	call	10005720 <__udivsi3>
1001376c:	1009883a 	mov	r4,r2
10013770:	e17fff17 	ldw	r5,-4(fp)
10013774:	00057300 	call	10005730 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10013778:	10bfffc4 	addi	r2,r2,-1
1001377c:	103ffe1e 	bne	r2,zero,10013778 <__alt_data_end+0xf8013778>
10013780:	00000d06 	br	100137b8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10013784:	e13ffd17 	ldw	r4,-12(fp)
10013788:	014003f4 	movhi	r5,15
1001378c:	29509004 	addi	r5,r5,16960
10013790:	00057300 	call	10005730 <__mulsi3>
10013794:	0100bef4 	movhi	r4,763
10013798:	213c2004 	addi	r4,r4,-3968
1001379c:	100b883a 	mov	r5,r2
100137a0:	00057200 	call	10005720 <__udivsi3>
100137a4:	1009883a 	mov	r4,r2
100137a8:	e17fff17 	ldw	r5,-4(fp)
100137ac:	00057300 	call	10005730 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
100137b0:	10bfffc4 	addi	r2,r2,-1
100137b4:	00bffe16 	blt	zero,r2,100137b0 <__alt_data_end+0xf80137b0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
100137b8:	0005883a 	mov	r2,zero
}
100137bc:	e037883a 	mov	sp,fp
100137c0:	dfc00117 	ldw	ra,4(sp)
100137c4:	df000017 	ldw	fp,0(sp)
100137c8:	dec00204 	addi	sp,sp,8
100137cc:	f800283a 	ret

100137d0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
100137d0:	deffff04 	addi	sp,sp,-4
100137d4:	df000015 	stw	fp,0(sp)
100137d8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100137dc:	e037883a 	mov	sp,fp
100137e0:	df000017 	ldw	fp,0(sp)
100137e4:	dec00104 	addi	sp,sp,4
100137e8:	f800283a 	ret

100137ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100137ec:	defffe04 	addi	sp,sp,-8
100137f0:	dfc00115 	stw	ra,4(sp)
100137f4:	df000015 	stw	fp,0(sp)
100137f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100137fc:	00840074 	movhi	r2,4097
10013800:	109c1004 	addi	r2,r2,28736
10013804:	10800017 	ldw	r2,0(r2)
10013808:	10000526 	beq	r2,zero,10013820 <alt_get_errno+0x34>
1001380c:	00840074 	movhi	r2,4097
10013810:	109c1004 	addi	r2,r2,28736
10013814:	10800017 	ldw	r2,0(r2)
10013818:	103ee83a 	callr	r2
1001381c:	00000206 	br	10013828 <alt_get_errno+0x3c>
10013820:	008400b4 	movhi	r2,4098
10013824:	10a2d804 	addi	r2,r2,-29856
}
10013828:	e037883a 	mov	sp,fp
1001382c:	dfc00117 	ldw	ra,4(sp)
10013830:	df000017 	ldw	fp,0(sp)
10013834:	dec00204 	addi	sp,sp,8
10013838:	f800283a 	ret

1001383c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1001383c:	defffa04 	addi	sp,sp,-24
10013840:	dfc00515 	stw	ra,20(sp)
10013844:	df000415 	stw	fp,16(sp)
10013848:	df000404 	addi	fp,sp,16
1001384c:	e13ffe15 	stw	r4,-8(fp)
10013850:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10013854:	e0bffe17 	ldw	r2,-8(fp)
10013858:	10000326 	beq	r2,zero,10013868 <alt_dev_llist_insert+0x2c>
1001385c:	e0bffe17 	ldw	r2,-8(fp)
10013860:	10800217 	ldw	r2,8(r2)
10013864:	1000061e 	bne	r2,zero,10013880 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10013868:	00137ec0 	call	100137ec <alt_get_errno>
1001386c:	1007883a 	mov	r3,r2
10013870:	00800584 	movi	r2,22
10013874:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10013878:	00bffa84 	movi	r2,-22
1001387c:	00001306 	br	100138cc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10013880:	e0bffe17 	ldw	r2,-8(fp)
10013884:	e0ffff17 	ldw	r3,-4(fp)
10013888:	e0fffc15 	stw	r3,-16(fp)
1001388c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10013890:	e0bffd17 	ldw	r2,-12(fp)
10013894:	e0fffc17 	ldw	r3,-16(fp)
10013898:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1001389c:	e0bffc17 	ldw	r2,-16(fp)
100138a0:	10c00017 	ldw	r3,0(r2)
100138a4:	e0bffd17 	ldw	r2,-12(fp)
100138a8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100138ac:	e0bffc17 	ldw	r2,-16(fp)
100138b0:	10800017 	ldw	r2,0(r2)
100138b4:	e0fffd17 	ldw	r3,-12(fp)
100138b8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100138bc:	e0bffc17 	ldw	r2,-16(fp)
100138c0:	e0fffd17 	ldw	r3,-12(fp)
100138c4:	10c00015 	stw	r3,0(r2)

  return 0;  
100138c8:	0005883a 	mov	r2,zero
}
100138cc:	e037883a 	mov	sp,fp
100138d0:	dfc00117 	ldw	ra,4(sp)
100138d4:	df000017 	ldw	fp,0(sp)
100138d8:	dec00204 	addi	sp,sp,8
100138dc:	f800283a 	ret

100138e0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
100138e0:	defffd04 	addi	sp,sp,-12
100138e4:	dfc00215 	stw	ra,8(sp)
100138e8:	df000115 	stw	fp,4(sp)
100138ec:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100138f0:	00840074 	movhi	r2,4097
100138f4:	10921504 	addi	r2,r2,18516
100138f8:	e0bfff15 	stw	r2,-4(fp)
100138fc:	00000606 	br	10013918 <_do_ctors+0x38>
        (*ctor) (); 
10013900:	e0bfff17 	ldw	r2,-4(fp)
10013904:	10800017 	ldw	r2,0(r2)
10013908:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1001390c:	e0bfff17 	ldw	r2,-4(fp)
10013910:	10bfff04 	addi	r2,r2,-4
10013914:	e0bfff15 	stw	r2,-4(fp)
10013918:	e0ffff17 	ldw	r3,-4(fp)
1001391c:	00840074 	movhi	r2,4097
10013920:	10921604 	addi	r2,r2,18520
10013924:	18bff62e 	bgeu	r3,r2,10013900 <__alt_data_end+0xf8013900>
        (*ctor) (); 
}
10013928:	e037883a 	mov	sp,fp
1001392c:	dfc00117 	ldw	ra,4(sp)
10013930:	df000017 	ldw	fp,0(sp)
10013934:	dec00204 	addi	sp,sp,8
10013938:	f800283a 	ret

1001393c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1001393c:	defffd04 	addi	sp,sp,-12
10013940:	dfc00215 	stw	ra,8(sp)
10013944:	df000115 	stw	fp,4(sp)
10013948:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1001394c:	00840074 	movhi	r2,4097
10013950:	10921504 	addi	r2,r2,18516
10013954:	e0bfff15 	stw	r2,-4(fp)
10013958:	00000606 	br	10013974 <_do_dtors+0x38>
        (*dtor) (); 
1001395c:	e0bfff17 	ldw	r2,-4(fp)
10013960:	10800017 	ldw	r2,0(r2)
10013964:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10013968:	e0bfff17 	ldw	r2,-4(fp)
1001396c:	10bfff04 	addi	r2,r2,-4
10013970:	e0bfff15 	stw	r2,-4(fp)
10013974:	e0ffff17 	ldw	r3,-4(fp)
10013978:	00840074 	movhi	r2,4097
1001397c:	10921604 	addi	r2,r2,18520
10013980:	18bff62e 	bgeu	r3,r2,1001395c <__alt_data_end+0xf801395c>
        (*dtor) (); 
}
10013984:	e037883a 	mov	sp,fp
10013988:	dfc00117 	ldw	ra,4(sp)
1001398c:	df000017 	ldw	fp,0(sp)
10013990:	dec00204 	addi	sp,sp,8
10013994:	f800283a 	ret

10013998 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10013998:	deffff04 	addi	sp,sp,-4
1001399c:	df000015 	stw	fp,0(sp)
100139a0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
100139a4:	e037883a 	mov	sp,fp
100139a8:	df000017 	ldw	fp,0(sp)
100139ac:	dec00104 	addi	sp,sp,4
100139b0:	f800283a 	ret

100139b4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100139b4:	defff904 	addi	sp,sp,-28
100139b8:	dfc00615 	stw	ra,24(sp)
100139bc:	df000515 	stw	fp,20(sp)
100139c0:	df000504 	addi	fp,sp,20
100139c4:	e13ffc15 	stw	r4,-16(fp)
100139c8:	e17ffd15 	stw	r5,-12(fp)
100139cc:	e1bffe15 	stw	r6,-8(fp)
100139d0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
100139d4:	e0800217 	ldw	r2,8(fp)
100139d8:	d8800015 	stw	r2,0(sp)
100139dc:	e13ffc17 	ldw	r4,-16(fp)
100139e0:	e17ffd17 	ldw	r5,-12(fp)
100139e4:	e1bffe17 	ldw	r6,-8(fp)
100139e8:	e1ffff17 	ldw	r7,-4(fp)
100139ec:	0013b940 	call	10013b94 <alt_iic_isr_register>
}  
100139f0:	e037883a 	mov	sp,fp
100139f4:	dfc00117 	ldw	ra,4(sp)
100139f8:	df000017 	ldw	fp,0(sp)
100139fc:	dec00204 	addi	sp,sp,8
10013a00:	f800283a 	ret

10013a04 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10013a04:	defff904 	addi	sp,sp,-28
10013a08:	df000615 	stw	fp,24(sp)
10013a0c:	df000604 	addi	fp,sp,24
10013a10:	e13ffe15 	stw	r4,-8(fp)
10013a14:	e17fff15 	stw	r5,-4(fp)
10013a18:	e0bfff17 	ldw	r2,-4(fp)
10013a1c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013a20:	0005303a 	rdctl	r2,status
10013a24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013a28:	e0fffb17 	ldw	r3,-20(fp)
10013a2c:	00bfff84 	movi	r2,-2
10013a30:	1884703a 	and	r2,r3,r2
10013a34:	1001703a 	wrctl	status,r2
  
  return context;
10013a38:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10013a3c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10013a40:	e0bffa17 	ldw	r2,-24(fp)
10013a44:	00c00044 	movi	r3,1
10013a48:	1884983a 	sll	r2,r3,r2
10013a4c:	1007883a 	mov	r3,r2
10013a50:	008400b4 	movhi	r2,4098
10013a54:	10a2dc04 	addi	r2,r2,-29840
10013a58:	10800017 	ldw	r2,0(r2)
10013a5c:	1886b03a 	or	r3,r3,r2
10013a60:	008400b4 	movhi	r2,4098
10013a64:	10a2dc04 	addi	r2,r2,-29840
10013a68:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10013a6c:	008400b4 	movhi	r2,4098
10013a70:	10a2dc04 	addi	r2,r2,-29840
10013a74:	10800017 	ldw	r2,0(r2)
10013a78:	100170fa 	wrctl	ienable,r2
10013a7c:	e0bffc17 	ldw	r2,-16(fp)
10013a80:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013a84:	e0bffd17 	ldw	r2,-12(fp)
10013a88:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10013a8c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10013a90:	0001883a 	nop
}
10013a94:	e037883a 	mov	sp,fp
10013a98:	df000017 	ldw	fp,0(sp)
10013a9c:	dec00104 	addi	sp,sp,4
10013aa0:	f800283a 	ret

10013aa4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10013aa4:	defff904 	addi	sp,sp,-28
10013aa8:	df000615 	stw	fp,24(sp)
10013aac:	df000604 	addi	fp,sp,24
10013ab0:	e13ffe15 	stw	r4,-8(fp)
10013ab4:	e17fff15 	stw	r5,-4(fp)
10013ab8:	e0bfff17 	ldw	r2,-4(fp)
10013abc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013ac0:	0005303a 	rdctl	r2,status
10013ac4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013ac8:	e0fffb17 	ldw	r3,-20(fp)
10013acc:	00bfff84 	movi	r2,-2
10013ad0:	1884703a 	and	r2,r3,r2
10013ad4:	1001703a 	wrctl	status,r2
  
  return context;
10013ad8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10013adc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10013ae0:	e0bffa17 	ldw	r2,-24(fp)
10013ae4:	00c00044 	movi	r3,1
10013ae8:	1884983a 	sll	r2,r3,r2
10013aec:	0084303a 	nor	r2,zero,r2
10013af0:	1007883a 	mov	r3,r2
10013af4:	008400b4 	movhi	r2,4098
10013af8:	10a2dc04 	addi	r2,r2,-29840
10013afc:	10800017 	ldw	r2,0(r2)
10013b00:	1886703a 	and	r3,r3,r2
10013b04:	008400b4 	movhi	r2,4098
10013b08:	10a2dc04 	addi	r2,r2,-29840
10013b0c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10013b10:	008400b4 	movhi	r2,4098
10013b14:	10a2dc04 	addi	r2,r2,-29840
10013b18:	10800017 	ldw	r2,0(r2)
10013b1c:	100170fa 	wrctl	ienable,r2
10013b20:	e0bffc17 	ldw	r2,-16(fp)
10013b24:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013b28:	e0bffd17 	ldw	r2,-12(fp)
10013b2c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10013b30:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10013b34:	0001883a 	nop
}
10013b38:	e037883a 	mov	sp,fp
10013b3c:	df000017 	ldw	fp,0(sp)
10013b40:	dec00104 	addi	sp,sp,4
10013b44:	f800283a 	ret

10013b48 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10013b48:	defffc04 	addi	sp,sp,-16
10013b4c:	df000315 	stw	fp,12(sp)
10013b50:	df000304 	addi	fp,sp,12
10013b54:	e13ffe15 	stw	r4,-8(fp)
10013b58:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10013b5c:	000530fa 	rdctl	r2,ienable
10013b60:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10013b64:	e0bfff17 	ldw	r2,-4(fp)
10013b68:	00c00044 	movi	r3,1
10013b6c:	1884983a 	sll	r2,r3,r2
10013b70:	1007883a 	mov	r3,r2
10013b74:	e0bffd17 	ldw	r2,-12(fp)
10013b78:	1884703a 	and	r2,r3,r2
10013b7c:	1004c03a 	cmpne	r2,r2,zero
10013b80:	10803fcc 	andi	r2,r2,255
}
10013b84:	e037883a 	mov	sp,fp
10013b88:	df000017 	ldw	fp,0(sp)
10013b8c:	dec00104 	addi	sp,sp,4
10013b90:	f800283a 	ret

10013b94 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10013b94:	defff504 	addi	sp,sp,-44
10013b98:	dfc00a15 	stw	ra,40(sp)
10013b9c:	df000915 	stw	fp,36(sp)
10013ba0:	df000904 	addi	fp,sp,36
10013ba4:	e13ffc15 	stw	r4,-16(fp)
10013ba8:	e17ffd15 	stw	r5,-12(fp)
10013bac:	e1bffe15 	stw	r6,-8(fp)
10013bb0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10013bb4:	00bffa84 	movi	r2,-22
10013bb8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10013bbc:	e0bffd17 	ldw	r2,-12(fp)
10013bc0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10013bc4:	e0bff817 	ldw	r2,-32(fp)
10013bc8:	10800808 	cmpgei	r2,r2,32
10013bcc:	1000271e 	bne	r2,zero,10013c6c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013bd0:	0005303a 	rdctl	r2,status
10013bd4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013bd8:	e0fffa17 	ldw	r3,-24(fp)
10013bdc:	00bfff84 	movi	r2,-2
10013be0:	1884703a 	and	r2,r3,r2
10013be4:	1001703a 	wrctl	status,r2
  
  return context;
10013be8:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10013bec:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
10013bf0:	008400b4 	movhi	r2,4098
10013bf4:	10a2e904 	addi	r2,r2,-29788
10013bf8:	e0fff817 	ldw	r3,-32(fp)
10013bfc:	180690fa 	slli	r3,r3,3
10013c00:	10c5883a 	add	r2,r2,r3
10013c04:	e0fffe17 	ldw	r3,-8(fp)
10013c08:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10013c0c:	008400b4 	movhi	r2,4098
10013c10:	10a2e904 	addi	r2,r2,-29788
10013c14:	e0fff817 	ldw	r3,-32(fp)
10013c18:	180690fa 	slli	r3,r3,3
10013c1c:	10c5883a 	add	r2,r2,r3
10013c20:	10800104 	addi	r2,r2,4
10013c24:	e0ffff17 	ldw	r3,-4(fp)
10013c28:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10013c2c:	e0bffe17 	ldw	r2,-8(fp)
10013c30:	10000526 	beq	r2,zero,10013c48 <alt_iic_isr_register+0xb4>
10013c34:	e0bff817 	ldw	r2,-32(fp)
10013c38:	e13ffc17 	ldw	r4,-16(fp)
10013c3c:	100b883a 	mov	r5,r2
10013c40:	0013a040 	call	10013a04 <alt_ic_irq_enable>
10013c44:	00000406 	br	10013c58 <alt_iic_isr_register+0xc4>
10013c48:	e0bff817 	ldw	r2,-32(fp)
10013c4c:	e13ffc17 	ldw	r4,-16(fp)
10013c50:	100b883a 	mov	r5,r2
10013c54:	0013aa40 	call	10013aa4 <alt_ic_irq_disable>
10013c58:	e0bff715 	stw	r2,-36(fp)
10013c5c:	e0bff917 	ldw	r2,-28(fp)
10013c60:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013c64:	e0bffb17 	ldw	r2,-20(fp)
10013c68:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10013c6c:	e0bff717 	ldw	r2,-36(fp)
}
10013c70:	e037883a 	mov	sp,fp
10013c74:	dfc00117 	ldw	ra,4(sp)
10013c78:	df000017 	ldw	fp,0(sp)
10013c7c:	dec00204 	addi	sp,sp,8
10013c80:	f800283a 	ret

10013c84 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10013c84:	defff804 	addi	sp,sp,-32
10013c88:	dfc00715 	stw	ra,28(sp)
10013c8c:	df000615 	stw	fp,24(sp)
10013c90:	dc000515 	stw	r16,20(sp)
10013c94:	df000604 	addi	fp,sp,24
10013c98:	e13ffb15 	stw	r4,-20(fp)
10013c9c:	e17ffc15 	stw	r5,-16(fp)
10013ca0:	e1bffd15 	stw	r6,-12(fp)
10013ca4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10013ca8:	e13ffc17 	ldw	r4,-16(fp)
10013cac:	e17ffd17 	ldw	r5,-12(fp)
10013cb0:	e1bffe17 	ldw	r6,-8(fp)
10013cb4:	0013f200 	call	10013f20 <open>
10013cb8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10013cbc:	e0bffa17 	ldw	r2,-24(fp)
10013cc0:	10002216 	blt	r2,zero,10013d4c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10013cc4:	04040074 	movhi	r16,4097
10013cc8:	84178c04 	addi	r16,r16,24112
10013ccc:	e0bffa17 	ldw	r2,-24(fp)
10013cd0:	1009883a 	mov	r4,r2
10013cd4:	01400304 	movi	r5,12
10013cd8:	00057300 	call	10005730 <__mulsi3>
10013cdc:	8085883a 	add	r2,r16,r2
10013ce0:	10c00017 	ldw	r3,0(r2)
10013ce4:	e0bffb17 	ldw	r2,-20(fp)
10013ce8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10013cec:	04040074 	movhi	r16,4097
10013cf0:	84178c04 	addi	r16,r16,24112
10013cf4:	e0bffa17 	ldw	r2,-24(fp)
10013cf8:	1009883a 	mov	r4,r2
10013cfc:	01400304 	movi	r5,12
10013d00:	00057300 	call	10005730 <__mulsi3>
10013d04:	8085883a 	add	r2,r16,r2
10013d08:	10800104 	addi	r2,r2,4
10013d0c:	10c00017 	ldw	r3,0(r2)
10013d10:	e0bffb17 	ldw	r2,-20(fp)
10013d14:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10013d18:	04040074 	movhi	r16,4097
10013d1c:	84178c04 	addi	r16,r16,24112
10013d20:	e0bffa17 	ldw	r2,-24(fp)
10013d24:	1009883a 	mov	r4,r2
10013d28:	01400304 	movi	r5,12
10013d2c:	00057300 	call	10005730 <__mulsi3>
10013d30:	8085883a 	add	r2,r16,r2
10013d34:	10800204 	addi	r2,r2,8
10013d38:	10c00017 	ldw	r3,0(r2)
10013d3c:	e0bffb17 	ldw	r2,-20(fp)
10013d40:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10013d44:	e13ffa17 	ldw	r4,-24(fp)
10013d48:	00126780 	call	10012678 <alt_release_fd>
  }
} 
10013d4c:	e6ffff04 	addi	sp,fp,-4
10013d50:	dfc00217 	ldw	ra,8(sp)
10013d54:	df000117 	ldw	fp,4(sp)
10013d58:	dc000017 	ldw	r16,0(sp)
10013d5c:	dec00304 	addi	sp,sp,12
10013d60:	f800283a 	ret

10013d64 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10013d64:	defffb04 	addi	sp,sp,-20
10013d68:	dfc00415 	stw	ra,16(sp)
10013d6c:	df000315 	stw	fp,12(sp)
10013d70:	df000304 	addi	fp,sp,12
10013d74:	e13ffd15 	stw	r4,-12(fp)
10013d78:	e17ffe15 	stw	r5,-8(fp)
10013d7c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10013d80:	01040074 	movhi	r4,4097
10013d84:	21178f04 	addi	r4,r4,24124
10013d88:	e17ffd17 	ldw	r5,-12(fp)
10013d8c:	01800044 	movi	r6,1
10013d90:	01c07fc4 	movi	r7,511
10013d94:	0013c840 	call	10013c84 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10013d98:	01040074 	movhi	r4,4097
10013d9c:	21178c04 	addi	r4,r4,24112
10013da0:	e17ffe17 	ldw	r5,-8(fp)
10013da4:	000d883a 	mov	r6,zero
10013da8:	01c07fc4 	movi	r7,511
10013dac:	0013c840 	call	10013c84 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10013db0:	01040074 	movhi	r4,4097
10013db4:	21179204 	addi	r4,r4,24136
10013db8:	e17fff17 	ldw	r5,-4(fp)
10013dbc:	01800044 	movi	r6,1
10013dc0:	01c07fc4 	movi	r7,511
10013dc4:	0013c840 	call	10013c84 <alt_open_fd>
}  
10013dc8:	e037883a 	mov	sp,fp
10013dcc:	dfc00117 	ldw	ra,4(sp)
10013dd0:	df000017 	ldw	fp,0(sp)
10013dd4:	dec00204 	addi	sp,sp,8
10013dd8:	f800283a 	ret

10013ddc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10013ddc:	defffe04 	addi	sp,sp,-8
10013de0:	dfc00115 	stw	ra,4(sp)
10013de4:	df000015 	stw	fp,0(sp)
10013de8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10013dec:	00840074 	movhi	r2,4097
10013df0:	109c1004 	addi	r2,r2,28736
10013df4:	10800017 	ldw	r2,0(r2)
10013df8:	10000526 	beq	r2,zero,10013e10 <alt_get_errno+0x34>
10013dfc:	00840074 	movhi	r2,4097
10013e00:	109c1004 	addi	r2,r2,28736
10013e04:	10800017 	ldw	r2,0(r2)
10013e08:	103ee83a 	callr	r2
10013e0c:	00000206 	br	10013e18 <alt_get_errno+0x3c>
10013e10:	008400b4 	movhi	r2,4098
10013e14:	10a2d804 	addi	r2,r2,-29856
}
10013e18:	e037883a 	mov	sp,fp
10013e1c:	dfc00117 	ldw	ra,4(sp)
10013e20:	df000017 	ldw	fp,0(sp)
10013e24:	dec00204 	addi	sp,sp,8
10013e28:	f800283a 	ret

10013e2c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10013e2c:	defffb04 	addi	sp,sp,-20
10013e30:	dfc00415 	stw	ra,16(sp)
10013e34:	df000315 	stw	fp,12(sp)
10013e38:	dc000215 	stw	r16,8(sp)
10013e3c:	df000304 	addi	fp,sp,12
10013e40:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10013e44:	e0bffe17 	ldw	r2,-8(fp)
10013e48:	10800217 	ldw	r2,8(r2)
10013e4c:	10d00034 	orhi	r3,r2,16384
10013e50:	e0bffe17 	ldw	r2,-8(fp)
10013e54:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10013e58:	e03ffd15 	stw	zero,-12(fp)
10013e5c:	00002306 	br	10013eec <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10013e60:	04040074 	movhi	r16,4097
10013e64:	84178c04 	addi	r16,r16,24112
10013e68:	e0bffd17 	ldw	r2,-12(fp)
10013e6c:	1009883a 	mov	r4,r2
10013e70:	01400304 	movi	r5,12
10013e74:	00057300 	call	10005730 <__mulsi3>
10013e78:	8085883a 	add	r2,r16,r2
10013e7c:	10c00017 	ldw	r3,0(r2)
10013e80:	e0bffe17 	ldw	r2,-8(fp)
10013e84:	10800017 	ldw	r2,0(r2)
10013e88:	1880151e 	bne	r3,r2,10013ee0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10013e8c:	04040074 	movhi	r16,4097
10013e90:	84178c04 	addi	r16,r16,24112
10013e94:	e0bffd17 	ldw	r2,-12(fp)
10013e98:	1009883a 	mov	r4,r2
10013e9c:	01400304 	movi	r5,12
10013ea0:	00057300 	call	10005730 <__mulsi3>
10013ea4:	8085883a 	add	r2,r16,r2
10013ea8:	10800204 	addi	r2,r2,8
10013eac:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10013eb0:	10000b0e 	bge	r2,zero,10013ee0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10013eb4:	e13ffd17 	ldw	r4,-12(fp)
10013eb8:	01400304 	movi	r5,12
10013ebc:	00057300 	call	10005730 <__mulsi3>
10013ec0:	1007883a 	mov	r3,r2
10013ec4:	00840074 	movhi	r2,4097
10013ec8:	10978c04 	addi	r2,r2,24112
10013ecc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10013ed0:	e0bffe17 	ldw	r2,-8(fp)
10013ed4:	18800226 	beq	r3,r2,10013ee0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10013ed8:	00bffcc4 	movi	r2,-13
10013edc:	00000a06 	br	10013f08 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10013ee0:	e0bffd17 	ldw	r2,-12(fp)
10013ee4:	10800044 	addi	r2,r2,1
10013ee8:	e0bffd15 	stw	r2,-12(fp)
10013eec:	00840074 	movhi	r2,4097
10013ef0:	109c0f04 	addi	r2,r2,28732
10013ef4:	10800017 	ldw	r2,0(r2)
10013ef8:	1007883a 	mov	r3,r2
10013efc:	e0bffd17 	ldw	r2,-12(fp)
10013f00:	18bfd72e 	bgeu	r3,r2,10013e60 <__alt_data_end+0xf8013e60>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10013f04:	0005883a 	mov	r2,zero
}
10013f08:	e6ffff04 	addi	sp,fp,-4
10013f0c:	dfc00217 	ldw	ra,8(sp)
10013f10:	df000117 	ldw	fp,4(sp)
10013f14:	dc000017 	ldw	r16,0(sp)
10013f18:	dec00304 	addi	sp,sp,12
10013f1c:	f800283a 	ret

10013f20 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10013f20:	defff604 	addi	sp,sp,-40
10013f24:	dfc00915 	stw	ra,36(sp)
10013f28:	df000815 	stw	fp,32(sp)
10013f2c:	df000804 	addi	fp,sp,32
10013f30:	e13ffd15 	stw	r4,-12(fp)
10013f34:	e17ffe15 	stw	r5,-8(fp)
10013f38:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10013f3c:	00bfffc4 	movi	r2,-1
10013f40:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10013f44:	00bffb44 	movi	r2,-19
10013f48:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10013f4c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10013f50:	e13ffd17 	ldw	r4,-12(fp)
10013f54:	01440074 	movhi	r5,4097
10013f58:	295c0d04 	addi	r5,r5,28724
10013f5c:	001423c0 	call	1001423c <alt_find_dev>
10013f60:	e0bff815 	stw	r2,-32(fp)
10013f64:	e0bff817 	ldw	r2,-32(fp)
10013f68:	1000051e 	bne	r2,zero,10013f80 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10013f6c:	e13ffd17 	ldw	r4,-12(fp)
10013f70:	00142cc0 	call	100142cc <alt_find_file>
10013f74:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10013f78:	00800044 	movi	r2,1
10013f7c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10013f80:	e0bff817 	ldw	r2,-32(fp)
10013f84:	10002b26 	beq	r2,zero,10014034 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10013f88:	e13ff817 	ldw	r4,-32(fp)
10013f8c:	00143e00 	call	100143e0 <alt_get_fd>
10013f90:	e0bff915 	stw	r2,-28(fp)
10013f94:	e0bff917 	ldw	r2,-28(fp)
10013f98:	1000030e 	bge	r2,zero,10013fa8 <open+0x88>
    {
      status = index;
10013f9c:	e0bff917 	ldw	r2,-28(fp)
10013fa0:	e0bffa15 	stw	r2,-24(fp)
10013fa4:	00002506 	br	1001403c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10013fa8:	e13ff917 	ldw	r4,-28(fp)
10013fac:	01400304 	movi	r5,12
10013fb0:	00057300 	call	10005730 <__mulsi3>
10013fb4:	1007883a 	mov	r3,r2
10013fb8:	00840074 	movhi	r2,4097
10013fbc:	10978c04 	addi	r2,r2,24112
10013fc0:	1885883a 	add	r2,r3,r2
10013fc4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10013fc8:	e0fffe17 	ldw	r3,-8(fp)
10013fcc:	00900034 	movhi	r2,16384
10013fd0:	10bfffc4 	addi	r2,r2,-1
10013fd4:	1886703a 	and	r3,r3,r2
10013fd8:	e0bffc17 	ldw	r2,-16(fp)
10013fdc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10013fe0:	e0bffb17 	ldw	r2,-20(fp)
10013fe4:	1000051e 	bne	r2,zero,10013ffc <open+0xdc>
10013fe8:	e13ffc17 	ldw	r4,-16(fp)
10013fec:	0013e2c0 	call	10013e2c <alt_file_locked>
10013ff0:	e0bffa15 	stw	r2,-24(fp)
10013ff4:	e0bffa17 	ldw	r2,-24(fp)
10013ff8:	10001016 	blt	r2,zero,1001403c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10013ffc:	e0bff817 	ldw	r2,-32(fp)
10014000:	10800317 	ldw	r2,12(r2)
10014004:	10000826 	beq	r2,zero,10014028 <open+0x108>
10014008:	e0bff817 	ldw	r2,-32(fp)
1001400c:	10800317 	ldw	r2,12(r2)
10014010:	e13ffc17 	ldw	r4,-16(fp)
10014014:	e17ffd17 	ldw	r5,-12(fp)
10014018:	e1bffe17 	ldw	r6,-8(fp)
1001401c:	e1ffff17 	ldw	r7,-4(fp)
10014020:	103ee83a 	callr	r2
10014024:	00000106 	br	1001402c <open+0x10c>
10014028:	0005883a 	mov	r2,zero
1001402c:	e0bffa15 	stw	r2,-24(fp)
10014030:	00000206 	br	1001403c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10014034:	00bffb44 	movi	r2,-19
10014038:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1001403c:	e0bffa17 	ldw	r2,-24(fp)
10014040:	1000090e 	bge	r2,zero,10014068 <open+0x148>
  {
    alt_release_fd (index);  
10014044:	e13ff917 	ldw	r4,-28(fp)
10014048:	00126780 	call	10012678 <alt_release_fd>
    ALT_ERRNO = -status;
1001404c:	0013ddc0 	call	10013ddc <alt_get_errno>
10014050:	1007883a 	mov	r3,r2
10014054:	e0bffa17 	ldw	r2,-24(fp)
10014058:	0085c83a 	sub	r2,zero,r2
1001405c:	18800015 	stw	r2,0(r3)
    return -1;
10014060:	00bfffc4 	movi	r2,-1
10014064:	00000106 	br	1001406c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10014068:	e0bff917 	ldw	r2,-28(fp)
}
1001406c:	e037883a 	mov	sp,fp
10014070:	dfc00117 	ldw	ra,4(sp)
10014074:	df000017 	ldw	fp,0(sp)
10014078:	dec00204 	addi	sp,sp,8
1001407c:	f800283a 	ret

10014080 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10014080:	defffa04 	addi	sp,sp,-24
10014084:	df000515 	stw	fp,20(sp)
10014088:	df000504 	addi	fp,sp,20
1001408c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10014090:	0005303a 	rdctl	r2,status
10014094:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10014098:	e0fffc17 	ldw	r3,-16(fp)
1001409c:	00bfff84 	movi	r2,-2
100140a0:	1884703a 	and	r2,r3,r2
100140a4:	1001703a 	wrctl	status,r2
  
  return context;
100140a8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
100140ac:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
100140b0:	e0bfff17 	ldw	r2,-4(fp)
100140b4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
100140b8:	e0bffd17 	ldw	r2,-12(fp)
100140bc:	10800017 	ldw	r2,0(r2)
100140c0:	e0fffd17 	ldw	r3,-12(fp)
100140c4:	18c00117 	ldw	r3,4(r3)
100140c8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
100140cc:	e0bffd17 	ldw	r2,-12(fp)
100140d0:	10800117 	ldw	r2,4(r2)
100140d4:	e0fffd17 	ldw	r3,-12(fp)
100140d8:	18c00017 	ldw	r3,0(r3)
100140dc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
100140e0:	e0bffd17 	ldw	r2,-12(fp)
100140e4:	e0fffd17 	ldw	r3,-12(fp)
100140e8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
100140ec:	e0bffd17 	ldw	r2,-12(fp)
100140f0:	e0fffd17 	ldw	r3,-12(fp)
100140f4:	10c00015 	stw	r3,0(r2)
100140f8:	e0bffb17 	ldw	r2,-20(fp)
100140fc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10014100:	e0bffe17 	ldw	r2,-8(fp)
10014104:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10014108:	e037883a 	mov	sp,fp
1001410c:	df000017 	ldw	fp,0(sp)
10014110:	dec00104 	addi	sp,sp,4
10014114:	f800283a 	ret

10014118 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10014118:	defffb04 	addi	sp,sp,-20
1001411c:	dfc00415 	stw	ra,16(sp)
10014120:	df000315 	stw	fp,12(sp)
10014124:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10014128:	d0a00f17 	ldw	r2,-32708(gp)
1001412c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10014130:	d0a6da17 	ldw	r2,-25752(gp)
10014134:	10800044 	addi	r2,r2,1
10014138:	d0a6da15 	stw	r2,-25752(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1001413c:	00002e06 	br	100141f8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10014140:	e0bffd17 	ldw	r2,-12(fp)
10014144:	10800017 	ldw	r2,0(r2)
10014148:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1001414c:	e0bffd17 	ldw	r2,-12(fp)
10014150:	10800403 	ldbu	r2,16(r2)
10014154:	10803fcc 	andi	r2,r2,255
10014158:	10000426 	beq	r2,zero,1001416c <alt_tick+0x54>
1001415c:	d0a6da17 	ldw	r2,-25752(gp)
10014160:	1000021e 	bne	r2,zero,1001416c <alt_tick+0x54>
    {
      alarm->rollover = 0;
10014164:	e0bffd17 	ldw	r2,-12(fp)
10014168:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1001416c:	e0bffd17 	ldw	r2,-12(fp)
10014170:	10800217 	ldw	r2,8(r2)
10014174:	d0e6da17 	ldw	r3,-25752(gp)
10014178:	18801d36 	bltu	r3,r2,100141f0 <alt_tick+0xd8>
1001417c:	e0bffd17 	ldw	r2,-12(fp)
10014180:	10800403 	ldbu	r2,16(r2)
10014184:	10803fcc 	andi	r2,r2,255
10014188:	1000191e 	bne	r2,zero,100141f0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1001418c:	e0bffd17 	ldw	r2,-12(fp)
10014190:	10800317 	ldw	r2,12(r2)
10014194:	e0fffd17 	ldw	r3,-12(fp)
10014198:	18c00517 	ldw	r3,20(r3)
1001419c:	1809883a 	mov	r4,r3
100141a0:	103ee83a 	callr	r2
100141a4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
100141a8:	e0bfff17 	ldw	r2,-4(fp)
100141ac:	1000031e 	bne	r2,zero,100141bc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
100141b0:	e13ffd17 	ldw	r4,-12(fp)
100141b4:	00140800 	call	10014080 <alt_alarm_stop>
100141b8:	00000d06 	br	100141f0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
100141bc:	e0bffd17 	ldw	r2,-12(fp)
100141c0:	10c00217 	ldw	r3,8(r2)
100141c4:	e0bfff17 	ldw	r2,-4(fp)
100141c8:	1887883a 	add	r3,r3,r2
100141cc:	e0bffd17 	ldw	r2,-12(fp)
100141d0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
100141d4:	e0bffd17 	ldw	r2,-12(fp)
100141d8:	10c00217 	ldw	r3,8(r2)
100141dc:	d0a6da17 	ldw	r2,-25752(gp)
100141e0:	1880032e 	bgeu	r3,r2,100141f0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
100141e4:	e0bffd17 	ldw	r2,-12(fp)
100141e8:	00c00044 	movi	r3,1
100141ec:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
100141f0:	e0bffe17 	ldw	r2,-8(fp)
100141f4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100141f8:	e0fffd17 	ldw	r3,-12(fp)
100141fc:	d0a00f04 	addi	r2,gp,-32708
10014200:	18bfcf1e 	bne	r3,r2,10014140 <__alt_data_end+0xf8014140>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10014204:	0001883a 	nop
}
10014208:	e037883a 	mov	sp,fp
1001420c:	dfc00117 	ldw	ra,4(sp)
10014210:	df000017 	ldw	fp,0(sp)
10014214:	dec00204 	addi	sp,sp,8
10014218:	f800283a 	ret

1001421c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
1001421c:	deffff04 	addi	sp,sp,-4
10014220:	df000015 	stw	fp,0(sp)
10014224:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10014228:	000170fa 	wrctl	ienable,zero
}
1001422c:	e037883a 	mov	sp,fp
10014230:	df000017 	ldw	fp,0(sp)
10014234:	dec00104 	addi	sp,sp,4
10014238:	f800283a 	ret

1001423c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1001423c:	defffa04 	addi	sp,sp,-24
10014240:	dfc00515 	stw	ra,20(sp)
10014244:	df000415 	stw	fp,16(sp)
10014248:	df000404 	addi	fp,sp,16
1001424c:	e13ffe15 	stw	r4,-8(fp)
10014250:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10014254:	e0bfff17 	ldw	r2,-4(fp)
10014258:	10800017 	ldw	r2,0(r2)
1001425c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10014260:	e13ffe17 	ldw	r4,-8(fp)
10014264:	0007ff40 	call	10007ff4 <strlen>
10014268:	10800044 	addi	r2,r2,1
1001426c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10014270:	00000d06 	br	100142a8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10014274:	e0bffc17 	ldw	r2,-16(fp)
10014278:	10c00217 	ldw	r3,8(r2)
1001427c:	e0bffd17 	ldw	r2,-12(fp)
10014280:	1809883a 	mov	r4,r3
10014284:	e17ffe17 	ldw	r5,-8(fp)
10014288:	100d883a 	mov	r6,r2
1001428c:	00145000 	call	10014500 <memcmp>
10014290:	1000021e 	bne	r2,zero,1001429c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10014294:	e0bffc17 	ldw	r2,-16(fp)
10014298:	00000706 	br	100142b8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1001429c:	e0bffc17 	ldw	r2,-16(fp)
100142a0:	10800017 	ldw	r2,0(r2)
100142a4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100142a8:	e0fffc17 	ldw	r3,-16(fp)
100142ac:	e0bfff17 	ldw	r2,-4(fp)
100142b0:	18bff01e 	bne	r3,r2,10014274 <__alt_data_end+0xf8014274>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
100142b4:	0005883a 	mov	r2,zero
}
100142b8:	e037883a 	mov	sp,fp
100142bc:	dfc00117 	ldw	ra,4(sp)
100142c0:	df000017 	ldw	fp,0(sp)
100142c4:	dec00204 	addi	sp,sp,8
100142c8:	f800283a 	ret

100142cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
100142cc:	defffb04 	addi	sp,sp,-20
100142d0:	dfc00415 	stw	ra,16(sp)
100142d4:	df000315 	stw	fp,12(sp)
100142d8:	df000304 	addi	fp,sp,12
100142dc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
100142e0:	00840074 	movhi	r2,4097
100142e4:	109c0b04 	addi	r2,r2,28716
100142e8:	10800017 	ldw	r2,0(r2)
100142ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100142f0:	00003106 	br	100143b8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
100142f4:	e0bffd17 	ldw	r2,-12(fp)
100142f8:	10800217 	ldw	r2,8(r2)
100142fc:	1009883a 	mov	r4,r2
10014300:	0007ff40 	call	10007ff4 <strlen>
10014304:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10014308:	e0bffd17 	ldw	r2,-12(fp)
1001430c:	10c00217 	ldw	r3,8(r2)
10014310:	e0bffe17 	ldw	r2,-8(fp)
10014314:	10bfffc4 	addi	r2,r2,-1
10014318:	1885883a 	add	r2,r3,r2
1001431c:	10800003 	ldbu	r2,0(r2)
10014320:	10803fcc 	andi	r2,r2,255
10014324:	1080201c 	xori	r2,r2,128
10014328:	10bfe004 	addi	r2,r2,-128
1001432c:	10800bd8 	cmpnei	r2,r2,47
10014330:	1000031e 	bne	r2,zero,10014340 <alt_find_file+0x74>
    {
      len -= 1;
10014334:	e0bffe17 	ldw	r2,-8(fp)
10014338:	10bfffc4 	addi	r2,r2,-1
1001433c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10014340:	e0bffe17 	ldw	r2,-8(fp)
10014344:	e0ffff17 	ldw	r3,-4(fp)
10014348:	1885883a 	add	r2,r3,r2
1001434c:	10800003 	ldbu	r2,0(r2)
10014350:	10803fcc 	andi	r2,r2,255
10014354:	1080201c 	xori	r2,r2,128
10014358:	10bfe004 	addi	r2,r2,-128
1001435c:	10800be0 	cmpeqi	r2,r2,47
10014360:	1000081e 	bne	r2,zero,10014384 <alt_find_file+0xb8>
10014364:	e0bffe17 	ldw	r2,-8(fp)
10014368:	e0ffff17 	ldw	r3,-4(fp)
1001436c:	1885883a 	add	r2,r3,r2
10014370:	10800003 	ldbu	r2,0(r2)
10014374:	10803fcc 	andi	r2,r2,255
10014378:	1080201c 	xori	r2,r2,128
1001437c:	10bfe004 	addi	r2,r2,-128
10014380:	10000a1e 	bne	r2,zero,100143ac <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10014384:	e0bffd17 	ldw	r2,-12(fp)
10014388:	10c00217 	ldw	r3,8(r2)
1001438c:	e0bffe17 	ldw	r2,-8(fp)
10014390:	1809883a 	mov	r4,r3
10014394:	e17fff17 	ldw	r5,-4(fp)
10014398:	100d883a 	mov	r6,r2
1001439c:	00145000 	call	10014500 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100143a0:	1000021e 	bne	r2,zero,100143ac <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
100143a4:	e0bffd17 	ldw	r2,-12(fp)
100143a8:	00000806 	br	100143cc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
100143ac:	e0bffd17 	ldw	r2,-12(fp)
100143b0:	10800017 	ldw	r2,0(r2)
100143b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100143b8:	e0fffd17 	ldw	r3,-12(fp)
100143bc:	00840074 	movhi	r2,4097
100143c0:	109c0b04 	addi	r2,r2,28716
100143c4:	18bfcb1e 	bne	r3,r2,100142f4 <__alt_data_end+0xf80142f4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
100143c8:	0005883a 	mov	r2,zero
}
100143cc:	e037883a 	mov	sp,fp
100143d0:	dfc00117 	ldw	ra,4(sp)
100143d4:	df000017 	ldw	fp,0(sp)
100143d8:	dec00204 	addi	sp,sp,8
100143dc:	f800283a 	ret

100143e0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
100143e0:	defffa04 	addi	sp,sp,-24
100143e4:	dfc00515 	stw	ra,20(sp)
100143e8:	df000415 	stw	fp,16(sp)
100143ec:	dc000315 	stw	r16,12(sp)
100143f0:	df000404 	addi	fp,sp,16
100143f4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
100143f8:	00bffa04 	movi	r2,-24
100143fc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10014400:	e03ffc15 	stw	zero,-16(fp)
10014404:	00002106 	br	1001448c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10014408:	04040074 	movhi	r16,4097
1001440c:	84178c04 	addi	r16,r16,24112
10014410:	e0bffc17 	ldw	r2,-16(fp)
10014414:	1009883a 	mov	r4,r2
10014418:	01400304 	movi	r5,12
1001441c:	00057300 	call	10005730 <__mulsi3>
10014420:	8085883a 	add	r2,r16,r2
10014424:	10800017 	ldw	r2,0(r2)
10014428:	1000151e 	bne	r2,zero,10014480 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
1001442c:	04040074 	movhi	r16,4097
10014430:	84178c04 	addi	r16,r16,24112
10014434:	e0bffc17 	ldw	r2,-16(fp)
10014438:	1009883a 	mov	r4,r2
1001443c:	01400304 	movi	r5,12
10014440:	00057300 	call	10005730 <__mulsi3>
10014444:	8085883a 	add	r2,r16,r2
10014448:	e0fffe17 	ldw	r3,-8(fp)
1001444c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10014450:	00840074 	movhi	r2,4097
10014454:	109c0f04 	addi	r2,r2,28732
10014458:	10c00017 	ldw	r3,0(r2)
1001445c:	e0bffc17 	ldw	r2,-16(fp)
10014460:	1880040e 	bge	r3,r2,10014474 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10014464:	00840074 	movhi	r2,4097
10014468:	109c0f04 	addi	r2,r2,28732
1001446c:	e0fffc17 	ldw	r3,-16(fp)
10014470:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10014474:	e0bffc17 	ldw	r2,-16(fp)
10014478:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
1001447c:	00000606 	br	10014498 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10014480:	e0bffc17 	ldw	r2,-16(fp)
10014484:	10800044 	addi	r2,r2,1
10014488:	e0bffc15 	stw	r2,-16(fp)
1001448c:	e0bffc17 	ldw	r2,-16(fp)
10014490:	10800810 	cmplti	r2,r2,32
10014494:	103fdc1e 	bne	r2,zero,10014408 <__alt_data_end+0xf8014408>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10014498:	e0bffd17 	ldw	r2,-12(fp)
}
1001449c:	e6ffff04 	addi	sp,fp,-4
100144a0:	dfc00217 	ldw	ra,8(sp)
100144a4:	df000117 	ldw	fp,4(sp)
100144a8:	dc000017 	ldw	r16,0(sp)
100144ac:	dec00304 	addi	sp,sp,12
100144b0:	f800283a 	ret

100144b4 <atexit>:
100144b4:	200b883a 	mov	r5,r4
100144b8:	000d883a 	mov	r6,zero
100144bc:	0009883a 	mov	r4,zero
100144c0:	000f883a 	mov	r7,zero
100144c4:	001457c1 	jmpi	1001457c <__register_exitproc>

100144c8 <exit>:
100144c8:	defffe04 	addi	sp,sp,-8
100144cc:	000b883a 	mov	r5,zero
100144d0:	dc000015 	stw	r16,0(sp)
100144d4:	dfc00115 	stw	ra,4(sp)
100144d8:	2021883a 	mov	r16,r4
100144dc:	00146900 	call	10014690 <__call_exitprocs>
100144e0:	00840074 	movhi	r2,4097
100144e4:	109c0504 	addi	r2,r2,28692
100144e8:	11000017 	ldw	r4,0(r2)
100144ec:	20800f17 	ldw	r2,60(r4)
100144f0:	10000126 	beq	r2,zero,100144f8 <exit+0x30>
100144f4:	103ee83a 	callr	r2
100144f8:	8009883a 	mov	r4,r16
100144fc:	00148240 	call	10014824 <_exit>

10014500 <memcmp>:
10014500:	01c000c4 	movi	r7,3
10014504:	3980192e 	bgeu	r7,r6,1001456c <memcmp+0x6c>
10014508:	2144b03a 	or	r2,r4,r5
1001450c:	11c4703a 	and	r2,r2,r7
10014510:	10000f26 	beq	r2,zero,10014550 <memcmp+0x50>
10014514:	20800003 	ldbu	r2,0(r4)
10014518:	28c00003 	ldbu	r3,0(r5)
1001451c:	10c0151e 	bne	r2,r3,10014574 <memcmp+0x74>
10014520:	31bfff84 	addi	r6,r6,-2
10014524:	01ffffc4 	movi	r7,-1
10014528:	00000406 	br	1001453c <memcmp+0x3c>
1001452c:	20800003 	ldbu	r2,0(r4)
10014530:	28c00003 	ldbu	r3,0(r5)
10014534:	31bfffc4 	addi	r6,r6,-1
10014538:	10c00e1e 	bne	r2,r3,10014574 <memcmp+0x74>
1001453c:	21000044 	addi	r4,r4,1
10014540:	29400044 	addi	r5,r5,1
10014544:	31fff91e 	bne	r6,r7,1001452c <__alt_data_end+0xf801452c>
10014548:	0005883a 	mov	r2,zero
1001454c:	f800283a 	ret
10014550:	20c00017 	ldw	r3,0(r4)
10014554:	28800017 	ldw	r2,0(r5)
10014558:	1880041e 	bne	r3,r2,1001456c <memcmp+0x6c>
1001455c:	31bfff04 	addi	r6,r6,-4
10014560:	21000104 	addi	r4,r4,4
10014564:	29400104 	addi	r5,r5,4
10014568:	39bff936 	bltu	r7,r6,10014550 <__alt_data_end+0xf8014550>
1001456c:	303fe91e 	bne	r6,zero,10014514 <__alt_data_end+0xf8014514>
10014570:	003ff506 	br	10014548 <__alt_data_end+0xf8014548>
10014574:	10c5c83a 	sub	r2,r2,r3
10014578:	f800283a 	ret

1001457c <__register_exitproc>:
1001457c:	00840074 	movhi	r2,4097
10014580:	defffa04 	addi	sp,sp,-24
10014584:	109c0504 	addi	r2,r2,28692
10014588:	dc000315 	stw	r16,12(sp)
1001458c:	14000017 	ldw	r16,0(r2)
10014590:	dc400415 	stw	r17,16(sp)
10014594:	dfc00515 	stw	ra,20(sp)
10014598:	80805217 	ldw	r2,328(r16)
1001459c:	2023883a 	mov	r17,r4
100145a0:	10003626 	beq	r2,zero,1001467c <__register_exitproc+0x100>
100145a4:	10c00117 	ldw	r3,4(r2)
100145a8:	010007c4 	movi	r4,31
100145ac:	20c00e16 	blt	r4,r3,100145e8 <__register_exitproc+0x6c>
100145b0:	1a400044 	addi	r9,r3,1
100145b4:	8800211e 	bne	r17,zero,1001463c <__register_exitproc+0xc0>
100145b8:	18c00084 	addi	r3,r3,2
100145bc:	18c7883a 	add	r3,r3,r3
100145c0:	18c7883a 	add	r3,r3,r3
100145c4:	12400115 	stw	r9,4(r2)
100145c8:	10c7883a 	add	r3,r2,r3
100145cc:	19400015 	stw	r5,0(r3)
100145d0:	0005883a 	mov	r2,zero
100145d4:	dfc00517 	ldw	ra,20(sp)
100145d8:	dc400417 	ldw	r17,16(sp)
100145dc:	dc000317 	ldw	r16,12(sp)
100145e0:	dec00604 	addi	sp,sp,24
100145e4:	f800283a 	ret
100145e8:	00800034 	movhi	r2,0
100145ec:	10800004 	addi	r2,r2,0
100145f0:	10002526 	beq	r2,zero,10014688 <__register_exitproc+0x10c>
100145f4:	01006404 	movi	r4,400
100145f8:	d9400015 	stw	r5,0(sp)
100145fc:	d9800115 	stw	r6,4(sp)
10014600:	d9c00215 	stw	r7,8(sp)
10014604:	00000000 	call	10000000 <__alt_mem_sdram>
10014608:	d9400017 	ldw	r5,0(sp)
1001460c:	d9800117 	ldw	r6,4(sp)
10014610:	d9c00217 	ldw	r7,8(sp)
10014614:	10001c26 	beq	r2,zero,10014688 <__register_exitproc+0x10c>
10014618:	80c05217 	ldw	r3,328(r16)
1001461c:	10000115 	stw	zero,4(r2)
10014620:	02400044 	movi	r9,1
10014624:	10c00015 	stw	r3,0(r2)
10014628:	80805215 	stw	r2,328(r16)
1001462c:	10006215 	stw	zero,392(r2)
10014630:	10006315 	stw	zero,396(r2)
10014634:	0007883a 	mov	r3,zero
10014638:	883fdf26 	beq	r17,zero,100145b8 <__alt_data_end+0xf80145b8>
1001463c:	18d1883a 	add	r8,r3,r3
10014640:	4211883a 	add	r8,r8,r8
10014644:	1211883a 	add	r8,r2,r8
10014648:	41802215 	stw	r6,136(r8)
1001464c:	01000044 	movi	r4,1
10014650:	11806217 	ldw	r6,392(r2)
10014654:	20c8983a 	sll	r4,r4,r3
10014658:	310cb03a 	or	r6,r6,r4
1001465c:	11806215 	stw	r6,392(r2)
10014660:	41c04215 	stw	r7,264(r8)
10014664:	01800084 	movi	r6,2
10014668:	89bfd31e 	bne	r17,r6,100145b8 <__alt_data_end+0xf80145b8>
1001466c:	11806317 	ldw	r6,396(r2)
10014670:	3108b03a 	or	r4,r6,r4
10014674:	11006315 	stw	r4,396(r2)
10014678:	003fcf06 	br	100145b8 <__alt_data_end+0xf80145b8>
1001467c:	80805304 	addi	r2,r16,332
10014680:	80805215 	stw	r2,328(r16)
10014684:	003fc706 	br	100145a4 <__alt_data_end+0xf80145a4>
10014688:	00bfffc4 	movi	r2,-1
1001468c:	003fd106 	br	100145d4 <__alt_data_end+0xf80145d4>

10014690 <__call_exitprocs>:
10014690:	00840074 	movhi	r2,4097
10014694:	109c0504 	addi	r2,r2,28692
10014698:	10800017 	ldw	r2,0(r2)
1001469c:	defff404 	addi	sp,sp,-48
100146a0:	dd800815 	stw	r22,32(sp)
100146a4:	d8800015 	stw	r2,0(sp)
100146a8:	10805204 	addi	r2,r2,328
100146ac:	dd000615 	stw	r20,24(sp)
100146b0:	dc800415 	stw	r18,16(sp)
100146b4:	dfc00b15 	stw	ra,44(sp)
100146b8:	df000a15 	stw	fp,40(sp)
100146bc:	ddc00915 	stw	r23,36(sp)
100146c0:	dd400715 	stw	r21,28(sp)
100146c4:	dcc00515 	stw	r19,20(sp)
100146c8:	dc400315 	stw	r17,12(sp)
100146cc:	dc000215 	stw	r16,8(sp)
100146d0:	2025883a 	mov	r18,r4
100146d4:	2829883a 	mov	r20,r5
100146d8:	d8800115 	stw	r2,4(sp)
100146dc:	05bfffc4 	movi	r22,-1
100146e0:	d8800017 	ldw	r2,0(sp)
100146e4:	14c05217 	ldw	r19,328(r2)
100146e8:	98001d26 	beq	r19,zero,10014760 <__call_exitprocs+0xd0>
100146ec:	dd400117 	ldw	r21,4(sp)
100146f0:	98800117 	ldw	r2,4(r19)
100146f4:	173fffc4 	addi	fp,r2,-1
100146f8:	e0000d16 	blt	fp,zero,10014730 <__call_exitprocs+0xa0>
100146fc:	14000044 	addi	r16,r2,1
10014700:	8421883a 	add	r16,r16,r16
10014704:	8421883a 	add	r16,r16,r16
10014708:	84402004 	addi	r17,r16,128
1001470c:	9c63883a 	add	r17,r19,r17
10014710:	9c21883a 	add	r16,r19,r16
10014714:	a0001e26 	beq	r20,zero,10014790 <__call_exitprocs+0x100>
10014718:	80804017 	ldw	r2,256(r16)
1001471c:	15001c26 	beq	r2,r20,10014790 <__call_exitprocs+0x100>
10014720:	e73fffc4 	addi	fp,fp,-1
10014724:	843fff04 	addi	r16,r16,-4
10014728:	8c7fff04 	addi	r17,r17,-4
1001472c:	e5bff91e 	bne	fp,r22,10014714 <__alt_data_end+0xf8014714>
10014730:	00800034 	movhi	r2,0
10014734:	10800004 	addi	r2,r2,0
10014738:	10000926 	beq	r2,zero,10014760 <__call_exitprocs+0xd0>
1001473c:	98800117 	ldw	r2,4(r19)
10014740:	1000311e 	bne	r2,zero,10014808 <__call_exitprocs+0x178>
10014744:	98800017 	ldw	r2,0(r19)
10014748:	10003426 	beq	r2,zero,1001481c <__call_exitprocs+0x18c>
1001474c:	9809883a 	mov	r4,r19
10014750:	a8800015 	stw	r2,0(r21)
10014754:	00000000 	call	10000000 <__alt_mem_sdram>
10014758:	acc00017 	ldw	r19,0(r21)
1001475c:	983fe41e 	bne	r19,zero,100146f0 <__alt_data_end+0xf80146f0>
10014760:	dfc00b17 	ldw	ra,44(sp)
10014764:	df000a17 	ldw	fp,40(sp)
10014768:	ddc00917 	ldw	r23,36(sp)
1001476c:	dd800817 	ldw	r22,32(sp)
10014770:	dd400717 	ldw	r21,28(sp)
10014774:	dd000617 	ldw	r20,24(sp)
10014778:	dcc00517 	ldw	r19,20(sp)
1001477c:	dc800417 	ldw	r18,16(sp)
10014780:	dc400317 	ldw	r17,12(sp)
10014784:	dc000217 	ldw	r16,8(sp)
10014788:	dec00c04 	addi	sp,sp,48
1001478c:	f800283a 	ret
10014790:	98800117 	ldw	r2,4(r19)
10014794:	80c00017 	ldw	r3,0(r16)
10014798:	10bfffc4 	addi	r2,r2,-1
1001479c:	17001526 	beq	r2,fp,100147f4 <__call_exitprocs+0x164>
100147a0:	80000015 	stw	zero,0(r16)
100147a4:	183fde26 	beq	r3,zero,10014720 <__alt_data_end+0xf8014720>
100147a8:	00800044 	movi	r2,1
100147ac:	1708983a 	sll	r4,r2,fp
100147b0:	98806217 	ldw	r2,392(r19)
100147b4:	9dc00117 	ldw	r23,4(r19)
100147b8:	2084703a 	and	r2,r4,r2
100147bc:	1000061e 	bne	r2,zero,100147d8 <__call_exitprocs+0x148>
100147c0:	183ee83a 	callr	r3
100147c4:	98800117 	ldw	r2,4(r19)
100147c8:	15ffc51e 	bne	r2,r23,100146e0 <__alt_data_end+0xf80146e0>
100147cc:	a8800017 	ldw	r2,0(r21)
100147d0:	14ffd326 	beq	r2,r19,10014720 <__alt_data_end+0xf8014720>
100147d4:	003fc206 	br	100146e0 <__alt_data_end+0xf80146e0>
100147d8:	98806317 	ldw	r2,396(r19)
100147dc:	2084703a 	and	r2,r4,r2
100147e0:	1000061e 	bne	r2,zero,100147fc <__call_exitprocs+0x16c>
100147e4:	89400017 	ldw	r5,0(r17)
100147e8:	9009883a 	mov	r4,r18
100147ec:	183ee83a 	callr	r3
100147f0:	003ff406 	br	100147c4 <__alt_data_end+0xf80147c4>
100147f4:	9f000115 	stw	fp,4(r19)
100147f8:	003fea06 	br	100147a4 <__alt_data_end+0xf80147a4>
100147fc:	89000017 	ldw	r4,0(r17)
10014800:	183ee83a 	callr	r3
10014804:	003fef06 	br	100147c4 <__alt_data_end+0xf80147c4>
10014808:	98800017 	ldw	r2,0(r19)
1001480c:	982b883a 	mov	r21,r19
10014810:	1027883a 	mov	r19,r2
10014814:	983fb61e 	bne	r19,zero,100146f0 <__alt_data_end+0xf80146f0>
10014818:	003fd106 	br	10014760 <__alt_data_end+0xf8014760>
1001481c:	0005883a 	mov	r2,zero
10014820:	003ffa06 	br	1001480c <__alt_data_end+0xf801480c>

10014824 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10014824:	defffd04 	addi	sp,sp,-12
10014828:	df000215 	stw	fp,8(sp)
1001482c:	df000204 	addi	fp,sp,8
10014830:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10014834:	0001883a 	nop
10014838:	e0bfff17 	ldw	r2,-4(fp)
1001483c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10014840:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10014844:	10000226 	beq	r2,zero,10014850 <_exit+0x2c>
    ALT_SIM_FAIL();
10014848:	002af070 	cmpltui	zero,zero,43969
1001484c:	00000106 	br	10014854 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10014850:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10014854:	003fff06 	br	10014854 <__alt_data_end+0xf8014854>
